
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20004560 	.word	0x20004560
}
   4:	00013369 	.word	0x00013369
   8:	0001a279 	.word	0x0001a279
   c:	00013399 	.word	0x00013399
  10:	00013399 	.word	0x00013399
  14:	00013399 	.word	0x00013399
  18:	00013399 	.word	0x00013399
	...
  2c:	000132c5 	.word	0x000132c5
  30:	00013399 	.word	0x00013399
  34:	00000000 	.word	0x00000000
  38:	00013271 	.word	0x00013271
  3c:	00019ea9 	.word	0x00019ea9

00000040 <_irq_vector_table>:
  40:	00013329 0001c413 00013329 00013329     )3......)3..)3..
  50:	00013329 00013329 00013329 00013329     )3..)3..)3..)3..
  60:	0001c3db 00013329 00013329 0001c3f9     ....)3..)3......
  70:	00013329 00013329 00013329 00013329     )3..)3..)3..)3..
  80:	00013329 00013329 00013329 00013329     )3..)3..)3..)3..
  90:	00013329 00013329 00013329 00013329     )3..)3..)3..)3..
  a0:	00013329 00013329 00013329 00013329     )3..)3..)3..)3..
  b0:	00013329 00013329 00013329 00013329     )3..)3..)3..)3..
  c0:	00013329 00013329 00013329 00013329     )3..)3..)3..)3..
  d0:	00013329 00013329 00013329              )3..)3..)3..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     160:	f080 8116 	bcs.w	390 <CONFIG_FLASH_SIZE+0x190>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_FLASH_SIZE+0x190>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     18e:	f080 8101 	bcs.w	394 <CONFIG_FLASH_SIZE+0x194>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_FLASH_SIZE+0x194>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1e6:	d202      	bcs.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_FLASH_SIZE+0x1bc>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_FLASH_SIZE+0x18a>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2c6:	d271      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x80>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_FLASH_SIZE+0x12a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     31e:	d247      	bcs.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_FLASH_SIZE+0x154>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     34a:	d22d      	bcs.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_FLASH_SIZE+0x19c>
     368:	d016      	beq.n	398 <CONFIG_FLASH_SIZE+0x198>
     36a:	b15e      	cbz	r6, 384 <CONFIG_FLASH_SIZE+0x184>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_FLASH_SIZE+0x154>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_FLASH_SIZE+0x12a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d2:	4615      	mov	r5, r2
     3d4:	4a0a      	ldr	r2, [pc, #40]	; (400 <CONFIG_BT_RX_STACK_SIZE>)
     3d6:	461c      	mov	r4, r3
     3d8:	6856      	ldr	r6, [r2, #4]
     3da:	b12e      	cbz	r6, 3e8 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     3dc:	b001      	add	sp, #4
     3de:	462a      	mov	r2, r5
     3e0:	46b4      	mov	ip, r6
     3e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3e6:	4760      	bx	ip
     3e8:	2000      	movs	r0, #0
     3ea:	f88d 0000 	strb.w	r0, [sp]
     3ee:	4668      	mov	r0, sp
     3f0:	f00e f99a 	bl	e728 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     3f4:	f89d 0000 	ldrb.w	r0, [sp]
     3f8:	1a28      	subs	r0, r5, r0
     3fa:	7020      	strb	r0, [r4, #0]
     3fc:	2000      	movs	r0, #0
     3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     400:	20000000 	.word	0x20000000

00000404 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     404:	4801      	ldr	r0, [pc, #4]	; (40c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     406:	7800      	ldrb	r0, [r0, #0]
     408:	4770      	bx	lr
     40a:	0000      	.short	0x0000
     40c:	20000008 	.word	0x20000008

00000410 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     410:	4904      	ldr	r1, [pc, #16]	; (424 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
     412:	780a      	ldrb	r2, [r1, #0]
     414:	4290      	cmp	r0, r2
     416:	d301      	bcc.n	41c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     418:	2000      	movs	r0, #0
     41a:	4770      	bx	lr
     41c:	6849      	ldr	r1, [r1, #4]
     41e:	eb01 1040 	add.w	r0, r1, r0, lsl #5
     422:	4770      	bx	lr
     424:	20000008 	.word	0x20000008
     428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     42c:	4615      	mov	r5, r2
     42e:	4604      	mov	r4, r0
     430:	f100 0208 	add.w	r2, r0, #8
     434:	1cc8      	adds	r0, r1, #3
     436:	4241      	negs	r1, r0
     438:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
     43c:	461f      	mov	r7, r3
     43e:	1a28      	subs	r0, r5, r0
     440:	2300      	movs	r3, #0
     442:	9e08      	ldr	r6, [sp, #32]
     444:	ebbc 0c05 	subs.w	ip, ip, r5
     448:	419b      	sbcs	r3, r3
     44a:	d204      	bcs.n	456 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
     44c:	f240 51f5 	movw	r1, #1525	; 0x5f5
     450:	2070      	movs	r0, #112	; 0x70
     452:	f003 f8b9 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     456:	4b24      	ldr	r3, [pc, #144]	; (4e8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9c>)
     458:	4299      	cmp	r1, r3
     45a:	dd04      	ble.n	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     45c:	f240 51f6 	movw	r1, #1526	; 0x5f6
     460:	2070      	movs	r0, #112	; 0x70
     462:	f003 f8b1 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     466:	4b21      	ldr	r3, [pc, #132]	; (4ec <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa0>)
     468:	4299      	cmp	r1, r3
     46a:	da04      	bge.n	476 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2a>
     46c:	f240 51f7 	movw	r1, #1527	; 0x5f7
     470:	2070      	movs	r0, #112	; 0x70
     472:	f003 f8a9 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     476:	491e      	ldr	r1, [pc, #120]	; (4f0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa4>)
     478:	4288      	cmp	r0, r1
     47a:	bfa8      	it	ge
     47c:	491d      	ldrge	r1, [pc, #116]	; (4f4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa8>)
     47e:	da03      	bge.n	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3c>
     480:	2800      	cmp	r0, #0
     482:	bfb8      	it	lt
     484:	491a      	ldrlt	r1, [pc, #104]	; (4f0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa4>)
     486:	da00      	bge.n	48a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3e>
     488:	1840      	adds	r0, r0, r1
     48a:	4621      	mov	r1, r4
     48c:	f002 fd56 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     490:	6820      	ldr	r0, [r4, #0]
     492:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     496:	6021      	str	r1, [r4, #0]
     498:	19e8      	adds	r0, r5, r7
     49a:	4917      	ldr	r1, [pc, #92]	; (4f8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xac>)
     49c:	1cc0      	adds	r0, r0, #3
     49e:	b136      	cbz	r6, 4ae <CONFIG_BT_HCI_ECC_STACK_SIZE+0x62>
     4a0:	2e01      	cmp	r6, #1
     4a2:	d00b      	beq.n	4bc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x70>
     4a4:	f240 6199 	movw	r1, #1689	; 0x699
     4a8:	2070      	movs	r0, #112	; 0x70
     4aa:	f003 f88d 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     4ae:	6809      	ldr	r1, [r1, #0]
     4b0:	7809      	ldrb	r1, [r1, #0]
     4b2:	297a      	cmp	r1, #122	; 0x7a
     4b4:	bf98      	it	ls
     4b6:	217a      	movls	r1, #122	; 0x7a
     4b8:	4408      	add	r0, r1
     4ba:	e002      	b.n	4c2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x76>
     4bc:	6809      	ldr	r1, [r1, #0]
     4be:	7809      	ldrb	r1, [r1, #0]
     4c0:	4408      	add	r0, r1
     4c2:	466a      	mov	r2, sp
     4c4:	1d21      	adds	r1, r4, #4
     4c6:	f002 fd39 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     4ca:	f99d 0000 	ldrsb.w	r0, [sp]
     4ce:	2800      	cmp	r0, #0
     4d0:	6860      	ldr	r0, [r4, #4]
     4d2:	bfc4      	itt	gt
     4d4:	1c40      	addgt	r0, r0, #1
     4d6:	6060      	strgt	r0, [r4, #4]
     4d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4dc:	6060      	str	r0, [r4, #4]
     4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     4e2:	0000      	.short	0x0000
     4e4:	1e847fff 	.word	0x1e847fff
     4e8:	07a12000 	.word	0x07a12000
     4ec:	f85ee000 	.word	0xf85ee000
     4f0:	1e848000 	.word	0x1e848000
     4f4:	e17b8000 	.word	0xe17b8000
     4f8:	20000d1c 	.word	0x20000d1c
     4fc:	b570      	push	{r4, r5, r6, lr}
     4fe:	4605      	mov	r5, r0
     500:	2a20      	cmp	r2, #32
     502:	d027      	beq.n	554 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x108>
     504:	4819      	ldr	r0, [pc, #100]	; (56c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x120>)
     506:	4c1a      	ldr	r4, [pc, #104]	; (570 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x124>)
     508:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     50c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     510:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     514:	2920      	cmp	r1, #32
     516:	d022      	beq.n	55e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x112>
     518:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     51c:	7840      	ldrb	r0, [r0, #1]
     51e:	784c      	ldrb	r4, [r1, #1]
     520:	7048      	strb	r0, [r1, #1]
     522:	4620      	mov	r0, r4
     524:	4601      	mov	r1, r0
     526:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     52a:	4291      	cmp	r1, r2
     52c:	7005      	strb	r5, [r0, #0]
     52e:	7840      	ldrb	r0, [r0, #1]
     530:	d1f8      	bne.n	524 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd8>
     532:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
     536:	2a20      	cmp	r2, #32
     538:	bf1a      	itte	ne
     53a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     53e:	7054      	strbne	r4, [r2, #1]
     540:	f883 4025 	strbeq.w	r4, [r3, #37]	; 0x25
     544:	2220      	movs	r2, #32
     546:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     54a:	f88c 2001 	strb.w	r2, [ip, #1]
     54e:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
     552:	bd70      	pop	{r4, r5, r6, pc}
     554:	f240 21aa 	movw	r1, #682	; 0x2aa
     558:	2070      	movs	r0, #112	; 0x70
     55a:	f003 f835 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     55e:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
     562:	7840      	ldrb	r0, [r0, #1]
     564:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
     568:	e7db      	b.n	522 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd6>
     56a:	0000      	.short	0x0000
     56c:	20000c9c 	.word	0x20000c9c
     570:	20000d1c 	.word	0x20000d1c
     574:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     578:	b087      	sub	sp, #28
     57a:	4604      	mov	r4, r0
     57c:	2000      	movs	r0, #0
     57e:	9002      	str	r0, [sp, #8]
     580:	489e      	ldr	r0, [pc, #632]	; (7fc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1fc>)
     582:	9f08      	ldr	r7, [sp, #32]
     584:	4e9e      	ldr	r6, [pc, #632]	; (800 <CONFIG_ISR_STACK_SIZE>)
     586:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     58a:	9003      	str	r0, [sp, #12]
     58c:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     590:	2020      	movs	r0, #32
     592:	46e9      	mov	r9, sp
     594:	f10d 0804 	add.w	r8, sp, #4
     598:	f88d 0000 	strb.w	r0, [sp]
     59c:	f506 7a20 	add.w	sl, r6, #640	; 0x280
     5a0:	2d20      	cmp	r5, #32
     5a2:	bf18      	it	ne
     5a4:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     5a8:	d032      	beq.n	610 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     5aa:	bf00      	nop
     5ac:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     5b0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     5b4:	1d01      	adds	r1, r0, #4
     5b6:	6880      	ldr	r0, [r0, #8]
     5b8:	6822      	ldr	r2, [r4, #0]
     5ba:	1a10      	subs	r0, r2, r0
     5bc:	0200      	lsls	r0, r0, #8
     5be:	17c2      	asrs	r2, r0, #31
     5c0:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5c4:	1200      	asrs	r0, r0, #8
     5c6:	d423      	bmi.n	610 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     5c8:	8960      	ldrh	r0, [r4, #10]
     5ca:	b1d0      	cbz	r0, 602 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     5cc:	8948      	ldrh	r0, [r1, #10]
     5ce:	b9c0      	cbnz	r0, 602 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     5d0:	4608      	mov	r0, r1
     5d2:	f000 fce7 	bl	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     5d6:	aa05      	add	r2, sp, #20
     5d8:	a904      	add	r1, sp, #16
     5da:	f002 fcaf 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     5de:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     5e2:	2800      	cmp	r0, #0
     5e4:	bfcc      	ite	gt
     5e6:	2001      	movgt	r0, #1
     5e8:	2000      	movle	r0, #0
     5ea:	f100 0133 	add.w	r1, r0, #51	; 0x33
     5ee:	9804      	ldr	r0, [sp, #16]
     5f0:	6822      	ldr	r2, [r4, #0]
     5f2:	1a10      	subs	r0, r2, r0
     5f4:	0200      	lsls	r0, r0, #8
     5f6:	17c2      	asrs	r2, r0, #31
     5f8:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5fc:	1200      	asrs	r0, r0, #8
     5fe:	4288      	cmp	r0, r1
     600:	db06      	blt.n	610 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     602:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     606:	f889 5000 	strb.w	r5, [r9]
     60a:	7845      	ldrb	r5, [r0, #1]
     60c:	2d20      	cmp	r5, #32
     60e:	d1cd      	bne.n	5ac <CONFIG_BT_HCI_ECC_STACK_SIZE+0x160>
     610:	f899 0000 	ldrb.w	r0, [r9]
     614:	f888 0000 	strb.w	r0, [r8]
     618:	46a1      	mov	r9, r4
     61a:	2d20      	cmp	r5, #32
     61c:	bf1c      	itt	ne
     61e:	4879      	ldrne	r0, [pc, #484]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     620:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     624:	f000 80e5 	beq.w	7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     628:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     62c:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
     630:	f8d9 2004 	ldr.w	r2, [r9, #4]
     634:	f8da 1004 	ldr.w	r1, [sl, #4]
     638:	4648      	mov	r0, r9
     63a:	1a89      	subs	r1, r1, r2
     63c:	0209      	lsls	r1, r1, #8
     63e:	17ca      	asrs	r2, r1, #31
     640:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     644:	f10a 0704 	add.w	r7, sl, #4
     648:	1209      	asrs	r1, r1, #8
     64a:	d41f      	bmi.n	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     64c:	8979      	ldrh	r1, [r7, #10]
     64e:	2900      	cmp	r1, #0
     650:	f000 80cf 	beq.w	7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     654:	8941      	ldrh	r1, [r0, #10]
     656:	2900      	cmp	r1, #0
     658:	f040 80cb 	bne.w	7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     65c:	f000 fca2 	bl	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     660:	aa05      	add	r2, sp, #20
     662:	a904      	add	r1, sp, #16
     664:	f002 fc6a 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     668:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     66c:	2800      	cmp	r0, #0
     66e:	bfcc      	ite	gt
     670:	2001      	movgt	r0, #1
     672:	2000      	movle	r0, #0
     674:	f100 0133 	add.w	r1, r0, #51	; 0x33
     678:	9804      	ldr	r0, [sp, #16]
     67a:	683a      	ldr	r2, [r7, #0]
     67c:	1a10      	subs	r0, r2, r0
     67e:	0200      	lsls	r0, r0, #8
     680:	17c2      	asrs	r2, r0, #31
     682:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     686:	1200      	asrs	r0, r0, #8
     688:	4288      	cmp	r0, r1
     68a:	da7d      	bge.n	788 <CONFIG_BT_HCI_TX_STACK_SIZE+0x188>
     68c:	f888 5000 	strb.w	r5, [r8]
     690:	f89a 0010 	ldrb.w	r0, [sl, #16]
     694:	f899 100c 	ldrb.w	r1, [r9, #12]
     698:	4288      	cmp	r0, r1
     69a:	d905      	bls.n	6a8 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa8>
     69c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6a0:	7845      	ldrb	r5, [r0, #1]
     6a2:	2d20      	cmp	r5, #32
     6a4:	d1c0      	bne.n	628 <CONFIG_BT_HCI_TX_STACK_SIZE+0x28>
     6a6:	e0a4      	b.n	7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     6a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
     6ac:	e9d4 2100 	ldrd	r2, r1, [r4]
     6b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     6b4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     6b8:	1a89      	subs	r1, r1, r2
     6ba:	6880      	ldr	r0, [r0, #8]
     6bc:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     6c0:	4408      	add	r0, r1
     6c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     6c6:	e9c4 2000 	strd	r2, r0, [r4]
     6ca:	2001      	movs	r0, #1
     6cc:	9002      	str	r0, [sp, #8]
     6ce:	484b      	ldr	r0, [pc, #300]	; (7fc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1fc>)
     6d0:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
     6d4:	b118      	cbz	r0, 6de <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     6d6:	b009      	add	sp, #36	; 0x24
     6d8:	2000      	movs	r0, #0
     6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6de:	9803      	ldr	r0, [sp, #12]
     6e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
     6e4:	466f      	mov	r7, sp
     6e6:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     6ea:	2020      	movs	r0, #32
     6ec:	f10d 0a04 	add.w	sl, sp, #4
     6f0:	f88d 0000 	strb.w	r0, [sp]
     6f4:	2d20      	cmp	r5, #32
     6f6:	bf1c      	itt	ne
     6f8:	4842      	ldrne	r0, [pc, #264]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     6fa:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6fe:	d030      	beq.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     700:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     704:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     708:	1d01      	adds	r1, r0, #4
     70a:	6880      	ldr	r0, [r0, #8]
     70c:	6822      	ldr	r2, [r4, #0]
     70e:	1a10      	subs	r0, r2, r0
     710:	0200      	lsls	r0, r0, #8
     712:	17c2      	asrs	r2, r0, #31
     714:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     718:	1200      	asrs	r0, r0, #8
     71a:	d422      	bmi.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     71c:	8960      	ldrh	r0, [r4, #10]
     71e:	b1d0      	cbz	r0, 756 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     720:	8948      	ldrh	r0, [r1, #10]
     722:	b9c0      	cbnz	r0, 756 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     724:	4608      	mov	r0, r1
     726:	f000 fc3d 	bl	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     72a:	aa05      	add	r2, sp, #20
     72c:	a904      	add	r1, sp, #16
     72e:	f002 fc05 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     732:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     736:	2800      	cmp	r0, #0
     738:	bfcc      	ite	gt
     73a:	2001      	movgt	r0, #1
     73c:	2000      	movle	r0, #0
     73e:	f100 0133 	add.w	r1, r0, #51	; 0x33
     742:	9804      	ldr	r0, [sp, #16]
     744:	6822      	ldr	r2, [r4, #0]
     746:	1a10      	subs	r0, r2, r0
     748:	0200      	lsls	r0, r0, #8
     74a:	17c2      	asrs	r2, r0, #31
     74c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     750:	1200      	asrs	r0, r0, #8
     752:	4288      	cmp	r0, r1
     754:	db05      	blt.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     756:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     75a:	703d      	strb	r5, [r7, #0]
     75c:	7845      	ldrb	r5, [r0, #1]
     75e:	2d20      	cmp	r5, #32
     760:	d1ce      	bne.n	700 <CONFIG_BT_HCI_TX_STACK_SIZE+0x100>
     762:	7838      	ldrb	r0, [r7, #0]
     764:	f88a 0000 	strb.w	r0, [sl]
     768:	4627      	mov	r7, r4
     76a:	2d20      	cmp	r5, #32
     76c:	bf1c      	itt	ne
     76e:	4825      	ldrne	r0, [pc, #148]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     770:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     774:	d03d      	beq.n	7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     776:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     77a:	eb06 0981 	add.w	r9, r6, r1, lsl #2
     77e:	4638      	mov	r0, r7
     780:	f109 0804 	add.w	r8, r9, #4
     784:	687a      	ldr	r2, [r7, #4]
     786:	e000      	b.n	78a <CONFIG_BT_HCI_TX_STACK_SIZE+0x18a>
     788:	e033      	b.n	7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     78a:	f8d9 1004 	ldr.w	r1, [r9, #4]
     78e:	1a89      	subs	r1, r1, r2
     790:	0209      	lsls	r1, r1, #8
     792:	17ca      	asrs	r2, r1, #31
     794:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     798:	1209      	asrs	r1, r1, #8
     79a:	d41d      	bmi.n	7d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1d8>
     79c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     7a0:	b339      	cbz	r1, 7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     7a2:	8941      	ldrh	r1, [r0, #10]
     7a4:	bb29      	cbnz	r1, 7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     7a6:	f000 fbfd 	bl	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     7aa:	aa05      	add	r2, sp, #20
     7ac:	a904      	add	r1, sp, #16
     7ae:	f002 fbc5 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     7b2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     7b6:	2800      	cmp	r0, #0
     7b8:	bfcc      	ite	gt
     7ba:	2001      	movgt	r0, #1
     7bc:	2000      	movle	r0, #0
     7be:	f100 0133 	add.w	r1, r0, #51	; 0x33
     7c2:	9804      	ldr	r0, [sp, #16]
     7c4:	f8d8 2000 	ldr.w	r2, [r8]
     7c8:	1a10      	subs	r0, r2, r0
     7ca:	0200      	lsls	r0, r0, #8
     7cc:	17c2      	asrs	r2, r0, #31
     7ce:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7d2:	1200      	asrs	r0, r0, #8
     7d4:	4288      	cmp	r0, r1
     7d6:	da0c      	bge.n	7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     7d8:	f88a 5000 	strb.w	r5, [sl]
     7dc:	f899 1010 	ldrb.w	r1, [r9, #16]
     7e0:	7b38      	ldrb	r0, [r7, #12]
     7e2:	4281      	cmp	r1, r0
     7e4:	f67f af60 	bls.w	6a8 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa8>
     7e8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     7ec:	7845      	ldrb	r5, [r0, #1]
     7ee:	2d20      	cmp	r5, #32
     7f0:	d1c1      	bne.n	776 <CONFIG_BT_HCI_TX_STACK_SIZE+0x176>
     7f2:	9802      	ldr	r0, [sp, #8]
     7f4:	b009      	add	sp, #36	; 0x24
     7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7fa:	0000      	.short	0x0000
     7fc:	20000d1c 	.word	0x20000d1c
     800:	20000a1c 	.word	0x20000a1c
     804:	20000c9c 	.word	0x20000c9c
     808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     80c:	4604      	mov	r4, r0
     80e:	4847      	ldr	r0, [pc, #284]	; (92c <CONFIG_ISR_STACK_SIZE+0x12c>)
     810:	460e      	mov	r6, r1
     812:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     816:	4f46      	ldr	r7, [pc, #280]	; (930 <CONFIG_ISR_STACK_SIZE+0x130>)
     818:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     81c:	2020      	movs	r0, #32
     81e:	b083      	sub	sp, #12
     820:	4698      	mov	r8, r3
     822:	4692      	mov	sl, r2
     824:	7010      	strb	r0, [r2, #0]
     826:	f507 7920 	add.w	r9, r7, #640	; 0x280
     82a:	2d20      	cmp	r5, #32
     82c:	bf18      	it	ne
     82e:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     832:	d031      	beq.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
     834:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     838:	eb07 0080 	add.w	r0, r7, r0, lsl #2
     83c:	1d01      	adds	r1, r0, #4
     83e:	6880      	ldr	r0, [r0, #8]
     840:	6822      	ldr	r2, [r4, #0]
     842:	1a10      	subs	r0, r2, r0
     844:	0200      	lsls	r0, r0, #8
     846:	17c2      	asrs	r2, r0, #31
     848:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     84c:	1200      	asrs	r0, r0, #8
     84e:	d423      	bmi.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
     850:	8960      	ldrh	r0, [r4, #10]
     852:	b1d0      	cbz	r0, 88a <CONFIG_ISR_STACK_SIZE+0x8a>
     854:	8948      	ldrh	r0, [r1, #10]
     856:	b9c0      	cbnz	r0, 88a <CONFIG_ISR_STACK_SIZE+0x8a>
     858:	4608      	mov	r0, r1
     85a:	f000 fba3 	bl	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     85e:	aa01      	add	r2, sp, #4
     860:	4669      	mov	r1, sp
     862:	f002 fb6b 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     866:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     86a:	2800      	cmp	r0, #0
     86c:	bfcc      	ite	gt
     86e:	2001      	movgt	r0, #1
     870:	2000      	movle	r0, #0
     872:	f100 0133 	add.w	r1, r0, #51	; 0x33
     876:	9800      	ldr	r0, [sp, #0]
     878:	6822      	ldr	r2, [r4, #0]
     87a:	1a10      	subs	r0, r2, r0
     87c:	0200      	lsls	r0, r0, #8
     87e:	17c2      	asrs	r2, r0, #31
     880:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     884:	1200      	asrs	r0, r0, #8
     886:	4288      	cmp	r0, r1
     888:	db06      	blt.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
     88a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     88e:	f88a 5000 	strb.w	r5, [sl]
     892:	7845      	ldrb	r5, [r0, #1]
     894:	2d20      	cmp	r5, #32
     896:	d1cd      	bne.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
     898:	f89a 0000 	ldrb.w	r0, [sl]
     89c:	f888 0000 	strb.w	r0, [r8]
     8a0:	2d20      	cmp	r5, #32
     8a2:	bf18      	it	ne
     8a4:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     8a8:	d03c      	beq.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
     8aa:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     8ae:	eb07 0981 	add.w	r9, r7, r1, lsl #2
     8b2:	6861      	ldr	r1, [r4, #4]
     8b4:	f8d9 2004 	ldr.w	r2, [r9, #4]
     8b8:	4620      	mov	r0, r4
     8ba:	1a51      	subs	r1, r2, r1
     8bc:	0209      	lsls	r1, r1, #8
     8be:	17ca      	asrs	r2, r1, #31
     8c0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     8c4:	f109 0604 	add.w	r6, r9, #4
     8c8:	1209      	asrs	r1, r1, #8
     8ca:	d41b      	bmi.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
     8cc:	8971      	ldrh	r1, [r6, #10]
     8ce:	b349      	cbz	r1, 924 <CONFIG_ISR_STACK_SIZE+0x124>
     8d0:	8941      	ldrh	r1, [r0, #10]
     8d2:	bb39      	cbnz	r1, 924 <CONFIG_ISR_STACK_SIZE+0x124>
     8d4:	f000 fb66 	bl	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     8d8:	aa01      	add	r2, sp, #4
     8da:	4669      	mov	r1, sp
     8dc:	f002 fb2e 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     8e0:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     8e4:	2800      	cmp	r0, #0
     8e6:	bfcc      	ite	gt
     8e8:	2001      	movgt	r0, #1
     8ea:	2000      	movle	r0, #0
     8ec:	f100 0133 	add.w	r1, r0, #51	; 0x33
     8f0:	9800      	ldr	r0, [sp, #0]
     8f2:	6832      	ldr	r2, [r6, #0]
     8f4:	1a10      	subs	r0, r2, r0
     8f6:	0200      	lsls	r0, r0, #8
     8f8:	17c2      	asrs	r2, r0, #31
     8fa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     8fe:	1200      	asrs	r0, r0, #8
     900:	4288      	cmp	r0, r1
     902:	da0f      	bge.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
     904:	f888 5000 	strb.w	r5, [r8]
     908:	f899 0010 	ldrb.w	r0, [r9, #16]
     90c:	7b21      	ldrb	r1, [r4, #12]
     90e:	4288      	cmp	r0, r1
     910:	d803      	bhi.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
     912:	b003      	add	sp, #12
     914:	2000      	movs	r0, #0
     916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     91a:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     91e:	7845      	ldrb	r5, [r0, #1]
     920:	2d20      	cmp	r5, #32
     922:	d1c2      	bne.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
     924:	b003      	add	sp, #12
     926:	2001      	movs	r0, #1
     928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     92c:	20000d1c 	.word	0x20000d1c
     930:	20000a1c 	.word	0x20000a1c
     934:	4804      	ldr	r0, [pc, #16]	; (948 <CONFIG_ISR_STACK_SIZE+0x148>)
     936:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
     93a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     93e:	bf0c      	ite	eq
     940:	2001      	moveq	r0, #1
     942:	2000      	movne	r0, #0
     944:	4770      	bx	lr
     946:	0000      	.short	0x0000
     948:	000025ad 	.word	0x000025ad
     94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     950:	f04f 0800 	mov.w	r8, #0
     954:	b098      	sub	sp, #96	; 0x60
     956:	4616      	mov	r6, r2
     958:	460d      	mov	r5, r1
     95a:	46c3      	mov	fp, r8
     95c:	f002 f896 	bl	2a8c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     960:	4604      	mov	r4, r0
     962:	2d01      	cmp	r5, #1
     964:	bf18      	it	ne
     966:	2d02      	cmpne	r5, #2
     968:	d005      	beq.n	976 <CONFIG_ISR_STACK_SIZE+0x176>
     96a:	f640 117c 	movw	r1, #2428	; 0x97c
     96e:	f04f 0070 	mov.w	r0, #112	; 0x70
     972:	f002 fe29 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     976:	49ff      	ldr	r1, [pc, #1020]	; (d74 <CONFIG_ISR_STACK_SIZE+0x574>)
     978:	2001      	movs	r0, #1
     97a:	6008      	str	r0, [r1, #0]
     97c:	49fe      	ldr	r1, [pc, #1016]	; (d78 <CONFIG_ISR_STACK_SIZE+0x578>)
     97e:	6889      	ldr	r1, [r1, #8]
     980:	6008      	str	r0, [r1, #0]
     982:	2000      	movs	r0, #0
     984:	9006      	str	r0, [sp, #24]
     986:	1e40      	subs	r0, r0, #1
     988:	9008      	str	r0, [sp, #32]
     98a:	49fc      	ldr	r1, [pc, #1008]	; (d7c <CONFIG_ISR_STACK_SIZE+0x57c>)
     98c:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     990:	eb01 0380 	add.w	r3, r1, r0, lsl #2
     994:	1d1b      	adds	r3, r3, #4
     996:	af09      	add	r7, sp, #36	; 0x24
     998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     99a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     99e:	a809      	add	r0, sp, #36	; 0x24
     9a0:	f000 fb00 	bl	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     9a4:	9007      	str	r0, [sp, #28]
     9a6:	48f5      	ldr	r0, [pc, #980]	; (d7c <CONFIG_ISR_STACK_SIZE+0x57c>)
     9a8:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
     9ac:	f8b0 0320 	ldrh.w	r0, [r0, #800]	; 0x320
     9b0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     9b4:	f1b9 0f00 	cmp.w	r9, #0
     9b8:	bf14      	ite	ne
     9ba:	f04f 0a01 	movne.w	sl, #1
     9be:	f04f 0a00 	moveq.w	sl, #0
     9c2:	9809      	ldr	r0, [sp, #36]	; 0x24
     9c4:	9012      	str	r0, [sp, #72]	; 0x48
     9c6:	f1ba 0f00 	cmp.w	sl, #0
     9ca:	d009      	beq.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
     9cc:	48ec      	ldr	r0, [pc, #944]	; (d80 <CONFIG_ISR_STACK_SIZE+0x580>)
     9ce:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
     9d2:	b928      	cbnz	r0, 9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
     9d4:	f002 fd94 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     9d8:	2800      	cmp	r0, #0
     9da:	bf08      	it	eq
     9dc:	2701      	moveq	r7, #1
     9de:	d000      	beq.n	9e2 <CONFIG_ISR_STACK_SIZE+0x1e2>
     9e0:	2700      	movs	r7, #0
     9e2:	48e8      	ldr	r0, [pc, #928]	; (d84 <CONFIG_ISR_STACK_SIZE+0x584>)
     9e4:	2200      	movs	r2, #0
     9e6:	9214      	str	r2, [sp, #80]	; 0x50
     9e8:	7800      	ldrb	r0, [r0, #0]
     9ea:	4616      	mov	r6, r2
     9ec:	2801      	cmp	r0, #1
     9ee:	bf18      	it	ne
     9f0:	2803      	cmpne	r0, #3
     9f2:	d143      	bne.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
     9f4:	48e3      	ldr	r0, [pc, #908]	; (d84 <CONFIG_ISR_STACK_SIZE+0x584>)
     9f6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     9fa:	eba8 0009 	sub.w	r0, r8, r9
     9fe:	9014      	str	r0, [sp, #80]	; 0x50
     a00:	45c1      	cmp	r9, r8
     a02:	d23b      	bcs.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
     a04:	a803      	add	r0, sp, #12
     a06:	9005      	str	r0, [sp, #20]
     a08:	a817      	add	r0, sp, #92	; 0x5c
     a0a:	9010      	str	r0, [sp, #64]	; 0x40
     a0c:	9907      	ldr	r1, [sp, #28]
     a0e:	f108 0003 	add.w	r0, r8, #3
     a12:	4242      	negs	r2, r0
     a14:	f8df c370 	ldr.w	ip, [pc, #880]	; d88 <CONFIG_ISR_STACK_SIZE+0x588>
     a18:	1a08      	subs	r0, r1, r0
     a1a:	2300      	movs	r3, #0
     a1c:	ebbc 0101 	subs.w	r1, ip, r1
     a20:	eb73 0103 	sbcs.w	r1, r3, r3
     a24:	d204      	bcs.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
     a26:	f240 51f5 	movw	r1, #1525	; 0x5f5
     a2a:	2070      	movs	r0, #112	; 0x70
     a2c:	f002 fdcc 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a30:	49d6      	ldr	r1, [pc, #856]	; (d8c <CONFIG_ISR_STACK_SIZE+0x58c>)
     a32:	428a      	cmp	r2, r1
     a34:	dd04      	ble.n	a40 <CONFIG_ISR_STACK_SIZE+0x240>
     a36:	f240 51f6 	movw	r1, #1526	; 0x5f6
     a3a:	2070      	movs	r0, #112	; 0x70
     a3c:	f002 fdc4 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a40:	49d3      	ldr	r1, [pc, #844]	; (d90 <CONFIG_ISR_STACK_SIZE+0x590>)
     a42:	428a      	cmp	r2, r1
     a44:	da04      	bge.n	a50 <CONFIG_ISR_STACK_SIZE+0x250>
     a46:	f240 51f7 	movw	r1, #1527	; 0x5f7
     a4a:	2070      	movs	r0, #112	; 0x70
     a4c:	f002 fdbc 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a50:	49d0      	ldr	r1, [pc, #832]	; (d94 <CONFIG_ISR_STACK_SIZE+0x594>)
     a52:	4288      	cmp	r0, r1
     a54:	bfa8      	it	ge
     a56:	49d0      	ldrge	r1, [pc, #832]	; (d98 <CONFIG_ISR_STACK_SIZE+0x598>)
     a58:	da03      	bge.n	a62 <CONFIG_ISR_STACK_SIZE+0x262>
     a5a:	2800      	cmp	r0, #0
     a5c:	bfb8      	it	lt
     a5e:	49cd      	ldrlt	r1, [pc, #820]	; (d94 <CONFIG_ISR_STACK_SIZE+0x594>)
     a60:	da00      	bge.n	a64 <CONFIG_ISR_STACK_SIZE+0x264>
     a62:	1840      	adds	r0, r0, r1
     a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
     a66:	9905      	ldr	r1, [sp, #20]
     a68:	f002 fa68 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     a6c:	9803      	ldr	r0, [sp, #12]
     a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
     a70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a74:	9003      	str	r0, [sp, #12]
     a76:	1a08      	subs	r0, r1, r0
     a78:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     a7c:	2f00      	cmp	r7, #0
     a7e:	bf18      	it	ne
     a80:	2632      	movne	r6, #50	; 0x32
     a82:	d104      	bne.n	a8e <CONFIG_ISR_STACK_SIZE+0x28e>
     a84:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     a88:	2800      	cmp	r0, #0
     a8a:	bf18      	it	ne
     a8c:	2602      	movne	r6, #2
     a8e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a92:	d008      	beq.n	aa6 <CONFIG_ISR_STACK_SIZE+0x2a6>
     a94:	9809      	ldr	r0, [sp, #36]	; 0x24
     a96:	1b00      	subs	r0, r0, r4
     a98:	0200      	lsls	r0, r0, #8
     a9a:	17c1      	asrs	r1, r0, #31
     a9c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     aa0:	1200      	asrs	r0, r0, #8
     aa2:	2801      	cmp	r0, #1
     aa4:	da02      	bge.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
     aa6:	2004      	movs	r0, #4
     aa8:	9918      	ldr	r1, [sp, #96]	; 0x60
     aaa:	e00b      	b.n	ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
     aac:	b147      	cbz	r7, ac0 <CONFIG_ISR_STACK_SIZE+0x2c0>
     aae:	48b4      	ldr	r0, [pc, #720]	; (d80 <CONFIG_ISR_STACK_SIZE+0x580>)
     ab0:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
     ab4:	b120      	cbz	r0, ac0 <CONFIG_ISR_STACK_SIZE+0x2c0>
     ab6:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     aba:	1c06      	adds	r6, r0, #0
     abc:	bf18      	it	ne
     abe:	2602      	movne	r6, #2
     ac0:	4621      	mov	r1, r4
     ac2:	2001      	movs	r0, #1
     ac4:	f1b9 0f00 	cmp.w	r9, #0
     ac8:	d002      	beq.n	ad0 <CONFIG_ISR_STACK_SIZE+0x2d0>
     aca:	9b14      	ldr	r3, [sp, #80]	; 0x50
     acc:	2b1e      	cmp	r3, #30
     ace:	da02      	bge.n	ad6 <CONFIG_ISR_STACK_SIZE+0x2d6>
     ad0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
     ad4:	b113      	cbz	r3, adc <CONFIG_ISR_STACK_SIZE+0x2dc>
     ad6:	f04f 0b01 	mov.w	fp, #1
     ada:	1e40      	subs	r0, r0, #1
     adc:	1983      	adds	r3, r0, r6
     ade:	48a9      	ldr	r0, [pc, #676]	; (d84 <CONFIG_ISR_STACK_SIZE+0x584>)
     ae0:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
     ae4:	7800      	ldrb	r0, [r0, #0]
     ae6:	9015      	str	r0, [sp, #84]	; 0x54
     ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
     aea:	1a80      	subs	r0, r0, r2
     aec:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     af0:	ebac 0001 	sub.w	r0, ip, r1
     af4:	0200      	lsls	r0, r0, #8
     af6:	ea4f 7ee0 	mov.w	lr, r0, asr #31
     afa:	eb00 601e 	add.w	r0, r0, lr, lsr #24
     afe:	1200      	asrs	r0, r0, #8
     b00:	4298      	cmp	r0, r3
     b02:	db18      	blt.n	b36 <CONFIG_ISR_STACK_SIZE+0x336>
     b04:	2a00      	cmp	r2, #0
     b06:	bf18      	it	ne
     b08:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
     b0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
     b0e:	9710      	str	r7, [sp, #64]	; 0x40
     b10:	2700      	movs	r7, #0
     b12:	f001 feb5 	bl	2880 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b16:	1a30      	subs	r0, r6, r0
     b18:	0200      	lsls	r0, r0, #8
     b1a:	17c1      	asrs	r1, r0, #31
     b1c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b20:	1200      	asrs	r0, r0, #8
     b22:	283e      	cmp	r0, #62	; 0x3e
     b24:	da3e      	bge.n	ba4 <CONFIG_ISR_STACK_SIZE+0x3a4>
     b26:	2d01      	cmp	r5, #1
     b28:	d01f      	beq.n	b6a <CONFIG_ISR_STACK_SIZE+0x36a>
     b2a:	1e70      	subs	r0, r6, #1
     b2c:	9910      	ldr	r1, [sp, #64]	; 0x40
     b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b32:	b311      	cbz	r1, b7a <CONFIG_ISR_STACK_SIZE+0x37a>
     b34:	e02c      	b.n	b90 <CONFIG_ISR_STACK_SIZE+0x390>
     b36:	b17a      	cbz	r2, b58 <CONFIG_ISR_STACK_SIZE+0x358>
     b38:	2e00      	cmp	r6, #0
     b3a:	bf04      	itt	eq
     b3c:	9815      	ldreq	r0, [sp, #84]	; 0x54
     b3e:	2803      	cmpeq	r0, #3
     b40:	d00a      	beq.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
     b42:	b927      	cbnz	r7, b4e <CONFIG_ISR_STACK_SIZE+0x34e>
     b44:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b48:	2800      	cmp	r0, #0
     b4a:	bf18      	it	ne
     b4c:	1e9b      	subne	r3, r3, #2
     b4e:	2200      	movs	r2, #0
     b50:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
     b54:	4690      	mov	r8, r2
     b56:	e7c7      	b.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
     b58:	bb07      	cbnz	r7, b9c <CONFIG_ISR_STACK_SIZE+0x39c>
     b5a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b5e:	b1e8      	cbz	r0, b9c <CONFIG_ISR_STACK_SIZE+0x39c>
     b60:	2000      	movs	r0, #0
     b62:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
     b66:	1e9b      	subs	r3, r3, #2
     b68:	e7be      	b.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
     b6a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b6e:	d120      	bne.n	bb2 <CONFIG_ISR_STACK_SIZE+0x3b2>
     b70:	f640 01f5 	movw	r1, #2293	; 0x8f5
     b74:	2070      	movs	r0, #112	; 0x70
     b76:	f002 fd27 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b7a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b7e:	d007      	beq.n	b90 <CONFIG_ISR_STACK_SIZE+0x390>
     b80:	1a21      	subs	r1, r4, r0
     b82:	0209      	lsls	r1, r1, #8
     b84:	17ca      	asrs	r2, r1, #31
     b86:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b8a:	1209      	asrs	r1, r1, #8
     b8c:	2904      	cmp	r1, #4
     b8e:	dd03      	ble.n	b98 <CONFIG_ISR_STACK_SIZE+0x398>
     b90:	4604      	mov	r4, r0
     b92:	f001 fe7b 	bl	288c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b96:	e00c      	b.n	bb2 <CONFIG_ISR_STACK_SIZE+0x3b2>
     b98:	2900      	cmp	r1, #0
     b9a:	dd0a      	ble.n	bb2 <CONFIG_ISR_STACK_SIZE+0x3b2>
     b9c:	b01b      	add	sp, #108	; 0x6c
     b9e:	2000      	movs	r0, #0
     ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ba4:	1e70      	subs	r0, r6, #1
     ba6:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     baa:	4620      	mov	r0, r4
     bac:	f001 fe6e 	bl	288c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     bb0:	4657      	mov	r7, sl
     bb2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bb6:	d028      	beq.n	c0a <CONFIG_ISR_STACK_SIZE+0x40a>
     bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
     bba:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
     bbe:	1b00      	subs	r0, r0, r4
     bc0:	f08b 0301 	eor.w	r3, fp, #1
     bc4:	4a75      	ldr	r2, [pc, #468]	; (d9c <CONFIG_ISR_STACK_SIZE+0x59c>)
     bc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     bca:	ebac 0c04 	sub.w	ip, ip, r4
     bce:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     bd2:	4283      	cmp	r3, r0
     bd4:	bf98      	it	ls
     bd6:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     bda:	d2df      	bcs.n	b9c <CONFIG_ISR_STACK_SIZE+0x39c>
     bdc:	4562      	cmp	r2, ip
     bde:	d3dd      	bcc.n	b9c <CONFIG_ISR_STACK_SIZE+0x39c>
     be0:	4620      	mov	r0, r4
     be2:	f00d fdc1 	bl	e768 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     be6:	4a68      	ldr	r2, [pc, #416]	; (d88 <CONFIG_ISR_STACK_SIZE+0x588>)
     be8:	9907      	ldr	r1, [sp, #28]
     bea:	1c53      	adds	r3, r2, #1
     bec:	1a0e      	subs	r6, r1, r0
     bee:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     bf2:	bf24      	itt	cs
     bf4:	eba0 0c01 	subcs.w	ip, r0, r1
     bf8:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     bfc:	d310      	bcc.n	c20 <CONFIG_ISR_STACK_SIZE+0x420>
     bfe:	42b2      	cmp	r2, r6
     c00:	d208      	bcs.n	c14 <CONFIG_ISR_STACK_SIZE+0x414>
     c02:	1a10      	subs	r0, r2, r0
     c04:	4408      	add	r0, r1
     c06:	1c46      	adds	r6, r0, #1
     c08:	e00a      	b.n	c20 <CONFIG_ISR_STACK_SIZE+0x420>
     c0a:	f640 2114 	movw	r1, #2580	; 0xa14
     c0e:	2070      	movs	r0, #112	; 0x70
     c10:	f002 fcda 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c14:	4562      	cmp	r2, ip
     c16:	d22d      	bcs.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     c18:	1a51      	subs	r1, r2, r1
     c1a:	4408      	add	r0, r1
     c1c:	1c40      	adds	r0, r0, #1
     c1e:	4246      	negs	r6, r0
     c20:	4857      	ldr	r0, [pc, #348]	; (d80 <CONFIG_ISR_STACK_SIZE+0x580>)
     c22:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
     c26:	b350      	cbz	r0, c7e <CONFIG_ISR_STACK_SIZE+0x47e>
     c28:	4628      	mov	r0, r5
     c2a:	4645      	mov	r5, r8
     c2c:	f04f 0b00 	mov.w	fp, #0
     c30:	46d8      	mov	r8, fp
     c32:	2801      	cmp	r0, #1
     c34:	d005      	beq.n	c42 <CONFIG_ISR_STACK_SIZE+0x442>
     c36:	2002      	movs	r0, #2
     c38:	f002 f870 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c3c:	2001      	movs	r0, #1
     c3e:	f002 f86d 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c42:	45a9      	cmp	r9, r5
     c44:	d22c      	bcs.n	ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>
     c46:	eba6 0105 	sub.w	r1, r6, r5
     c4a:	f04f 0301 	mov.w	r3, #1
     c4e:	f04f 0203 	mov.w	r2, #3
     c52:	f04f 0002 	mov.w	r0, #2
     c56:	f001 ff99 	bl	2b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c5a:	2800      	cmp	r0, #0
     c5c:	bf08      	it	eq
     c5e:	f04f 0801 	moveq.w	r8, #1
     c62:	f1b9 0f00 	cmp.w	r9, #0
     c66:	d035      	beq.n	cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
     c68:	2301      	movs	r3, #1
     c6a:	eba6 0109 	sub.w	r1, r6, r9
     c6e:	2203      	movs	r2, #3
     c70:	4618      	mov	r0, r3
     c72:	e023      	b.n	cbc <CONFIG_ISR_STACK_SIZE+0x4bc>
     c74:	f640 21f4 	movw	r1, #2804	; 0xaf4
     c78:	2070      	movs	r0, #112	; 0x70
     c7a:	f002 fca5 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c7e:	45c1      	cmp	r9, r8
     c80:	bf34      	ite	cc
     c82:	4640      	movcc	r0, r8
     c84:	4648      	movcs	r0, r9
     c86:	f1bb 0f00 	cmp.w	fp, #0
     c8a:	bf14      	ite	ne
     c8c:	2100      	movne	r1, #0
     c8e:	211e      	moveq	r1, #30
     c90:	4408      	add	r0, r1
     c92:	42b0      	cmp	r0, r6
     c94:	dbc8      	blt.n	c28 <CONFIG_ISR_STACK_SIZE+0x428>
     c96:	f640 2127 	movw	r1, #2599	; 0xa27
     c9a:	2070      	movs	r0, #112	; 0x70
     c9c:	f002 fc94 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ca0:	d910      	bls.n	cc4 <CONFIG_ISR_STACK_SIZE+0x4c4>
     ca2:	2301      	movs	r3, #1
     ca4:	eba6 0109 	sub.w	r1, r6, r9
     ca8:	2203      	movs	r2, #3
     caa:	4618      	mov	r0, r3
     cac:	f001 ff6e 	bl	2b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cb0:	b328      	cbz	r0, cfe <CONFIG_ISR_STACK_SIZE+0x4fe>
     cb2:	b17d      	cbz	r5, cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
     cb4:	1b71      	subs	r1, r6, r5
     cb6:	2301      	movs	r3, #1
     cb8:	2203      	movs	r2, #3
     cba:	2002      	movs	r0, #2
     cbc:	f001 ff66 	bl	2b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cc0:	b1e8      	cbz	r0, cfe <CONFIG_ISR_STACK_SIZE+0x4fe>
     cc2:	e007      	b.n	cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
     cc4:	ea55 0009 	orrs.w	r0, r5, r9
     cc8:	d004      	beq.n	cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
     cca:	f640 115f 	movw	r1, #2399	; 0x95f
     cce:	2070      	movs	r0, #112	; 0x70
     cd0:	f002 fc7a 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cd4:	2301      	movs	r3, #1
     cd6:	2203      	movs	r2, #3
     cd8:	4631      	mov	r1, r6
     cda:	2000      	movs	r0, #0
     cdc:	f001 ff56 	bl	2b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ce0:	b168      	cbz	r0, cfe <CONFIG_ISR_STACK_SIZE+0x4fe>
     ce2:	2501      	movs	r5, #1
     ce4:	f1b8 0f00 	cmp.w	r8, #0
     ce8:	d003      	beq.n	cf2 <CONFIG_ISR_STACK_SIZE+0x4f2>
     cea:	9812      	ldr	r0, [sp, #72]	; 0x48
     cec:	9009      	str	r0, [sp, #36]	; 0x24
     cee:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
     cf2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; da0 <CONFIG_ISR_STACK_SIZE+0x5a0>
     cf6:	f1ba 0f00 	cmp.w	sl, #0
     cfa:	d10e      	bne.n	d1a <CONFIG_ISR_STACK_SIZE+0x51a>
     cfc:	e009      	b.n	d12 <CONFIG_ISR_STACK_SIZE+0x512>
     cfe:	2002      	movs	r0, #2
     d00:	f002 f80c 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d04:	2001      	movs	r0, #1
     d06:	f002 f809 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d0a:	b01b      	add	sp, #108	; 0x6c
     d0c:	2000      	movs	r0, #0
     d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d12:	481b      	ldr	r0, [pc, #108]	; (d80 <CONFIG_ISR_STACK_SIZE+0x580>)
     d14:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
     d18:	b100      	cbz	r0, d1c <CONFIG_ISR_STACK_SIZE+0x51c>
     d1a:	b34f      	cbz	r7, d70 <CONFIG_ISR_STACK_SIZE+0x570>
     d1c:	f8df a060 	ldr.w	sl, [pc, #96]	; d80 <CONFIG_ISR_STACK_SIZE+0x580>
     d20:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
     d24:	b118      	cbz	r0, d2e <CONFIG_ISR_STACK_SIZE+0x52e>
     d26:	f002 fab7 	bl	3298 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d2a:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
     d2e:	b307      	cbz	r7, d72 <CONFIG_ISR_STACK_SIZE+0x572>
     d30:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     d34:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     d38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d3c:	f8c8 0000 	str.w	r0, [r8]
     d40:	2300      	movs	r3, #0
     d42:	2203      	movs	r2, #3
     d44:	2005      	movs	r0, #5
     d46:	f001 ff21 	bl	2b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d4a:	b378      	cbz	r0, dac <CONFIG_ISR_STACK_SIZE+0x5ac>
     d4c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     d50:	2005      	movs	r0, #5
     d52:	f002 f89d 	bl	2e90 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     d56:	4913      	ldr	r1, [pc, #76]	; (da4 <CONFIG_ISR_STACK_SIZE+0x5a4>)
     d58:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     d5c:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     d60:	4911      	ldr	r1, [pc, #68]	; (da8 <CONFIG_ISR_STACK_SIZE+0x5a8>)
     d62:	12e0      	asrs	r0, r4, #11
     d64:	6008      	str	r0, [r1, #0]
     d66:	4c06      	ldr	r4, [pc, #24]	; (d80 <CONFIG_ISR_STACK_SIZE+0x580>)
     d68:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
     d6c:	b3f0      	cbz	r0, dec <CONFIG_ISR_STACK_SIZE+0x5ec>
     d6e:	e05d      	b.n	e2c <CONFIG_ISR_STACK_SIZE+0x62c>
     d70:	e01d      	b.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
     d72:	e021      	b.n	db8 <CONFIG_ISR_STACK_SIZE+0x5b8>
     d74:	40000508 	.word	0x40000508
     d78:	20000010 	.word	0x20000010
     d7c:	20000a1c 	.word	0x20000a1c
     d80:	20000d1c 	.word	0x20000d1c
     d84:	20000012 	.word	0x20000012
     d88:	1e847fff 	.word	0x1e847fff
     d8c:	07a12000 	.word	0x07a12000
     d90:	f85ee000 	.word	0xf85ee000
     d94:	1e848000 	.word	0x1e848000
     d98:	e17b8000 	.word	0xe17b8000
     d9c:	003fffff 	.word	0x003fffff
     da0:	4001f508 	.word	0x4001f508
     da4:	4001f098 	.word	0x4001f098
     da8:	4001f504 	.word	0x4001f504
     dac:	e035      	b.n	e1a <CONFIG_ISR_STACK_SIZE+0x61a>
     dae:	f8df a0b8 	ldr.w	sl, [pc, #184]	; e68 <CONFIG_ISR_STACK_SIZE+0x668>
     db2:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
     db6:	b358      	cbz	r0, e10 <CONFIG_ISR_STACK_SIZE+0x610>
     db8:	4c2b      	ldr	r4, [pc, #172]	; (e68 <CONFIG_ISR_STACK_SIZE+0x668>)
     dba:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
     dbe:	b150      	cbz	r0, dd6 <CONFIG_ISR_STACK_SIZE+0x5d6>
     dc0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     dc4:	f8c8 0000 	str.w	r0, [r8]
     dc8:	2005      	movs	r0, #5
     dca:	f001 ffa7 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     dce:	f002 facb 	bl	3368 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     dd2:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
     dd6:	ac06      	add	r4, sp, #24
     dd8:	4824      	ldr	r0, [pc, #144]	; (e6c <CONFIG_ISR_STACK_SIZE+0x66c>)
     dda:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     dde:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
     de2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
     de6:	f8c0 330c 	str.w	r3, [r0, #780]	; 0x30c
     dea:	e000      	b.n	dee <CONFIG_ISR_STACK_SIZE+0x5ee>
     dec:	e01a      	b.n	e24 <CONFIG_ISR_STACK_SIZE+0x624>
     dee:	f8c0 c310 	str.w	ip, [r0, #784]	; 0x310
     df2:	ac0a      	add	r4, sp, #40	; 0x28
     df4:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     df8:	f8c0 1314 	str.w	r1, [r0, #788]	; 0x314
     dfc:	f8c0 2318 	str.w	r2, [r0, #792]	; 0x318
     e00:	f8c0 331c 	str.w	r3, [r0, #796]	; 0x31c
     e04:	f8c0 c320 	str.w	ip, [r0, #800]	; 0x320
     e08:	b01b      	add	sp, #108	; 0x6c
     e0a:	2001      	movs	r0, #1
     e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e10:	f002 fa5e 	bl	32d0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     e14:	f88a 5030 	strb.w	r5, [sl, #48]	; 0x30
     e18:	e789      	b.n	d2e <CONFIG_ISR_STACK_SIZE+0x52e>
     e1a:	f240 315b 	movw	r1, #859	; 0x35b
     e1e:	2070      	movs	r0, #112	; 0x70
     e20:	f002 fbd2 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e24:	f002 fa92 	bl	334c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     e28:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
     e2c:	eba6 0009 	sub.w	r0, r6, r9
     e30:	f1a0 0119 	sub.w	r1, r0, #25
     e34:	2900      	cmp	r1, #0
     e36:	dc04      	bgt.n	e42 <CONFIG_ISR_STACK_SIZE+0x642>
     e38:	f640 2151 	movw	r1, #2641	; 0xa51
     e3c:	2070      	movs	r0, #112	; 0x70
     e3e:	f002 fbc3 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e42:	2203      	movs	r2, #3
     e44:	2301      	movs	r3, #1
     e46:	4610      	mov	r0, r2
     e48:	f001 fea0 	bl	2b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     e4c:	b138      	cbz	r0, e5e <CONFIG_ISR_STACK_SIZE+0x65e>
     e4e:	4808      	ldr	r0, [pc, #32]	; (e70 <CONFIG_ISR_STACK_SIZE+0x670>)
     e50:	6880      	ldr	r0, [r0, #8]
     e52:	f8c0 b000 	str.w	fp, [r0]
     e56:	4807      	ldr	r0, [pc, #28]	; (e74 <CONFIG_ISR_STACK_SIZE+0x674>)
     e58:	f8c0 b000 	str.w	fp, [r0]
     e5c:	e7bb      	b.n	dd6 <CONFIG_ISR_STACK_SIZE+0x5d6>
     e5e:	f640 215c 	movw	r1, #2652	; 0xa5c
     e62:	2070      	movs	r0, #112	; 0x70
     e64:	f002 fbb0 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e68:	20000d1c 	.word	0x20000d1c
     e6c:	20000a1c 	.word	0x20000a1c
     e70:	20000010 	.word	0x20000010
     e74:	40000508 	.word	0x40000508
     e78:	b510      	push	{r4, lr}
     e7a:	4c15      	ldr	r4, [pc, #84]	; (ed0 <CONFIG_ISR_STACK_SIZE+0x6d0>)
     e7c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
     e80:	2820      	cmp	r0, #32
     e82:	bf18      	it	ne
     e84:	bd10      	popne	{r4, pc}
     e86:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
     e8a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     e8e:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
     e92:	2920      	cmp	r1, #32
     e94:	d016      	beq.n	ec4 <CONFIG_ISR_STACK_SIZE+0x6c4>
     e96:	f8df c03c 	ldr.w	ip, [pc, #60]	; ed4 <CONFIG_ISR_STACK_SIZE+0x6d4>
     e9a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     e9e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     ea2:	785b      	ldrb	r3, [r3, #1]
     ea4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
     ea8:	2301      	movs	r3, #1
     eaa:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
     eae:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
     eb2:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
     eb6:	2002      	movs	r0, #2
     eb8:	f000 f8b2 	bl	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
     ebc:	2000      	movs	r0, #0
     ebe:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
     ec2:	bd10      	pop	{r4, pc}
     ec4:	f44f 716a 	mov.w	r1, #936	; 0x3a8
     ec8:	2070      	movs	r0, #112	; 0x70
     eca:	f002 fb7d 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ece:	0000      	.short	0x0000
     ed0:	20000d1c 	.word	0x20000d1c
     ed4:	20000c9c 	.word	0x20000c9c
     ed8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     edc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; f94 <CONFIG_ISR_STACK_SIZE+0x794>
     ee0:	f898 5032 	ldrb.w	r5, [r8, #50]	; 0x32
     ee4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     ee8:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
     eec:	2c20      	cmp	r4, #32
     eee:	bf08      	it	eq
     ef0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     ef4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; f98 <CONFIG_ISR_STACK_SIZE+0x798>
     ef8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f9c <CONFIG_ISR_STACK_SIZE+0x79c>
     efc:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
     f00:	eb09 1785 	add.w	r7, r9, r5, lsl #6
     f04:	2607      	movs	r6, #7
     f06:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     f0a:	2801      	cmp	r0, #1
     f0c:	d00e      	beq.n	f2c <CONFIG_ISR_STACK_SIZE+0x72c>
     f0e:	2804      	cmp	r0, #4
     f10:	bf08      	it	eq
     f12:	2602      	moveq	r6, #2
     f14:	d00a      	beq.n	f2c <CONFIG_ISR_STACK_SIZE+0x72c>
     f16:	2805      	cmp	r0, #5
     f18:	bf0c      	ite	eq
     f1a:	2603      	moveq	r6, #3
     f1c:	2806      	cmpne	r0, #6
     f1e:	d005      	beq.n	f2c <CONFIG_ISR_STACK_SIZE+0x72c>
     f20:	f640 01c2 	movw	r1, #2242	; 0x8c2
     f24:	f04f 0070 	mov.w	r0, #112	; 0x70
     f28:	f002 fb4e 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f2c:	f1ba 0f00 	cmp.w	sl, #0
     f30:	bf18      	it	ne
     f32:	f3af 8000 	nopne.w
     f36:	f3ef 8010 	mrs	r0, PRIMASK
     f3a:	b672      	cpsid	i
     f3c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
     f40:	784a      	ldrb	r2, [r1, #1]
     f42:	eb08 0185 	add.w	r1, r8, r5, lsl #2
     f46:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
     f4a:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
     f4e:	42a2      	cmp	r2, r4
     f50:	bf04      	itt	eq
     f52:	2220      	moveq	r2, #32
     f54:	f881 2026 	strbeq.w	r2, [r1, #38]	; 0x26
     f58:	b1a8      	cbz	r0, f86 <CONFIG_ISR_STACK_SIZE+0x786>
     f5a:	462a      	mov	r2, r5
     f5c:	4621      	mov	r1, r4
     f5e:	2001      	movs	r0, #1
     f60:	f000 f85e 	bl	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
     f64:	eb04 0084 	add.w	r0, r4, r4, lsl #2
     f68:	4631      	mov	r1, r6
     f6a:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
     f6e:	4620      	mov	r0, r4
     f70:	4790      	blx	r2
     f72:	f898 5032 	ldrb.w	r5, [r8, #50]	; 0x32
     f76:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     f7a:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
     f7e:	2c20      	cmp	r4, #32
     f80:	d1be      	bne.n	f00 <CONFIG_ISR_STACK_SIZE+0x700>
     f82:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     f86:	4806      	ldr	r0, [pc, #24]	; (fa0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD>)
     f88:	2800      	cmp	r0, #0
     f8a:	bf18      	it	ne
     f8c:	f3af 8000 	nopne.w
     f90:	b662      	cpsie	i
     f92:	e7e2      	b.n	f5a <CONFIG_ISR_STACK_SIZE+0x75a>
     f94:	20000d1c 	.word	0x20000d1c
     f98:	00000000 	.word	0x00000000
     f9c:	20000c9c 	.word	0x20000c9c
     fa0:	00000000 	.word	0x00000000
     fa4:	b510      	push	{r4, lr}
     fa6:	4604      	mov	r4, r0
     fa8:	6800      	ldr	r0, [r0, #0]
     faa:	f00d fbdd 	bl	e768 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     fae:	4601      	mov	r1, r0
     fb0:	8960      	ldrh	r0, [r4, #10]
     fb2:	f994 2008 	ldrsb.w	r2, [r4, #8]
     fb6:	f8df c054 	ldr.w	ip, [pc, #84]	; 100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     fba:	4410      	add	r0, r2
     fbc:	1cc2      	adds	r2, r0, #3
     fbe:	1888      	adds	r0, r1, r2
     fc0:	2300      	movs	r3, #0
     fc2:	ebbc 0101 	subs.w	r1, ip, r1
     fc6:	eb73 0103 	sbcs.w	r1, r3, r3
     fca:	d204      	bcs.n	fd6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x36>
     fcc:	f240 51f5 	movw	r1, #1525	; 0x5f5
     fd0:	2070      	movs	r0, #112	; 0x70
     fd2:	f002 faf9 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fd6:	490e      	ldr	r1, [pc, #56]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     fd8:	428a      	cmp	r2, r1
     fda:	dd04      	ble.n	fe6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x46>
     fdc:	f240 51f6 	movw	r1, #1526	; 0x5f6
     fe0:	2070      	movs	r0, #112	; 0x70
     fe2:	f002 faf1 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fe6:	490b      	ldr	r1, [pc, #44]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     fe8:	428a      	cmp	r2, r1
     fea:	da04      	bge.n	ff6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x56>
     fec:	f240 51f7 	movw	r1, #1527	; 0x5f7
     ff0:	2070      	movs	r0, #112	; 0x70
     ff2:	f002 fae9 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ff6:	4908      	ldr	r1, [pc, #32]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     ff8:	4288      	cmp	r0, r1
     ffa:	bfa8      	it	ge
     ffc:	4907      	ldrge	r1, [pc, #28]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     ffe:	da03      	bge.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
    1000:	2800      	cmp	r0, #0
    1002:	bfb4      	ite	lt
    1004:	4904      	ldrlt	r1, [pc, #16]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
    1006:	bd10      	popge	{r4, pc}
    1008:	1840      	adds	r0, r0, r1
    100a:	bd10      	pop	{r4, pc}
    100c:	1e847fff 	.word	0x1e847fff
    1010:	07a12000 	.word	0x07a12000
    1014:	f85ee000 	.word	0xf85ee000
    1018:	1e848000 	.word	0x1e848000
    101c:	e17b8000 	.word	0xe17b8000
    1020:	f8df c054 	ldr.w	ip, [pc, #84]	; 1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    1024:	b510      	push	{r4, lr}
    1026:	2300      	movs	r3, #0
    1028:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    102c:	2807      	cmp	r0, #7
    102e:	d21e      	bcs.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
    1030:	e8df f000 	tbb	[pc, r0]
    1034:	05050505 	.word	0x05050505
    1038:	00040404 	.word	0x00040404
    103c:	2301      	movs	r3, #1
    103e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1042:	2b00      	cmp	r3, #0
    1044:	bf08      	it	eq
    1046:	bd10      	popeq	{r4, pc}
    1048:	480c      	ldr	r0, [pc, #48]	; (107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>)
    104a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    104e:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    1052:	2820      	cmp	r0, #32
    1054:	bf0e      	itee	eq
    1056:	f882 1025 	strbeq.w	r1, [r2, #37]	; 0x25
    105a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    105e:	7041      	strbne	r1, [r0, #1]
    1060:	2020      	movs	r0, #32
    1062:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1066:	7058      	strb	r0, [r3, #1]
    1068:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    106c:	bd10      	pop	{r4, pc}
    106e:	f44f 7120 	mov.w	r1, #640	; 0x280
    1072:	2070      	movs	r0, #112	; 0x70
    1074:	f002 faa8 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1078:	20000c9c 	.word	0x20000c9c
    107c:	20000d1c 	.word	0x20000d1c
    1080:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1084:	b083      	sub	sp, #12
    1086:	485e      	ldr	r0, [pc, #376]	; (1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>)
    1088:	9904      	ldr	r1, [sp, #16]
    108a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    108e:	9001      	str	r0, [sp, #4]
    1090:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
    1094:	9803      	ldr	r0, [sp, #12]
    1096:	4625      	mov	r5, r4
    1098:	2801      	cmp	r0, #1
    109a:	bf18      	it	ne
    109c:	2802      	cmpne	r0, #2
    109e:	d005      	beq.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    10a0:	f640 2198 	movw	r1, #2712	; 0xa98
    10a4:	f04f 0070 	mov.w	r0, #112	; 0x70
    10a8:	f002 fa8e 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ac:	2700      	movs	r7, #0
    10ae:	2d20      	cmp	r5, #32
    10b0:	d04c      	beq.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
    10b2:	4853      	ldr	r0, [pc, #332]	; (1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>)
    10b4:	9100      	str	r1, [sp, #0]
    10b6:	2600      	movs	r6, #0
    10b8:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
    10bc:	2900      	cmp	r1, #0
    10be:	bf04      	itt	eq
    10c0:	6800      	ldreq	r0, [r0, #0]
    10c2:	7886      	ldrbeq	r6, [r0, #2]
    10c4:	f001 fbdc 	bl	2880 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    10c8:	f8df a13c 	ldr.w	sl, [pc, #316]	; 1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
    10cc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    10d0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    10d4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    10d8:	684a      	ldr	r2, [r1, #4]
    10da:	6889      	ldr	r1, [r1, #8]
    10dc:	1a12      	subs	r2, r2, r0
    10de:	1a09      	subs	r1, r1, r0
    10e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    10e4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    10e8:	4296      	cmp	r6, r2
    10ea:	bf98      	it	ls
    10ec:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    10f0:	d201      	bcs.n	10f6 <CONFIG_FPROTECT_BLOCK_SIZE+0xf6>
    10f2:	4589      	cmp	r9, r1
    10f4:	d228      	bcs.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    10f6:	4a45      	ldr	r2, [pc, #276]	; (120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>)
    10f8:	9900      	ldr	r1, [sp, #0]
    10fa:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    10fe:	4622      	mov	r2, r4
    1100:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1104:	784c      	ldrb	r4, [r1, #1]
    1106:	2c20      	cmp	r4, #32
    1108:	d016      	beq.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    110a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    110e:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    1112:	f8dc 8004 	ldr.w	r8, [ip, #4]
    1116:	f8dc c008 	ldr.w	ip, [ip, #8]
    111a:	eba8 0800 	sub.w	r8, r8, r0
    111e:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    1122:	ebac 0100 	sub.w	r1, ip, r0
    1126:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    112a:	4546      	cmp	r6, r8
    112c:	bf98      	it	ls
    112e:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    1132:	d2e4      	bcs.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
    1134:	4589      	cmp	r9, r1
    1136:	d3e2      	bcc.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
    1138:	2a20      	cmp	r2, #32
    113a:	d005      	beq.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    113c:	2120      	movs	r1, #32
    113e:	2004      	movs	r0, #4
    1140:	9b00      	ldr	r3, [sp, #0]
    1142:	f7ff f9db 	bl	4fc <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>
    1146:	4604      	mov	r4, r0
    1148:	42ac      	cmp	r4, r5
    114a:	d117      	bne.n	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
    114c:	4830      	ldr	r0, [pc, #192]	; (1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>)
    114e:	2800      	cmp	r0, #0
    1150:	bf18      	it	ne
    1152:	f3af 8000 	nopne.w
    1156:	f001 fb93 	bl	2880 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    115a:	4c29      	ldr	r4, [pc, #164]	; (1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>)
    115c:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    1160:	2920      	cmp	r1, #32
    1162:	d00f      	beq.n	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
    1164:	6822      	ldr	r2, [r4, #0]
    1166:	6921      	ldr	r1, [r4, #16]
    1168:	7892      	ldrb	r2, [r2, #2]
    116a:	4402      	add	r2, r0
    116c:	1a51      	subs	r1, r2, r1
    116e:	0209      	lsls	r1, r1, #8
    1170:	17ca      	asrs	r2, r1, #31
    1172:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1176:	1209      	asrs	r1, r1, #8
    1178:	2900      	cmp	r1, #0
    117a:	dd03      	ble.n	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
    117c:	b005      	add	sp, #20
    117e:	2000      	movs	r0, #0
    1180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1184:	2d20      	cmp	r5, #32
    1186:	d00d      	beq.n	11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
    1188:	462a      	mov	r2, r5
    118a:	9903      	ldr	r1, [sp, #12]
    118c:	f7ff fbde 	bl	94c <CONFIG_ISR_STACK_SIZE+0x14c>
    1190:	b358      	cbz	r0, 11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
    1192:	9801      	ldr	r0, [sp, #4]
    1194:	f880 7027 	strb.w	r7, [r0, #39]	; 0x27
    1198:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    119c:	b005      	add	sp, #20
    119e:	2001      	movs	r0, #1
    11a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11a4:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    11a8:	b118      	cbz	r0, 11b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b2>
    11aa:	f002 f875 	bl	3298 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    11ae:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    11b2:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    11b6:	b150      	cbz	r0, 11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
    11b8:	4916      	ldr	r1, [pc, #88]	; (1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>)
    11ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    11be:	6008      	str	r0, [r1, #0]
    11c0:	2005      	movs	r0, #5
    11c2:	f001 fdab 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11c6:	f002 f8cf 	bl	3368 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    11ca:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
    11ce:	2004      	movs	r0, #4
    11d0:	f001 fda4 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11d4:	f001 fdfe 	bl	2dd4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    11d8:	2020      	movs	r0, #32
    11da:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    11de:	480e      	ldr	r0, [pc, #56]	; (1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
    11e0:	6880      	ldr	r0, [r0, #8]
    11e2:	6007      	str	r7, [r0, #0]
    11e4:	480d      	ldr	r0, [pc, #52]	; (121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>)
    11e6:	6007      	str	r7, [r0, #0]
    11e8:	e7d8      	b.n	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
    11ea:	462a      	mov	r2, r5
    11ec:	2120      	movs	r1, #32
    11ee:	2004      	movs	r0, #4
    11f0:	9b04      	ldr	r3, [sp, #16]
    11f2:	f7ff f983 	bl	4fc <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>
    11f6:	b005      	add	sp, #20
    11f8:	2000      	movs	r0, #0
    11fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11fe:	0000      	.short	0x0000
    1200:	20000d1c 	.word	0x20000d1c
    1204:	003fffff 	.word	0x003fffff
    1208:	20000a1c 	.word	0x20000a1c
    120c:	20000c9c 	.word	0x20000c9c
    1210:	00000000 	.word	0x00000000
    1214:	4001f508 	.word	0x4001f508
    1218:	20000010 	.word	0x20000010
    121c:	40000508 	.word	0x40000508

00001220 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1224:	4e76      	ldr	r6, [pc, #472]	; (1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>)
    1226:	4607      	mov	r7, r0
    1228:	b087      	sub	sp, #28
    122a:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    122e:	468a      	mov	sl, r1
    1230:	2820      	cmp	r0, #32
    1232:	d05a      	beq.n	12ea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1234:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    1238:	f106 0410 	add.w	r4, r6, #16
    123c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1240:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    1244:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1248:	2020      	movs	r0, #32
    124a:	f88d 0000 	strb.w	r0, [sp]
    124e:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    1252:	aa03      	add	r2, sp, #12
    1254:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1258:	a901      	add	r1, sp, #4
    125a:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
    125e:	6970      	ldr	r0, [r6, #20]
    1260:	9002      	str	r0, [sp, #8]
    1262:	6870      	ldr	r0, [r6, #4]
    1264:	4438      	add	r0, r7
    1266:	f001 fe69 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    126a:	f99d 000c 	ldrsb.w	r0, [sp, #12]
    126e:	2800      	cmp	r0, #0
    1270:	dd02      	ble.n	1278 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    1272:	9801      	ldr	r0, [sp, #4]
    1274:	1c40      	adds	r0, r0, #1
    1276:	9001      	str	r0, [sp, #4]
    1278:	f8d8 0008 	ldr.w	r0, [r8, #8]
    127c:	9901      	ldr	r1, [sp, #4]
    127e:	2f64      	cmp	r7, #100	; 0x64
    1280:	4408      	add	r0, r1
    1282:	d337      	bcc.n	12f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1284:	4b5f      	ldr	r3, [pc, #380]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    1286:	2200      	movs	r2, #0
    1288:	1bdb      	subs	r3, r3, r7
    128a:	eb72 0102 	sbcs.w	r1, r2, r2
    128e:	d331      	bcc.n	12f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1290:	f8d8 1004 	ldr.w	r1, [r8, #4]
    1294:	1a41      	subs	r1, r0, r1
    1296:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    129a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    129e:	d229      	bcs.n	12f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    12a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    12a4:	6060      	str	r0, [r4, #4]
    12a6:	4856      	ldr	r0, [pc, #344]	; (1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>)
    12a8:	f884 a00c 	strb.w	sl, [r4, #12]
    12ac:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    12b0:	46ea      	mov	sl, sp
    12b2:	2d20      	cmp	r5, #32
    12b4:	bf1c      	itt	ne
    12b6:	4954      	ldrne	r1, [pc, #336]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    12b8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    12bc:	d04a      	beq.n	1354 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    12be:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    12c2:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    12c6:	6860      	ldr	r0, [r4, #4]
    12c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    12cc:	4621      	mov	r1, r4
    12ce:	1a10      	subs	r0, r2, r0
    12d0:	0200      	lsls	r0, r0, #8
    12d2:	17c2      	asrs	r2, r0, #31
    12d4:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    12d8:	f108 0604 	add.w	r6, r8, #4
    12dc:	1200      	asrs	r0, r0, #8
    12de:	d426      	bmi.n	132e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10e>
    12e0:	8970      	ldrh	r0, [r6, #10]
    12e2:	b388      	cbz	r0, 1348 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x128>
    12e4:	8948      	ldrh	r0, [r1, #10]
    12e6:	b148      	cbz	r0, 12fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xdc>
    12e8:	e034      	b.n	1354 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    12ea:	f640 3165 	movw	r1, #2917	; 0xb65
    12ee:	2070      	movs	r0, #112	; 0x70
    12f0:	f002 f96a 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12f4:	b007      	add	sp, #28
    12f6:	2001      	movs	r0, #1
    12f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12fc:	4620      	mov	r0, r4
    12fe:	f7ff fe51 	bl	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
    1302:	aa05      	add	r2, sp, #20
    1304:	a904      	add	r1, sp, #16
    1306:	f001 fe19 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    130a:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    130e:	2800      	cmp	r0, #0
    1310:	bfcc      	ite	gt
    1312:	2001      	movgt	r0, #1
    1314:	2000      	movle	r0, #0
    1316:	f100 0133 	add.w	r1, r0, #51	; 0x33
    131a:	9804      	ldr	r0, [sp, #16]
    131c:	6832      	ldr	r2, [r6, #0]
    131e:	1a10      	subs	r0, r2, r0
    1320:	0200      	lsls	r0, r0, #8
    1322:	17c2      	asrs	r2, r0, #31
    1324:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1328:	1200      	asrs	r0, r0, #8
    132a:	4288      	cmp	r0, r1
    132c:	da12      	bge.n	1354 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    132e:	f88a 5000 	strb.w	r5, [sl]
    1332:	f898 1010 	ldrb.w	r1, [r8, #16]
    1336:	7b20      	ldrb	r0, [r4, #12]
    1338:	4281      	cmp	r1, r0
    133a:	d806      	bhi.n	134a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    133c:	9802      	ldr	r0, [sp, #8]
    133e:	6060      	str	r0, [r4, #4]
    1340:	b007      	add	sp, #28
    1342:	2003      	movs	r0, #3
    1344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1348:	e004      	b.n	1354 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    134a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    134e:	7845      	ldrb	r5, [r0, #1]
    1350:	2d20      	cmp	r5, #32
    1352:	d1b4      	bne.n	12be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x9e>
    1354:	4d2a      	ldr	r5, [pc, #168]	; (1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>)
    1356:	68e8      	ldr	r0, [r5, #12]
    1358:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    135c:	d016      	beq.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    135e:	f001 fa8f 	bl	2880 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1362:	68e9      	ldr	r1, [r5, #12]
    1364:	1a08      	subs	r0, r1, r0
    1366:	0200      	lsls	r0, r0, #8
    1368:	17c1      	asrs	r1, r0, #31
    136a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    136e:	1200      	asrs	r0, r0, #8
    1370:	2802      	cmp	r0, #2
    1372:	dc05      	bgt.n	1380 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x160>
    1374:	9802      	ldr	r0, [sp, #8]
    1376:	6060      	str	r0, [r4, #4]
    1378:	b007      	add	sp, #28
    137a:	2002      	movs	r0, #2
    137c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1380:	2005      	movs	r0, #5
    1382:	f001 fccb 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    138a:	60e8      	str	r0, [r5, #12]
    138c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    1390:	f89d 2000 	ldrb.w	r2, [sp]
    1394:	2120      	movs	r1, #32
    1396:	2a20      	cmp	r2, #32
    1398:	bf13      	iteet	ne
    139a:	2005      	movne	r0, #5
    139c:	eb05 0083 	addeq.w	r0, r5, r3, lsl #2
    13a0:	f890 0024 	ldrbeq.w	r0, [r0, #36]	; 0x24
    13a4:	f7ff f8aa 	blne	4fc <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>
    13a8:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
    13ac:	4916      	ldr	r1, [pc, #88]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    13ae:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    13b2:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    13b6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    13ba:	7048      	strb	r0, [r1, #1]
    13bc:	6868      	ldr	r0, [r5, #4]
    13be:	4438      	add	r0, r7
    13c0:	6068      	str	r0, [r5, #4]
    13c2:	2001      	movs	r0, #1
    13c4:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
    13c8:	7f68      	ldrb	r0, [r5, #29]
    13ca:	2801      	cmp	r0, #1
    13cc:	d10a      	bne.n	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
    13ce:	6828      	ldr	r0, [r5, #0]
    13d0:	6969      	ldr	r1, [r5, #20]
    13d2:	7840      	ldrb	r0, [r0, #1]
    13d4:	2801      	cmp	r0, #1
    13d6:	d811      	bhi.n	13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    13d8:	b180      	cbz	r0, 13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    13da:	1a08      	subs	r0, r1, r0
    13dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13e0:	f001 faee 	bl	29c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    13e4:	f89d 0000 	ldrb.w	r0, [sp]
    13e8:	2820      	cmp	r0, #32
    13ea:	d003      	beq.n	13f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c>
    13ec:	4807      	ldr	r0, [pc, #28]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    13ee:	7840      	ldrb	r0, [r0, #1]
    13f0:	f002 f9ba 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    13f4:	b007      	add	sp, #28
    13f6:	2000      	movs	r0, #0
    13f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13fc:	2001      	movs	r0, #1
    13fe:	e7ec      	b.n	13da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x52>
    1400:	20000d1c 	.word	0x20000d1c
    1404:	07a11fff 	.word	0x07a11fff
    1408:	20000c9c 	.word	0x20000c9c
    140c:	20000010 	.word	0x20000010

00001410 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1410:	4602      	mov	r2, r0
    1412:	f8df c054 	ldr.w	ip, [pc, #84]	; 1468 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    1416:	b510      	push	{r4, lr}
    1418:	2300      	movs	r3, #0
    141a:	ebbc 0202 	subs.w	r2, ip, r2
    141e:	4408      	add	r0, r1
    1420:	eb73 0203 	sbcs.w	r2, r3, r3
    1424:	d204      	bcs.n	1430 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    1426:	f240 51f5 	movw	r1, #1525	; 0x5f5
    142a:	2070      	movs	r0, #112	; 0x70
    142c:	f002 f8cc 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1430:	4a0e      	ldr	r2, [pc, #56]	; (146c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1432:	4291      	cmp	r1, r2
    1434:	dd04      	ble.n	1440 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    1436:	f240 51f6 	movw	r1, #1526	; 0x5f6
    143a:	2070      	movs	r0, #112	; 0x70
    143c:	f002 f8c4 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1440:	4a0b      	ldr	r2, [pc, #44]	; (1470 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1442:	4291      	cmp	r1, r2
    1444:	da04      	bge.n	1450 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    1446:	f240 51f7 	movw	r1, #1527	; 0x5f7
    144a:	2070      	movs	r0, #112	; 0x70
    144c:	f002 f8bc 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1450:	4908      	ldr	r1, [pc, #32]	; (1474 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    1452:	4288      	cmp	r0, r1
    1454:	bfa8      	it	ge
    1456:	4908      	ldrge	r1, [pc, #32]	; (1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    1458:	da03      	bge.n	1462 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    145a:	2800      	cmp	r0, #0
    145c:	bfb4      	ite	lt
    145e:	4905      	ldrlt	r1, [pc, #20]	; (1474 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    1460:	bd10      	popge	{r4, pc}
    1462:	1840      	adds	r0, r0, r1
    1464:	bd10      	pop	{r4, pc}
    1466:	0000      	.short	0x0000
    1468:	1e847fff 	.word	0x1e847fff
    146c:	07a12000 	.word	0x07a12000
    1470:	f85ee000 	.word	0xf85ee000
    1474:	1e848000 	.word	0x1e848000
    1478:	e17b8000 	.word	0xe17b8000

0000147c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    147c:	4a10      	ldr	r2, [pc, #64]	; (14c0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    147e:	1a0b      	subs	r3, r1, r0
    1480:	f102 0c01 	add.w	ip, r2, #1
    1484:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1488:	bf3c      	itt	cc
    148a:	4618      	movcc	r0, r3
    148c:	4770      	bxcc	lr
    148e:	b510      	push	{r4, lr}
    1490:	1a44      	subs	r4, r0, r1
    1492:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1496:	bf3c      	itt	cc
    1498:	4618      	movcc	r0, r3
    149a:	bd10      	popcc	{r4, pc}
    149c:	429a      	cmp	r2, r3
    149e:	d203      	bcs.n	14a8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    14a0:	1a10      	subs	r0, r2, r0
    14a2:	4408      	add	r0, r1
    14a4:	1c40      	adds	r0, r0, #1
    14a6:	bd10      	pop	{r4, pc}
    14a8:	42a2      	cmp	r2, r4
    14aa:	d204      	bcs.n	14b6 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    14ac:	1a51      	subs	r1, r2, r1
    14ae:	4408      	add	r0, r1
    14b0:	1c40      	adds	r0, r0, #1
    14b2:	4240      	negs	r0, r0
    14b4:	bd10      	pop	{r4, pc}
    14b6:	f640 21f4 	movw	r1, #2804	; 0xaf4
    14ba:	2070      	movs	r0, #112	; 0x70
    14bc:	f002 f884 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14c0:	1e847fff 	.word	0x1e847fff

000014c4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    14c4:	490b      	ldr	r1, [pc, #44]	; (14f4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    14c6:	b510      	push	{r4, lr}
    14c8:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
    14cc:	2820      	cmp	r0, #32
    14ce:	d00c      	beq.n	14ea <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    14d0:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
    14d4:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
    14d8:	4a07      	ldr	r2, [pc, #28]	; (14f8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    14da:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    14de:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    14e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    14e6:	2104      	movs	r1, #4
    14e8:	4710      	bx	r2
    14ea:	f640 01a6 	movw	r1, #2214	; 0x8a6
    14ee:	2070      	movs	r0, #112	; 0x70
    14f0:	f002 f86a 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14f4:	20000d1c 	.word	0x20000d1c
    14f8:	20000a1c 	.word	0x20000a1c

000014fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    14fc:	b570      	push	{r4, r5, r6, lr}
    14fe:	4e64      	ldr	r6, [pc, #400]	; (1690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    1500:	4964      	ldr	r1, [pc, #400]	; (1694 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x198>)
    1502:	2501      	movs	r5, #1
    1504:	f506 7440 	add.w	r4, r6, #768	; 0x300
    1508:	2808      	cmp	r0, #8
    150a:	d27c      	bcs.n	1606 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    150c:	e8df f000 	tbb	[pc, r0]
    1510:	a28f5e04 	.word	0xa28f5e04
    1514:	aca745ba 	.word	0xaca745ba
    1518:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    151c:	b918      	cbnz	r0, 1526 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    151e:	f001 fed7 	bl	32d0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1522:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1526:	8b60      	ldrh	r0, [r4, #26]
    1528:	b110      	cbz	r0, 1530 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    152a:	f001 ffe9 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    152e:	b188      	cbz	r0, 1554 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1530:	f7ff fca2 	bl	e78 <CONFIG_ISR_STACK_SIZE+0x678>
    1534:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1538:	68e1      	ldr	r1, [r4, #12]
    153a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    153e:	d005      	beq.n	154c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1540:	2301      	movs	r3, #1
    1542:	2203      	movs	r2, #3
    1544:	2005      	movs	r0, #5
    1546:	f001 fb21 	bl	2b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    154a:	b140      	cbz	r0, 155e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    154c:	7f60      	ldrb	r0, [r4, #29]
    154e:	2801      	cmp	r0, #1
    1550:	d00a      	beq.n	1568 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1552:	e014      	b.n	157e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x82>
    1554:	f640 015e 	movw	r1, #2142	; 0x85e
    1558:	2070      	movs	r0, #112	; 0x70
    155a:	f002 f835 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    155e:	f640 0163 	movw	r1, #2147	; 0x863
    1562:	2070      	movs	r0, #112	; 0x70
    1564:	f002 f830 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1568:	6820      	ldr	r0, [r4, #0]
    156a:	6961      	ldr	r1, [r4, #20]
    156c:	7840      	ldrb	r0, [r0, #1]
    156e:	2801      	cmp	r0, #1
    1570:	d811      	bhi.n	1596 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x9a>
    1572:	b180      	cbz	r0, 1596 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x9a>
    1574:	1a08      	subs	r0, r1, r0
    1576:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    157a:	f001 fa21 	bl	29c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    157e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1582:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    1586:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    158a:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    158e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1592:	2101      	movs	r1, #1
    1594:	4710      	bx	r2
    1596:	2001      	movs	r0, #1
    1598:	e7ec      	b.n	1574 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    159a:	f7ff fc6d 	bl	e78 <CONFIG_ISR_STACK_SIZE+0x678>
    159e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    15a2:	60e0      	str	r0, [r4, #12]
    15a4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    15a8:	b158      	cbz	r0, 15c2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc6>
    15aa:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    15ae:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    15b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    15b6:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    15ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    15be:	2106      	movs	r1, #6
    15c0:	4710      	bx	r2
    15c2:	f640 0173 	movw	r1, #2163	; 0x873
    15c6:	2070      	movs	r0, #112	; 0x70
    15c8:	f001 fffe 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15cc:	f7ff fc54 	bl	e78 <CONFIG_ISR_STACK_SIZE+0x678>
    15d0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    15d4:	f001 ff94 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    15d8:	b118      	cbz	r0, 15e2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe6>
    15da:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    15de:	b128      	cbz	r0, 15ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf0>
    15e0:	e008      	b.n	15f4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    15e2:	f640 0182 	movw	r1, #2178	; 0x882
    15e6:	2070      	movs	r0, #112	; 0x70
    15e8:	f001 ffee 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15ec:	f001 fe70 	bl	32d0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    15f0:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    15f4:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    15f8:	b168      	cbz	r0, 1616 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    15fa:	4927      	ldr	r1, [pc, #156]	; (1698 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x19c>)
    15fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1600:	6008      	str	r0, [r1, #0]
    1602:	2005      	movs	r0, #5
    1604:	e000      	b.n	1608 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1606:	e03d      	b.n	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>
    1608:	f001 fb88 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    160c:	f001 feac 	bl	3368 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1610:	2000      	movs	r0, #0
    1612:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    1616:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    161a:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    161e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1622:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    162a:	2100      	movs	r1, #0
    162c:	4710      	bx	r2
    162e:	f001 fc1b 	bl	2e68 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1632:	8b60      	ldrh	r0, [r4, #26]
    1634:	b110      	cbz	r0, 163c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x140>
    1636:	f001 ff63 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    163a:	b130      	cbz	r0, 164a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x14e>
    163c:	4817      	ldr	r0, [pc, #92]	; (169c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>)
    163e:	7800      	ldrb	r0, [r0, #0]
    1640:	2803      	cmp	r0, #3
    1642:	bf08      	it	eq
    1644:	f884 5021 	strbeq.w	r5, [r4, #33]	; 0x21
    1648:	bd70      	pop	{r4, r5, r6, pc}
    164a:	f640 018c 	movw	r1, #2188	; 0x88c
    164e:	2070      	movs	r0, #112	; 0x70
    1650:	f001 ffba 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1654:	4812      	ldr	r0, [pc, #72]	; (16a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a4>)
    1656:	6005      	str	r5, [r0, #0]
    1658:	6888      	ldr	r0, [r1, #8]
    165a:	6005      	str	r5, [r0, #0]
    165c:	bd70      	pop	{r4, r5, r6, pc}
    165e:	7808      	ldrb	r0, [r1, #0]
    1660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1664:	f002 b880 	b.w	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1668:	f7ff fc06 	bl	e78 <CONFIG_ISR_STACK_SIZE+0x678>
    166c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1670:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    1674:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1678:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    167c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1680:	2105      	movs	r1, #5
    1682:	4710      	bx	r2
    1684:	f640 019e 	movw	r1, #2206	; 0x89e
    1688:	2070      	movs	r0, #112	; 0x70
    168a:	f001 ff9d 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    168e:	0000      	.short	0x0000
    1690:	20000a1c 	.word	0x20000a1c
    1694:	20000010 	.word	0x20000010
    1698:	4001f508 	.word	0x4001f508
    169c:	20000012 	.word	0x20000012
    16a0:	40000508 	.word	0x40000508

000016a4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    16a4:	4803      	ldr	r0, [pc, #12]	; (16b4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    16a6:	b510      	push	{r4, lr}
    16a8:	7840      	ldrb	r0, [r0, #1]
    16aa:	f00d f85d 	bl	e768 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    16ae:	b280      	uxth	r0, r0
    16b0:	bd10      	pop	{r4, pc}
    16b2:	0000      	.short	0x0000
    16b4:	20000012 	.word	0x20000012

000016b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    16b8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16bc:	48fe      	ldr	r0, [pc, #1016]	; (1ab8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>)
    16be:	b095      	sub	sp, #84	; 0x54
    16c0:	4688      	mov	r8, r1
    16c2:	6800      	ldr	r0, [r0, #0]
    16c4:	4cfd      	ldr	r4, [pc, #1012]	; (1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    16c6:	05c0      	lsls	r0, r0, #23
    16c8:	0dc0      	lsrs	r0, r0, #23
    16ca:	d00e      	beq.n	16ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    16cc:	3810      	subs	r0, #16
    16ce:	b240      	sxtb	r0, r0
    16d0:	2800      	cmp	r0, #0
    16d2:	bfb8      	it	lt
    16d4:	f000 000f 	andlt.w	r0, r0, #15
    16d8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    16dc:	bfac      	ite	ge
    16de:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    16e2:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    16e6:	0940      	lsrs	r0, r0, #5
    16e8:	d00d      	beq.n	1706 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    16ea:	f898 0000 	ldrb.w	r0, [r8]
    16ee:	f04f 0b00 	mov.w	fp, #0
    16f2:	2800      	cmp	r0, #0
    16f4:	bf18      	it	ne
    16f6:	2801      	cmpne	r0, #1
    16f8:	d018      	beq.n	172c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    16fa:	f240 714c 	movw	r1, #1868	; 0x74c
    16fe:	f04f 0070 	mov.w	r0, #112	; 0x70
    1702:	f001 ff61 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1706:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    170a:	f04f 0b01 	mov.w	fp, #1
    170e:	2820      	cmp	r0, #32
    1710:	d007      	beq.n	1722 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1712:	f898 0000 	ldrb.w	r0, [r8]
    1716:	b148      	cbz	r0, 172c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1718:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    171c:	2070      	movs	r0, #112	; 0x70
    171e:	f001 ff53 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1722:	f240 7145 	movw	r1, #1861	; 0x745
    1726:	2070      	movs	r0, #112	; 0x70
    1728:	f001 ff4e 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    172c:	4de4      	ldr	r5, [pc, #912]	; (1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    172e:	b125      	cbz	r5, 173a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1730:	2100      	movs	r1, #0
    1732:	f240 704f 	movw	r0, #1871	; 0x74f
    1736:	f3af 8000 	nop.w
    173a:	9815      	ldr	r0, [sp, #84]	; 0x54
    173c:	49e1      	ldr	r1, [pc, #900]	; (1ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    173e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1742:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1746:	f04f 0901 	mov.w	r9, #1
    174a:	9001      	str	r0, [sp, #4]
    174c:	b125      	cbz	r5, 1758 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa0>
    174e:	2100      	movs	r1, #0
    1750:	f240 7057 	movw	r0, #1879	; 0x757
    1754:	f3af 8000 	nop.w
    1758:	f1b9 0f00 	cmp.w	r9, #0
    175c:	d00a      	beq.n	1774 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xbc>
    175e:	bf00      	nop
    1760:	f894 6032 	ldrb.w	r6, [r4, #50]	; 0x32
    1764:	f04f 0a00 	mov.w	sl, #0
    1768:	f884 a02f 	strb.w	sl, [r4, #47]	; 0x2f
    176c:	f1bb 0f00 	cmp.w	fp, #0
    1770:	d007      	beq.n	1782 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xca>
    1772:	e02e      	b.n	17d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11a>
    1774:	48d4      	ldr	r0, [pc, #848]	; (1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    1776:	2800      	cmp	r0, #0
    1778:	bf18      	it	ne
    177a:	f3af 8000 	nopne.w
    177e:	b662      	cpsie	i
    1780:	e7ee      	b.n	1760 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
    1782:	4637      	mov	r7, r6
    1784:	2001      	movs	r0, #1
    1786:	ea20 0607 	bic.w	r6, r0, r7
    178a:	48d0      	ldr	r0, [pc, #832]	; (1acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    178c:	2240      	movs	r2, #64	; 0x40
    178e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1792:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1796:	f002 f869 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    179a:	b125      	cbz	r5, 17a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xee>
    179c:	2100      	movs	r1, #0
    179e:	f240 50b9 	movw	r0, #1465	; 0x5b9
    17a2:	f3af 8000 	nop.w
    17a6:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    17aa:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    17ae:	6a49      	ldr	r1, [r1, #36]	; 0x24
    17b0:	6241      	str	r1, [r0, #36]	; 0x24
    17b2:	b125      	cbz	r5, 17be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x106>
    17b4:	2100      	movs	r1, #0
    17b6:	f240 50bd 	movw	r0, #1469	; 0x5bd
    17ba:	f3af 8000 	nop.w
    17be:	b125      	cbz	r5, 17ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x112>
    17c0:	2100      	movs	r1, #0
    17c2:	f240 7061 	movw	r0, #1889	; 0x761
    17c6:	f3af 8000 	nop.w
    17ca:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17ce:	2800      	cmp	r0, #0
    17d0:	d1bc      	bne.n	174c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    17d2:	b125      	cbz	r5, 17de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    17d4:	2100      	movs	r1, #0
    17d6:	f240 706b 	movw	r0, #1899	; 0x76b
    17da:	f3af 8000 	nop.w
    17de:	f001 f84f 	bl	2880 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    17e2:	4607      	mov	r7, r0
    17e4:	a802      	add	r0, sp, #8
    17e6:	9008      	str	r0, [sp, #32]
    17e8:	f898 0000 	ldrb.w	r0, [r8]
    17ec:	2800      	cmp	r0, #0
    17ee:	f898 000b 	ldrb.w	r0, [r8, #11]
    17f2:	f88d 0015 	strb.w	r0, [sp, #21]
    17f6:	f898 100a 	ldrb.w	r1, [r8, #10]
    17fa:	f88d 1014 	strb.w	r1, [sp, #20]
    17fe:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1802:	f8ad 1012 	strh.w	r1, [sp, #18]
    1806:	9000      	str	r0, [sp, #0]
    1808:	f8d8 3004 	ldr.w	r3, [r8, #4]
    180c:	d05d      	beq.n	18ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x212>
    180e:	2200      	movs	r2, #0
    1810:	9808      	ldr	r0, [sp, #32]
    1812:	f7fe fe09 	bl	428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1816:	9706      	str	r7, [sp, #24]
    1818:	6820      	ldr	r0, [r4, #0]
    181a:	aa0f      	add	r2, sp, #60	; 0x3c
    181c:	a909      	add	r1, sp, #36	; 0x24
    181e:	f890 9003 	ldrb.w	r9, [r0, #3]
    1822:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1826:	f001 fb89 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    182a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    182e:	2820      	cmp	r0, #32
    1830:	d051      	beq.n	18d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x21e>
    1832:	6960      	ldr	r0, [r4, #20]
    1834:	4448      	add	r0, r9
    1836:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    183a:	bf00      	nop
    183c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1840:	1a89      	subs	r1, r1, r2
    1842:	9002      	str	r0, [sp, #8]
    1844:	4408      	add	r0, r1
    1846:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    184a:	9003      	str	r0, [sp, #12]
    184c:	4631      	mov	r1, r6
    184e:	9808      	ldr	r0, [sp, #32]
    1850:	f7fe fe90 	bl	574 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x128>
    1854:	f898 000b 	ldrb.w	r0, [r8, #11]
    1858:	9000      	str	r0, [sp, #0]
    185a:	46b9      	mov	r9, r7
    185c:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1860:	a810      	add	r0, sp, #64	; 0x40
    1862:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1866:	f8d8 200c 	ldr.w	r2, [r8, #12]
    186a:	f7fe fddd 	bl	428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    186e:	9802      	ldr	r0, [sp, #8]
    1870:	9a03      	ldr	r2, [sp, #12]
    1872:	eba0 0009 	sub.w	r0, r0, r9
    1876:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    187a:	eba2 0209 	sub.w	r2, r2, r9
    187e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1880:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1884:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1888:	d201      	bcs.n	188e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d6>
    188a:	4291      	cmp	r1, r2
    188c:	d209      	bcs.n	18a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ea>
    188e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1892:	1a89      	subs	r1, r1, r2
    1894:	1878      	adds	r0, r7, r1
    1896:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    189a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    189e:	e9cd 2002 	strd	r2, r0, [sp, #8]
    18a2:	b125      	cbz	r5, 18ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f6>
    18a4:	2100      	movs	r1, #0
    18a6:	f240 7072 	movw	r0, #1906	; 0x772
    18aa:	f3af 8000 	nop.w
    18ae:	4a87      	ldr	r2, [pc, #540]	; (1acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    18b0:	4639      	mov	r1, r7
    18b2:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    18b6:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    18ba:	a802      	add	r0, sp, #8
    18bc:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    18c0:	2a01      	cmp	r2, #1
    18c2:	bf18      	it	ne
    18c4:	2a02      	cmpne	r2, #2
    18c6:	d01d      	beq.n	1904 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24c>
    18c8:	e05c      	b.n	1984 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    18ca:	f8d8 200c 	ldr.w	r2, [r8, #12]
    18ce:	9808      	ldr	r0, [sp, #32]
    18d0:	f7fe fdaa 	bl	428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    18d4:	e7e5      	b.n	18a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ea>
    18d6:	9806      	ldr	r0, [sp, #24]
    18d8:	4448      	add	r0, r9
    18da:	f100 0904 	add.w	r9, r0, #4
    18de:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    18e2:	b128      	cbz	r0, 18f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x238>
    18e4:	f001 fe0c 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    18e8:	2800      	cmp	r0, #0
    18ea:	bf08      	it	eq
    18ec:	f109 0932 	addeq.w	r9, r9, #50	; 0x32
    18f0:	4877      	ldr	r0, [pc, #476]	; (1ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    18f2:	7841      	ldrb	r1, [r0, #1]
    18f4:	9809      	ldr	r0, [sp, #36]	; 0x24
    18f6:	4281      	cmp	r1, r0
    18f8:	bf84      	itt	hi
    18fa:	1a08      	subhi	r0, r1, r0
    18fc:	4481      	addhi	r9, r0
    18fe:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
    1902:	e79b      	b.n	183c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x184>
    1904:	6822      	ldr	r2, [r4, #0]
    1906:	f8dd c00c 	ldr.w	ip, [sp, #12]
    190a:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 1ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>
    190e:	7893      	ldrb	r3, [r2, #2]
    1910:	9a02      	ldr	r2, [sp, #8]
    1912:	1a52      	subs	r2, r2, r1
    1914:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1918:	ebac 0101 	sub.w	r1, ip, r1
    191c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1920:	4293      	cmp	r3, r2
    1922:	bf98      	it	ls
    1924:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    1928:	d264      	bcs.n	19f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    192a:	458a      	cmp	sl, r1
    192c:	d362      	bcc.n	19f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    192e:	f04f 0a01 	mov.w	sl, #1
    1932:	ab10      	add	r3, sp, #64	; 0x40
    1934:	aa0f      	add	r2, sp, #60	; 0x3c
    1936:	4631      	mov	r1, r6
    1938:	f7fe ff66 	bl	808 <CONFIG_ISR_STACK_SIZE+0x8>
    193c:	2800      	cmp	r0, #0
    193e:	d061      	beq.n	1a04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    1940:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    1944:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1948:	4633      	mov	r3, r6
    194a:	428a      	cmp	r2, r1
    194c:	d05e      	beq.n	1a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    194e:	2005      	movs	r0, #5
    1950:	f7fe fdd4 	bl	4fc <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>
    1954:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    1958:	7048      	strb	r0, [r1, #1]
    195a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    195e:	2820      	cmp	r0, #32
    1960:	bf03      	ittte	eq
    1962:	eb04 0086 	addeq.w	r0, r4, r6, lsl #2
    1966:	f880 9024 	strbeq.w	r9, [r0, #36]	; 0x24
    196a:	f880 a027 	strbeq.w	sl, [r0, #39]	; 0x27
    196e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1972:	bf18      	it	ne
    1974:	f880 9001 	strbne.w	r9, [r0, #1]
    1978:	4632      	mov	r2, r6
    197a:	4649      	mov	r1, r9
    197c:	f05f 0003 	movs.w	r0, #3
    1980:	f7ff fb4e 	bl	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    1984:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1988:	f890 7027 	ldrb.w	r7, [r0, #39]	; 0x27
    198c:	b125      	cbz	r5, 1998 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    198e:	2100      	movs	r1, #0
    1990:	f240 7079 	movw	r0, #1913	; 0x779
    1994:	f3af 8000 	nop.w
    1998:	484f      	ldr	r0, [pc, #316]	; (1ad8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    199a:	2800      	cmp	r0, #0
    199c:	bf18      	it	ne
    199e:	f3af 8000 	nopne.w
    19a2:	f3ef 8910 	mrs	r9, PRIMASK
    19a6:	b672      	cpsid	i
    19a8:	b125      	cbz	r5, 19b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    19aa:	2100      	movs	r1, #0
    19ac:	f240 707f 	movw	r0, #1919	; 0x77f
    19b0:	f3af 8000 	nop.w
    19b4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    19b8:	2800      	cmp	r0, #0
    19ba:	f47f aec7 	bne.w	174c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    19be:	b125      	cbz	r5, 19ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    19c0:	2100      	movs	r1, #0
    19c2:	f240 7087 	movw	r0, #1927	; 0x787
    19c6:	f3af 8000 	nop.w
    19ca:	f10d 0e04 	add.w	lr, sp, #4
    19ce:	f1ba 0f00 	cmp.w	sl, #0
    19d2:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    19d6:	f100 0004 	add.w	r0, r0, #4
    19da:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    19de:	d041      	beq.n	1a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ac>
    19e0:	b125      	cbz	r5, 19ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    19e2:	2100      	movs	r1, #0
    19e4:	f240 7094 	movw	r0, #1940	; 0x794
    19e8:	f3af 8000 	nop.w
    19ec:	f1bb 0f00 	cmp.w	fp, #0
    19f0:	d12b      	bne.n	1a4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    19f2:	e015      	b.n	1a20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    19f4:	4632      	mov	r2, r6
    19f6:	4649      	mov	r1, r9
    19f8:	2004      	movs	r0, #4
    19fa:	f7ff fb11 	bl	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    19fe:	f04f 0a01 	mov.w	sl, #1
    1a02:	e7bf      	b.n	1984 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1a04:	4632      	mov	r2, r6
    1a06:	4649      	mov	r1, r9
    1a08:	2004      	movs	r0, #4
    1a0a:	e7b9      	b.n	1980 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>
    1a0c:	2920      	cmp	r1, #32
    1a0e:	bf19      	ittee	ne
    1a10:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1a14:	7840      	ldrbne	r0, [r0, #1]
    1a16:	eb04 0086 	addeq.w	r0, r4, r6, lsl #2
    1a1a:	f890 0024 	ldrbeq.w	r0, [r0, #36]	; 0x24
    1a1e:	e799      	b.n	1954 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29c>
    1a20:	b19f      	cbz	r7, 1a4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1a22:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1a26:	2820      	cmp	r0, #32
    1a28:	d10f      	bne.n	1a4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1a2a:	b125      	cbz	r5, 1a36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    1a2c:	2100      	movs	r1, #0
    1a2e:	f240 7099 	movw	r0, #1945	; 0x799
    1a32:	f3af 8000 	nop.w
    1a36:	4631      	mov	r1, r6
    1a38:	2002      	movs	r0, #2
    1a3a:	f7ff fb21 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    1a3e:	b920      	cbnz	r0, 1a4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1a40:	f898 0000 	ldrb.w	r0, [r8]
    1a44:	b3b8      	cbz	r0, 1ab6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fe>
    1a46:	2801      	cmp	r0, #1
    1a48:	d05d      	beq.n	1b06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44e>
    1a4a:	b125      	cbz	r5, 1a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39e>
    1a4c:	2100      	movs	r1, #0
    1a4e:	f240 70b6 	movw	r0, #1974	; 0x7b6
    1a52:	f3af 8000 	nop.w
    1a56:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    1a5a:	2001      	movs	r0, #1
    1a5c:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    1a60:	f04f 0a01 	mov.w	sl, #1
    1a64:	b125      	cbz	r5, 1a70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b8>
    1a66:	2100      	movs	r1, #0
    1a68:	f240 70bf 	movw	r0, #1983	; 0x7bf
    1a6c:	f3af 8000 	nop.w
    1a70:	f1b9 0f00 	cmp.w	r9, #0
    1a74:	d050      	beq.n	1b18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x460>
    1a76:	b125      	cbz	r5, 1a82 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ca>
    1a78:	2100      	movs	r1, #0
    1a7a:	f240 70c3 	movw	r0, #1987	; 0x7c3
    1a7e:	f3af 8000 	nop.w
    1a82:	f1ba 0f00 	cmp.w	sl, #0
    1a86:	d011      	beq.n	1aac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1a88:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    1a8c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    1a90:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    1a94:	2820      	cmp	r0, #32
    1a96:	d009      	beq.n	1aac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1a98:	b125      	cbz	r5, 1aa4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    1a9a:	2100      	movs	r1, #0
    1a9c:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1aa0:	f3af 8000 	nop.w
    1aa4:	480d      	ldr	r0, [pc, #52]	; (1adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    1aa6:	7840      	ldrb	r0, [r0, #1]
    1aa8:	f001 fe5e 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1aac:	b1d5      	cbz	r5, 1ae4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x42c>
    1aae:	2100      	movs	r1, #0
    1ab0:	f240 70cf 	movw	r0, #1999	; 0x7cf
    1ab4:	e014      	b.n	1ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    1ab6:	e019      	b.n	1aec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    1ab8:	e000ed04 	.word	0xe000ed04
    1abc:	20000d1c 	.word	0x20000d1c
    1ac0:	00000000 	.word	0x00000000
    1ac4:	20000a1c 	.word	0x20000a1c
    1ac8:	00000000 	.word	0x00000000
    1acc:	20000c9c 	.word	0x20000c9c
    1ad0:	20000012 	.word	0x20000012
    1ad4:	003fffff 	.word	0x003fffff
    1ad8:	00000000 	.word	0x00000000
    1adc:	20000010 	.word	0x20000010
    1ae0:	f3af 8000 	nop.w
    1ae4:	b017      	add	sp, #92	; 0x5c
    1ae6:	4650      	mov	r0, sl
    1ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1aec:	b125      	cbz	r5, 1af8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x440>
    1aee:	2100      	movs	r1, #0
    1af0:	f240 70a1 	movw	r0, #1953	; 0x7a1
    1af4:	f3af 8000 	nop.w
    1af8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    1afc:	2004      	movs	r0, #4
    1afe:	9915      	ldr	r1, [sp, #84]	; 0x54
    1b00:	f7ff fa8e 	bl	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    1b04:	e7ac      	b.n	1a60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    1b06:	2d00      	cmp	r5, #0
    1b08:	f43f ae20 	beq.w	174c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1b0c:	2100      	movs	r1, #0
    1b0e:	f240 70ac 	movw	r0, #1964	; 0x7ac
    1b12:	f3af 8000 	nop.w
    1b16:	e619      	b.n	174c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1b18:	4803      	ldr	r0, [pc, #12]	; (1b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x470>)
    1b1a:	2800      	cmp	r0, #0
    1b1c:	bf18      	it	ne
    1b1e:	f3af 8000 	nopne.w
    1b22:	b662      	cpsie	i
    1b24:	e7a7      	b.n	1a76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3be>
    1b26:	0000      	.short	0x0000
    1b28:	00000000 	.word	0x00000000

00001b2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b30:	4606      	mov	r6, r0
    1b32:	48e4      	ldr	r0, [pc, #912]	; (1ec4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x178>)
    1b34:	b095      	sub	sp, #84	; 0x54
    1b36:	6800      	ldr	r0, [r0, #0]
    1b38:	05c0      	lsls	r0, r0, #23
    1b3a:	0dc0      	lsrs	r0, r0, #23
    1b3c:	d011      	beq.n	1b62 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    1b3e:	3810      	subs	r0, #16
    1b40:	b240      	sxtb	r0, r0
    1b42:	2800      	cmp	r0, #0
    1b44:	bfb8      	it	lt
    1b46:	f000 000f 	andlt.w	r0, r0, #15
    1b4a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1b4e:	bfac      	ite	ge
    1b50:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1b54:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1b58:	0940      	lsrs	r0, r0, #5
    1b5a:	bf08      	it	eq
    1b5c:	f04f 0b01 	moveq.w	fp, #1
    1b60:	d001      	beq.n	1b66 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    1b62:	f04f 0b00 	mov.w	fp, #0
    1b66:	7830      	ldrb	r0, [r6, #0]
    1b68:	2800      	cmp	r0, #0
    1b6a:	f04f 0000 	mov.w	r0, #0
    1b6e:	bf1c      	itt	ne
    1b70:	b015      	addne	sp, #84	; 0x54
    1b72:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b76:	f8df 8350 	ldr.w	r8, [pc, #848]	; 1ec8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>
    1b7a:	4dd4      	ldr	r5, [pc, #848]	; (1ecc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>)
    1b7c:	f04f 0900 	mov.w	r9, #0
    1b80:	f8cd 0030 	str.w	r0, [sp, #48]	; 0x30
    1b84:	f1b8 0f00 	cmp.w	r8, #0
    1b88:	d004      	beq.n	1b94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    1b8a:	2100      	movs	r1, #0
    1b8c:	f240 6044 	movw	r0, #1604	; 0x644
    1b90:	f3af 8000 	nop.w
    1b94:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
    1b98:	f885 902f 	strb.w	r9, [r5, #47]	; 0x2f
    1b9c:	f04f 0a00 	mov.w	sl, #0
    1ba0:	f1b8 0f00 	cmp.w	r8, #0
    1ba4:	d004      	beq.n	1bb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    1ba6:	2100      	movs	r1, #0
    1ba8:	f240 6049 	movw	r0, #1609	; 0x649
    1bac:	f3af 8000 	nop.w
    1bb0:	f1bb 0f00 	cmp.w	fp, #0
    1bb4:	d121      	bne.n	1bfa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1bb6:	463c      	mov	r4, r7
    1bb8:	2001      	movs	r0, #1
    1bba:	ea20 0704 	bic.w	r7, r0, r4
    1bbe:	48c4      	ldr	r0, [pc, #784]	; (1ed0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x184>)
    1bc0:	2240      	movs	r2, #64	; 0x40
    1bc2:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    1bc6:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    1bca:	f001 fe4f 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1bce:	f1b8 0f00 	cmp.w	r8, #0
    1bd2:	d004      	beq.n	1bde <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    1bd4:	2100      	movs	r1, #0
    1bd6:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1bda:	f3af 8000 	nop.w
    1bde:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    1be2:	eb05 0087 	add.w	r0, r5, r7, lsl #2
    1be6:	6a49      	ldr	r1, [r1, #36]	; 0x24
    1be8:	6241      	str	r1, [r0, #36]	; 0x24
    1bea:	f1b8 0f00 	cmp.w	r8, #0
    1bee:	d004      	beq.n	1bfa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1bf0:	2100      	movs	r1, #0
    1bf2:	f240 50bd 	movw	r0, #1469	; 0x5bd
    1bf6:	f3af 8000 	nop.w
    1bfa:	f1b8 0f00 	cmp.w	r8, #0
    1bfe:	d004      	beq.n	1c0a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    1c00:	2100      	movs	r1, #0
    1c02:	f240 6051 	movw	r0, #1617	; 0x651
    1c06:	f3af 8000 	nop.w
    1c0a:	f000 fe39 	bl	2880 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1c0e:	4604      	mov	r4, r0
    1c10:	a802      	add	r0, sp, #8
    1c12:	9006      	str	r0, [sp, #24]
    1c14:	7830      	ldrb	r0, [r6, #0]
    1c16:	2800      	cmp	r0, #0
    1c18:	7af0      	ldrb	r0, [r6, #11]
    1c1a:	f88d 0015 	strb.w	r0, [sp, #21]
    1c1e:	7ab1      	ldrb	r1, [r6, #10]
    1c20:	f88d 1014 	strb.w	r1, [sp, #20]
    1c24:	8931      	ldrh	r1, [r6, #8]
    1c26:	f8ad 1012 	strh.w	r1, [sp, #18]
    1c2a:	9000      	str	r0, [sp, #0]
    1c2c:	6873      	ldr	r3, [r6, #4]
    1c2e:	d017      	beq.n	1c60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x134>
    1c30:	2200      	movs	r2, #0
    1c32:	9806      	ldr	r0, [sp, #24]
    1c34:	f7fe fbf8 	bl	428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1c38:	9401      	str	r4, [sp, #4]
    1c3a:	6828      	ldr	r0, [r5, #0]
    1c3c:	aa10      	add	r2, sp, #64	; 0x40
    1c3e:	a90f      	add	r1, sp, #60	; 0x3c
    1c40:	78c0      	ldrb	r0, [r0, #3]
    1c42:	9000      	str	r0, [sp, #0]
    1c44:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1c48:	f001 f978 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1c4c:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1c50:	2820      	cmp	r0, #32
    1c52:	d00a      	beq.n	1c6a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x13e>
    1c54:	6969      	ldr	r1, [r5, #20]
    1c56:	9800      	ldr	r0, [sp, #0]
    1c58:	4408      	add	r0, r1
    1c5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c5e:	e01f      	b.n	1ca0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    1c60:	68f2      	ldr	r2, [r6, #12]
    1c62:	9806      	ldr	r0, [sp, #24]
    1c64:	f7fe fbe0 	bl	428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1c68:	e048      	b.n	1cfc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d0>
    1c6a:	e9dd 1000 	ldrd	r1, r0, [sp]
    1c6e:	4408      	add	r0, r1
    1c70:	1d00      	adds	r0, r0, #4
    1c72:	9007      	str	r0, [sp, #28]
    1c74:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1c78:	b128      	cbz	r0, 1c86 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15a>
    1c7a:	f001 fc41 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1c7e:	b910      	cbnz	r0, 1c86 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15a>
    1c80:	9807      	ldr	r0, [sp, #28]
    1c82:	3032      	adds	r0, #50	; 0x32
    1c84:	9007      	str	r0, [sp, #28]
    1c86:	4893      	ldr	r0, [pc, #588]	; (1ed4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x188>)
    1c88:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1c8a:	7840      	ldrb	r0, [r0, #1]
    1c8c:	4288      	cmp	r0, r1
    1c8e:	bf98      	it	ls
    1c90:	9807      	ldrls	r0, [sp, #28]
    1c92:	d903      	bls.n	1c9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x170>
    1c94:	1a41      	subs	r1, r0, r1
    1c96:	9807      	ldr	r0, [sp, #28]
    1c98:	4408      	add	r0, r1
    1c9a:	9007      	str	r0, [sp, #28]
    1c9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ca0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1ca4:	1a89      	subs	r1, r1, r2
    1ca6:	9002      	str	r0, [sp, #8]
    1ca8:	4408      	add	r0, r1
    1caa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cae:	9003      	str	r0, [sp, #12]
    1cb0:	4639      	mov	r1, r7
    1cb2:	9806      	ldr	r0, [sp, #24]
    1cb4:	f7fe fc5e 	bl	574 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x128>
    1cb8:	9409      	str	r4, [sp, #36]	; 0x24
    1cba:	7af0      	ldrb	r0, [r6, #11]
    1cbc:	9000      	str	r0, [sp, #0]
    1cbe:	8931      	ldrh	r1, [r6, #8]
    1cc0:	a810      	add	r0, sp, #64	; 0x40
    1cc2:	6873      	ldr	r3, [r6, #4]
    1cc4:	68f2      	ldr	r2, [r6, #12]
    1cc6:	f7fe fbaf 	bl	428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ccc:	9802      	ldr	r0, [sp, #8]
    1cce:	9a03      	ldr	r2, [sp, #12]
    1cd0:	1ac0      	subs	r0, r0, r3
    1cd2:	1ad2      	subs	r2, r2, r3
    1cd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cd8:	9911      	ldr	r1, [sp, #68]	; 0x44
    1cda:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1cde:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1ce2:	d201      	bcs.n	1ce8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1bc>
    1ce4:	4291      	cmp	r1, r2
    1ce6:	d209      	bcs.n	1cfc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d0>
    1ce8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1cec:	1a89      	subs	r1, r1, r2
    1cee:	1860      	adds	r0, r4, r1
    1cf0:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    1cf4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cf8:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1cfc:	f1b8 0f00 	cmp.w	r8, #0
    1d00:	d004      	beq.n	1d0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e0>
    1d02:	2100      	movs	r1, #0
    1d04:	f240 6057 	movw	r0, #1623	; 0x657
    1d08:	f3af 8000 	nop.w
    1d0c:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1d10:	2820      	cmp	r0, #32
    1d12:	d014      	beq.n	1d3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    1d14:	6968      	ldr	r0, [r5, #20]
    1d16:	9902      	ldr	r1, [sp, #8]
    1d18:	1a09      	subs	r1, r1, r0
    1d1a:	0209      	lsls	r1, r1, #8
    1d1c:	17ca      	asrs	r2, r1, #31
    1d1e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d22:	1209      	asrs	r1, r1, #8
    1d24:	d50b      	bpl.n	1d3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    1d26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1d2a:	1a89      	subs	r1, r1, r2
    1d2c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d30:	4408      	add	r0, r1
    1d32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d36:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1d3a:	f04f 0a01 	mov.w	sl, #1
    1d3e:	f1b8 0f00 	cmp.w	r8, #0
    1d42:	d009      	beq.n	1d58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>
    1d44:	2100      	movs	r1, #0
    1d46:	f240 6061 	movw	r0, #1633	; 0x661
    1d4a:	f3af 8000 	nop.w
    1d4e:	2100      	movs	r1, #0
    1d50:	f240 6067 	movw	r0, #1639	; 0x667
    1d54:	f3af 8000 	nop.w
    1d58:	9902      	ldr	r1, [sp, #8]
    1d5a:	9a03      	ldr	r2, [sp, #12]
    1d5c:	1b09      	subs	r1, r1, r4
    1d5e:	1b12      	subs	r2, r2, r4
    1d60:	485d      	ldr	r0, [pc, #372]	; (1ed8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18c>)
    1d62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1d6a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1d6e:	d205      	bcs.n	1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>
    1d70:	4290      	cmp	r0, r2
    1d72:	d303      	bcc.n	1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>
    1d74:	f1bb 0f00 	cmp.w	fp, #0
    1d78:	d10a      	bne.n	1d90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>
    1d7a:	e003      	b.n	1d84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    1d7c:	f1bb 0f00 	cmp.w	fp, #0
    1d80:	d037      	beq.n	1df2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1d82:	e095      	b.n	1eb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1d84:	4639      	mov	r1, r7
    1d86:	a802      	add	r0, sp, #8
    1d88:	f7fe fbf4 	bl	574 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x128>
    1d8c:	ea4a 0a00 	orr.w	sl, sl, r0
    1d90:	f1ba 0f00 	cmp.w	sl, #0
    1d94:	d021      	beq.n	1dda <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8e>
    1d96:	9802      	ldr	r0, [sp, #8]
    1d98:	f00c fce6 	bl	e768 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1d9c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    1da0:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1da4:	4c4d      	ldr	r4, [pc, #308]	; (1edc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x190>)
    1da6:	4411      	add	r1, r2
    1da8:	1cc9      	adds	r1, r1, #3
    1daa:	1842      	adds	r2, r0, r1
    1dac:	f04f 0c00 	mov.w	ip, #0
    1db0:	1a20      	subs	r0, r4, r0
    1db2:	eb7c 0009 	sbcs.w	r0, ip, r9
    1db6:	d344      	bcc.n	1e42 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf6>
    1db8:	4849      	ldr	r0, [pc, #292]	; (1ee0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>)
    1dba:	4281      	cmp	r1, r0
    1dbc:	dc5d      	bgt.n	1e7a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1dbe:	4240      	negs	r0, r0
    1dc0:	4281      	cmp	r1, r0
    1dc2:	db62      	blt.n	1e8a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13e>
    1dc4:	1c60      	adds	r0, r4, #1
    1dc6:	4282      	cmp	r2, r0
    1dc8:	bfa8      	it	ge
    1dca:	4846      	ldrge	r0, [pc, #280]	; (1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1dcc:	da03      	bge.n	1dd6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8a>
    1dce:	2a00      	cmp	r2, #0
    1dd0:	bfb8      	it	lt
    1dd2:	4845      	ldrlt	r0, [pc, #276]	; (1ee8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>)
    1dd4:	da00      	bge.n	1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1dd6:	1812      	adds	r2, r2, r0
    1dd8:	60f2      	str	r2, [r6, #12]
    1dda:	f04f 0001 	mov.w	r0, #1
    1dde:	900c      	str	r0, [sp, #48]	; 0x30
    1de0:	f1b8 0f00 	cmp.w	r8, #0
    1de4:	d064      	beq.n	1eb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1de6:	2100      	movs	r1, #0
    1de8:	f240 607a 	movw	r0, #1658	; 0x67a
    1dec:	f3af 8000 	nop.w
    1df0:	e05e      	b.n	1eb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1df2:	6828      	ldr	r0, [r5, #0]
    1df4:	4627      	mov	r7, r4
    1df6:	aa08      	add	r2, sp, #32
    1df8:	78c4      	ldrb	r4, [r0, #3]
    1dfa:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1dfe:	a907      	add	r1, sp, #28
    1e00:	f001 f89c 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1e04:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1e08:	2820      	cmp	r0, #32
    1e0a:	d01f      	beq.n	1e4c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1e0c:	6968      	ldr	r0, [r5, #20]
    1e0e:	4420      	add	r0, r4
    1e10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1e18:	1a89      	subs	r1, r1, r2
    1e1a:	4401      	add	r1, r0
    1e1c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1e24:	f00c fca0 	bl	e768 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1e28:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    1e2c:	f99d 1010 	ldrsb.w	r1, [sp, #16]
    1e30:	4c2a      	ldr	r4, [pc, #168]	; (1edc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x190>)
    1e32:	4411      	add	r1, r2
    1e34:	1cc9      	adds	r1, r1, #3
    1e36:	1842      	adds	r2, r0, r1
    1e38:	2300      	movs	r3, #0
    1e3a:	1a20      	subs	r0, r4, r0
    1e3c:	eb73 0009 	sbcs.w	r0, r3, r9
    1e40:	d218      	bcs.n	1e74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>
    1e42:	f240 51f5 	movw	r1, #1525	; 0x5f5
    1e46:	2070      	movs	r0, #112	; 0x70
    1e48:	f001 fbbe 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e4c:	1938      	adds	r0, r7, r4
    1e4e:	1d04      	adds	r4, r0, #4
    1e50:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1e54:	b120      	cbz	r0, 1e60 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    1e56:	f001 fb53 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	bf08      	it	eq
    1e5e:	3432      	addeq	r4, #50	; 0x32
    1e60:	481c      	ldr	r0, [pc, #112]	; (1ed4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x188>)
    1e62:	9907      	ldr	r1, [sp, #28]
    1e64:	7840      	ldrb	r0, [r0, #1]
    1e66:	4288      	cmp	r0, r1
    1e68:	bf84      	itt	hi
    1e6a:	1a40      	subhi	r0, r0, r1
    1e6c:	4404      	addhi	r4, r0
    1e6e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    1e72:	e7cf      	b.n	1e14 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>
    1e74:	481a      	ldr	r0, [pc, #104]	; (1ee0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>)
    1e76:	4281      	cmp	r1, r0
    1e78:	dd04      	ble.n	1e84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1e7a:	f240 51f6 	movw	r1, #1526	; 0x5f6
    1e7e:	2070      	movs	r0, #112	; 0x70
    1e80:	f001 fba2 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e84:	4819      	ldr	r0, [pc, #100]	; (1eec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>)
    1e86:	4281      	cmp	r1, r0
    1e88:	da04      	bge.n	1e94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1e8a:	f240 51f7 	movw	r1, #1527	; 0x5f7
    1e8e:	2070      	movs	r0, #112	; 0x70
    1e90:	f001 fb9a 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e94:	4814      	ldr	r0, [pc, #80]	; (1ee8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>)
    1e96:	4282      	cmp	r2, r0
    1e98:	bfa8      	it	ge
    1e9a:	4812      	ldrge	r0, [pc, #72]	; (1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1e9c:	da03      	bge.n	1ea6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1e9e:	2a00      	cmp	r2, #0
    1ea0:	bfb8      	it	lt
    1ea2:	4811      	ldrlt	r0, [pc, #68]	; (1ee8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>)
    1ea4:	da00      	bge.n	1ea8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1ea6:	1812      	adds	r2, r2, r0
    1ea8:	f04f 0001 	mov.w	r0, #1
    1eac:	60f2      	str	r2, [r6, #12]
    1eae:	900c      	str	r0, [sp, #48]	; 0x30
    1eb0:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1eb4:	2800      	cmp	r0, #0
    1eb6:	f47f ae65 	bne.w	1b84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1eba:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ebc:	b015      	add	sp, #84	; 0x54
    1ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ec2:	0000      	.short	0x0000
    1ec4:	e000ed04 	.word	0xe000ed04
    1ec8:	00000000 	.word	0x00000000
    1ecc:	20000d1c 	.word	0x20000d1c
    1ed0:	20000c9c 	.word	0x20000c9c
    1ed4:	20000012 	.word	0x20000012
    1ed8:	003fffff 	.word	0x003fffff
    1edc:	1e847fff 	.word	0x1e847fff
    1ee0:	07a12000 	.word	0x07a12000
    1ee4:	e17b8000 	.word	0xe17b8000
    1ee8:	1e848000 	.word	0x1e848000
    1eec:	f85ee000 	.word	0xf85ee000

00001ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1ef0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ef4:	4d80      	ldr	r5, [pc, #512]	; (20f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    1ef6:	b08c      	sub	sp, #48	; 0x30
    1ef8:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    1efc:	2000      	movs	r0, #0
    1efe:	9009      	str	r0, [sp, #36]	; 0x24
    1f00:	2001      	movs	r0, #1
    1f02:	4c7e      	ldr	r4, [pc, #504]	; (20fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    1f04:	f04f 0800 	mov.w	r8, #0
    1f08:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1f0c:	4683      	mov	fp, r0
    1f0e:	9008      	str	r0, [sp, #32]
    1f10:	b124      	cbz	r4, 1f1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1f12:	2100      	movs	r1, #0
    1f14:	f240 70de 	movw	r0, #2014	; 0x7de
    1f18:	f3af 8000 	nop.w
    1f1c:	9808      	ldr	r0, [sp, #32]
    1f1e:	b390      	cbz	r0, 1f86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1f20:	f885 802f 	strb.w	r8, [r5, #47]	; 0x2f
    1f24:	b124      	cbz	r4, 1f30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    1f26:	2100      	movs	r1, #0
    1f28:	f240 70e3 	movw	r0, #2019	; 0x7e3
    1f2c:	f3af 8000 	nop.w
    1f30:	f895 9032 	ldrb.w	r9, [r5, #50]	; 0x32
    1f34:	2240      	movs	r2, #64	; 0x40
    1f36:	ea2b 0609 	bic.w	r6, fp, r9
    1f3a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f3e:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    1f42:	4682      	mov	sl, r0
    1f44:	f001 fc92 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f48:	b124      	cbz	r4, 1f54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    1f4a:	2100      	movs	r1, #0
    1f4c:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1f50:	f3af 8000 	nop.w
    1f54:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f58:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1f5c:	9000      	str	r0, [sp, #0]
    1f5e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    1f60:	6241      	str	r1, [r0, #36]	; 0x24
    1f62:	b124      	cbz	r4, 1f6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    1f64:	2100      	movs	r1, #0
    1f66:	f240 50bd 	movw	r0, #1469	; 0x5bd
    1f6a:	f3af 8000 	nop.w
    1f6e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1f72:	b180      	cbz	r0, 1f96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    1f74:	2c00      	cmp	r4, #0
    1f76:	bf1c      	itt	ne
    1f78:	2100      	movne	r1, #0
    1f7a:	f240 70e9 	movwne	r0, #2025	; 0x7e9
    1f7e:	d0c7      	beq.n	1f10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f80:	f3af 8000 	nop.w
    1f84:	e7c4      	b.n	1f10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f86:	e7ff      	b.n	1f88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    1f88:	485d      	ldr	r0, [pc, #372]	; (2100 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    1f8a:	2800      	cmp	r0, #0
    1f8c:	bf18      	it	ne
    1f8e:	f3af 8000 	nopne.w
    1f92:	b662      	cpsie	i
    1f94:	e7c4      	b.n	1f20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    1f96:	b124      	cbz	r4, 1fa2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    1f98:	2100      	movs	r1, #0
    1f9a:	f240 70ed 	movw	r0, #2029	; 0x7ed
    1f9e:	f3af 8000 	nop.w
    1fa2:	980c      	ldr	r0, [sp, #48]	; 0x30
    1fa4:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    1fa8:	2803      	cmp	r0, #3
    1faa:	d178      	bne.n	209e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1fac:	f8dd 9000 	ldr.w	r9, [sp]
    1fb0:	f8cd 9018 	str.w	r9, [sp, #24]
    1fb4:	990c      	ldr	r1, [sp, #48]	; 0x30
    1fb6:	f899 0024 	ldrb.w	r0, [r9, #36]	; 0x24
    1fba:	4288      	cmp	r0, r1
    1fbc:	bf14      	ite	ne
    1fbe:	f04f 0a00 	movne.w	sl, #0
    1fc2:	f04f 0a01 	moveq.w	sl, #1
    1fc6:	f109 0c24 	add.w	ip, r9, #36	; 0x24
    1fca:	4686      	mov	lr, r0
    1fcc:	2220      	movs	r2, #32
    1fce:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1fd2:	e003      	b.n	1fdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    1fd4:	4602      	mov	r2, r0
    1fd6:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1fda:	7840      	ldrb	r0, [r0, #1]
    1fdc:	4288      	cmp	r0, r1
    1fde:	d002      	beq.n	1fe6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1fe0:	2820      	cmp	r0, #32
    1fe2:	d00a      	beq.n	1ffa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1fe4:	e7f6      	b.n	1fd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    1fe6:	2820      	cmp	r0, #32
    1fe8:	d007      	beq.n	1ffa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1fea:	4586      	cmp	lr, r0
    1fec:	d107      	bne.n	1ffe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    1fee:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1ff2:	7840      	ldrb	r0, [r0, #1]
    1ff4:	f88c 0000 	strb.w	r0, [ip]
    1ff8:	e007      	b.n	200a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    1ffa:	4640      	mov	r0, r8
    1ffc:	e00c      	b.n	2018 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    1ffe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2002:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2006:	7840      	ldrb	r0, [r0, #1]
    2008:	7048      	strb	r0, [r1, #1]
    200a:	b124      	cbz	r4, 2016 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    200c:	2100      	movs	r1, #0
    200e:	f240 503e 	movw	r0, #1342	; 0x53e
    2012:	f3af 8000 	nop.w
    2016:	4658      	mov	r0, fp
    2018:	ea10 0f0a 	tst.w	r0, sl
    201c:	bf18      	it	ne
    201e:	f889 b027 	strbne.w	fp, [r9, #39]	; 0x27
    2022:	b3e0      	cbz	r0, 209e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2024:	b124      	cbz	r4, 2030 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    2026:	2100      	movs	r1, #0
    2028:	f240 70f2 	movw	r0, #2034	; 0x7f2
    202c:	f3af 8000 	nop.w
    2030:	4632      	mov	r2, r6
    2032:	2001      	movs	r0, #1
    2034:	990c      	ldr	r1, [sp, #48]	; 0x30
    2036:	f7fe fff3 	bl	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    203a:	9806      	ldr	r0, [sp, #24]
    203c:	f890 9027 	ldrb.w	r9, [r0, #39]	; 0x27
    2040:	b124      	cbz	r4, 204c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    2042:	2100      	movs	r1, #0
    2044:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2048:	f3af 8000 	nop.w
    204c:	482d      	ldr	r0, [pc, #180]	; (2104 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    204e:	2800      	cmp	r0, #0
    2050:	bf18      	it	ne
    2052:	f3af 8000 	nopne.w
    2056:	f3ef 8010 	mrs	r0, PRIMASK
    205a:	b672      	cpsid	i
    205c:	9008      	str	r0, [sp, #32]
    205e:	b124      	cbz	r4, 206a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    2060:	2100      	movs	r1, #0
    2062:	f640 0002 	movw	r0, #2050	; 0x802
    2066:	f3af 8000 	nop.w
    206a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    206e:	b138      	cbz	r0, 2080 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    2070:	2c00      	cmp	r4, #0
    2072:	bf1c      	itt	ne
    2074:	2100      	movne	r1, #0
    2076:	f640 0006 	movwne	r0, #2054	; 0x806
    207a:	f43f af49 	beq.w	1f10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    207e:	e77f      	b.n	1f80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    2080:	f1b9 0f00 	cmp.w	r9, #0
    2084:	d008      	beq.n	2098 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2086:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    208a:	2820      	cmp	r0, #32
    208c:	d104      	bne.n	2098 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    208e:	4631      	mov	r1, r6
    2090:	2002      	movs	r0, #2
    2092:	f7fe fff5 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    2096:	b1f8      	cbz	r0, 20d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2098:	b134      	cbz	r4, 20a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    209a:	2100      	movs	r1, #0
    209c:	e000      	b.n	20a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    209e:	e009      	b.n	20b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    20a0:	f640 001a 	movw	r0, #2074	; 0x81a
    20a4:	f3af 8000 	nop.w
    20a8:	f885 6032 	strb.w	r6, [r5, #50]	; 0x32
    20ac:	f885 b02f 	strb.w	fp, [r5, #47]	; 0x2f
    20b0:	2001      	movs	r0, #1
    20b2:	9009      	str	r0, [sp, #36]	; 0x24
    20b4:	b124      	cbz	r4, 20c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    20b6:	2100      	movs	r1, #0
    20b8:	f640 0023 	movw	r0, #2083	; 0x823
    20bc:	f3af 8000 	nop.w
    20c0:	9808      	ldr	r0, [sp, #32]
    20c2:	b188      	cbz	r0, 20e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    20c4:	b124      	cbz	r4, 20d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    20c6:	2100      	movs	r1, #0
    20c8:	f640 0027 	movw	r0, #2087	; 0x827
    20cc:	f3af 8000 	nop.w
    20d0:	9809      	ldr	r0, [sp, #36]	; 0x24
    20d2:	b00d      	add	sp, #52	; 0x34
    20d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20d8:	2c00      	cmp	r4, #0
    20da:	d0f1      	beq.n	20c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    20dc:	2100      	movs	r1, #0
    20de:	f640 0015 	movw	r0, #2069	; 0x815
    20e2:	f3af 8000 	nop.w
    20e6:	e7e6      	b.n	20b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    20e8:	4805      	ldr	r0, [pc, #20]	; (2100 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    20ea:	2800      	cmp	r0, #0
    20ec:	bf18      	it	ne
    20ee:	f3af 8000 	nopne.w
    20f2:	b662      	cpsie	i
    20f4:	e7e6      	b.n	20c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    20f6:	0000      	.short	0x0000
    20f8:	20000d1c 	.word	0x20000d1c
	...

00002108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2108:	b510      	push	{r4, lr}
    210a:	2820      	cmp	r0, #32
    210c:	d211      	bcs.n	2132 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    210e:	490e      	ldr	r1, [pc, #56]	; (2148 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2110:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
    2114:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2118:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    211c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2120:	b13b      	cbz	r3, 2132 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2122:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
    2126:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    212a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    212e:	2a01      	cmp	r2, #1
    2130:	d001      	beq.n	2136 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2132:	2000      	movs	r0, #0
    2134:	bd10      	pop	{r4, pc}
    2136:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    213a:	4601      	mov	r1, r0
    213c:	2000      	movs	r0, #0
    213e:	f7fe ff6f 	bl	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    2142:	2001      	movs	r0, #1
    2144:	bd10      	pop	{r4, pc}
    2146:	0000      	.short	0x0000
    2148:	20000d1c 	.word	0x20000d1c

0000214c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    214c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2150:	4e7e      	ldr	r6, [pc, #504]	; (234c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2152:	4680      	mov	r8, r0
    2154:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    2158:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    215c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2160:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2164:	2800      	cmp	r0, #0
    2166:	d065      	beq.n	2234 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2168:	f896 9032 	ldrb.w	r9, [r6, #50]	; 0x32
    216c:	4d78      	ldr	r5, [pc, #480]	; (2350 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    216e:	b125      	cbz	r5, 217a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2170:	2100      	movs	r1, #0
    2172:	f640 30b3 	movw	r0, #2995	; 0xbb3
    2176:	f3af 8000 	nop.w
    217a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    217e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2182:	2801      	cmp	r0, #1
    2184:	d018      	beq.n	21b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2186:	b2c0      	uxtb	r0, r0
    2188:	2804      	cmp	r0, #4
    218a:	bf1c      	itt	ne
    218c:	2805      	cmpne	r0, #5
    218e:	2806      	cmpne	r0, #6
    2190:	d055      	beq.n	223e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2192:	b12d      	cbz	r5, 21a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2194:	f04f 0100 	mov.w	r1, #0
    2198:	f640 30bf 	movw	r0, #3007	; 0xbbf
    219c:	f3af 8000 	nop.w
    21a0:	f001 fb34 	bl	380c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    21a4:	b125      	cbz	r5, 21b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    21a6:	2100      	movs	r1, #0
    21a8:	f640 30c3 	movw	r0, #3011	; 0xbc3
    21ac:	f3af 8000 	nop.w
    21b0:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    21b4:	2801      	cmp	r0, #1
    21b6:	d1e6      	bne.n	2186 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    21b8:	2401      	movs	r4, #1
    21ba:	b125      	cbz	r5, 21c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    21bc:	2100      	movs	r1, #0
    21be:	f640 30ca 	movw	r0, #3018	; 0xbca
    21c2:	f3af 8000 	nop.w
    21c6:	b3a4      	cbz	r4, 2232 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    21c8:	2000      	movs	r0, #0
    21ca:	f886 002f 	strb.w	r0, [r6, #47]	; 0x2f
    21ce:	b125      	cbz	r5, 21da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    21d0:	2100      	movs	r1, #0
    21d2:	f640 30cf 	movw	r0, #3023	; 0xbcf
    21d6:	f3af 8000 	nop.w
    21da:	f896 b032 	ldrb.w	fp, [r6, #50]	; 0x32
    21de:	2001      	movs	r0, #1
    21e0:	ea20 090b 	bic.w	r9, r0, fp
    21e4:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    21e8:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21ec:	2240      	movs	r2, #64	; 0x40
    21ee:	f001 fb3d 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21f2:	b125      	cbz	r5, 21fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    21f4:	2100      	movs	r1, #0
    21f6:	f240 50b9 	movw	r0, #1465	; 0x5b9
    21fa:	f3af 8000 	nop.w
    21fe:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2202:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2206:	6a40      	ldr	r0, [r0, #36]	; 0x24
    2208:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    220c:	b125      	cbz	r5, 2218 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    220e:	2100      	movs	r1, #0
    2210:	f240 50bd 	movw	r0, #1469	; 0x5bd
    2214:	f3af 8000 	nop.w
    2218:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    221c:	b1e0      	cbz	r0, 2258 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    221e:	2d00      	cmp	r5, #0
    2220:	bf1c      	itt	ne
    2222:	2100      	movne	r1, #0
    2224:	f640 30d5 	movwne	r0, #3029	; 0xbd5
    2228:	d0c7      	beq.n	21ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    222a:	bf00      	nop
    222c:	f3af 8000 	nop.w
    2230:	e7c3      	b.n	21ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2232:	e00a      	b.n	224a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2234:	f640 31aa 	movw	r1, #2986	; 0xbaa
    2238:	2070      	movs	r0, #112	; 0x70
    223a:	f001 f9c5 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    223e:	464a      	mov	r2, r9
    2240:	4641      	mov	r1, r8
    2242:	2001      	movs	r0, #1
    2244:	f7fe feec 	bl	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    2248:	e7ac      	b.n	21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    224a:	4842      	ldr	r0, [pc, #264]	; (2354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    224c:	2800      	cmp	r0, #0
    224e:	bf18      	it	ne
    2250:	f3af 8000 	nopne.w
    2254:	b662      	cpsie	i
    2256:	e7b7      	b.n	21c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    2258:	b125      	cbz	r5, 2264 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    225a:	2100      	movs	r1, #0
    225c:	f640 30d9 	movw	r0, #3033	; 0xbd9
    2260:	f3af 8000 	nop.w
    2264:	f89a 3025 	ldrb.w	r3, [sl, #37]	; 0x25
    2268:	f10a 0125 	add.w	r1, sl, #37	; 0x25
    226c:	4640      	mov	r0, r8
    226e:	461c      	mov	r4, r3
    2270:	f04f 0b20 	mov.w	fp, #32
    2274:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2278:	f10a 0a26 	add.w	sl, sl, #38	; 0x26
    227c:	e004      	b.n	2288 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    227e:	46a3      	mov	fp, r4
    2280:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2284:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2288:	4284      	cmp	r4, r0
    228a:	d002      	beq.n	2292 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    228c:	2c20      	cmp	r4, #32
    228e:	d02b      	beq.n	22e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2290:	e7f5      	b.n	227e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2292:	2c20      	cmp	r4, #32
    2294:	d028      	beq.n	22e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2296:	42a3      	cmp	r3, r4
    2298:	d104      	bne.n	22a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    229a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    229e:	7840      	ldrb	r0, [r0, #1]
    22a0:	7008      	strb	r0, [r1, #0]
    22a2:	e005      	b.n	22b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    22a4:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    22a8:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    22ac:	7840      	ldrb	r0, [r0, #1]
    22ae:	7048      	strb	r0, [r1, #1]
    22b0:	f1ba 0f00 	cmp.w	sl, #0
    22b4:	d011      	beq.n	22da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    22b6:	b125      	cbz	r5, 22c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    22b8:	2100      	movs	r1, #0
    22ba:	f240 5036 	movw	r0, #1334	; 0x536
    22be:	f3af 8000 	nop.w
    22c2:	f89a 0000 	ldrb.w	r0, [sl]
    22c6:	42a0      	cmp	r0, r4
    22c8:	d107      	bne.n	22da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    22ca:	b125      	cbz	r5, 22d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    22cc:	2100      	movs	r1, #0
    22ce:	f240 5039 	movw	r0, #1337	; 0x539
    22d2:	f3af 8000 	nop.w
    22d6:	f88a b000 	strb.w	fp, [sl]
    22da:	b15d      	cbz	r5, 22f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    22dc:	2100      	movs	r1, #0
    22de:	f240 503e 	movw	r0, #1342	; 0x53e
    22e2:	f3af 8000 	nop.w
    22e6:	e000      	b.n	22ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    22e8:	b125      	cbz	r5, 22f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    22ea:	2100      	movs	r1, #0
    22ec:	f640 30dd 	movw	r0, #3037	; 0xbdd
    22f0:	f3af 8000 	nop.w
    22f4:	4818      	ldr	r0, [pc, #96]	; (2358 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    22f6:	2800      	cmp	r0, #0
    22f8:	bf18      	it	ne
    22fa:	f3af 8000 	nopne.w
    22fe:	f3ef 8410 	mrs	r4, PRIMASK
    2302:	b672      	cpsid	i
    2304:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2308:	b138      	cbz	r0, 231a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    230a:	2d00      	cmp	r5, #0
    230c:	bf1c      	itt	ne
    230e:	2100      	movne	r1, #0
    2310:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2314:	f43f af51 	beq.w	21ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2318:	e788      	b.n	222c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    231a:	f886 9032 	strb.w	r9, [r6, #50]	; 0x32
    231e:	2001      	movs	r0, #1
    2320:	f886 002f 	strb.w	r0, [r6, #47]	; 0x2f
    2324:	b154      	cbz	r4, 233c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    2326:	2d00      	cmp	r5, #0
    2328:	bf08      	it	eq
    232a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    232e:	2100      	movs	r1, #0
    2330:	f44f 603f 	mov.w	r0, #3056	; 0xbf0
    2334:	f3af 8000 	nop.w
    2338:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    233c:	4805      	ldr	r0, [pc, #20]	; (2354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    233e:	2800      	cmp	r0, #0
    2340:	bf18      	it	ne
    2342:	f3af 8000 	nopne.w
    2346:	b662      	cpsie	i
    2348:	e7ed      	b.n	2326 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    234a:	0000      	.short	0x0000
    234c:	20000d1c 	.word	0x20000d1c
	...

0000235c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    235c:	4603      	mov	r3, r0
    235e:	480e      	ldr	r0, [pc, #56]	; (2398 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x3c>)
    2360:	b510      	push	{r4, lr}
    2362:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    2366:	2400      	movs	r4, #0
    2368:	3880      	subs	r0, #128	; 0x80
    236a:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    236e:	bf00      	nop
    2370:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2374:	b129      	cbz	r1, 2382 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x26>
    2376:	1c61      	adds	r1, r4, #1
    2378:	b2cc      	uxtb	r4, r1
    237a:	2c20      	cmp	r4, #32
    237c:	d3f8      	bcc.n	2370 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x14>
    237e:	2020      	movs	r0, #32
    2380:	bd10      	pop	{r4, pc}
    2382:	4906      	ldr	r1, [pc, #24]	; (239c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    2384:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2388:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    238c:	4621      	mov	r1, r4
    238e:	2001      	movs	r0, #1
    2390:	f7fe fe46 	bl	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    2394:	4620      	mov	r0, r4
    2396:	bd10      	pop	{r4, pc}
    2398:	20000d1c 	.word	0x20000d1c
    239c:	20000a1c 	.word	0x20000a1c

000023a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    23a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23a4:	f000 fa6c 	bl	2880 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    23a8:	4605      	mov	r5, r0
    23aa:	f000 fd13 	bl	2dd4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    23ae:	4c44      	ldr	r4, [pc, #272]	; (24c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>)
    23b0:	68e0      	ldr	r0, [r4, #12]
    23b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    23b6:	bf1c      	itt	ne
    23b8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    23bc:	60e0      	strne	r0, [r4, #12]
    23be:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    23c2:	b9c8      	cbnz	r0, 23f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    23c4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    23c8:	1a08      	subs	r0, r1, r0
    23ca:	0200      	lsls	r0, r0, #8
    23cc:	17c1      	asrs	r1, r0, #31
    23ce:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23d2:	1200      	asrs	r0, r0, #8
    23d4:	f44f 710c 	mov.w	r1, #560	; 0x230
    23d8:	f00c f9f3 	bl	e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    23dc:	6961      	ldr	r1, [r4, #20]
    23de:	4401      	add	r1, r0
    23e0:	1a68      	subs	r0, r5, r1
    23e2:	0200      	lsls	r0, r0, #8
    23e4:	17c1      	asrs	r1, r0, #31
    23e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23ea:	1200      	asrs	r0, r0, #8
    23ec:	d404      	bmi.n	23f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    23ee:	f240 414d 	movw	r1, #1101	; 0x44d
    23f2:	2070      	movs	r0, #112	; 0x70
    23f4:	f001 f8e8 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23f8:	7f60      	ldrb	r0, [r4, #29]
    23fa:	b148      	cbz	r0, 2410 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    23fc:	f000 fb4c 	bl	2a98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2400:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    2404:	b150      	cbz	r0, 241c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2406:	f240 415e 	movw	r1, #1118	; 0x45e
    240a:	2070      	movs	r0, #112	; 0x70
    240c:	f001 f8dc 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2410:	1ce8      	adds	r0, r5, #3
    2412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2416:	f000 fa39 	bl	288c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    241a:	e7f1      	b.n	2400 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    241c:	2701      	movs	r7, #1
    241e:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    2422:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    2426:	2820      	cmp	r0, #32
    2428:	d026      	beq.n	2478 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xd8>
    242a:	f894 8033 	ldrb.w	r8, [r4, #51]	; 0x33
    242e:	2020      	movs	r0, #32
    2430:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    2434:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    2438:	2600      	movs	r6, #0
    243a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    243e:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    2442:	4820      	ldr	r0, [pc, #128]	; (24c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x124>)
    2444:	6066      	str	r6, [r4, #4]
    2446:	7800      	ldrb	r0, [r0, #0]
    2448:	2802      	cmp	r0, #2
    244a:	bf16      	itet	ne
    244c:	2803      	cmpne	r0, #3
    244e:	2001      	moveq	r0, #1
    2450:	2000      	movne	r0, #0
    2452:	f884 0020 	strb.w	r0, [r4, #32]
    2456:	f894 5032 	ldrb.w	r5, [r4, #50]	; 0x32
    245a:	f04f 0001 	mov.w	r0, #1
    245e:	4629      	mov	r1, r5
    2460:	f7fe fe0e 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    2464:	2800      	cmp	r0, #0
    2466:	d0f8      	beq.n	245a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xba>
    2468:	4817      	ldr	r0, [pc, #92]	; (24c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x128>)
    246a:	eb00 1085 	add.w	r0, r0, r5, lsl #6
    246e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2472:	2802      	cmp	r0, #2
    2474:	d005      	beq.n	2482 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xe2>
    2476:	e009      	b.n	248c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xec>
    2478:	f240 4161 	movw	r1, #1121	; 0x461
    247c:	2070      	movs	r0, #112	; 0x70
    247e:	f001 f8a3 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2482:	462a      	mov	r2, r5
    2484:	4641      	mov	r1, r8
    2486:	2006      	movs	r0, #6
    2488:	f7fe fdca 	bl	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    248c:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    2490:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    2494:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    2498:	2820      	cmp	r0, #32
    249a:	d003      	beq.n	24a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    249c:	480b      	ldr	r0, [pc, #44]	; (24cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>)
    249e:	7840      	ldrb	r0, [r0, #1]
    24a0:	f001 f962 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    24a4:	f894 0020 	ldrb.w	r0, [r4, #32]
    24a8:	2800      	cmp	r0, #0
    24aa:	bf08      	it	eq
    24ac:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    24b0:	f000 fcda 	bl	2e68 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    24b4:	f884 6020 	strb.w	r6, [r4, #32]
    24b8:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    24bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24c0:	20000d1c 	.word	0x20000d1c
    24c4:	20000012 	.word	0x20000012
    24c8:	20000c9c 	.word	0x20000c9c
    24cc:	20000010 	.word	0x20000010

000024d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    24d0:	b530      	push	{r4, r5, lr}
    24d2:	4c30      	ldr	r4, [pc, #192]	; (2594 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    24d4:	b083      	sub	sp, #12
    24d6:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    24da:	2920      	cmp	r1, #32
    24dc:	d008      	beq.n	24f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    24de:	68e1      	ldr	r1, [r4, #12]
    24e0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    24e4:	d009      	beq.n	24fa <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    24e6:	f640 21d1 	movw	r1, #2769	; 0xad1
    24ea:	2070      	movs	r0, #112	; 0x70
    24ec:	f001 f86c 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24f0:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    24f4:	2070      	movs	r0, #112	; 0x70
    24f6:	f001 f867 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24fa:	68a1      	ldr	r1, [r4, #8]
    24fc:	f8df c098 	ldr.w	ip, [pc, #152]	; 2598 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    2500:	180b      	adds	r3, r1, r0
    2502:	2200      	movs	r2, #0
    2504:	ebbc 0101 	subs.w	r1, ip, r1
    2508:	eb72 0102 	sbcs.w	r1, r2, r2
    250c:	d204      	bcs.n	2518 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    250e:	f240 51f5 	movw	r1, #1525	; 0x5f5
    2512:	2070      	movs	r0, #112	; 0x70
    2514:	f001 f858 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2518:	4920      	ldr	r1, [pc, #128]	; (259c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    251a:	4288      	cmp	r0, r1
    251c:	dd04      	ble.n	2528 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    251e:	f240 51f6 	movw	r1, #1526	; 0x5f6
    2522:	2070      	movs	r0, #112	; 0x70
    2524:	f001 f850 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2528:	491d      	ldr	r1, [pc, #116]	; (25a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    252a:	4288      	cmp	r0, r1
    252c:	da04      	bge.n	2538 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    252e:	f240 51f7 	movw	r1, #1527	; 0x5f7
    2532:	2070      	movs	r0, #112	; 0x70
    2534:	f001 f848 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2538:	481a      	ldr	r0, [pc, #104]	; (25a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    253a:	4283      	cmp	r3, r0
    253c:	bfa8      	it	ge
    253e:	481a      	ldrge	r0, [pc, #104]	; (25a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2540:	da03      	bge.n	254a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    2542:	2b00      	cmp	r3, #0
    2544:	bfb8      	it	lt
    2546:	4817      	ldrlt	r0, [pc, #92]	; (25a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2548:	da00      	bge.n	254c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    254a:	181b      	adds	r3, r3, r0
    254c:	4618      	mov	r0, r3
    254e:	aa01      	add	r2, sp, #4
    2550:	4669      	mov	r1, sp
    2552:	f000 fcf3 	bl	2f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2556:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    255a:	280f      	cmp	r0, #15
    255c:	bfcc      	ite	gt
    255e:	2001      	movgt	r0, #1
    2560:	2000      	movle	r0, #0
    2562:	9900      	ldr	r1, [sp, #0]
    2564:	4408      	add	r0, r1
    2566:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    256a:	60e1      	str	r1, [r4, #12]
    256c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2570:	2800      	cmp	r0, #0
    2572:	bf04      	itt	eq
    2574:	b003      	addeq	sp, #12
    2576:	bd30      	popeq	{r4, r5, pc}
    2578:	2301      	movs	r3, #1
    257a:	2203      	movs	r2, #3
    257c:	2005      	movs	r0, #5
    257e:	f000 fb05 	bl	2b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2582:	2800      	cmp	r0, #0
    2584:	bf1c      	itt	ne
    2586:	b003      	addne	sp, #12
    2588:	bd30      	popne	{r4, r5, pc}
    258a:	f640 21d9 	movw	r1, #2777	; 0xad9
    258e:	2070      	movs	r0, #112	; 0x70
    2590:	f001 f81a 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2594:	20000d1c 	.word	0x20000d1c
    2598:	1e847fff 	.word	0x1e847fff
    259c:	07a12000 	.word	0x07a12000
    25a0:	f85ee000 	.word	0xf85ee000
    25a4:	1e848000 	.word	0x1e848000
    25a8:	e17b8000 	.word	0xe17b8000

000025ac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    25ac:	b570      	push	{r4, r5, r6, lr}
    25ae:	4c22      	ldr	r4, [pc, #136]	; (2638 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x8c>)
    25b0:	2020      	movs	r0, #32
    25b2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    25b6:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    25ba:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    25be:	2500      	movs	r5, #0
    25c0:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
    25c4:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
    25c8:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    25cc:	1e69      	subs	r1, r5, #1
    25ce:	6065      	str	r5, [r4, #4]
    25d0:	60e1      	str	r1, [r4, #12]
    25d2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    25d6:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    25da:	f884 5020 	strb.w	r5, [r4, #32]
    25de:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    25e2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    25e6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    25ea:	4814      	ldr	r0, [pc, #80]	; (263c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x90>)
    25ec:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
    25f0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    25f4:	7005      	strb	r5, [r0, #0]
    25f6:	7045      	strb	r5, [r0, #1]
    25f8:	8045      	strh	r5, [r0, #2]
    25fa:	f7fe f99b 	bl	934 <CONFIG_ISR_STACK_SIZE+0x134>
    25fe:	2800      	cmp	r0, #0
    2600:	bf0c      	ite	eq
    2602:	480f      	ldreq	r0, [pc, #60]	; (2640 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x94>)
    2604:	480f      	ldrne	r0, [pc, #60]	; (2644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x98>)
    2606:	6020      	str	r0, [r4, #0]
    2608:	480f      	ldr	r0, [pc, #60]	; (2648 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x9c>)
    260a:	2110      	movs	r1, #16
    260c:	1e49      	subs	r1, r1, #1
    260e:	7085      	strb	r5, [r0, #2]
    2610:	f800 5f04 	strb.w	r5, [r0, #4]!
    2614:	d1fa      	bne.n	260c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x60>
    2616:	2001      	movs	r0, #1
    2618:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    261c:	4c0b      	ldr	r4, [pc, #44]	; (264c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0xa0>)
    261e:	20ff      	movs	r0, #255	; 0xff
    2620:	7020      	strb	r0, [r4, #0]
    2622:	480b      	ldr	r0, [pc, #44]	; (2650 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0xa4>)
    2624:	f001 f882 	bl	372c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2628:	7060      	strb	r0, [r4, #1]
    262a:	f001 f8dd 	bl	37e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    262e:	60a0      	str	r0, [r4, #8]
    2630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2634:	f000 bc46 	b.w	2ec4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2638:	20000d1c 	.word	0x20000d1c
    263c:	20000012 	.word	0x20000012
    2640:	00011f0a 	.word	0x00011f0a
    2644:	00011f0e 	.word	0x00011f0e
    2648:	20000c9a 	.word	0x20000c9a
    264c:	20000010 	.word	0x20000010
    2650:	00000ed9 	.word	0x00000ed9

00002654 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2654:	b570      	push	{r4, r5, r6, lr}
    2656:	4605      	mov	r5, r0
    2658:	2001      	movs	r0, #1
    265a:	fa00 f405 	lsl.w	r4, r0, r5
    265e:	460e      	mov	r6, r1
    2660:	2a00      	cmp	r2, #0
    2662:	bf08      	it	eq
    2664:	4808      	ldreq	r0, [pc, #32]	; (2688 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    2666:	d00c      	beq.n	2682 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    2668:	2000      	movs	r0, #0
    266a:	f000 fc11 	bl	2e90 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    266e:	00e9      	lsls	r1, r5, #3
    2670:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2674:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    2678:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    267c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2680:	4802      	ldr	r0, [pc, #8]	; (268c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2682:	6004      	str	r4, [r0, #0]
    2684:	bd70      	pop	{r4, r5, r6, pc}
    2686:	0000      	.short	0x0000
    2688:	4001f508 	.word	0x4001f508
    268c:	4001f504 	.word	0x4001f504

00002690 <MPSL_IRQ_RTC0_Handler>:
    2690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2694:	4c24      	ldr	r4, [pc, #144]	; (2728 <MPSL_IRQ_RTC0_Handler+0x98>)
    2696:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    269a:	f04f 0500 	mov.w	r5, #0
    269e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    26a2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    26a6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    26aa:	bf1c      	itt	ne
    26ac:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    26b0:	2800      	cmpne	r0, #0
    26b2:	d00b      	beq.n	26cc <MPSL_IRQ_RTC0_Handler+0x3c>
    26b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    26b8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26bc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    26c0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26c4:	f04f 0004 	mov.w	r0, #4
    26c8:	f7fe ff18 	bl	14fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26cc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26d0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    26d4:	bf1c      	itt	ne
    26d6:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    26da:	2800      	cmpne	r0, #0
    26dc:	d00b      	beq.n	26f6 <MPSL_IRQ_RTC0_Handler+0x66>
    26de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    26e2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26e6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    26ea:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26ee:	f04f 0005 	mov.w	r0, #5
    26f2:	f7fe ff03 	bl	14fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26f6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26fa:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    26fe:	bf1a      	itte	ne
    2700:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2704:	2800      	cmpne	r0, #0
    2706:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    270a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    270e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2712:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2716:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    271a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    271e:	f04f 0006 	mov.w	r0, #6
    2722:	f7fe beeb 	b.w	14fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2726:	0000      	.short	0x0000
    2728:	4000b000 	.word	0x4000b000

0000272c <MPSL_IRQ_TIMER0_Handler>:
    272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2730:	4d3a      	ldr	r5, [pc, #232]	; (281c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2732:	7828      	ldrb	r0, [r5, #0]
    2734:	2804      	cmp	r0, #4
    2736:	d06c      	beq.n	2812 <MPSL_IRQ_TIMER0_Handler+0xe6>
    2738:	1ce8      	adds	r0, r5, #3
    273a:	2201      	movs	r2, #1
    273c:	7801      	ldrb	r1, [r0, #0]
    273e:	b159      	cbz	r1, 2758 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2740:	2901      	cmp	r1, #1
    2742:	bf08      	it	eq
    2744:	706a      	strbeq	r2, [r5, #1]
    2746:	d002      	beq.n	274e <MPSL_IRQ_TIMER0_Handler+0x22>
    2748:	7869      	ldrb	r1, [r5, #1]
    274a:	2900      	cmp	r1, #0
    274c:	d05c      	beq.n	2808 <MPSL_IRQ_TIMER0_Handler+0xdc>
    274e:	2102      	movs	r1, #2
    2750:	7001      	strb	r1, [r0, #0]
    2752:	7840      	ldrb	r0, [r0, #1]
    2754:	f000 fae2 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2758:	4c31      	ldr	r4, [pc, #196]	; (2820 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    275a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    275e:	f04f 0800 	mov.w	r8, #0
    2762:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2766:	f44f 7680 	mov.w	r6, #256	; 0x100
    276a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    276e:	bf1c      	itt	ne
    2770:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    2774:	2800      	cmpne	r0, #0
    2776:	d008      	beq.n	278a <MPSL_IRQ_TIMER0_Handler+0x5e>
    2778:	f04f 0003 	mov.w	r0, #3
    277c:	f000 face 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2780:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2784:	2003      	movs	r0, #3
    2786:	f7fe feb9 	bl	14fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    278a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    278e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2792:	bf1c      	itt	ne
    2794:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2798:	2800      	cmpne	r0, #0
    279a:	d008      	beq.n	27ae <MPSL_IRQ_TIMER0_Handler+0x82>
    279c:	f04f 0002 	mov.w	r0, #2
    27a0:	f000 fabc 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27a4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27a8:	2002      	movs	r0, #2
    27aa:	f7fe fea7 	bl	14fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27ae:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27b2:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    27b6:	bf1c      	itt	ne
    27b8:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    27bc:	2800      	cmpne	r0, #0
    27be:	d008      	beq.n	27d2 <MPSL_IRQ_TIMER0_Handler+0xa6>
    27c0:	f04f 0001 	mov.w	r0, #1
    27c4:	f000 faaa 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27c8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27cc:	2001      	movs	r0, #1
    27ce:	f7fe fe95 	bl	14fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27d2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27d6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27da:	bf1a      	itte	ne
    27dc:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    27e0:	2800      	cmpne	r0, #0
    27e2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    27e6:	f04f 0000 	mov.w	r0, #0
    27ea:	f000 fa97 	bl	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27ee:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27f2:	2004      	movs	r0, #4
    27f4:	7028      	strb	r0, [r5, #0]
    27f6:	f8c5 8008 	str.w	r8, [r5, #8]
    27fa:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    27fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2802:	2000      	movs	r0, #0
    2804:	f7fe be7a 	b.w	14fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2808:	f240 3172 	movw	r1, #882	; 0x372
    280c:	206c      	movs	r0, #108	; 0x6c
    280e:	f000 fedb 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2816:	2007      	movs	r0, #7
    2818:	f7fe be70 	b.w	14fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    281c:	2000001c 	.word	0x2000001c
    2820:	40008000 	.word	0x40008000
    2824:	2201      	movs	r2, #1
    2826:	0213      	lsls	r3, r2, #8
    2828:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    282c:	2000      	movs	r0, #0
    282e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    2832:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    2836:	f3bf 8f4f 	dsb	sy
    283a:	f3bf 8f6f 	isb	sy
    283e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    2842:	490c      	ldr	r1, [pc, #48]	; (2874 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2844:	604a      	str	r2, [r1, #4]
    2846:	1e43      	subs	r3, r0, #1
    2848:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    284c:	4b0a      	ldr	r3, [pc, #40]	; (2878 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    284e:	6018      	str	r0, [r3, #0]
    2850:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2854:	1d1b      	adds	r3, r3, #4
    2856:	6018      	str	r0, [r3, #0]
    2858:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    285c:	1d1b      	adds	r3, r3, #4
    285e:	6018      	str	r0, [r3, #0]
    2860:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2864:	1d1b      	adds	r3, r3, #4
    2866:	6018      	str	r0, [r3, #0]
    2868:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    286c:	610a      	str	r2, [r1, #16]
    286e:	4903      	ldr	r1, [pc, #12]	; (287c <MPSL_IRQ_TIMER0_Handler+0x150>)
    2870:	7048      	strb	r0, [r1, #1]
    2872:	4770      	bx	lr
    2874:	40008000 	.word	0x40008000
    2878:	40008540 	.word	0x40008540
    287c:	2000001c 	.word	0x2000001c

00002880 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2880:	4801      	ldr	r0, [pc, #4]	; (2888 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2882:	6800      	ldr	r0, [r0, #0]
    2884:	4770      	bx	lr
    2886:	0000      	.short	0x0000
    2888:	4000b504 	.word	0x4000b504

0000288c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    288c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2890:	4e41      	ldr	r6, [pc, #260]	; (2998 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2892:	4604      	mov	r4, r0
    2894:	1ef7      	subs	r7, r6, #3
    2896:	f896 c000 	ldrb.w	ip, [r6]
    289a:	68f8      	ldr	r0, [r7, #12]
    289c:	f1bc 0f01 	cmp.w	ip, #1
    28a0:	bf04      	itt	eq
    28a2:	42a0      	cmpeq	r0, r4
    28a4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    28a8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    28ac:	4a3b      	ldr	r2, [pc, #236]	; (299c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    28ae:	6011      	str	r1, [r2, #0]
    28b0:	493b      	ldr	r1, [pc, #236]	; (29a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    28b2:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    28b6:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    28ba:	4a3a      	ldr	r2, [pc, #232]	; (29a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    28bc:	f04f 0500 	mov.w	r5, #0
    28c0:	f1bc 0f00 	cmp.w	ip, #0
    28c4:	d057      	beq.n	2976 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    28c6:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    28ca:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    28ce:	6015      	str	r5, [r2, #0]
    28d0:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    28d4:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    28d8:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    28dc:	f04f 0801 	mov.w	r8, #1
    28e0:	2a00      	cmp	r2, #0
    28e2:	bf04      	itt	eq
    28e4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    28e8:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    28ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    28f0:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    28f4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    28f8:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    28fc:	4a2a      	ldr	r2, [pc, #168]	; (29a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    28fe:	f8d2 a000 	ldr.w	sl, [r2]
    2902:	eba4 0a0a 	sub.w	sl, r4, sl
    2906:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    290a:	f1bb 0f02 	cmp.w	fp, #2
    290e:	d33c      	bcc.n	298a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2910:	f04f 0a02 	mov.w	sl, #2
    2914:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2918:	d237      	bcs.n	298a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    291a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    291e:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2922:	f1bc 0f00 	cmp.w	ip, #0
    2926:	d005      	beq.n	2934 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2928:	6811      	ldr	r1, [r2, #0]
    292a:	1a41      	subs	r1, r0, r1
    292c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2930:	2902      	cmp	r1, #2
    2932:	d3f9      	bcc.n	2928 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2934:	f8c7 8008 	str.w	r8, [r7, #8]
    2938:	703d      	strb	r5, [r7, #0]
    293a:	f7ff ff73 	bl	2824 <MPSL_IRQ_TIMER0_Handler+0xf8>
    293e:	481b      	ldr	r0, [pc, #108]	; (29ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2940:	6005      	str	r5, [r0, #0]
    2942:	1d00      	adds	r0, r0, #4
    2944:	f8c0 a000 	str.w	sl, [r0]
    2948:	4919      	ldr	r1, [pc, #100]	; (29b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    294a:	2004      	movs	r0, #4
    294c:	6008      	str	r0, [r1, #0]
    294e:	4919      	ldr	r1, [pc, #100]	; (29b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2950:	f8c1 800c 	str.w	r8, [r1, #12]
    2954:	68ba      	ldr	r2, [r7, #8]
    2956:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    295a:	0181      	lsls	r1, r0, #6
    295c:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2960:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2964:	4a14      	ldr	r2, [pc, #80]	; (29b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2966:	0741      	lsls	r1, r0, #29
    2968:	6011      	str	r1, [r2, #0]
    296a:	60fc      	str	r4, [r7, #12]
    296c:	7070      	strb	r0, [r6, #1]
    296e:	f886 8000 	strb.w	r8, [r6]
    2972:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2976:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    297a:	4b10      	ldr	r3, [pc, #64]	; (29bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    297c:	601d      	str	r5, [r3, #0]
    297e:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2982:	6015      	str	r5, [r2, #0]
    2984:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2988:	e7a4      	b.n	28d4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    298a:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    298e:	f240 11a5 	movw	r1, #421	; 0x1a5
    2992:	206c      	movs	r0, #108	; 0x6c
    2994:	f000 fe18 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2998:	2000001f 	.word	0x2000001f
    299c:	4001f508 	.word	0x4001f508
    29a0:	4000b000 	.word	0x4000b000
    29a4:	4000b544 	.word	0x4000b544
    29a8:	4000b504 	.word	0x4000b504
    29ac:	40008504 	.word	0x40008504
    29b0:	40008510 	.word	0x40008510
    29b4:	40008000 	.word	0x40008000
    29b8:	4001f504 	.word	0x4001f504
    29bc:	4000b540 	.word	0x4000b540

000029c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    29c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29c4:	4c2b      	ldr	r4, [pc, #172]	; (2a74 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    29c6:	68e1      	ldr	r1, [r4, #12]
    29c8:	4281      	cmp	r1, r0
    29ca:	bf14      	ite	ne
    29cc:	2201      	movne	r2, #1
    29ce:	2200      	moveq	r2, #0
    29d0:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2a78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    29d4:	f89c 7000 	ldrb.w	r7, [ip]
    29d8:	2f02      	cmp	r7, #2
    29da:	d002      	beq.n	29e2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    29dc:	2a00      	cmp	r2, #0
    29de:	d038      	beq.n	2a52 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    29e0:	e003      	b.n	29ea <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    29e2:	2a00      	cmp	r2, #0
    29e4:	bf08      	it	eq
    29e6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29ea:	7862      	ldrb	r2, [r4, #1]
    29ec:	b382      	cbz	r2, 2a50 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    29ee:	4b23      	ldr	r3, [pc, #140]	; (2a7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    29f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29f4:	601a      	str	r2, [r3, #0]
    29f6:	4b22      	ldr	r3, [pc, #136]	; (2a80 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    29f8:	1395      	asrs	r5, r2, #14
    29fa:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    29fe:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2a02:	2600      	movs	r6, #0
    2a04:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2a08:	4a1e      	ldr	r2, [pc, #120]	; (2a84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2a0a:	f8d2 8000 	ldr.w	r8, [r2]
    2a0e:	eba0 0808 	sub.w	r8, r0, r8
    2a12:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2a16:	f1b8 0f02 	cmp.w	r8, #2
    2a1a:	d324      	bcc.n	2a66 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a1c:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2a20:	d221      	bcs.n	2a66 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a22:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a26:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2a2a:	b12f      	cbz	r7, 2a38 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2a2c:	6813      	ldr	r3, [r2, #0]
    2a2e:	1acb      	subs	r3, r1, r3
    2a30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a34:	2b02      	cmp	r3, #2
    2a36:	d3f9      	bcc.n	2a2c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2a38:	4b13      	ldr	r3, [pc, #76]	; (2a88 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2a3a:	2102      	movs	r1, #2
    2a3c:	074a      	lsls	r2, r1, #29
    2a3e:	601a      	str	r2, [r3, #0]
    2a40:	60e0      	str	r0, [r4, #12]
    2a42:	2004      	movs	r0, #4
    2a44:	f88c 0001 	strb.w	r0, [ip, #1]
    2a48:	f88c 1000 	strb.w	r1, [ip]
    2a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a50:	e004      	b.n	2a5c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2a52:	f240 11b3 	movw	r1, #435	; 0x1b3
    2a56:	206c      	movs	r0, #108	; 0x6c
    2a58:	f000 fdb6 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a5c:	f240 11b7 	movw	r1, #439	; 0x1b7
    2a60:	206c      	movs	r0, #108	; 0x6c
    2a62:	f000 fdb1 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a66:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2a6a:	f240 11c3 	movw	r1, #451	; 0x1c3
    2a6e:	206c      	movs	r0, #108	; 0x6c
    2a70:	f000 fdaa 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a74:	2000001c 	.word	0x2000001c
    2a78:	2000001f 	.word	0x2000001f
    2a7c:	4001f508 	.word	0x4001f508
    2a80:	4000b000 	.word	0x4000b000
    2a84:	4000b504 	.word	0x4000b504
    2a88:	4001f504 	.word	0x4001f504

00002a8c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2a8c:	4801      	ldr	r0, [pc, #4]	; (2a94 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2a8e:	68c0      	ldr	r0, [r0, #12]
    2a90:	4770      	bx	lr
    2a92:	0000      	.short	0x0000
    2a94:	2000001c 	.word	0x2000001c

00002a98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a9c:	4833      	ldr	r0, [pc, #204]	; (2b6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2a9e:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2aa2:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2aa6:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2b70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2aaa:	4a32      	ldr	r2, [pc, #200]	; (2b74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2aac:	2100      	movs	r1, #0
    2aae:	f89c 3000 	ldrb.w	r3, [ip]
    2ab2:	b163      	cbz	r3, 2ace <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2ab4:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2ab8:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2abc:	6011      	str	r1, [r2, #0]
    2abe:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2ac2:	bf00      	nop
    2ac4:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2ac8:	2201      	movs	r2, #1
    2aca:	b980      	cbnz	r0, 2aee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2acc:	e009      	b.n	2ae2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2ace:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2ad2:	4c29      	ldr	r4, [pc, #164]	; (2b78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2ad4:	6021      	str	r1, [r4, #0]
    2ad6:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2ada:	6011      	str	r1, [r2, #0]
    2adc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2ae0:	e7f0      	b.n	2ac4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2ae2:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2ae6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2aea:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2aee:	2b02      	cmp	r3, #2
    2af0:	d004      	beq.n	2afc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2af2:	f240 11cf 	movw	r1, #463	; 0x1cf
    2af6:	206c      	movs	r0, #108	; 0x6c
    2af8:	f000 fd66 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2afc:	4e1f      	ldr	r6, [pc, #124]	; (2b7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2afe:	6830      	ldr	r0, [r6, #0]
    2b00:	4c1f      	ldr	r4, [pc, #124]	; (2b80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2b02:	1cc0      	adds	r0, r0, #3
    2b04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b08:	68e3      	ldr	r3, [r4, #12]
    2b0a:	4d1e      	ldr	r5, [pc, #120]	; (2b84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2b0c:	4298      	cmp	r0, r3
    2b0e:	d00b      	beq.n	2b28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b10:	6837      	ldr	r7, [r6, #0]
    2b12:	1bdf      	subs	r7, r3, r7
    2b14:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2b18:	2f04      	cmp	r7, #4
    2b1a:	d305      	bcc.n	2b28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b1c:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2b20:	d202      	bcs.n	2b28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b22:	f7ff feb3 	bl	288c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2b26:	e01b      	b.n	2b60 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b28:	6830      	ldr	r0, [r6, #0]
    2b2a:	1a18      	subs	r0, r3, r0
    2b2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b30:	2802      	cmp	r0, #2
    2b32:	d313      	bcc.n	2b5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b34:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2b38:	d210      	bcs.n	2b5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b3a:	4b13      	ldr	r3, [pc, #76]	; (2b88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2b3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2b40:	6018      	str	r0, [r3, #0]
    2b42:	60a2      	str	r2, [r4, #8]
    2b44:	7021      	strb	r1, [r4, #0]
    2b46:	606a      	str	r2, [r5, #4]
    2b48:	60ea      	str	r2, [r5, #12]
    2b4a:	0040      	lsls	r0, r0, #1
    2b4c:	1f19      	subs	r1, r3, #4
    2b4e:	6008      	str	r0, [r1, #0]
    2b50:	2004      	movs	r0, #4
    2b52:	f88c 0001 	strb.w	r0, [ip, #1]
    2b56:	f88c 2000 	strb.w	r2, [ip]
    2b5a:	e001      	b.n	2b60 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b5c:	60a2      	str	r2, [r4, #8]
    2b5e:	7021      	strb	r1, [r4, #0]
    2b60:	68a0      	ldr	r0, [r4, #8]
    2b62:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b6a:	0000      	.short	0x0000
    2b6c:	4000b000 	.word	0x4000b000
    2b70:	2000001f 	.word	0x2000001f
    2b74:	4000b544 	.word	0x4000b544
    2b78:	4000b540 	.word	0x4000b540
    2b7c:	4000b504 	.word	0x4000b504
    2b80:	2000001c 	.word	0x2000001c
    2b84:	40008000 	.word	0x40008000
    2b88:	4001f508 	.word	0x4001f508

00002b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b90:	f8df c174 	ldr.w	ip, [pc, #372]	; 2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2b94:	2701      	movs	r7, #1
    2b96:	f04f 0800 	mov.w	r8, #0
    2b9a:	f89c 5000 	ldrb.w	r5, [ip]
    2b9e:	f89c c001 	ldrb.w	ip, [ip, #1]
    2ba2:	2807      	cmp	r0, #7
    2ba4:	d27e      	bcs.n	2ca4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2ba6:	e8df f000 	tbb	[pc, r0]
    2baa:	0404      	.short	0x0404
    2bac:	6a6a0404 	.word	0x6a6a0404
    2bb0:	006a      	.short	0x006a
    2bb2:	4c56      	ldr	r4, [pc, #344]	; (2d0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2bb4:	68e6      	ldr	r6, [r4, #12]
    2bb6:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2bba:	bf04      	itt	eq
    2bbc:	7864      	ldrbeq	r4, [r4, #1]
    2bbe:	2c00      	cmpeq	r4, #0
    2bc0:	d002      	beq.n	2bc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2bc2:	2d02      	cmp	r5, #2
    2bc4:	d005      	beq.n	2bd2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2bc6:	e03c      	b.n	2c42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2bc8:	f240 2102 	movw	r1, #514	; 0x202
    2bcc:	206c      	movs	r0, #108	; 0x6c
    2bce:	f000 fcfb 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bd2:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2bd6:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2bda:	f1ac 0404 	sub.w	r4, ip, #4
    2bde:	0624      	lsls	r4, r4, #24
    2be0:	0da4      	lsrs	r4, r4, #22
    2be2:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2be6:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2bea:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2bee:	2400      	movs	r4, #0
    2bf0:	2d01      	cmp	r5, #1
    2bf2:	d002      	beq.n	2bfa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2bf4:	2d02      	cmp	r5, #2
    2bf6:	d011      	beq.n	2c1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2bf8:	e020      	b.n	2c3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2bfa:	f1bc 0f04 	cmp.w	ip, #4
    2bfe:	d205      	bcs.n	2c0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2c00:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c04:	f1ba 0f00 	cmp.w	sl, #0
    2c08:	d118      	bne.n	2c3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c0a:	e004      	b.n	2c16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2c0c:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c10:	f1ba 0f00 	cmp.w	sl, #0
    2c14:	d112      	bne.n	2c3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c16:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2c1a:	e00f      	b.n	2c3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c1c:	f1bc 0f04 	cmp.w	ip, #4
    2c20:	d205      	bcs.n	2c2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2c22:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c26:	f1ba 0f00 	cmp.w	sl, #0
    2c2a:	d107      	bne.n	2c3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c2c:	e004      	b.n	2c38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2c2e:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c32:	f1ba 0f00 	cmp.w	sl, #0
    2c36:	d101      	bne.n	2c3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c38:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2c3c:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2c40:	d1d5      	bne.n	2bee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2c42:	4c33      	ldr	r4, [pc, #204]	; (2d10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2c44:	f100 0c10 	add.w	ip, r0, #16
    2c48:	fa07 fc0c 	lsl.w	ip, r7, ip
    2c4c:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2c50:	0080      	lsls	r0, r0, #2
    2c52:	4420      	add	r0, r4
    2c54:	b152      	cbz	r2, 2c6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2c56:	6407      	str	r7, [r0, #64]	; 0x40
    2c58:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2c5c:	1b8d      	subs	r5, r1, r6
    2c5e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2c62:	42aa      	cmp	r2, r5
    2c64:	bf98      	it	ls
    2c66:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2c6a:	d243      	bcs.n	2cf4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2c6c:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2c70:	2b01      	cmp	r3, #1
    2c72:	bf08      	it	eq
    2c74:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2c78:	2001      	movs	r0, #1
    2c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c7e:	b135      	cbz	r5, 2c8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2c80:	4584      	cmp	ip, r0
    2c82:	d104      	bne.n	2c8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2c84:	f240 2129 	movw	r1, #553	; 0x229
    2c88:	206c      	movs	r0, #108	; 0x6c
    2c8a:	f000 fc9d 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c8e:	1f00      	subs	r0, r0, #4
    2c90:	b2c0      	uxtb	r0, r0
    2c92:	2b01      	cmp	r3, #1
    2c94:	bf0c      	ite	eq
    2c96:	2401      	moveq	r4, #1
    2c98:	2400      	movne	r4, #0
    2c9a:	2803      	cmp	r0, #3
    2c9c:	d306      	bcc.n	2cac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2c9e:	f240 1103 	movw	r1, #259	; 0x103
    2ca2:	e000      	b.n	2ca6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2ca4:	e02b      	b.n	2cfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2ca6:	206c      	movs	r0, #108	; 0x6c
    2ca8:	f000 fc8e 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cac:	f8df c064 	ldr.w	ip, [pc, #100]	; 2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2cb0:	f100 0310 	add.w	r3, r0, #16
    2cb4:	fa07 f303 	lsl.w	r3, r7, r3
    2cb8:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2cbc:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2cc0:	0080      	lsls	r0, r0, #2
    2cc2:	4460      	add	r0, ip
    2cc4:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2cc8:	b14a      	cbz	r2, 2cde <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2cca:	4d13      	ldr	r5, [pc, #76]	; (2d18 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2ccc:	682e      	ldr	r6, [r5, #0]
    2cce:	1b8d      	subs	r5, r1, r6
    2cd0:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2cd4:	42aa      	cmp	r2, r5
    2cd6:	bf98      	it	ls
    2cd8:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2cdc:	d20a      	bcs.n	2cf4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2cde:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2ce2:	2c00      	cmp	r4, #0
    2ce4:	bf18      	it	ne
    2ce6:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2cea:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2cee:	2001      	movs	r0, #1
    2cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cf4:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2cf8:	2000      	movs	r0, #0
    2cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cfe:	f240 212e 	movw	r1, #558	; 0x22e
    2d02:	206c      	movs	r0, #108	; 0x6c
    2d04:	f000 fc60 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d08:	2000001f 	.word	0x2000001f
    2d0c:	2000001c 	.word	0x2000001c
    2d10:	40008000 	.word	0x40008000
    2d14:	4000b000 	.word	0x4000b000
    2d18:	4000b504 	.word	0x4000b504

00002d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d1e:	2701      	movs	r7, #1
    2d20:	2400      	movs	r4, #0
    2d22:	2807      	cmp	r0, #7
    2d24:	d243      	bcs.n	2dae <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x92>
    2d26:	e8df f000 	tbb	[pc, r0]
    2d2a:	0404      	.short	0x0404
    2d2c:	16160404 	.word	0x16160404
    2d30:	0016      	.short	0x0016
    2d32:	4a21      	ldr	r2, [pc, #132]	; (2db8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x9c>)
    2d34:	f100 0110 	add.w	r1, r0, #16
    2d38:	fa07 f101 	lsl.w	r1, r7, r1
    2d3c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2d40:	0081      	lsls	r1, r0, #2
    2d42:	4411      	add	r1, r2
    2d44:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2d48:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2d4c:	491b      	ldr	r1, [pc, #108]	; (2dbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa0>)
    2d4e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2d52:	9000      	str	r0, [sp, #0]
    2d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d56:	4d1a      	ldr	r5, [pc, #104]	; (2dc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>)
    2d58:	1f01      	subs	r1, r0, #4
    2d5a:	b2ce      	uxtb	r6, r1
    2d5c:	7829      	ldrb	r1, [r5, #0]
    2d5e:	b179      	cbz	r1, 2d80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2d60:	786a      	ldrb	r2, [r5, #1]
    2d62:	4282      	cmp	r2, r0
    2d64:	d10c      	bne.n	2d80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2d66:	4a17      	ldr	r2, [pc, #92]	; (2dc4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>)
    2d68:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2d6c:	6010      	str	r0, [r2, #0]
    2d6e:	2901      	cmp	r1, #1
    2d70:	bf08      	it	eq
    2d72:	f7ff fd57 	bleq	2824 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2d76:	702c      	strb	r4, [r5, #0]
    2d78:	4913      	ldr	r1, [pc, #76]	; (2dc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xac>)
    2d7a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2d7e:	60c8      	str	r0, [r1, #12]
    2d80:	f106 0010 	add.w	r0, r6, #16
    2d84:	fa07 f100 	lsl.w	r1, r7, r0
    2d88:	4810      	ldr	r0, [pc, #64]	; (2dcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2d8a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2d8e:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2d92:	00b0      	lsls	r0, r6, #2
    2d94:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2d98:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2d9c:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2da0:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2da4:	480a      	ldr	r0, [pc, #40]	; (2dd0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2da6:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2daa:	9000      	str	r0, [sp, #0]
    2dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dae:	f240 219b 	movw	r1, #667	; 0x29b
    2db2:	206c      	movs	r0, #108	; 0x6c
    2db4:	f000 fc08 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2db8:	40008000 	.word	0x40008000
    2dbc:	40008140 	.word	0x40008140
    2dc0:	2000001f 	.word	0x2000001f
    2dc4:	4001f508 	.word	0x4001f508
    2dc8:	2000001c 	.word	0x2000001c
    2dcc:	4000b000 	.word	0x4000b000
    2dd0:	4000b140 	.word	0x4000b140

00002dd4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2dd4:	491e      	ldr	r1, [pc, #120]	; (2e50 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2dd6:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2dda:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2dde:	481d      	ldr	r0, [pc, #116]	; (2e54 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2de0:	4a1d      	ldr	r2, [pc, #116]	; (2e58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2de2:	f890 c000 	ldrb.w	ip, [r0]
    2de6:	2000      	movs	r0, #0
    2de8:	f1bc 0f00 	cmp.w	ip, #0
    2dec:	d00a      	beq.n	2e04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2dee:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2df2:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2df6:	6010      	str	r0, [r2, #0]
    2df8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2dfc:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2e00:	b981      	cbnz	r1, 2e24 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2e02:	e009      	b.n	2e18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2e04:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e08:	4b14      	ldr	r3, [pc, #80]	; (2e5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2e0a:	6018      	str	r0, [r3, #0]
    2e0c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e10:	6010      	str	r0, [r2, #0]
    2e12:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e16:	e7f1      	b.n	2dfc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2e18:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2e20:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2e24:	490e      	ldr	r1, [pc, #56]	; (2e60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e2a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2e2e:	4a0d      	ldr	r2, [pc, #52]	; (2e64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2e30:	6010      	str	r0, [r2, #0]
    2e32:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e36:	1d12      	adds	r2, r2, #4
    2e38:	6010      	str	r0, [r2, #0]
    2e3a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e3e:	1d12      	adds	r2, r2, #4
    2e40:	6010      	str	r0, [r2, #0]
    2e42:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2e46:	1d12      	adds	r2, r2, #4
    2e48:	6010      	str	r0, [r2, #0]
    2e4a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2e4e:	4770      	bx	lr
    2e50:	4000b000 	.word	0x4000b000
    2e54:	2000001f 	.word	0x2000001f
    2e58:	4000b544 	.word	0x4000b544
    2e5c:	4000b540 	.word	0x4000b540
    2e60:	40008000 	.word	0x40008000
    2e64:	40008540 	.word	0x40008540

00002e68 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2e68:	4808      	ldr	r0, [pc, #32]	; (2e8c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2e6a:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2e6e:	2800      	cmp	r0, #0
    2e70:	bfb8      	it	lt
    2e72:	4770      	bxlt	lr
    2e74:	f000 011f 	and.w	r1, r0, #31
    2e78:	2201      	movs	r2, #1
    2e7a:	fa02 f101 	lsl.w	r1, r2, r1
    2e7e:	0940      	lsrs	r0, r0, #5
    2e80:	0080      	lsls	r0, r0, #2
    2e82:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2e86:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2e8a:	4770      	bx	lr
    2e8c:	2000001c 	.word	0x2000001c

00002e90 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2e90:	b510      	push	{r4, lr}
    2e92:	2807      	cmp	r0, #7
    2e94:	d20d      	bcs.n	2eb2 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2e96:	e8df f000 	tbb	[pc, r0]
    2e9a:	0404      	.short	0x0404
    2e9c:	06060404 	.word	0x06060404
    2ea0:	0006      	.short	0x0006
    2ea2:	4906      	ldr	r1, [pc, #24]	; (2ebc <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    2ea4:	e002      	b.n	2eac <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    2ea6:	1f00      	subs	r0, r0, #4
    2ea8:	4905      	ldr	r1, [pc, #20]	; (2ec0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    2eaa:	b2c0      	uxtb	r0, r0
    2eac:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2eb0:	bd10      	pop	{r4, pc}
    2eb2:	f240 2152 	movw	r1, #594	; 0x252
    2eb6:	206c      	movs	r0, #108	; 0x6c
    2eb8:	f000 fb86 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ebc:	40008140 	.word	0x40008140
    2ec0:	4000b140 	.word	0x4000b140

00002ec4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    2ec4:	b570      	push	{r4, r5, r6, lr}
    2ec6:	4819      	ldr	r0, [pc, #100]	; (2f2c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    2ec8:	2400      	movs	r4, #0
    2eca:	2104      	movs	r1, #4
    2ecc:	7004      	strb	r4, [r0, #0]
    2ece:	1ec0      	subs	r0, r0, #3
    2ed0:	7001      	strb	r1, [r0, #0]
    2ed2:	0589      	lsls	r1, r1, #22
    2ed4:	60c1      	str	r1, [r0, #12]
    2ed6:	f7ff fca5 	bl	2824 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2eda:	2501      	movs	r5, #1
    2edc:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2ee0:	02eb      	lsls	r3, r5, #11
    2ee2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    2ee6:	f3bf 8f4f 	dsb	sy
    2eea:	f3bf 8f6f 	isb	sy
    2eee:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    2ef2:	4a0f      	ldr	r2, [pc, #60]	; (2f30 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    2ef4:	6055      	str	r5, [r2, #4]
    2ef6:	6095      	str	r5, [r2, #8]
    2ef8:	480e      	ldr	r0, [pc, #56]	; (2f34 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    2efa:	6801      	ldr	r1, [r0, #0]
    2efc:	2900      	cmp	r1, #0
    2efe:	d1fc      	bne.n	2efa <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    2f00:	1e48      	subs	r0, r1, #1
    2f02:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2f06:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2f0a:	480b      	ldr	r0, [pc, #44]	; (2f38 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    2f0c:	6004      	str	r4, [r0, #0]
    2f0e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2f12:	1d00      	adds	r0, r0, #4
    2f14:	6004      	str	r4, [r0, #0]
    2f16:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2f1a:	1d00      	adds	r0, r0, #4
    2f1c:	6004      	str	r4, [r0, #0]
    2f1e:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    2f22:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    2f26:	6015      	str	r5, [r2, #0]
    2f28:	bd70      	pop	{r4, r5, r6, pc}
    2f2a:	0000      	.short	0x0000
    2f2c:	2000001f 	.word	0x2000001f
    2f30:	4000b000 	.word	0x4000b000
    2f34:	4000b504 	.word	0x4000b504
    2f38:	4000b540 	.word	0x4000b540

00002f3c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    2f3c:	0b43      	lsrs	r3, r0, #13
    2f3e:	f248 6c37 	movw	ip, #34359	; 0x8637
    2f42:	fb03 f30c 	mul.w	r3, r3, ip
    2f46:	0c1b      	lsrs	r3, r3, #16
    2f48:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    2f4c:	f8c1 c000 	str.w	ip, [r1]
    2f50:	f8df c038 	ldr.w	ip, [pc, #56]	; 2f8c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    2f54:	fb03 030c 	mla	r3, r3, ip, r0
    2f58:	480d      	ldr	r0, [pc, #52]	; (2f90 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    2f5a:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    2f5e:	4358      	muls	r0, r3
    2f60:	0d40      	lsrs	r0, r0, #21
    2f62:	fb10 fc0c 	smulbb	ip, r0, ip
    2f66:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    2f6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2f6e:	125b      	asrs	r3, r3, #9
    2f70:	7013      	strb	r3, [r2, #0]
    2f72:	680b      	ldr	r3, [r1, #0]
    2f74:	4418      	add	r0, r3
    2f76:	6008      	str	r0, [r1, #0]
    2f78:	7810      	ldrb	r0, [r2, #0]
    2f7a:	281f      	cmp	r0, #31
    2f7c:	bf18      	it	ne
    2f7e:	4770      	bxne	lr
    2f80:	2000      	movs	r0, #0
    2f82:	7010      	strb	r0, [r2, #0]
    2f84:	6808      	ldr	r0, [r1, #0]
    2f86:	1c40      	adds	r0, r0, #1
    2f88:	6008      	str	r0, [r1, #0]
    2f8a:	4770      	bx	lr
    2f8c:	ffffc2f7 	.word	0xffffc2f7
    2f90:	00010c6f 	.word	0x00010c6f

00002f94 <MPSL_IRQ_CLOCK_Handler>:
    2f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f98:	f44f 7180 	mov.w	r1, #256	; 0x100
    2f9c:	058d      	lsls	r5, r1, #22
    2f9e:	4628      	mov	r0, r5
    2fa0:	f00b fc33 	bl	e80a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fa4:	4680      	mov	r8, r0
    2fa6:	f44f 7182 	mov.w	r1, #260	; 0x104
    2faa:	4628      	mov	r0, r5
    2fac:	f00b fc2d 	bl	e80a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fb0:	2600      	movs	r6, #0
    2fb2:	4607      	mov	r7, r0
    2fb4:	f1b8 0f00 	cmp.w	r8, #0
    2fb8:	d00a      	beq.n	2fd0 <MPSL_IRQ_CLOCK_Handler+0x3c>
    2fba:	2001      	movs	r0, #1
    2fbc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2fc0:	4c07      	ldr	r4, [pc, #28]	; (2fe0 <MPSL_IRQ_CLOCK_Handler+0x4c>)
    2fc2:	7920      	ldrb	r0, [r4, #4]
    2fc4:	b120      	cbz	r0, 2fd0 <MPSL_IRQ_CLOCK_Handler+0x3c>
    2fc6:	7126      	strb	r6, [r4, #4]
    2fc8:	69a0      	ldr	r0, [r4, #24]
    2fca:	b108      	cbz	r0, 2fd0 <MPSL_IRQ_CLOCK_Handler+0x3c>
    2fcc:	4780      	blx	r0
    2fce:	61a6      	str	r6, [r4, #24]
    2fd0:	b10f      	cbz	r7, 2fd6 <MPSL_IRQ_CLOCK_Handler+0x42>
    2fd2:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    2fd6:	4640      	mov	r0, r8
    2fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2fdc:	f000 b848 	b.w	3070 <MPSL_IRQ_CLOCK_Handler+0xdc>
    2fe0:	2000002c 	.word	0x2000002c
    2fe4:	b510      	push	{r4, lr}
    2fe6:	f000 f973 	bl	32d0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2fea:	f000 fa89 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2fee:	2302      	movs	r3, #2
    2ff0:	4908      	ldr	r1, [pc, #32]	; (3014 <MPSL_IRQ_CLOCK_Handler+0x80>)
    2ff2:	075a      	lsls	r2, r3, #29
    2ff4:	b130      	cbz	r0, 3004 <MPSL_IRQ_CLOCK_Handler+0x70>
    2ff6:	4808      	ldr	r0, [pc, #32]	; (3018 <MPSL_IRQ_CLOCK_Handler+0x84>)
    2ff8:	6003      	str	r3, [r0, #0]
    2ffa:	2001      	movs	r0, #1
    2ffc:	6110      	str	r0, [r2, #16]
    2ffe:	2003      	movs	r0, #3
    3000:	7248      	strb	r0, [r1, #9]
    3002:	e003      	b.n	300c <MPSL_IRQ_CLOCK_Handler+0x78>
    3004:	724b      	strb	r3, [r1, #9]
    3006:	2001      	movs	r0, #1
    3008:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    300c:	2000      	movs	r0, #0
    300e:	71c8      	strb	r0, [r1, #7]
    3010:	bd10      	pop	{r4, pc}
    3012:	0000      	.short	0x0000
    3014:	2000002c 	.word	0x2000002c
    3018:	40000c34 	.word	0x40000c34
    301c:	b570      	push	{r4, r5, r6, lr}
    301e:	4c13      	ldr	r4, [pc, #76]	; (306c <MPSL_IRQ_CLOCK_Handler+0xd8>)
    3020:	79a0      	ldrb	r0, [r4, #6]
    3022:	b1f0      	cbz	r0, 3062 <MPSL_IRQ_CLOCK_Handler+0xce>
    3024:	2801      	cmp	r0, #1
    3026:	d003      	beq.n	3030 <MPSL_IRQ_CLOCK_Handler+0x9c>
    3028:	79e1      	ldrb	r1, [r4, #7]
    302a:	1e40      	subs	r0, r0, #1
    302c:	4281      	cmp	r1, r0
    302e:	da18      	bge.n	3062 <MPSL_IRQ_CLOCK_Handler+0xce>
    3030:	f000 fa66 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3034:	4605      	mov	r5, r0
    3036:	f000 fb37 	bl	36a8 <mpsl_temperature_get>
    303a:	79a1      	ldrb	r1, [r4, #6]
    303c:	2901      	cmp	r1, #1
    303e:	d902      	bls.n	3046 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3040:	79e1      	ldrb	r1, [r4, #7]
    3042:	1c49      	adds	r1, r1, #1
    3044:	71e1      	strb	r1, [r4, #7]
    3046:	b10d      	cbz	r5, 304c <MPSL_IRQ_CLOCK_Handler+0xb8>
    3048:	6961      	ldr	r1, [r4, #20]
    304a:	e000      	b.n	304e <MPSL_IRQ_CLOCK_Handler+0xba>
    304c:	6921      	ldr	r1, [r4, #16]
    304e:	1a41      	subs	r1, r0, r1
    3050:	2902      	cmp	r1, #2
    3052:	da02      	bge.n	305a <MPSL_IRQ_CLOCK_Handler+0xc6>
    3054:	f111 0f02 	cmn.w	r1, #2
    3058:	dc07      	bgt.n	306a <MPSL_IRQ_CLOCK_Handler+0xd6>
    305a:	b10d      	cbz	r5, 3060 <MPSL_IRQ_CLOCK_Handler+0xcc>
    305c:	6160      	str	r0, [r4, #20]
    305e:	e000      	b.n	3062 <MPSL_IRQ_CLOCK_Handler+0xce>
    3060:	6120      	str	r0, [r4, #16]
    3062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3066:	f7ff bfbd 	b.w	2fe4 <MPSL_IRQ_CLOCK_Handler+0x50>
    306a:	bd70      	pop	{r4, r5, r6, pc}
    306c:	2000002c 	.word	0x2000002c
    3070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3074:	4606      	mov	r6, r0
    3076:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    307a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    307e:	4628      	mov	r0, r5
    3080:	f00b fbc3 	bl	e80a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3084:	4681      	mov	r9, r0
    3086:	f44f 7188 	mov.w	r1, #272	; 0x110
    308a:	4628      	mov	r0, r5
    308c:	f00b fbbd 	bl	e80a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3090:	4c22      	ldr	r4, [pc, #136]	; (311c <MPSL_IRQ_CLOCK_Handler+0x188>)
    3092:	4682      	mov	sl, r0
    3094:	f894 8000 	ldrb.w	r8, [r4]
    3098:	f104 0008 	add.w	r0, r4, #8
    309c:	f00b fc28 	bl	e8f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    30a0:	b110      	cbz	r0, 30a8 <MPSL_IRQ_CLOCK_Handler+0x114>
    30a2:	f44f 71c4 	mov.w	r1, #392	; 0x188
    30a6:	e015      	b.n	30d4 <MPSL_IRQ_CLOCK_Handler+0x140>
    30a8:	481d      	ldr	r0, [pc, #116]	; (3120 <MPSL_IRQ_CLOCK_Handler+0x18c>)
    30aa:	2701      	movs	r7, #1
    30ac:	b13e      	cbz	r6, 30be <MPSL_IRQ_CLOCK_Handler+0x12a>
    30ae:	7a61      	ldrb	r1, [r4, #9]
    30b0:	2902      	cmp	r1, #2
    30b2:	d104      	bne.n	30be <MPSL_IRQ_CLOCK_Handler+0x12a>
    30b4:	2103      	movs	r1, #3
    30b6:	7261      	strb	r1, [r4, #9]
    30b8:	2102      	movs	r1, #2
    30ba:	6001      	str	r1, [r0, #0]
    30bc:	612f      	str	r7, [r5, #16]
    30be:	2600      	movs	r6, #0
    30c0:	f1b9 0f00 	cmp.w	r9, #0
    30c4:	d00d      	beq.n	30e2 <MPSL_IRQ_CLOCK_Handler+0x14e>
    30c6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    30ca:	7a61      	ldrb	r1, [r4, #9]
    30cc:	2903      	cmp	r1, #3
    30ce:	d004      	beq.n	30da <MPSL_IRQ_CLOCK_Handler+0x146>
    30d0:	f240 119f 	movw	r1, #415	; 0x19f
    30d4:	206d      	movs	r0, #109	; 0x6d
    30d6:	f000 fa77 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30da:	6006      	str	r6, [r0, #0]
    30dc:	7267      	strb	r7, [r4, #9]
    30de:	f000 f8db 	bl	3298 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    30e2:	f1ba 0f00 	cmp.w	sl, #0
    30e6:	d007      	beq.n	30f8 <MPSL_IRQ_CLOCK_Handler+0x164>
    30e8:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    30ec:	7a60      	ldrb	r0, [r4, #9]
    30ee:	2801      	cmp	r0, #1
    30f0:	d101      	bne.n	30f6 <MPSL_IRQ_CLOCK_Handler+0x162>
    30f2:	f7ff ff93 	bl	301c <MPSL_IRQ_CLOCK_Handler+0x88>
    30f6:	616f      	str	r7, [r5, #20]
    30f8:	f1b8 0f00 	cmp.w	r8, #0
    30fc:	d007      	beq.n	310e <MPSL_IRQ_CLOCK_Handler+0x17a>
    30fe:	7026      	strb	r6, [r4, #0]
    3100:	7a60      	ldrb	r0, [r4, #9]
    3102:	2801      	cmp	r0, #1
    3104:	d101      	bne.n	310a <MPSL_IRQ_CLOCK_Handler+0x176>
    3106:	f7ff ff6d 	bl	2fe4 <MPSL_IRQ_CLOCK_Handler+0x50>
    310a:	f000 f8c5 	bl	3298 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    310e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3112:	4802      	ldr	r0, [pc, #8]	; (311c <MPSL_IRQ_CLOCK_Handler+0x188>)
    3114:	3008      	adds	r0, #8
    3116:	f00b bc02 	b.w	e91e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    311a:	0000      	.short	0x0000
    311c:	2000002c 	.word	0x2000002c
    3120:	40000c34 	.word	0x40000c34
    3124:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3128:	f8df 9160 	ldr.w	r9, [pc, #352]	; 328c <MPSL_IRQ_CLOCK_Handler+0x2f8>
    312c:	7801      	ldrb	r1, [r0, #0]
    312e:	7843      	ldrb	r3, [r0, #1]
    3130:	7882      	ldrb	r2, [r0, #2]
    3132:	2400      	movs	r4, #0
    3134:	f889 100a 	strb.w	r1, [r9, #10]
    3138:	f889 3005 	strb.w	r3, [r9, #5]
    313c:	f889 2006 	strb.w	r2, [r9, #6]
    3140:	4606      	mov	r6, r0
    3142:	4627      	mov	r7, r4
    3144:	f889 4007 	strb.w	r4, [r9, #7]
    3148:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    314c:	2905      	cmp	r1, #5
    314e:	d225      	bcs.n	319c <MPSL_IRQ_CLOCK_Handler+0x208>
    3150:	e8df f001 	tbb	[pc, r1]
    3154:	10050315 	.word	0x10050315
    3158:	0013      	.short	0x0013
    315a:	2401      	movs	r4, #1
    315c:	e00f      	b.n	317e <MPSL_IRQ_CLOCK_Handler+0x1ea>
    315e:	f000 f8b7 	bl	32d0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3162:	4654      	mov	r4, sl
    3164:	2101      	movs	r1, #1
    3166:	4620      	mov	r0, r4
    3168:	f00b fb54 	bl	e814 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    316c:	2800      	cmp	r0, #0
    316e:	d0f9      	beq.n	3164 <MPSL_IRQ_CLOCK_Handler+0x1d0>
    3170:	2402      	movs	r4, #2
    3172:	e004      	b.n	317e <MPSL_IRQ_CLOCK_Handler+0x1ea>
    3174:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    3178:	e001      	b.n	317e <MPSL_IRQ_CLOCK_Handler+0x1ea>
    317a:	f44f 3440 	mov.w	r4, #196608	; 0x30000
    317e:	f00b fb75 	bl	e86c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3182:	b180      	cbz	r0, 31a6 <MPSL_IRQ_CLOCK_Handler+0x212>
    3184:	f000 f9d6 	bl	3534 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3188:	f004 0503 	and.w	r5, r4, #3
    318c:	42a8      	cmp	r0, r5
    318e:	d10a      	bne.n	31a6 <MPSL_IRQ_CLOCK_Handler+0x212>
    3190:	4628      	mov	r0, r5
    3192:	f00b fb5b 	bl	e84c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3196:	2800      	cmp	r0, #0
    3198:	d0fa      	beq.n	3190 <MPSL_IRQ_CLOCK_Handler+0x1fc>
    319a:	e059      	b.n	3250 <MPSL_IRQ_CLOCK_Handler+0x2bc>
    319c:	f240 217a 	movw	r1, #634	; 0x27a
    31a0:	206d      	movs	r0, #109	; 0x6d
    31a2:	f000 fa11 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31a6:	f04f 0801 	mov.w	r8, #1
    31aa:	4655      	mov	r5, sl
    31ac:	f8ca 800c 	str.w	r8, [sl, #12]
    31b0:	f8ca 7104 	str.w	r7, [sl, #260]	; 0x104
    31b4:	f8ca 4518 	str.w	r4, [sl, #1304]	; 0x518
    31b8:	f00b fbbc 	bl	e934 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    31bc:	b940      	cbnz	r0, 31d0 <MPSL_IRQ_CLOCK_Handler+0x23c>
    31be:	f00b fbc3 	bl	e948 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    31c2:	b928      	cbnz	r0, 31d0 <MPSL_IRQ_CLOCK_Handler+0x23c>
    31c4:	f00b fbca 	bl	e95c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    31c8:	b910      	cbnz	r0, 31d0 <MPSL_IRQ_CLOCK_Handler+0x23c>
    31ca:	f00b fbdb 	bl	e984 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    31ce:	b138      	cbz	r0, 31e0 <MPSL_IRQ_CLOCK_Handler+0x24c>
    31d0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    31d4:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    31d8:	492d      	ldr	r1, [pc, #180]	; (3290 <MPSL_IRQ_CLOCK_Handler+0x2fc>)
    31da:	f3c0 3042 	ubfx	r0, r0, #13, #3
    31de:	6008      	str	r0, [r1, #0]
    31e0:	492b      	ldr	r1, [pc, #172]	; (3290 <MPSL_IRQ_CLOCK_Handler+0x2fc>)
    31e2:	3110      	adds	r1, #16
    31e4:	f8c1 8000 	str.w	r8, [r1]
    31e8:	2102      	movs	r1, #2
    31ea:	f8c5 1304 	str.w	r1, [r5, #772]	; 0x304
    31ee:	f8c5 8008 	str.w	r8, [r5, #8]
    31f2:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 3294 <MPSL_IRQ_CLOCK_Handler+0x300>
    31f6:	f8db 1000 	ldr.w	r1, [fp]
    31fa:	43c9      	mvns	r1, r1
    31fc:	f341 1800 	sbfx	r8, r1, #4, #1
    3200:	f8db 1000 	ldr.w	r1, [fp]
    3204:	f041 0110 	orr.w	r1, r1, #16
    3208:	f8cb 1000 	str.w	r1, [fp]
    320c:	f108 0801 	add.w	r8, r8, #1
    3210:	e002      	b.n	3218 <MPSL_IRQ_CLOCK_Handler+0x284>
    3212:	bf00      	nop
    3214:	f000 fafa 	bl	380c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3218:	f44f 7182 	mov.w	r1, #260	; 0x104
    321c:	4628      	mov	r0, r5
    321e:	f00b faf4 	bl	e80a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3222:	2800      	cmp	r0, #0
    3224:	d0f6      	beq.n	3214 <MPSL_IRQ_CLOCK_Handler+0x280>
    3226:	f004 0403 	and.w	r4, r4, #3
    322a:	4620      	mov	r0, r4
    322c:	f00b fb0e 	bl	e84c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3230:	2800      	cmp	r0, #0
    3232:	d0fa      	beq.n	322a <MPSL_IRQ_CLOCK_Handler+0x296>
    3234:	f1b8 0f00 	cmp.w	r8, #0
    3238:	d105      	bne.n	3246 <MPSL_IRQ_CLOCK_Handler+0x2b2>
    323a:	f8db 1000 	ldr.w	r1, [fp]
    323e:	f021 0110 	bic.w	r1, r1, #16
    3242:	f8cb 1000 	str.w	r1, [fp]
    3246:	2102      	movs	r1, #2
    3248:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
    324c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3250:	f899 0006 	ldrb.w	r0, [r9, #6]
    3254:	464c      	mov	r4, r9
    3256:	b170      	cbz	r0, 3276 <MPSL_IRQ_CLOCK_Handler+0x2e2>
    3258:	7830      	ldrb	r0, [r6, #0]
    325a:	b960      	cbnz	r0, 3276 <MPSL_IRQ_CLOCK_Handler+0x2e2>
    325c:	f000 f950 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3260:	4605      	mov	r5, r0
    3262:	f000 fa21 	bl	36a8 <mpsl_temperature_get>
    3266:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    326a:	b115      	cbz	r5, 3272 <MPSL_IRQ_CLOCK_Handler+0x2de>
    326c:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3270:	e001      	b.n	3276 <MPSL_IRQ_CLOCK_Handler+0x2e2>
    3272:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3276:	2101      	movs	r1, #1
    3278:	4650      	mov	r0, sl
    327a:	f00b facb 	bl	e814 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    327e:	b108      	cbz	r0, 3284 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3280:	f000 f938 	bl	34f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3284:	7267      	strb	r7, [r4, #9]
    3286:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    328a:	0000      	.short	0x0000
    328c:	2000002c 	.word	0x2000002c
    3290:	4000053c 	.word	0x4000053c
    3294:	e000ed10 	.word	0xe000ed10

00003298 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3298:	b510      	push	{r4, lr}
    329a:	f3ef 8410 	mrs	r4, PRIMASK
    329e:	b672      	cpsid	i
    32a0:	480a      	ldr	r0, [pc, #40]	; (32cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    32a2:	7841      	ldrb	r1, [r0, #1]
    32a4:	b129      	cbz	r1, 32b2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    32a6:	7841      	ldrb	r1, [r0, #1]
    32a8:	1e49      	subs	r1, r1, #1
    32aa:	7041      	strb	r1, [r0, #1]
    32ac:	7841      	ldrb	r1, [r0, #1]
    32ae:	b129      	cbz	r1, 32bc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    32b0:	e008      	b.n	32c4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    32b2:	f240 1101 	movw	r1, #257	; 0x101
    32b6:	206d      	movs	r0, #109	; 0x6d
    32b8:	f000 f986 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32bc:	7880      	ldrb	r0, [r0, #2]
    32be:	b908      	cbnz	r0, 32c4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    32c0:	f000 f92c 	bl	351c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    32c4:	2c00      	cmp	r4, #0
    32c6:	d100      	bne.n	32ca <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    32c8:	b662      	cpsie	i
    32ca:	bd10      	pop	{r4, pc}
    32cc:	2000002c 	.word	0x2000002c

000032d0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    32d0:	b510      	push	{r4, lr}
    32d2:	f3ef 8410 	mrs	r4, PRIMASK
    32d6:	b672      	cpsid	i
    32d8:	4806      	ldr	r0, [pc, #24]	; (32f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    32da:	7841      	ldrb	r1, [r0, #1]
    32dc:	1c49      	adds	r1, r1, #1
    32de:	7041      	strb	r1, [r0, #1]
    32e0:	7840      	ldrb	r0, [r0, #1]
    32e2:	2801      	cmp	r0, #1
    32e4:	d101      	bne.n	32ea <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    32e6:	f00b faac 	bl	e842 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    32ea:	2c00      	cmp	r4, #0
    32ec:	d100      	bne.n	32f0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    32ee:	b662      	cpsie	i
    32f0:	bd10      	pop	{r4, pc}
    32f2:	0000      	.short	0x0000
    32f4:	2000002c 	.word	0x2000002c

000032f8 <mpsl_clock_hfclk_release>:
    32f8:	4805      	ldr	r0, [pc, #20]	; (3310 <mpsl_clock_hfclk_release+0x18>)
    32fa:	b510      	push	{r4, lr}
    32fc:	78c1      	ldrb	r1, [r0, #3]
    32fe:	b121      	cbz	r1, 330a <mpsl_clock_hfclk_release+0x12>
    3300:	2100      	movs	r1, #0
    3302:	7101      	strb	r1, [r0, #4]
    3304:	70c1      	strb	r1, [r0, #3]
    3306:	f7ff ffc7 	bl	3298 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    330a:	2000      	movs	r0, #0
    330c:	bd10      	pop	{r4, pc}
    330e:	0000      	.short	0x0000
    3310:	2000002c 	.word	0x2000002c

00003314 <mpsl_clock_hfclk_request>:
    3314:	b570      	push	{r4, r5, r6, lr}
    3316:	4c0c      	ldr	r4, [pc, #48]	; (3348 <mpsl_clock_hfclk_request+0x34>)
    3318:	78e1      	ldrb	r1, [r4, #3]
    331a:	b961      	cbnz	r1, 3336 <mpsl_clock_hfclk_request+0x22>
    331c:	2501      	movs	r5, #1
    331e:	70e5      	strb	r5, [r4, #3]
    3320:	61a0      	str	r0, [r4, #24]
    3322:	f7ff ffd5 	bl	32d0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3326:	f000 f8eb 	bl	3500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    332a:	b130      	cbz	r0, 333a <mpsl_clock_hfclk_request+0x26>
    332c:	69a0      	ldr	r0, [r4, #24]
    332e:	b110      	cbz	r0, 3336 <mpsl_clock_hfclk_request+0x22>
    3330:	4780      	blx	r0
    3332:	2000      	movs	r0, #0
    3334:	61a0      	str	r0, [r4, #24]
    3336:	2000      	movs	r0, #0
    3338:	bd70      	pop	{r4, r5, r6, pc}
    333a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    333e:	7125      	strb	r5, [r4, #4]
    3340:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3344:	e7f7      	b.n	3336 <mpsl_clock_hfclk_request+0x22>
    3346:	0000      	.short	0x0000
    3348:	2000002c 	.word	0x2000002c

0000334c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    334c:	f3ef 8010 	mrs	r0, PRIMASK
    3350:	b672      	cpsid	i
    3352:	4904      	ldr	r1, [pc, #16]	; (3364 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3354:	788a      	ldrb	r2, [r1, #2]
    3356:	1c52      	adds	r2, r2, #1
    3358:	708a      	strb	r2, [r1, #2]
    335a:	2800      	cmp	r0, #0
    335c:	d100      	bne.n	3360 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    335e:	b662      	cpsie	i
    3360:	4770      	bx	lr
    3362:	0000      	.short	0x0000
    3364:	2000002c 	.word	0x2000002c

00003368 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3368:	b510      	push	{r4, lr}
    336a:	f3ef 8410 	mrs	r4, PRIMASK
    336e:	b672      	cpsid	i
    3370:	480a      	ldr	r0, [pc, #40]	; (339c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3372:	7881      	ldrb	r1, [r0, #2]
    3374:	b129      	cbz	r1, 3382 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3376:	7881      	ldrb	r1, [r0, #2]
    3378:	1e49      	subs	r1, r1, #1
    337a:	7081      	strb	r1, [r0, #2]
    337c:	7841      	ldrb	r1, [r0, #1]
    337e:	b129      	cbz	r1, 338c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3380:	e008      	b.n	3394 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3382:	f240 1125 	movw	r1, #293	; 0x125
    3386:	206d      	movs	r0, #109	; 0x6d
    3388:	f000 f91e 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    338c:	7880      	ldrb	r0, [r0, #2]
    338e:	b908      	cbnz	r0, 3394 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3390:	f000 f8c4 	bl	351c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3394:	2c00      	cmp	r4, #0
    3396:	d100      	bne.n	339a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3398:	b662      	cpsie	i
    339a:	bd10      	pop	{r4, pc}
    339c:	2000002c 	.word	0x2000002c

000033a0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    33a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33a4:	0004      	movs	r4, r0
    33a6:	f06f 0015 	mvn.w	r0, #21
    33aa:	d03b      	beq.n	3424 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33ac:	7821      	ldrb	r1, [r4, #0]
    33ae:	2904      	cmp	r1, #4
    33b0:	d838      	bhi.n	3424 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33b2:	2900      	cmp	r1, #0
    33b4:	7861      	ldrb	r1, [r4, #1]
    33b6:	d037      	beq.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    33b8:	2900      	cmp	r1, #0
    33ba:	d133      	bne.n	3424 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33bc:	78a1      	ldrb	r1, [r4, #2]
    33be:	2900      	cmp	r1, #0
    33c0:	d130      	bne.n	3424 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33c2:	2000      	movs	r0, #0
    33c4:	f00b f9ec 	bl	e7a0 <MPSL_IRQ_RADIO_Handler+0x1e>
    33c8:	2000      	movs	r0, #0
    33ca:	f00b f9dc 	bl	e786 <MPSL_IRQ_RADIO_Handler+0x4>
    33ce:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    33d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    33d6:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    33da:	2500      	movs	r5, #0
    33dc:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    33e0:	f8c8 5104 	str.w	r5, [r8, #260]	; 0x104
    33e4:	f8c8 510c 	str.w	r5, [r8, #268]	; 0x10c
    33e8:	f8c8 5110 	str.w	r5, [r8, #272]	; 0x110
    33ec:	4e13      	ldr	r6, [pc, #76]	; (343c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x9c>)
    33ee:	7075      	strb	r5, [r6, #1]
    33f0:	88a0      	ldrh	r0, [r4, #4]
    33f2:	81b0      	strh	r0, [r6, #12]
    33f4:	f00b fa1c 	bl	e830 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    33f8:	2701      	movs	r7, #1
    33fa:	b108      	cbz	r0, 3400 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    33fc:	70f7      	strb	r7, [r6, #3]
    33fe:	7077      	strb	r7, [r6, #1]
    3400:	2101      	movs	r1, #1
    3402:	4640      	mov	r0, r8
    3404:	f00b fa06 	bl	e814 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3408:	b108      	cbz	r0, 340e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    340a:	f000 f873 	bl	34f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    340e:	4620      	mov	r0, r4
    3410:	f7ff fe88 	bl	3124 <MPSL_IRQ_CLOCK_Handler+0x190>
    3414:	2000      	movs	r0, #0
    3416:	f00b f9b6 	bl	e786 <MPSL_IRQ_RADIO_Handler+0x4>
    341a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    341e:	4628      	mov	r0, r5
    3420:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3428:	2900      	cmp	r1, #0
    342a:	d0fb      	beq.n	3424 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    342c:	2920      	cmp	r1, #32
    342e:	d8f9      	bhi.n	3424 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3430:	78a1      	ldrb	r1, [r4, #2]
    3432:	2921      	cmp	r1, #33	; 0x21
    3434:	d8f6      	bhi.n	3424 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3436:	2901      	cmp	r1, #1
    3438:	d1c3      	bne.n	33c2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    343a:	e7f3      	b.n	3424 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    343c:	2000002c 	.word	0x2000002c

00003440 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3440:	4801      	ldr	r0, [pc, #4]	; (3448 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3442:	8980      	ldrh	r0, [r0, #12]
    3444:	4770      	bx	lr
    3446:	0000      	.short	0x0000
    3448:	2000002c 	.word	0x2000002c

0000344c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    344c:	b510      	push	{r4, lr}
    344e:	480d      	ldr	r0, [pc, #52]	; (3484 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3450:	f00b fa4e 	bl	e8f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3454:	490b      	ldr	r1, [pc, #44]	; (3484 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3456:	3908      	subs	r1, #8
    3458:	b148      	cbz	r0, 346e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    345a:	2001      	movs	r0, #1
    345c:	7008      	strb	r0, [r1, #0]
    345e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3462:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    346a:	f7ff bf31 	b.w	32d0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    346e:	7a48      	ldrb	r0, [r1, #9]
    3470:	2801      	cmp	r0, #1
    3472:	d101      	bne.n	3478 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3474:	f7ff fdb6 	bl	2fe4 <MPSL_IRQ_CLOCK_Handler+0x50>
    3478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    347c:	4801      	ldr	r0, [pc, #4]	; (3484 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    347e:	f00b ba4e 	b.w	e91e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3482:	0000      	.short	0x0000
    3484:	20000034 	.word	0x20000034

00003488 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3488:	4802      	ldr	r0, [pc, #8]	; (3494 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    348a:	7a40      	ldrb	r0, [r0, #9]
    348c:	2800      	cmp	r0, #0
    348e:	d000      	beq.n	3492 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3490:	2001      	movs	r0, #1
    3492:	4770      	bx	lr
    3494:	2000002c 	.word	0x2000002c

00003498 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    349a:	4d15      	ldr	r5, [pc, #84]	; (34f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x58>)
    349c:	7aa8      	ldrb	r0, [r5, #10]
    349e:	2800      	cmp	r0, #0
    34a0:	d125      	bne.n	34ee <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x56>
    34a2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    34a6:	2018      	movs	r0, #24
    34a8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    34ac:	2601      	movs	r6, #1
    34ae:	61a6      	str	r6, [r4, #24]
    34b0:	f44f 7020 	mov.w	r0, #640	; 0x280
    34b4:	f8ad 0000 	strh.w	r0, [sp]
    34b8:	f8bd 0000 	ldrh.w	r0, [sp]
    34bc:	1e41      	subs	r1, r0, #1
    34be:	f8ad 1000 	strh.w	r1, [sp]
    34c2:	d2f9      	bcs.n	34b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x20>
    34c4:	2700      	movs	r7, #0
    34c6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    34ca:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    34ce:	4808      	ldr	r0, [pc, #32]	; (34f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x58>)
    34d0:	3008      	adds	r0, #8
    34d2:	f00b fa20 	bl	e916 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    34d6:	702f      	strb	r7, [r5, #0]
    34d8:	f7ff fd84 	bl	2fe4 <MPSL_IRQ_CLOCK_Handler+0x50>
    34dc:	6166      	str	r6, [r4, #20]
    34de:	7968      	ldrb	r0, [r5, #5]
    34e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    34e4:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    34e8:	2018      	movs	r0, #24
    34ea:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    34ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34f0:	2000002c 	.word	0x2000002c

000034f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    34f4:	4901      	ldr	r1, [pc, #4]	; (34fc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    34f6:	2001      	movs	r0, #1
    34f8:	7008      	strb	r0, [r1, #0]
    34fa:	4770      	bx	lr
    34fc:	200003a4 	.word	0x200003a4

00003500 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3500:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3504:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3508:	b918      	cbnz	r0, 3512 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    350a:	4803      	ldr	r0, [pc, #12]	; (3518 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    350c:	7800      	ldrb	r0, [r0, #0]
    350e:	2800      	cmp	r0, #0
    3510:	d000      	beq.n	3514 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3512:	2001      	movs	r0, #1
    3514:	4770      	bx	lr
    3516:	0000      	.short	0x0000
    3518:	200003a4 	.word	0x200003a4

0000351c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    351c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3520:	2101      	movs	r1, #1
    3522:	6041      	str	r1, [r0, #4]
    3524:	2100      	movs	r1, #0
    3526:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    352a:	4801      	ldr	r0, [pc, #4]	; (3530 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    352c:	7001      	strb	r1, [r0, #0]
    352e:	4770      	bx	lr
    3530:	200003a4 	.word	0x200003a4

00003534 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3534:	4802      	ldr	r0, [pc, #8]	; (3540 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3536:	6800      	ldr	r0, [r0, #0]
    3538:	f000 0003 	and.w	r0, r0, #3
    353c:	4770      	bx	lr
    353e:	0000      	.short	0x0000
    3540:	4000041c 	.word	0x4000041c
    3544:	b510      	push	{r4, lr}
    3546:	b131      	cbz	r1, 3556 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3548:	2901      	cmp	r1, #1
    354a:	d007      	beq.n	355c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    354c:	f44f 7142 	mov.w	r1, #776	; 0x308
    3550:	a005      	add	r0, pc, #20	; (adr r0, 3568 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3552:	f000 f80f 	bl	3574 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3556:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    355a:	e001      	b.n	3560 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    355c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3560:	f000 0001 	and.w	r0, r0, #1
    3564:	bd10      	pop	{r4, pc}
    3566:	0000      	.short	0x0000
    3568:	5f66726e 	.word	0x5f66726e
    356c:	636f6c63 	.word	0x636f6c63
    3570:	00682e6b 	.word	0x00682e6b

00003574 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3574:	4a02      	ldr	r2, [pc, #8]	; (3580 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    3576:	6852      	ldr	r2, [r2, #4]
    3578:	b102      	cbz	r2, 357c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    357a:	4710      	bx	r2
    357c:	e7fe      	b.n	357c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    357e:	0000      	.short	0x0000
    3580:	20000048 	.word	0x20000048
    3584:	4806      	ldr	r0, [pc, #24]	; (35a0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    3586:	b510      	push	{r4, lr}
    3588:	2100      	movs	r1, #0
    358a:	6001      	str	r1, [r0, #0]
    358c:	2101      	movs	r1, #1
    358e:	6001      	str	r1, [r0, #0]
    3590:	4608      	mov	r0, r1
    3592:	f00b f982 	bl	e89a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    359a:	2001      	movs	r0, #1
    359c:	f00b b970 	b.w	e880 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    35a0:	40001ffc 	.word	0x40001ffc
    35a4:	4807      	ldr	r0, [pc, #28]	; (35c4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    35a6:	b510      	push	{r4, lr}
    35a8:	2101      	movs	r1, #1
    35aa:	6041      	str	r1, [r0, #4]
    35ac:	1e89      	subs	r1, r1, #2
    35ae:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    35b2:	200c      	movs	r0, #12
    35b4:	f00b f971 	bl	e89a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    35b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    35bc:	200c      	movs	r0, #12
    35be:	f00b b95f 	b.w	e880 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    35c2:	0000      	.short	0x0000
    35c4:	4000c000 	.word	0x4000c000

000035c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    35c8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    35ca:	4a10      	ldr	r2, [pc, #64]	; (360c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    35cc:	6855      	ldr	r5, [r2, #4]
    35ce:	b1e5      	cbz	r5, 360a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    35d0:	2200      	movs	r2, #0
    35d2:	4603      	mov	r3, r0
    35d4:	466e      	mov	r6, sp
    35d6:	240a      	movs	r4, #10
    35d8:	e003      	b.n	35e2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    35da:	fbb0 f0f4 	udiv	r0, r0, r4
    35de:	1c52      	adds	r2, r2, #1
    35e0:	b2d2      	uxtb	r2, r2
    35e2:	2800      	cmp	r0, #0
    35e4:	d1f9      	bne.n	35da <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    35e6:	54b0      	strb	r0, [r6, r2]
    35e8:	e00a      	b.n	3600 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    35ea:	bf00      	nop
    35ec:	fbb3 f0f4 	udiv	r0, r3, r4
    35f0:	fb04 3010 	mls	r0, r4, r0, r3
    35f4:	fbb3 f3f4 	udiv	r3, r3, r4
    35f8:	1e52      	subs	r2, r2, #1
    35fa:	b2d2      	uxtb	r2, r2
    35fc:	3030      	adds	r0, #48	; 0x30
    35fe:	54b0      	strb	r0, [r6, r2]
    3600:	2a00      	cmp	r2, #0
    3602:	d1f3      	bne.n	35ec <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3604:	4630      	mov	r0, r6
    3606:	47a8      	blx	r5
    3608:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    360a:	e7fe      	b.n	360a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    360c:	20000048 	.word	0x20000048

00003610 <mpsl_init>:
    3610:	b570      	push	{r4, r5, r6, lr}
    3612:	4c17      	ldr	r4, [pc, #92]	; (3670 <mpsl_init+0x60>)
    3614:	4606      	mov	r6, r0
    3616:	460d      	mov	r5, r1
    3618:	7860      	ldrb	r0, [r4, #1]
    361a:	b110      	cbz	r0, 3622 <mpsl_init+0x12>
    361c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3620:	bd70      	pop	{r4, r5, r6, pc}
    3622:	b906      	cbnz	r6, 3626 <mpsl_init+0x16>
    3624:	4e13      	ldr	r6, [pc, #76]	; (3674 <mpsl_init+0x64>)
    3626:	6062      	str	r2, [r4, #4]
    3628:	7025      	strb	r5, [r4, #0]
    362a:	f7ff ffab 	bl	3584 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    362e:	f7ff ffb9 	bl	35a4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    3632:	4630      	mov	r0, r6
    3634:	f7ff feb4 	bl	33a0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3638:	0006      	movs	r6, r0
    363a:	d1f1      	bne.n	3620 <mpsl_init+0x10>
    363c:	f7fe ffb6 	bl	25ac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3640:	f7ff ff2a 	bl	3498 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3644:	f00b f876 	bl	e734 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3648:	4628      	mov	r0, r5
    364a:	f00b f919 	bl	e880 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    364e:	2001      	movs	r0, #1
    3650:	2d00      	cmp	r5, #0
    3652:	db09      	blt.n	3668 <mpsl_init+0x58>
    3654:	f005 011f 	and.w	r1, r5, #31
    3658:	fa00 f101 	lsl.w	r1, r0, r1
    365c:	096a      	lsrs	r2, r5, #5
    365e:	0092      	lsls	r2, r2, #2
    3660:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3664:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3668:	7060      	strb	r0, [r4, #1]
    366a:	4630      	mov	r0, r6
    366c:	bd70      	pop	{r4, r5, r6, pc}
    366e:	0000      	.short	0x0000
    3670:	20000048 	.word	0x20000048
    3674:	0000e8bc 	.word	0x0000e8bc

00003678 <mpsl_is_initialized>:
    3678:	4801      	ldr	r0, [pc, #4]	; (3680 <mpsl_is_initialized+0x8>)
    367a:	7840      	ldrb	r0, [r0, #1]
    367c:	4770      	bx	lr
    367e:	0000      	.short	0x0000
    3680:	20000048 	.word	0x20000048

00003684 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3684:	4807      	ldr	r0, [pc, #28]	; (36a4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3686:	f990 0000 	ldrsb.w	r0, [r0]
    368a:	2800      	cmp	r0, #0
    368c:	db09      	blt.n	36a2 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    368e:	f000 021f 	and.w	r2, r0, #31
    3692:	2101      	movs	r1, #1
    3694:	4091      	lsls	r1, r2
    3696:	0940      	lsrs	r0, r0, #5
    3698:	0080      	lsls	r0, r0, #2
    369a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    369e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    36a2:	4770      	bx	lr
    36a4:	20000048 	.word	0x20000048

000036a8 <mpsl_temperature_get>:
    36a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36ac:	2601      	movs	r6, #1
    36ae:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    36b2:	0331      	lsls	r1, r6, #12
    36b4:	f04f 0800 	mov.w	r8, #0
    36b8:	4640      	mov	r0, r8
    36ba:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    36be:	f3bf 8f4f 	dsb	sy
    36c2:	f3bf 8f6f 	isb	sy
    36c6:	4c16      	ldr	r4, [pc, #88]	; (3720 <mpsl_temperature_get+0x78>)
    36c8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    36cc:	200c      	movs	r0, #12
    36ce:	f00b f902 	bl	e8d6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6a>
    36d2:	4d14      	ldr	r5, [pc, #80]	; (3724 <mpsl_temperature_get+0x7c>)
    36d4:	6828      	ldr	r0, [r5, #0]
    36d6:	43c0      	mvns	r0, r0
    36d8:	f340 1700 	sbfx	r7, r0, #4, #1
    36dc:	6828      	ldr	r0, [r5, #0]
    36de:	f040 0010 	orr.w	r0, r0, #16
    36e2:	6028      	str	r0, [r5, #0]
    36e4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    36e8:	6026      	str	r6, [r4, #0]
    36ea:	1c7f      	adds	r7, r7, #1
    36ec:	e002      	b.n	36f4 <mpsl_temperature_get+0x4c>
    36ee:	bf00      	nop
    36f0:	f000 f88c 	bl	380c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    36f4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    36f8:	2800      	cmp	r0, #0
    36fa:	d0f9      	beq.n	36f0 <mpsl_temperature_get+0x48>
    36fc:	b91f      	cbnz	r7, 3706 <mpsl_temperature_get+0x5e>
    36fe:	6828      	ldr	r0, [r5, #0]
    3700:	f020 0010 	bic.w	r0, r0, #16
    3704:	6028      	str	r0, [r5, #0]
    3706:	4808      	ldr	r0, [pc, #32]	; (3728 <mpsl_temperature_get+0x80>)
    3708:	6805      	ldr	r5, [r0, #0]
    370a:	6066      	str	r6, [r4, #4]
    370c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3710:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3714:	200c      	movs	r0, #12
    3716:	f00b f8de 	bl	e8d6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6a>
    371a:	4628      	mov	r0, r5
    371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3720:	4000c000 	.word	0x4000c000
    3724:	e000ed10 	.word	0xe000ed10
    3728:	4000c508 	.word	0x4000c508

0000372c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    372c:	b510      	push	{r4, lr}
    372e:	4602      	mov	r2, r0
    3730:	2005      	movs	r0, #5
    3732:	490c      	ldr	r1, [pc, #48]	; (3764 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3734:	e004      	b.n	3740 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3736:	bf00      	nop
    3738:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    373c:	791b      	ldrb	r3, [r3, #4]
    373e:	b133      	cbz	r3, 374e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3740:	1e40      	subs	r0, r0, #1
    3742:	b2c0      	uxtb	r0, r0
    3744:	d2f8      	bcs.n	3738 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3746:	214b      	movs	r1, #75	; 0x4b
    3748:	2069      	movs	r0, #105	; 0x69
    374a:	f7ff ff3d 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    374e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3752:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3756:	2200      	movs	r2, #0
    3758:	714a      	strb	r2, [r1, #5]
    375a:	718a      	strb	r2, [r1, #6]
    375c:	2201      	movs	r2, #1
    375e:	710a      	strb	r2, [r1, #4]
    3760:	bd10      	pop	{r4, pc}
    3762:	0000      	.short	0x0000
    3764:	20000d54 	.word	0x20000d54

00003768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3768:	b510      	push	{r4, lr}
    376a:	2805      	cmp	r0, #5
    376c:	d301      	bcc.n	3772 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    376e:	215a      	movs	r1, #90	; 0x5a
    3770:	e006      	b.n	3780 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3772:	490a      	ldr	r1, [pc, #40]	; (379c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3774:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3778:	7901      	ldrb	r1, [r0, #4]
    377a:	2901      	cmp	r1, #1
    377c:	d003      	beq.n	3786 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    377e:	215b      	movs	r1, #91	; 0x5b
    3780:	2069      	movs	r0, #105	; 0x69
    3782:	f7ff ff21 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3786:	7941      	ldrb	r1, [r0, #5]
    3788:	7982      	ldrb	r2, [r0, #6]
    378a:	1c49      	adds	r1, r1, #1
    378c:	b2c9      	uxtb	r1, r1
    378e:	428a      	cmp	r2, r1
    3790:	d000      	beq.n	3794 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3792:	7141      	strb	r1, [r0, #5]
    3794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3798:	f7ff bf74 	b.w	3684 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    379c:	20000d54 	.word	0x20000d54

000037a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    37a0:	b570      	push	{r4, r5, r6, lr}
    37a2:	2505      	movs	r5, #5
    37a4:	4e0e      	ldr	r6, [pc, #56]	; (37e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    37a6:	4c0f      	ldr	r4, [pc, #60]	; (37e4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    37a8:	e016      	b.n	37d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    37aa:	7821      	ldrb	r1, [r4, #0]
    37ac:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    37b0:	7902      	ldrb	r2, [r0, #4]
    37b2:	2a01      	cmp	r2, #1
    37b4:	d108      	bne.n	37c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    37b6:	7942      	ldrb	r2, [r0, #5]
    37b8:	7983      	ldrb	r3, [r0, #6]
    37ba:	429a      	cmp	r2, r3
    37bc:	d004      	beq.n	37c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    37be:	7942      	ldrb	r2, [r0, #5]
    37c0:	7182      	strb	r2, [r0, #6]
    37c2:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    37c6:	4780      	blx	r0
    37c8:	7820      	ldrb	r0, [r4, #0]
    37ca:	1c40      	adds	r0, r0, #1
    37cc:	b2c0      	uxtb	r0, r0
    37ce:	7020      	strb	r0, [r4, #0]
    37d0:	2805      	cmp	r0, #5
    37d2:	d301      	bcc.n	37d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    37d4:	2000      	movs	r0, #0
    37d6:	7020      	strb	r0, [r4, #0]
    37d8:	1e6d      	subs	r5, r5, #1
    37da:	b2ed      	uxtb	r5, r5
    37dc:	d2e5      	bcs.n	37aa <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    37de:	bd70      	pop	{r4, r5, r6, pc}
    37e0:	20000d54 	.word	0x20000d54
    37e4:	200003a5 	.word	0x200003a5

000037e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    37e8:	b500      	push	{lr}
    37ea:	f00b f901 	bl	e9f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    37ee:	b928      	cbnz	r0, 37fc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x14>
    37f0:	f00b f8f4 	bl	e9dc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    37f4:	b910      	cbnz	r0, 37fc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x14>
    37f6:	f00b f8bb 	bl	e970 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    37fa:	b108      	cbz	r0, 3800 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x18>
    37fc:	4801      	ldr	r0, [pc, #4]	; (3804 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1c>)
    37fe:	bd00      	pop	{pc}
    3800:	4801      	ldr	r0, [pc, #4]	; (3808 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x20>)
    3802:	bd00      	pop	{pc}
    3804:	4001e700 	.word	0x4001e700
    3808:	4000050c 	.word	0x4000050c

0000380c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    380c:	b510      	push	{r4, lr}
    380e:	f00b f8b9 	bl	e984 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3812:	b1e0      	cbz	r0, 384e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3814:	f3ef 8010 	mrs	r0, PRIMASK
    3818:	b1d8      	cbz	r0, 3852 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    381a:	2100      	movs	r1, #0
    381c:	b672      	cpsid	i
    381e:	4812      	ldr	r0, [pc, #72]	; (3868 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3820:	6802      	ldr	r2, [r0, #0]
    3822:	6803      	ldr	r3, [r0, #0]
    3824:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3828:	f043 0310 	orr.w	r3, r3, #16
    382c:	6003      	str	r3, [r0, #0]
    382e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3832:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3836:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    383a:	431c      	orrs	r4, r3
    383c:	d000      	beq.n	3840 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    383e:	bf40      	sev
    3840:	bf20      	wfe
    3842:	bf00      	nop
    3844:	bf00      	nop
    3846:	bf00      	nop
    3848:	bf00      	nop
    384a:	b122      	cbz	r2, 3856 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4a>
    384c:	e007      	b.n	385e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x52>
    384e:	bf20      	wfe
    3850:	bd10      	pop	{r4, pc}
    3852:	2101      	movs	r1, #1
    3854:	e7e2      	b.n	381c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3856:	6802      	ldr	r2, [r0, #0]
    3858:	f022 0210 	bic.w	r2, r2, #16
    385c:	6002      	str	r2, [r0, #0]
    385e:	2900      	cmp	r1, #0
    3860:	d0f6      	beq.n	3850 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x44>
    3862:	b662      	cpsie	i
    3864:	bd10      	pop	{r4, pc}
    3866:	0000      	.short	0x0000
    3868:	e000ed10 	.word	0xe000ed10

0000386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    386c:	b510      	push	{r4, lr}
    386e:	ea80 0401 	eor.w	r4, r0, r1
    3872:	4603      	mov	r3, r0
    3874:	07a4      	lsls	r4, r4, #30
    3876:	d007      	beq.n	3888 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x1c>
    3878:	e015      	b.n	38a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    387a:	2a00      	cmp	r2, #0
    387c:	d015      	beq.n	38aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3e>
    387e:	f811 4b01 	ldrb.w	r4, [r1], #1
    3882:	f803 4b01 	strb.w	r4, [r3], #1
    3886:	1e52      	subs	r2, r2, #1
    3888:	079c      	lsls	r4, r3, #30
    388a:	d1f6      	bne.n	387a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe>
    388c:	e002      	b.n	3894 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x28>
    388e:	c910      	ldmia	r1!, {r4}
    3890:	1f12      	subs	r2, r2, #4
    3892:	c310      	stmia	r3!, {r4}
    3894:	2a04      	cmp	r2, #4
    3896:	d2fa      	bcs.n	388e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x22>
    3898:	e005      	b.n	38a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    389a:	bf00      	nop
    389c:	f811 4b01 	ldrb.w	r4, [r1], #1
    38a0:	f803 4b01 	strb.w	r4, [r3], #1
    38a4:	1e52      	subs	r2, r2, #1
    38a6:	2a00      	cmp	r2, #0
    38a8:	d1f8      	bne.n	389c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x30>
    38aa:	bd10      	pop	{r4, pc}
    38ac:	b570      	push	{r4, r5, r6, lr}
    38ae:	4c0e      	ldr	r4, [pc, #56]	; (38e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7c>)
    38b0:	7860      	ldrb	r0, [r4, #1]
    38b2:	2800      	cmp	r0, #0
    38b4:	d117      	bne.n	38e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    38b6:	7820      	ldrb	r0, [r4, #0]
    38b8:	2500      	movs	r5, #0
    38ba:	2801      	cmp	r0, #1
    38bc:	d106      	bne.n	38cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    38be:	2002      	movs	r0, #2
    38c0:	7020      	strb	r0, [r4, #0]
    38c2:	68a0      	ldr	r0, [r4, #8]
    38c4:	b110      	cbz	r0, 38cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    38c6:	68a0      	ldr	r0, [r4, #8]
    38c8:	4780      	blx	r0
    38ca:	60a5      	str	r5, [r4, #8]
    38cc:	7820      	ldrb	r0, [r4, #0]
    38ce:	2803      	cmp	r0, #3
    38d0:	d109      	bne.n	38e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    38d2:	7025      	strb	r5, [r4, #0]
    38d4:	68a0      	ldr	r0, [r4, #8]
    38d6:	2800      	cmp	r0, #0
    38d8:	d005      	beq.n	38e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    38da:	6860      	ldr	r0, [r4, #4]
    38dc:	6940      	ldr	r0, [r0, #20]
    38de:	4780      	blx	r0
    38e0:	68a0      	ldr	r0, [r4, #8]
    38e2:	4780      	blx	r0
    38e4:	60a5      	str	r5, [r4, #8]
    38e6:	bd70      	pop	{r4, r5, r6, pc}
    38e8:	20000050 	.word	0x20000050

000038ec <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    38ec:	b510      	push	{r4, lr}
    38ee:	4c08      	ldr	r4, [pc, #32]	; (3910 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    38f0:	7820      	ldrb	r0, [r4, #0]
    38f2:	2802      	cmp	r0, #2
    38f4:	d002      	beq.n	38fc <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    38f6:	7820      	ldrb	r0, [r4, #0]
    38f8:	2803      	cmp	r0, #3
    38fa:	d102      	bne.n	3902 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    38fc:	6860      	ldr	r0, [r4, #4]
    38fe:	6880      	ldr	r0, [r0, #8]
    3900:	4780      	blx	r0
    3902:	2000      	movs	r0, #0
    3904:	7060      	strb	r0, [r4, #1]
    3906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    390a:	f7ff bfcf 	b.w	38ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    390e:	0000      	.short	0x0000
    3910:	20000050 	.word	0x20000050

00003914 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    3914:	b538      	push	{r3, r4, r5, lr}
    3916:	4604      	mov	r4, r0
    3918:	2805      	cmp	r0, #5
    391a:	d304      	bcc.n	3926 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    391c:	f44f 7189 	mov.w	r1, #274	; 0x112
    3920:	2068      	movs	r0, #104	; 0x68
    3922:	f7ff fe51 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3926:	f7ff ffc1 	bl	38ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    392a:	4d0e      	ldr	r5, [pc, #56]	; (3964 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>)
    392c:	2001      	movs	r0, #1
    392e:	7068      	strb	r0, [r5, #1]
    3930:	7828      	ldrb	r0, [r5, #0]
    3932:	2802      	cmp	r0, #2
    3934:	d115      	bne.n	3962 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x4e>
    3936:	6868      	ldr	r0, [r5, #4]
    3938:	68c1      	ldr	r1, [r0, #12]
    393a:	4620      	mov	r0, r4
    393c:	4788      	blx	r1
    393e:	490a      	ldr	r1, [pc, #40]	; (3968 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x54>)
    3940:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    3944:	7852      	ldrb	r2, [r2, #1]
    3946:	4282      	cmp	r2, r0
    3948:	d201      	bcs.n	394e <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3a>
    394a:	2001      	movs	r0, #1
    394c:	e001      	b.n	3952 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3e>
    394e:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    3952:	f88d 0000 	strb.w	r0, [sp]
    3956:	f88d 4001 	strb.w	r4, [sp, #1]
    395a:	6868      	ldr	r0, [r5, #4]
    395c:	6801      	ldr	r1, [r0, #0]
    395e:	4668      	mov	r0, sp
    3960:	4788      	blx	r1
    3962:	bd38      	pop	{r3, r4, r5, pc}
    3964:	20000050 	.word	0x20000050
    3968:	20001886 	.word	0x20001886

0000396c <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    396c:	4905      	ldr	r1, [pc, #20]	; (3984 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    396e:	780a      	ldrb	r2, [r1, #0]
    3970:	2a02      	cmp	r2, #2
    3972:	d004      	beq.n	397e <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3974:	780a      	ldrb	r2, [r1, #0]
    3976:	2a03      	cmp	r2, #3
    3978:	d001      	beq.n	397e <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    397a:	2000      	movs	r0, #0
    397c:	4770      	bx	lr
    397e:	6849      	ldr	r1, [r1, #4]
    3980:	6909      	ldr	r1, [r1, #16]
    3982:	4708      	bx	r1
    3984:	20000050 	.word	0x20000050

00003988 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    3988:	b510      	push	{r4, lr}
    398a:	b158      	cbz	r0, 39a4 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    398c:	4908      	ldr	r1, [pc, #32]	; (39b0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    398e:	780a      	ldrb	r2, [r1, #0]
    3990:	2a02      	cmp	r2, #2
    3992:	d002      	beq.n	399a <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    3994:	780a      	ldrb	r2, [r1, #0]
    3996:	2a03      	cmp	r2, #3
    3998:	d109      	bne.n	39ae <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    399a:	6849      	ldr	r1, [r1, #4]
    399c:	6849      	ldr	r1, [r1, #4]
    399e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    39a2:	4708      	bx	r1
    39a4:	f240 1127 	movw	r1, #295	; 0x127
    39a8:	2068      	movs	r0, #104	; 0x68
    39aa:	f7ff fe0d 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39ae:	bd10      	pop	{r4, pc}
    39b0:	20000050 	.word	0x20000050

000039b4 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    39b4:	4805      	ldr	r0, [pc, #20]	; (39cc <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    39b6:	7801      	ldrb	r1, [r0, #0]
    39b8:	2902      	cmp	r1, #2
    39ba:	d004      	beq.n	39c6 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    39bc:	7801      	ldrb	r1, [r0, #0]
    39be:	2903      	cmp	r1, #3
    39c0:	d001      	beq.n	39c6 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    39c2:	2000      	movs	r0, #0
    39c4:	4770      	bx	lr
    39c6:	6840      	ldr	r0, [r0, #4]
    39c8:	6980      	ldr	r0, [r0, #24]
    39ca:	4700      	bx	r0
    39cc:	20000050 	.word	0x20000050
    39d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    39d2:	4c18      	ldr	r4, [pc, #96]	; (3a34 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x80>)
    39d4:	7960      	ldrb	r0, [r4, #5]
    39d6:	2803      	cmp	r0, #3
    39d8:	d203      	bcs.n	39e2 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x2e>
    39da:	bf00      	nop
    39dc:	f04f 0103 	mov.w	r1, #3
    39e0:	e000      	b.n	39e4 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x30>
    39e2:	4601      	mov	r1, r0
    39e4:	f88d 1001 	strb.w	r1, [sp, #1]
    39e8:	d201      	bcs.n	39ee <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x3a>
    39ea:	f04f 0003 	mov.w	r0, #3
    39ee:	f88d 0000 	strb.w	r0, [sp]
    39f2:	78e0      	ldrb	r0, [r4, #3]
    39f4:	f8ad 0004 	strh.w	r0, [sp, #4]
    39f8:	78a0      	ldrb	r0, [r4, #2]
    39fa:	f8ad 0002 	strh.w	r0, [sp, #2]
    39fe:	4668      	mov	r0, sp
    3a00:	f008 fdf8 	bl	c5f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3a04:	b108      	cbz	r0, 3a0a <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x56>
    3a06:	219b      	movs	r1, #155	; 0x9b
    3a08:	e010      	b.n	3a2c <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    3a0a:	68a0      	ldr	r0, [r4, #8]
    3a0c:	9002      	str	r0, [sp, #8]
    3a0e:	a802      	add	r0, sp, #8
    3a10:	f008 fe08 	bl	c624 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3a14:	b108      	cbz	r0, 3a1a <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x66>
    3a16:	219f      	movs	r1, #159	; 0x9f
    3a18:	e008      	b.n	3a2c <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    3a1a:	4807      	ldr	r0, [pc, #28]	; (3a38 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x84>)
    3a1c:	6800      	ldr	r0, [r0, #0]
    3a1e:	9003      	str	r0, [sp, #12]
    3a20:	a803      	add	r0, sp, #12
    3a22:	f00d fd54 	bl	114ce <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3a26:	2800      	cmp	r0, #0
    3a28:	d003      	beq.n	3a32 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x7e>
    3a2a:	21a3      	movs	r1, #163	; 0xa3
    3a2c:	2003      	movs	r0, #3
    3a2e:	f000 f8a7 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a32:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3a34:	20000068 	.word	0x20000068
    3a38:	00003be8 	.word	0x00003be8

00003a3c <sdc_build_revision_get>:
    3a3c:	b510      	push	{r4, lr}
    3a3e:	b128      	cbz	r0, 3a4c <sdc_build_revision_get+0x10>
    3a40:	2214      	movs	r2, #20
    3a42:	4904      	ldr	r1, [pc, #16]	; (3a54 <sdc_build_revision_get+0x18>)
    3a44:	f7ff ff12 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3a48:	2000      	movs	r0, #0
    3a4a:	bd10      	pop	{r4, pc}
    3a4c:	f06f 0015 	mvn.w	r0, #21
    3a50:	bd10      	pop	{r4, pc}
    3a52:	0000      	.short	0x0000
    3a54:	00003c1a 	.word	0x00003c1a

00003a58 <sdc_cfg_set>:
    3a58:	b510      	push	{r4, lr}
    3a5a:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    3a5e:	bb18      	cbnz	r0, 3aa8 <sdc_cfg_set+0x50>
    3a60:	b1c9      	cbz	r1, 3a96 <sdc_cfg_set+0x3e>
    3a62:	b14a      	cbz	r2, 3a78 <sdc_cfg_set+0x20>
    3a64:	4b11      	ldr	r3, [pc, #68]	; (3aac <sdc_cfg_set+0x54>)
    3a66:	2901      	cmp	r1, #1
    3a68:	d009      	beq.n	3a7e <sdc_cfg_set+0x26>
    3a6a:	2902      	cmp	r1, #2
    3a6c:	d00a      	beq.n	3a84 <sdc_cfg_set+0x2c>
    3a6e:	2903      	cmp	r1, #3
    3a70:	d00b      	beq.n	3a8a <sdc_cfg_set+0x32>
    3a72:	2904      	cmp	r1, #4
    3a74:	d118      	bne.n	3aa8 <sdc_cfg_set+0x50>
    3a76:	e00c      	b.n	3a92 <sdc_cfg_set+0x3a>
    3a78:	f06f 0015 	mvn.w	r0, #21
    3a7c:	bd10      	pop	{r4, pc}
    3a7e:	7810      	ldrb	r0, [r2, #0]
    3a80:	7218      	strb	r0, [r3, #8]
    3a82:	e008      	b.n	3a96 <sdc_cfg_set+0x3e>
    3a84:	7810      	ldrb	r0, [r2, #0]
    3a86:	7258      	strb	r0, [r3, #9]
    3a88:	e005      	b.n	3a96 <sdc_cfg_set+0x3e>
    3a8a:	6810      	ldr	r0, [r2, #0]
    3a8c:	f8c3 000a 	str.w	r0, [r3, #10]
    3a90:	e001      	b.n	3a96 <sdc_cfg_set+0x3e>
    3a92:	6810      	ldr	r0, [r2, #0]
    3a94:	6118      	str	r0, [r3, #16]
    3a96:	4905      	ldr	r1, [pc, #20]	; (3aac <sdc_cfg_set+0x54>)
    3a98:	2201      	movs	r2, #1
    3a9a:	3108      	adds	r1, #8
    3a9c:	2000      	movs	r0, #0
    3a9e:	f00a ffdd 	bl	ea5c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x38>
    3aa2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3aa6:	dbe9      	blt.n	3a7c <sdc_cfg_set+0x24>
    3aa8:	4620      	mov	r0, r4
    3aaa:	bd10      	pop	{r4, pc}
    3aac:	20000060 	.word	0x20000060

00003ab0 <sdc_enable>:
    3ab0:	b538      	push	{r3, r4, r5, lr}
    3ab2:	460c      	mov	r4, r1
    3ab4:	b1c0      	cbz	r0, 3ae8 <sdc_enable+0x38>
    3ab6:	b1bc      	cbz	r4, 3ae8 <sdc_enable+0x38>
    3ab8:	f7ff fe38 	bl	372c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3abc:	4d0c      	ldr	r5, [pc, #48]	; (3af0 <sdc_enable+0x40>)
    3abe:	2200      	movs	r2, #0
    3ac0:	f105 0108 	add.w	r1, r5, #8
    3ac4:	7028      	strb	r0, [r5, #0]
    3ac6:	4620      	mov	r0, r4
    3ac8:	f00a ffc8 	bl	ea5c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x38>
    3acc:	f00e f971 	bl	11db2 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3ad0:	2100      	movs	r1, #0
    3ad2:	7828      	ldrb	r0, [r5, #0]
    3ad4:	f009 f8ec 	bl	ccb0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3ad8:	7868      	ldrb	r0, [r5, #1]
    3ada:	f88d 0000 	strb.w	r0, [sp]
    3ade:	4668      	mov	r0, sp
    3ae0:	f00d fce3 	bl	114aa <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3ae4:	2000      	movs	r0, #0
    3ae6:	bd38      	pop	{r3, r4, r5, pc}
    3ae8:	f06f 0015 	mvn.w	r0, #21
    3aec:	bd38      	pop	{r3, r4, r5, pc}
    3aee:	0000      	.short	0x0000
    3af0:	20000060 	.word	0x20000060

00003af4 <sdc_init>:
    3af4:	b570      	push	{r4, r5, r6, lr}
    3af6:	0004      	movs	r4, r0
    3af8:	d00b      	beq.n	3b12 <sdc_init+0x1e>
    3afa:	f7ff fdbd 	bl	3678 <mpsl_is_initialized>
    3afe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3b02:	b120      	cbz	r0, 3b0e <sdc_init+0x1a>
    3b04:	f7ff fc9c 	bl	3440 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3b08:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3b0c:	d904      	bls.n	3b18 <sdc_init+0x24>
    3b0e:	4628      	mov	r0, r5
    3b10:	bd70      	pop	{r4, r5, r6, pc}
    3b12:	f06f 0015 	mvn.w	r0, #21
    3b16:	bd70      	pop	{r4, r5, r6, pc}
    3b18:	2200      	movs	r2, #0
    3b1a:	4b14      	ldr	r3, [pc, #80]	; (3b6c <sdc_init+0x78>)
    3b1c:	4611      	mov	r1, r2
    3b1e:	bf00      	nop
    3b20:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    3b24:	4285      	cmp	r5, r0
    3b26:	d303      	bcc.n	3b30 <sdc_init+0x3c>
    3b28:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3b2c:	7882      	ldrb	r2, [r0, #2]
    3b2e:	e003      	b.n	3b38 <sdc_init+0x44>
    3b30:	1c49      	adds	r1, r1, #1
    3b32:	b2c9      	uxtb	r1, r1
    3b34:	290c      	cmp	r1, #12
    3b36:	d3f3      	bcc.n	3b20 <sdc_init+0x2c>
    3b38:	480d      	ldr	r0, [pc, #52]	; (3b70 <sdc_init+0x7c>)
    3b3a:	7042      	strb	r2, [r0, #1]
    3b3c:	6044      	str	r4, [r0, #4]
    3b3e:	480d      	ldr	r0, [pc, #52]	; (3b74 <sdc_init+0x80>)
    3b40:	f000 f986 	bl	3e50 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3b44:	f3ef 8410 	mrs	r4, PRIMASK
    3b48:	b672      	cpsid	i
    3b4a:	480b      	ldr	r0, [pc, #44]	; (3b78 <sdc_init+0x84>)
    3b4c:	f06f 010c 	mvn.w	r1, #12
    3b50:	f000 fc88 	bl	4464 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3b54:	4809      	ldr	r0, [pc, #36]	; (3b7c <sdc_init+0x88>)
    3b56:	f000 fd4b 	bl	45f0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3b5a:	b118      	cbz	r0, 3b64 <sdc_init+0x70>
    3b5c:	21b2      	movs	r1, #178	; 0xb2
    3b5e:	2003      	movs	r0, #3
    3b60:	f000 f80e 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b64:	b904      	cbnz	r4, 3b68 <sdc_init+0x74>
    3b66:	b662      	cpsie	i
    3b68:	2000      	movs	r0, #0
    3b6a:	bd70      	pop	{r4, r5, r6, pc}
    3b6c:	00003bea 	.word	0x00003bea
    3b70:	20000060 	.word	0x20000060
    3b74:	000039d1 	.word	0x000039d1
    3b78:	4000e000 	.word	0x4000e000
    3b7c:	00003c31 	.word	0x00003c31

00003b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3b80:	b50e      	push	{r1, r2, r3, lr}
    3b82:	b672      	cpsid	i
    3b84:	4a15      	ldr	r2, [pc, #84]	; (3bdc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3b86:	6855      	ldr	r5, [r2, #4]
    3b88:	b1d5      	cbz	r5, 3bc0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3b8a:	2200      	movs	r2, #0
    3b8c:	4603      	mov	r3, r0
    3b8e:	466e      	mov	r6, sp
    3b90:	240a      	movs	r4, #10
    3b92:	e003      	b.n	3b9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3b94:	fbb0 f0f4 	udiv	r0, r0, r4
    3b98:	1c52      	adds	r2, r2, #1
    3b9a:	b2d2      	uxtb	r2, r2
    3b9c:	2800      	cmp	r0, #0
    3b9e:	d1f9      	bne.n	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3ba0:	54b0      	strb	r0, [r6, r2]
    3ba2:	e009      	b.n	3bb8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3ba4:	fbb3 f0f4 	udiv	r0, r3, r4
    3ba8:	fb04 3010 	mls	r0, r4, r0, r3
    3bac:	fbb3 f3f4 	udiv	r3, r3, r4
    3bb0:	1e52      	subs	r2, r2, #1
    3bb2:	b2d2      	uxtb	r2, r2
    3bb4:	3030      	adds	r0, #48	; 0x30
    3bb6:	54b0      	strb	r0, [r6, r2]
    3bb8:	2a00      	cmp	r2, #0
    3bba:	d1f3      	bne.n	3ba4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3bbc:	4630      	mov	r0, r6
    3bbe:	47a8      	blx	r5
    3bc0:	f3bf 8f4f 	dsb	sy
    3bc4:	4806      	ldr	r0, [pc, #24]	; (3be0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3bc6:	6801      	ldr	r1, [r0, #0]
    3bc8:	4a06      	ldr	r2, [pc, #24]	; (3be4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3bca:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3bce:	4311      	orrs	r1, r2
    3bd0:	6001      	str	r1, [r0, #0]
    3bd2:	f3bf 8f4f 	dsb	sy
    3bd6:	bf00      	nop
    3bd8:	e7fd      	b.n	3bd6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3bda:	0000      	.short	0x0000
    3bdc:	20000060 	.word	0x20000060
    3be0:	e000ed0c 	.word	0xe000ed0c
    3be4:	05fa0004 	.word	0x05fa0004
    3be8:	00010001 	.word	0x00010001
    3bec:	0002000b 	.word	0x0002000b
    3bf0:	0005000a 	.word	0x0005000a
    3bf4:	000a0009 	.word	0x000a0009
    3bf8:	00140008 	.word	0x00140008
    3bfc:	001e0007 	.word	0x001e0007
    3c00:	00320006 	.word	0x00320006
    3c04:	004b0005 	.word	0x004b0005
    3c08:	00640004 	.word	0x00640004
    3c0c:	00960003 	.word	0x00960003
    3c10:	00fa0002 	.word	0x00fa0002
    3c14:	01f40001 	.word	0x01f40001
    3c18:	43d40000 	.word	0x43d40000
    3c1c:	2263cfb5 	.word	0x2263cfb5
    3c20:	8aedd4e9 	.word	0x8aedd4e9
    3c24:	a14cd024 	.word	0xa14cd024
    3c28:	26a4b1f7 	.word	0x26a4b1f7
    3c2c:	00007585 	.word	0x00007585

00003c30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c32:	4c12      	ldr	r4, [pc, #72]	; (3c7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3c34:	2600      	movs	r6, #0
    3c36:	6825      	ldr	r5, [r4, #0]
    3c38:	e011      	b.n	3c5e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3c3a:	9800      	ldr	r0, [sp, #0]
    3c3c:	2802      	cmp	r0, #2
    3c3e:	d002      	beq.n	3c46 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3c40:	2803      	cmp	r0, #3
    3c42:	d10c      	bne.n	3c5e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3c44:	e006      	b.n	3c54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3c46:	6820      	ldr	r0, [r4, #0]
    3c48:	b110      	cbz	r0, 3c50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3c4a:	2000      	movs	r0, #0
    3c4c:	6026      	str	r6, [r4, #0]
    3c4e:	e005      	b.n	3c5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3c50:	2126      	movs	r1, #38	; 0x26
    3c52:	e00c      	b.n	3c6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3c54:	6820      	ldr	r0, [r4, #0]
    3c56:	b168      	cbz	r0, 3c74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3c58:	2001      	movs	r0, #1
    3c5a:	6026      	str	r6, [r4, #0]
    3c5c:	47a8      	blx	r5
    3c5e:	4668      	mov	r0, sp
    3c60:	f000 fc98 	bl	4594 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3c64:	2800      	cmp	r0, #0
    3c66:	d0e8      	beq.n	3c3a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3c68:	2805      	cmp	r0, #5
    3c6a:	d005      	beq.n	3c78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3c6c:	2133      	movs	r1, #51	; 0x33
    3c6e:	2004      	movs	r0, #4
    3c70:	f7ff ff86 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c74:	212b      	movs	r1, #43	; 0x2b
    3c76:	e7fa      	b.n	3c6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c7a:	0000      	.short	0x0000
    3c7c:	20000074 	.word	0x20000074

00003c80 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    3c80:	b570      	push	{r4, r5, r6, lr}
    3c82:	4d17      	ldr	r5, [pc, #92]	; (3ce0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x60>)
    3c84:	4606      	mov	r6, r0
    3c86:	7828      	ldrb	r0, [r5, #0]
    3c88:	b148      	cbz	r0, 3c9e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3c8a:	78ac      	ldrb	r4, [r5, #2]
    3c8c:	1c69      	adds	r1, r5, #1
    3c8e:	1ca4      	adds	r4, r4, #2
    3c90:	4622      	mov	r2, r4
    3c92:	4630      	mov	r0, r6
    3c94:	f7ff fdea 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c98:	2000      	movs	r0, #0
    3c9a:	7028      	strb	r0, [r5, #0]
    3c9c:	e012      	b.n	3cc4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x44>
    3c9e:	4811      	ldr	r0, [pc, #68]	; (3ce4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3ca0:	f008 fdaa 	bl	c7f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3ca4:	2800      	cmp	r0, #0
    3ca6:	d01a      	beq.n	3cde <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5e>
    3ca8:	210a      	movs	r1, #10
    3caa:	203e      	movs	r0, #62	; 0x3e
    3cac:	f000 f81c 	bl	3ce8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x68>
    3cb0:	b918      	cbnz	r0, 3cba <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x3a>
    3cb2:	480c      	ldr	r0, [pc, #48]	; (3ce4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3cb4:	7800      	ldrb	r0, [r0, #0]
    3cb6:	2814      	cmp	r0, #20
    3cb8:	d00b      	beq.n	3cd2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x52>
    3cba:	490a      	ldr	r1, [pc, #40]	; (3ce4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3cbc:	4630      	mov	r0, r6
    3cbe:	f00a ffbf 	bl	ec40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3cc2:	4604      	mov	r4, r0
    3cc4:	b154      	cbz	r4, 3cdc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5c>
    3cc6:	78b1      	ldrb	r1, [r6, #2]
    3cc8:	7830      	ldrb	r0, [r6, #0]
    3cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3cce:	f000 b80b 	b.w	3ce8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x68>
    3cd2:	4904      	ldr	r1, [pc, #16]	; (3ce4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3cd4:	4630      	mov	r0, r6
    3cd6:	f00b f9f0 	bl	f0ba <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3cda:	e7f2      	b.n	3cc2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    3cdc:	2000      	movs	r0, #0
    3cde:	bd70      	pop	{r4, r5, r6, pc}
    3ce0:	20000e9c 	.word	0x20000e9c
    3ce4:	20000d7c 	.word	0x20000d7c
    3ce8:	b570      	push	{r4, r5, r6, lr}
    3cea:	460c      	mov	r4, r1
    3cec:	4605      	mov	r5, r0
    3cee:	f000 f84b 	bl	3d88 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d002      	beq.n	3cfc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7c>
    3cf6:	2d3e      	cmp	r5, #62	; 0x3e
    3cf8:	d001      	beq.n	3cfe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7e>
    3cfa:	2001      	movs	r0, #1
    3cfc:	bd70      	pop	{r4, r5, r6, pc}
    3cfe:	2c12      	cmp	r4, #18
    3d00:	d106      	bne.n	3d10 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>
    3d02:	4806      	ldr	r0, [pc, #24]	; (3d1c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x9c>)
    3d04:	7801      	ldrb	r1, [r0, #0]
    3d06:	2902      	cmp	r1, #2
    3d08:	d002      	beq.n	3d10 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>
    3d0a:	7840      	ldrb	r0, [r0, #1]
    3d0c:	2800      	cmp	r0, #0
    3d0e:	d0f5      	beq.n	3cfc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7c>
    3d10:	4620      	mov	r0, r4
    3d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3d16:	f000 b853 	b.w	3dc0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    3d1a:	0000      	.short	0x0000
    3d1c:	200003a6 	.word	0x200003a6

00003d20 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    3d20:	4901      	ldr	r1, [pc, #4]	; (3d28 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    3d22:	7048      	strb	r0, [r1, #1]
    3d24:	4770      	bx	lr
    3d26:	0000      	.short	0x0000
    3d28:	200003a6 	.word	0x200003a6
    3d2c:	b570      	push	{r4, r5, r6, lr}
    3d2e:	780a      	ldrb	r2, [r1, #0]
    3d30:	7082      	strb	r2, [r0, #2]
    3d32:	b33a      	cbz	r2, 3d84 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    3d34:	2a01      	cmp	r2, #1
    3d36:	d825      	bhi.n	3d84 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    3d38:	2313      	movs	r3, #19
    3d3a:	7003      	strb	r3, [r0, #0]
    3d3c:	2300      	movs	r3, #0
    3d3e:	e00a      	b.n	3d56 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    3d40:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3d44:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3d48:	78a6      	ldrb	r6, [r4, #2]
    3d4a:	70ee      	strb	r6, [r5, #3]
    3d4c:	8864      	ldrh	r4, [r4, #2]
    3d4e:	0a24      	lsrs	r4, r4, #8
    3d50:	1c5b      	adds	r3, r3, #1
    3d52:	712c      	strb	r4, [r5, #4]
    3d54:	b2db      	uxtb	r3, r3
    3d56:	4293      	cmp	r3, r2
    3d58:	d3f2      	bcc.n	3d40 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    3d5a:	2300      	movs	r3, #0
    3d5c:	e00b      	b.n	3d76 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    3d5e:	bf00      	nop
    3d60:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3d64:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3d68:	792e      	ldrb	r6, [r5, #4]
    3d6a:	7166      	strb	r6, [r4, #5]
    3d6c:	88ad      	ldrh	r5, [r5, #4]
    3d6e:	0a2d      	lsrs	r5, r5, #8
    3d70:	1c5b      	adds	r3, r3, #1
    3d72:	71a5      	strb	r5, [r4, #6]
    3d74:	b2db      	uxtb	r3, r3
    3d76:	4293      	cmp	r3, r2
    3d78:	d3f2      	bcc.n	3d60 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    3d7a:	2101      	movs	r1, #1
    3d7c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3d80:	b2c0      	uxtb	r0, r0
    3d82:	bd70      	pop	{r4, r5, r6, pc}
    3d84:	2000      	movs	r0, #0
    3d86:	bd70      	pop	{r4, r5, r6, pc}

00003d88 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3d88:	2101      	movs	r1, #1
    3d8a:	4a0c      	ldr	r2, [pc, #48]	; (3dbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3d8c:	2840      	cmp	r0, #64	; 0x40
    3d8e:	d20c      	bcs.n	3daa <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3d90:	2820      	cmp	r0, #32
    3d92:	d803      	bhi.n	3d9c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3d94:	1e40      	subs	r0, r0, #1
    3d96:	4081      	lsls	r1, r0
    3d98:	6810      	ldr	r0, [r2, #0]
    3d9a:	e002      	b.n	3da2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3d9c:	3821      	subs	r0, #33	; 0x21
    3d9e:	4081      	lsls	r1, r0
    3da0:	6850      	ldr	r0, [r2, #4]
    3da2:	4201      	tst	r1, r0
    3da4:	d107      	bne.n	3db6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3da6:	2000      	movs	r0, #0
    3da8:	4770      	bx	lr
    3daa:	28ff      	cmp	r0, #255	; 0xff
    3dac:	d003      	beq.n	3db6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3dae:	3840      	subs	r0, #64	; 0x40
    3db0:	4081      	lsls	r1, r0
    3db2:	6890      	ldr	r0, [r2, #8]
    3db4:	e7f5      	b.n	3da2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3db6:	2001      	movs	r0, #1
    3db8:	4770      	bx	lr
    3dba:	0000      	.short	0x0000
    3dbc:	20000078 	.word	0x20000078

00003dc0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3dc0:	2101      	movs	r1, #1
    3dc2:	1e40      	subs	r0, r0, #1
    3dc4:	4081      	lsls	r1, r0
    3dc6:	4804      	ldr	r0, [pc, #16]	; (3dd8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3dc8:	68c0      	ldr	r0, [r0, #12]
    3dca:	4201      	tst	r1, r0
    3dcc:	d001      	beq.n	3dd2 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3dce:	2001      	movs	r0, #1
    3dd0:	4770      	bx	lr
    3dd2:	2000      	movs	r0, #0
    3dd4:	4770      	bx	lr
    3dd6:	0000      	.short	0x0000
    3dd8:	20000078 	.word	0x20000078

00003ddc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3ddc:	4901      	ldr	r1, [pc, #4]	; (3de4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3dde:	6800      	ldr	r0, [r0, #0]
    3de0:	60c8      	str	r0, [r1, #12]
    3de2:	4770      	bx	lr
    3de4:	20000078 	.word	0x20000078

00003de8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3de8:	4904      	ldr	r1, [pc, #16]	; (3dfc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3dea:	6802      	ldr	r2, [r0, #0]
    3dec:	6840      	ldr	r0, [r0, #4]
    3dee:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3df2:	600a      	str	r2, [r1, #0]
    3df4:	4a02      	ldr	r2, [pc, #8]	; (3e00 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3df6:	4310      	orrs	r0, r2
    3df8:	6048      	str	r0, [r1, #4]
    3dfa:	4770      	bx	lr
    3dfc:	20000078 	.word	0x20000078
    3e00:	024007f8 	.word	0x024007f8

00003e04 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    3e04:	4901      	ldr	r1, [pc, #4]	; (3e0c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    3e06:	6800      	ldr	r0, [r0, #0]
    3e08:	6088      	str	r0, [r1, #8]
    3e0a:	4770      	bx	lr
    3e0c:	20000078 	.word	0x20000078

00003e10 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    3e10:	4805      	ldr	r0, [pc, #20]	; (3e28 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    3e12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3e16:	6001      	str	r1, [r0, #0]
    3e18:	0cc9      	lsrs	r1, r1, #19
    3e1a:	6041      	str	r1, [r0, #4]
    3e1c:	2100      	movs	r1, #0
    3e1e:	6081      	str	r1, [r0, #8]
    3e20:	211f      	movs	r1, #31
    3e22:	60c1      	str	r1, [r0, #12]
    3e24:	4770      	bx	lr
    3e26:	0000      	.short	0x0000
    3e28:	20000078 	.word	0x20000078

00003e2c <sdc_hci_cmd_cb_reset>:
    3e2c:	b510      	push	{r4, lr}
    3e2e:	f7ff ffef 	bl	3e10 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    3e32:	2000      	movs	r0, #0
    3e34:	f7ff ff74 	bl	3d20 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    3e38:	f00d fbe6 	bl	11608 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    3e3c:	4604      	mov	r4, r0
    3e3e:	4803      	ldr	r0, [pc, #12]	; (3e4c <sdc_hci_cmd_cb_reset+0x20>)
    3e40:	6800      	ldr	r0, [r0, #0]
    3e42:	b100      	cbz	r0, 3e46 <sdc_hci_cmd_cb_reset+0x1a>
    3e44:	4780      	blx	r0
    3e46:	4620      	mov	r0, r4
    3e48:	bd10      	pop	{r4, pc}
    3e4a:	0000      	.short	0x0000
    3e4c:	20000088 	.word	0x20000088

00003e50 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    3e50:	4901      	ldr	r1, [pc, #4]	; (3e58 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    3e52:	6008      	str	r0, [r1, #0]
    3e54:	4770      	bx	lr
    3e56:	0000      	.short	0x0000
    3e58:	20000088 	.word	0x20000088

00003e5c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    3e5c:	2102      	movs	r1, #2
    3e5e:	8001      	strh	r1, [r0, #0]
    3e60:	8041      	strh	r1, [r0, #2]
    3e62:	2100      	movs	r1, #0
    3e64:	7101      	strb	r1, [r0, #4]
    3e66:	21d4      	movs	r1, #212	; 0xd4
    3e68:	7141      	strb	r1, [r0, #5]
    3e6a:	f24b 5143 	movw	r1, #46403	; 0xb543
    3e6e:	80c1      	strh	r1, [r0, #6]
    3e70:	4901      	ldr	r1, [pc, #4]	; (3e78 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    3e72:	6081      	str	r1, [r0, #8]
    3e74:	2000      	movs	r0, #0
    3e76:	4770      	bx	lr
    3e78:	e92263cf 	.word	0xe92263cf

00003e7c <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>:
    3e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e80:	4607      	mov	r7, r0
    3e82:	b111      	cbz	r1, 3e8a <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xe>
    3e84:	2000      	movs	r0, #0
    3e86:	b960      	cbnz	r0, 3ea2 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    3e88:	e001      	b.n	3e8e <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x12>
    3e8a:	2001      	movs	r0, #1
    3e8c:	e7fb      	b.n	3e86 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xa>
    3e8e:	2901      	cmp	r1, #1
    3e90:	d007      	beq.n	3ea2 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    3e92:	2000      	movs	r0, #0
    3e94:	2800      	cmp	r0, #0
    3e96:	d01f      	beq.n	3ed8 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x5c>
    3e98:	2400      	movs	r4, #0
    3e9a:	4812      	ldr	r0, [pc, #72]	; (3ee4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x68>)
    3e9c:	2901      	cmp	r1, #1
    3e9e:	d002      	beq.n	3ea6 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2a>
    3ea0:	e002      	b.n	3ea8 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2c>
    3ea2:	2001      	movs	r0, #1
    3ea4:	e7f6      	b.n	3e94 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x18>
    3ea6:	7804      	ldrb	r4, [r0, #0]
    3ea8:	2300      	movs	r3, #0
    3eaa:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3eae:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    3eb2:	f810 e001 	ldrb.w	lr, [r0, r1]
    3eb6:	e008      	b.n	3eca <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x4e>
    3eb8:	1918      	adds	r0, r3, r4
    3eba:	f8dc 500c 	ldr.w	r5, [ip, #12]
    3ebe:	b280      	uxth	r0, r0
    3ec0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    3ec4:	b125      	cbz	r5, 3ed0 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x54>
    3ec6:	1c5b      	adds	r3, r3, #1
    3ec8:	b29b      	uxth	r3, r3
    3eca:	459e      	cmp	lr, r3
    3ecc:	d8f4      	bhi.n	3eb8 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x3c>
    3ece:	4630      	mov	r0, r6
    3ed0:	8038      	strh	r0, [r7, #0]
    3ed2:	42b0      	cmp	r0, r6
    3ed4:	d102      	bne.n	3edc <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x60>
    3ed6:	2000      	movs	r0, #0
    3ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ee0:	f000 b8b4 	b.w	404c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x74>
    3ee4:	20000fa0 	.word	0x20000fa0

00003ee8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    3ee8:	b510      	push	{r4, lr}
    3eea:	2802      	cmp	r0, #2
    3eec:	d304      	bcc.n	3ef8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    3eee:	f240 1153 	movw	r1, #339	; 0x153
    3ef2:	2017      	movs	r0, #23
    3ef4:	f7ff fe44 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ef8:	4901      	ldr	r1, [pc, #4]	; (3f00 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    3efa:	5c08      	ldrb	r0, [r1, r0]
    3efc:	bd10      	pop	{r4, pc}
    3efe:	0000      	.short	0x0000
    3f00:	20000fa0 	.word	0x20000fa0

00003f04 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    3f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f06:	4605      	mov	r5, r0
    3f08:	18c8      	adds	r0, r1, r3
    3f0a:	28ff      	cmp	r0, #255	; 0xff
    3f0c:	d902      	bls.n	3f14 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    3f0e:	f240 1121 	movw	r1, #289	; 0x121
    3f12:	e00f      	b.n	3f34 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    3f14:	429a      	cmp	r2, r3
    3f16:	d902      	bls.n	3f1e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
    3f18:	f44f 7191 	mov.w	r1, #290	; 0x122
    3f1c:	e00a      	b.n	3f34 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    3f1e:	b2c4      	uxtb	r4, r0
    3f20:	9500      	str	r5, [sp, #0]
    3f22:	b155      	cbz	r5, 3f3a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x36>
    3f24:	2600      	movs	r6, #0
    3f26:	1ce8      	adds	r0, r5, #3
    3f28:	f020 0003 	bic.w	r0, r0, #3
    3f2c:	42a8      	cmp	r0, r5
    3f2e:	d006      	beq.n	3f3e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    3f30:	f44f 7194 	mov.w	r1, #296	; 0x128
    3f34:	2017      	movs	r0, #23
    3f36:	f7ff fe23 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f3a:	2601      	movs	r6, #1
    3f3c:	e7f3      	b.n	3f26 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
    3f3e:	4f12      	ldr	r7, [pc, #72]	; (3f88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x84>)
    3f40:	4668      	mov	r0, sp
    3f42:	703b      	strb	r3, [r7, #0]
    3f44:	7079      	strb	r1, [r7, #1]
    3f46:	4631      	mov	r1, r6
    3f48:	f000 f8c6 	bl	40d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    3f4c:	2100      	movs	r1, #0
    3f4e:	468c      	mov	ip, r1
    3f50:	9800      	ldr	r0, [sp, #0]
    3f52:	1cc0      	adds	r0, r0, #3
    3f54:	f020 0003 	bic.w	r0, r0, #3
    3f58:	9000      	str	r0, [sp, #0]
    3f5a:	b95e      	cbnz	r6, 3f74 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x70>
    3f5c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    3f60:	60d8      	str	r0, [r3, #12]
    3f62:	2000      	movs	r0, #0
    3f64:	e004      	b.n	3f70 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x6c>
    3f66:	68da      	ldr	r2, [r3, #12]
    3f68:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
    3f6c:	1c40      	adds	r0, r0, #1
    3f6e:	b2c0      	uxtb	r0, r0
    3f70:	42a0      	cmp	r0, r4
    3f72:	d3f8      	bcc.n	3f66 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x62>
    3f74:	9800      	ldr	r0, [sp, #0]
    3f76:	1c49      	adds	r1, r1, #1
    3f78:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    3f7c:	b2c9      	uxtb	r1, r1
    3f7e:	9000      	str	r0, [sp, #0]
    3f80:	2902      	cmp	r1, #2
    3f82:	d3e5      	bcc.n	3f50 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x4c>
    3f84:	1b40      	subs	r0, r0, r5
    3f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f88:	20000fa0 	.word	0x20000fa0

00003f8c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    3f8c:	b570      	push	{r4, r5, r6, lr}
    3f8e:	4604      	mov	r4, r0
    3f90:	f00b feb9 	bl	fd06 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    3f94:	b108      	cbz	r0, 3f9a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    3f96:	2010      	movs	r0, #16
    3f98:	bd70      	pop	{r4, r5, r6, pc}
    3f9a:	7825      	ldrb	r5, [r4, #0]
    3f9c:	f000 f84e 	bl	403c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    3fa0:	4602      	mov	r2, r0
    3fa2:	480c      	ldr	r0, [pc, #48]	; (3fd4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    3fa4:	8861      	ldrh	r1, [r4, #2]
    3fa6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3faa:	e00e      	b.n	3fca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    3fac:	68c3      	ldr	r3, [r0, #12]
    3fae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    3fb2:	b143      	cbz	r3, 3fc6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    3fb4:	1c4a      	adds	r2, r1, #1
    3fb6:	8062      	strh	r2, [r4, #2]
    3fb8:	80a1      	strh	r1, [r4, #4]
    3fba:	68c0      	ldr	r0, [r0, #12]
    3fbc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3fc0:	60a0      	str	r0, [r4, #8]
    3fc2:	2000      	movs	r0, #0
    3fc4:	bd70      	pop	{r4, r5, r6, pc}
    3fc6:	1c49      	adds	r1, r1, #1
    3fc8:	b289      	uxth	r1, r1
    3fca:	4291      	cmp	r1, r2
    3fcc:	d3ee      	bcc.n	3fac <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    3fce:	8061      	strh	r1, [r4, #2]
    3fd0:	2005      	movs	r0, #5
    3fd2:	bd70      	pop	{r4, r5, r6, pc}
    3fd4:	20000fa0 	.word	0x20000fa0

00003fd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    3fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fdc:	4607      	mov	r7, r0
    3fde:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    3fe2:	460c      	mov	r4, r1
    3fe4:	f243 0602 	movw	r6, #12290	; 0x3002
    3fe8:	38ff      	subs	r0, #255	; 0xff
    3fea:	d020      	beq.n	402e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    3fec:	2c02      	cmp	r4, #2
    3fee:	d302      	bcc.n	3ff6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    3ff0:	2007      	movs	r0, #7
    3ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ff6:	4638      	mov	r0, r7
    3ff8:	f000 f85e 	bl	40b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    3ffc:	0005      	movs	r5, r0
    3ffe:	d016      	beq.n	402e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4000:	480c      	ldr	r0, [pc, #48]	; (4034 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4002:	4629      	mov	r1, r5
    4004:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4008:	4638      	mov	r0, r7
    400a:	4790      	blx	r2
    400c:	480a      	ldr	r0, [pc, #40]	; (4038 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    400e:	2100      	movs	r1, #0
    4010:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    4014:	68f0      	ldr	r0, [r6, #12]
    4016:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    401a:	4620      	mov	r0, r4
    401c:	f000 f88e 	bl	413c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    4020:	4602      	mov	r2, r0
    4022:	4629      	mov	r1, r5
    4024:	6870      	ldr	r0, [r6, #4]
    4026:	f00b fda6 	bl	fb76 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    402a:	2000      	movs	r0, #0
    402c:	e7e1      	b.n	3ff2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    402e:	4630      	mov	r0, r6
    4030:	e7df      	b.n	3ff2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4032:	0000      	.short	0x0000
    4034:	0000415c 	.word	0x0000415c
    4038:	20000fa0 	.word	0x20000fa0
    403c:	4902      	ldr	r1, [pc, #8]	; (4048 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x70>)
    403e:	7808      	ldrb	r0, [r1, #0]
    4040:	7849      	ldrb	r1, [r1, #1]
    4042:	4408      	add	r0, r1
    4044:	b2c0      	uxtb	r0, r0
    4046:	4770      	bx	lr
    4048:	20000fa0 	.word	0x20000fa0
    404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4050:	4690      	mov	r8, r2
    4052:	460e      	mov	r6, r1
    4054:	4607      	mov	r7, r0
    4056:	f00b fdc8 	bl	fbea <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    405a:	b140      	cbz	r0, 406e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x96>
    405c:	4814      	ldr	r0, [pc, #80]	; (40b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>)
    405e:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    4062:	68e0      	ldr	r0, [r4, #12]
    4064:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4068:	b118      	cbz	r0, 4072 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9a>
    406a:	21f4      	movs	r1, #244	; 0xf4
    406c:	e013      	b.n	4096 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    406e:	21f3      	movs	r1, #243	; 0xf3
    4070:	e011      	b.n	4096 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    4072:	6860      	ldr	r0, [r4, #4]
    4074:	2800      	cmp	r0, #0
    4076:	d019      	beq.n	40ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    4078:	4630      	mov	r0, r6
    407a:	f000 f85f 	bl	413c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    407e:	4601      	mov	r1, r0
    4080:	6860      	ldr	r0, [r4, #4]
    4082:	f00b fd2a 	bl	fada <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4086:	0005      	movs	r5, r0
    4088:	d00f      	beq.n	40aa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd2>
    408a:	68e0      	ldr	r0, [r4, #12]
    408c:	2e02      	cmp	r6, #2
    408e:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
    4092:	d303      	bcc.n	409c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    4094:	21ff      	movs	r1, #255	; 0xff
    4096:	2017      	movs	r0, #23
    4098:	f7ff fd72 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    409c:	4805      	ldr	r0, [pc, #20]	; (40b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xdc>)
    409e:	4642      	mov	r2, r8
    40a0:	4629      	mov	r1, r5
    40a2:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    40a6:	4638      	mov	r0, r7
    40a8:	4798      	blx	r3
    40aa:	4628      	mov	r0, r5
    40ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40b0:	20000fa0 	.word	0x20000fa0
    40b4:	00004154 	.word	0x00004154
    40b8:	b570      	push	{r4, r5, r6, lr}
    40ba:	460c      	mov	r4, r1
    40bc:	4605      	mov	r5, r0
    40be:	f00b fd94 	bl	fbea <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    40c2:	2800      	cmp	r0, #0
    40c4:	d005      	beq.n	40d2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfa>
    40c6:	4803      	ldr	r0, [pc, #12]	; (40d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfc>)
    40c8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    40cc:	68c0      	ldr	r0, [r0, #12]
    40ce:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    40d2:	bd70      	pop	{r4, r5, r6, pc}
    40d4:	20000fa0 	.word	0x20000fa0
    40d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    40dc:	4f16      	ldr	r7, [pc, #88]	; (4138 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x160>)
    40de:	4688      	mov	r8, r1
    40e0:	4605      	mov	r5, r0
    40e2:	2400      	movs	r4, #0
    40e4:	6828      	ldr	r0, [r5, #0]
    40e6:	1cc0      	adds	r0, r0, #3
    40e8:	f020 0003 	bic.w	r0, r0, #3
    40ec:	6028      	str	r0, [r5, #0]
    40ee:	4620      	mov	r0, r4
    40f0:	f000 f824 	bl	413c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    40f4:	5d39      	ldrb	r1, [r7, r4]
    40f6:	4341      	muls	r1, r0
    40f8:	f1b8 0f00 	cmp.w	r8, #0
    40fc:	d001      	beq.n	4102 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    40fe:	2000      	movs	r0, #0
    4100:	e000      	b.n	4104 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12c>
    4102:	6828      	ldr	r0, [r5, #0]
    4104:	9000      	str	r0, [sp, #0]
    4106:	b118      	cbz	r0, 4110 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4108:	2600      	movs	r6, #0
    410a:	b11e      	cbz	r6, 4114 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13c>
    410c:	2000      	movs	r0, #0
    410e:	e002      	b.n	4116 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4110:	2601      	movs	r6, #1
    4112:	e7fa      	b.n	410a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    4114:	4668      	mov	r0, sp
    4116:	f00b fd0d 	bl	fb34 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    411a:	b91e      	cbnz	r6, 4124 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    411c:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    4120:	9a00      	ldr	r2, [sp, #0]
    4122:	604a      	str	r2, [r1, #4]
    4124:	6829      	ldr	r1, [r5, #0]
    4126:	1c64      	adds	r4, r4, #1
    4128:	4408      	add	r0, r1
    412a:	b2e4      	uxtb	r4, r4
    412c:	6028      	str	r0, [r5, #0]
    412e:	2c02      	cmp	r4, #2
    4130:	d3d8      	bcc.n	40e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    4132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4136:	0000      	.short	0x0000
    4138:	20000fa0 	.word	0x20000fa0
    413c:	4903      	ldr	r1, [pc, #12]	; (414c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x174>)
    413e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4142:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4146:	1cc0      	adds	r0, r0, #3
    4148:	4008      	ands	r0, r1
    414a:	4770      	bx	lr
    414c:	00004150 	.word	0x00004150
    4150:	02280190 	.word	0x02280190
    4154:	00010ec1 	.word	0x00010ec1
    4158:	00010c91 	.word	0x00010c91
    415c:	00010ef7 	.word	0x00010ef7
    4160:	00010ca7 	.word	0x00010ca7

00004164 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4164:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4168:	4c26      	ldr	r4, [pc, #152]	; (4204 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    416a:	4680      	mov	r8, r0
    416c:	b081      	sub	sp, #4
    416e:	6820      	ldr	r0, [r4, #0]
    4170:	469a      	mov	sl, r3
    4172:	4693      	mov	fp, r2
    4174:	b158      	cbz	r0, 418e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4176:	7a02      	ldrb	r2, [r0, #8]
    4178:	4542      	cmp	r2, r8
    417a:	d903      	bls.n	4184 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    417c:	6841      	ldr	r1, [r0, #4]
    417e:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4182:	b140      	cbz	r0, 4196 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4184:	f243 0002 	movw	r0, #12290	; 0x3002
    4188:	b005      	add	sp, #20
    418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    418e:	21a5      	movs	r1, #165	; 0xa5
    4190:	2018      	movs	r0, #24
    4192:	f7ff fcf5 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4196:	4619      	mov	r1, r3
    4198:	9802      	ldr	r0, [sp, #8]
    419a:	f00b fd47 	bl	fc2c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    419e:	b287      	uxth	r7, r0
    41a0:	4658      	mov	r0, fp
    41a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    41a4:	f00b fd39 	bl	fc1a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    41a8:	b286      	uxth	r6, r0
    41aa:	19b8      	adds	r0, r7, r6
    41ac:	1d00      	adds	r0, r0, #4
    41ae:	b285      	uxth	r5, r0
    41b0:	6820      	ldr	r0, [r4, #0]
    41b2:	46a1      	mov	r9, r4
    41b4:	4629      	mov	r1, r5
    41b6:	6800      	ldr	r0, [r0, #0]
    41b8:	f00b fc8f 	bl	fada <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    41bc:	0004      	movs	r4, r0
    41be:	d01f      	beq.n	4200 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    41c0:	8065      	strh	r5, [r4, #2]
    41c2:	8026      	strh	r6, [r4, #0]
    41c4:	980e      	ldr	r0, [sp, #56]	; 0x38
    41c6:	1d25      	adds	r5, r4, #4
    41c8:	9000      	str	r0, [sp, #0]
    41ca:	4631      	mov	r1, r6
    41cc:	465a      	mov	r2, fp
    41ce:	2301      	movs	r3, #1
    41d0:	4628      	mov	r0, r5
    41d2:	f00b fbbd 	bl	f950 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    41d6:	8820      	ldrh	r0, [r4, #0]
    41d8:	4639      	mov	r1, r7
    41da:	4428      	add	r0, r5
    41dc:	2301      	movs	r3, #1
    41de:	9a02      	ldr	r2, [sp, #8]
    41e0:	f8cd a000 	str.w	sl, [sp]
    41e4:	f00b fbb4 	bl	f950 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    41e8:	8820      	ldrh	r0, [r4, #0]
    41ea:	1941      	adds	r1, r0, r5
    41ec:	4628      	mov	r0, r5
    41ee:	f00b fbe5 	bl	f9bc <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    41f2:	f8d9 0000 	ldr.w	r0, [r9]
    41f6:	6841      	ldr	r1, [r0, #4]
    41f8:	2000      	movs	r0, #0
    41fa:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    41fe:	e7c3      	b.n	4188 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4200:	2004      	movs	r0, #4
    4202:	e7c1      	b.n	4188 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4204:	2000008c 	.word	0x2000008c

00004208 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4208:	b570      	push	{r4, r5, r6, lr}
    420a:	4c14      	ldr	r4, [pc, #80]	; (425c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    420c:	6823      	ldr	r3, [r4, #0]
    420e:	b18b      	cbz	r3, 4234 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4210:	7a19      	ldrb	r1, [r3, #8]
    4212:	4281      	cmp	r1, r0
    4214:	d912      	bls.n	423c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4216:	685a      	ldr	r2, [r3, #4]
    4218:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    421c:	b171      	cbz	r1, 423c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    421e:	2500      	movs	r5, #0
    4220:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4224:	884a      	ldrh	r2, [r1, #2]
    4226:	6818      	ldr	r0, [r3, #0]
    4228:	f00b fca5 	bl	fb76 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    422c:	6821      	ldr	r1, [r4, #0]
    422e:	2000      	movs	r0, #0
    4230:	7a0a      	ldrb	r2, [r1, #8]
    4232:	e00c      	b.n	424e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4234:	21c8      	movs	r1, #200	; 0xc8
    4236:	2018      	movs	r0, #24
    4238:	f7ff fca2 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    423c:	f243 0002 	movw	r0, #12290	; 0x3002
    4240:	bd70      	pop	{r4, r5, r6, pc}
    4242:	684b      	ldr	r3, [r1, #4]
    4244:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4248:	b933      	cbnz	r3, 4258 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    424a:	1c40      	adds	r0, r0, #1
    424c:	b2c0      	uxtb	r0, r0
    424e:	4282      	cmp	r2, r0
    4250:	d8f7      	bhi.n	4242 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4252:	6808      	ldr	r0, [r1, #0]
    4254:	f00b fc84 	bl	fb60 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4258:	2000      	movs	r0, #0
    425a:	bd70      	pop	{r4, r5, r6, pc}
    425c:	2000008c 	.word	0x2000008c

00004260 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4264:	460d      	mov	r5, r1
    4266:	0004      	movs	r4, r0
    4268:	4690      	mov	r8, r2
    426a:	f04f 0600 	mov.w	r6, #0
    426e:	d009      	beq.n	4284 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4270:	2700      	movs	r7, #0
    4272:	1ce0      	adds	r0, r4, #3
    4274:	f020 0003 	bic.w	r0, r0, #3
    4278:	42a0      	cmp	r0, r4
    427a:	d005      	beq.n	4288 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    427c:	2186      	movs	r1, #134	; 0x86
    427e:	2018      	movs	r0, #24
    4280:	f7ff fc7e 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4284:	2701      	movs	r7, #1
    4286:	e7f4      	b.n	4272 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4288:	b1cd      	cbz	r5, 42be <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    428a:	4611      	mov	r1, r2
    428c:	2000      	movs	r0, #0
    428e:	f00b fc51 	bl	fb34 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4292:	300c      	adds	r0, #12
    4294:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4298:	b98f      	cbnz	r7, 42be <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    429a:	4f0a      	ldr	r7, [pc, #40]	; (42c4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    429c:	f104 000c 	add.w	r0, r4, #12
    42a0:	00aa      	lsls	r2, r5, #2
    42a2:	603c      	str	r4, [r7, #0]
    42a4:	7225      	strb	r5, [r4, #8]
    42a6:	6060      	str	r0, [r4, #4]
    42a8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    42ac:	6020      	str	r0, [r4, #0]
    42ae:	2100      	movs	r1, #0
    42b0:	6860      	ldr	r0, [r4, #4]
    42b2:	f00a fbb7 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    42b6:	4641      	mov	r1, r8
    42b8:	6838      	ldr	r0, [r7, #0]
    42ba:	f00b fc3b 	bl	fb34 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    42be:	4630      	mov	r0, r6
    42c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42c4:	2000008c 	.word	0x2000008c

000042c8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    42c8:	b570      	push	{r4, r5, r6, lr}
    42ca:	4d08      	ldr	r5, [pc, #32]	; (42ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    42cc:	6828      	ldr	r0, [r5, #0]
    42ce:	2800      	cmp	r0, #0
    42d0:	d00a      	beq.n	42e8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    42d2:	2400      	movs	r4, #0
    42d4:	e004      	b.n	42e0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    42d6:	4620      	mov	r0, r4
    42d8:	f7ff ff96 	bl	4208 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    42dc:	1c64      	adds	r4, r4, #1
    42de:	b2e4      	uxtb	r4, r4
    42e0:	6828      	ldr	r0, [r5, #0]
    42e2:	7a00      	ldrb	r0, [r0, #8]
    42e4:	42a0      	cmp	r0, r4
    42e6:	d8f6      	bhi.n	42d6 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    42e8:	bd70      	pop	{r4, r5, r6, pc}
    42ea:	0000      	.short	0x0000
    42ec:	2000008c 	.word	0x2000008c

000042f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    42f0:	4909      	ldr	r1, [pc, #36]	; (4318 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    42f2:	b510      	push	{r4, lr}
    42f4:	4602      	mov	r2, r0
    42f6:	6809      	ldr	r1, [r1, #0]
    42f8:	2000      	movs	r0, #0
    42fa:	b149      	cbz	r1, 4310 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    42fc:	7a0b      	ldrb	r3, [r1, #8]
    42fe:	4293      	cmp	r3, r2
    4300:	d905      	bls.n	430e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4302:	6849      	ldr	r1, [r1, #4]
    4304:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4308:	2900      	cmp	r1, #0
    430a:	d000      	beq.n	430e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    430c:	1d08      	adds	r0, r1, #4
    430e:	bd10      	pop	{r4, pc}
    4310:	21ee      	movs	r1, #238	; 0xee
    4312:	2018      	movs	r0, #24
    4314:	f7ff fc34 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4318:	2000008c 	.word	0x2000008c

0000431c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    431c:	490a      	ldr	r1, [pc, #40]	; (4348 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    431e:	b510      	push	{r4, lr}
    4320:	4602      	mov	r2, r0
    4322:	6809      	ldr	r1, [r1, #0]
    4324:	2000      	movs	r0, #0
    4326:	b159      	cbz	r1, 4340 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4328:	7a0b      	ldrb	r3, [r1, #8]
    432a:	4293      	cmp	r3, r2
    432c:	d907      	bls.n	433e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    432e:	6849      	ldr	r1, [r1, #4]
    4330:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4334:	2900      	cmp	r1, #0
    4336:	d002      	beq.n	433e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4338:	f831 0b04 	ldrh.w	r0, [r1], #4
    433c:	4408      	add	r0, r1
    433e:	bd10      	pop	{r4, pc}
    4340:	21fc      	movs	r1, #252	; 0xfc
    4342:	2018      	movs	r0, #24
    4344:	f7ff fc1c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4348:	2000008c 	.word	0x2000008c
    434c:	4909      	ldr	r1, [pc, #36]	; (4374 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x58>)
    434e:	b510      	push	{r4, lr}
    4350:	4807      	ldr	r0, [pc, #28]	; (4370 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x54>)
    4352:	6008      	str	r0, [r1, #0]
    4354:	4b08      	ldr	r3, [pc, #32]	; (4378 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x5c>)
    4356:	2011      	movs	r0, #17
    4358:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    435c:	2200      	movs	r2, #0
    435e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4362:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4366:	1c40      	adds	r0, r0, #1
    4368:	b2c0      	uxtb	r0, r0
    436a:	2814      	cmp	r0, #20
    436c:	d3f4      	bcc.n	4358 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x3c>
    436e:	bd10      	pop	{r4, pc}
    4370:	fffe0000 	.word	0xfffe0000
    4374:	4001f508 	.word	0x4001f508
    4378:	4001f000 	.word	0x4001f000
    437c:	b570      	push	{r4, r5, r6, lr}
    437e:	2420      	movs	r4, #32
    4380:	2100      	movs	r1, #0
    4382:	2301      	movs	r3, #1
    4384:	fa20 f201 	lsr.w	r2, r0, r1
    4388:	07d2      	lsls	r2, r2, #31
    438a:	d020      	beq.n	43ce <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    438c:	b24a      	sxtb	r2, r1
    438e:	2a00      	cmp	r2, #0
    4390:	db10      	blt.n	43b4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x98>
    4392:	bf00      	nop
    4394:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4398:	ea4f 0686 	mov.w	r6, r6, lsl #2
    439c:	f002 051f 	and.w	r5, r2, #31
    43a0:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    43a4:	fa03 f505 	lsl.w	r5, r3, r5
    43a8:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    43ac:	f3bf 8f4f 	dsb	sy
    43b0:	f3bf 8f6f 	isb	sy
    43b4:	db0b      	blt.n	43ce <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    43b6:	f002 051f 	and.w	r5, r2, #31
    43ba:	ea4f 1252 	mov.w	r2, r2, lsr #5
    43be:	ea4f 0282 	mov.w	r2, r2, lsl #2
    43c2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    43c6:	fa03 f505 	lsl.w	r5, r3, r5
    43ca:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    43ce:	f101 0101 	add.w	r1, r1, #1
    43d2:	42a1      	cmp	r1, r4
    43d4:	d3d6      	bcc.n	4384 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    43d6:	bd70      	pop	{r4, r5, r6, pc}
    43d8:	b570      	push	{r4, r5, r6, lr}
    43da:	0041      	lsls	r1, r0, #1
    43dc:	f04f 0300 	mov.w	r3, #0
    43e0:	d501      	bpl.n	43e6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xca>
    43e2:	491a      	ldr	r1, [pc, #104]	; (444c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x130>)
    43e4:	600b      	str	r3, [r1, #0]
    43e6:	0484      	lsls	r4, r0, #18
    43e8:	f04f 0101 	mov.w	r1, #1
    43ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    43f0:	d507      	bpl.n	4402 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xe6>
    43f2:	4c17      	ldr	r4, [pc, #92]	; (4450 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x134>)
    43f4:	6061      	str	r1, [r4, #4]
    43f6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    43fa:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    43fe:	4c15      	ldr	r4, [pc, #84]	; (4454 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x138>)
    4400:	6023      	str	r3, [r4, #0]
    4402:	f3c0 3480 	ubfx	r4, r0, #14, #1
    4406:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    440a:	42ac      	cmp	r4, r5
    440c:	d003      	beq.n	4416 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xfa>
    440e:	2172      	movs	r1, #114	; 0x72
    4410:	201b      	movs	r0, #27
    4412:	f7ff fbb5 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4416:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    441a:	d012      	beq.n	4442 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x126>
    441c:	480e      	ldr	r0, [pc, #56]	; (4458 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x13c>)
    441e:	6041      	str	r1, [r0, #4]
    4420:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4424:	480d      	ldr	r0, [pc, #52]	; (445c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x140>)
    4426:	6081      	str	r1, [r0, #8]
    4428:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    442c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4430:	4c0b      	ldr	r4, [pc, #44]	; (4460 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x144>)
    4432:	6023      	str	r3, [r4, #0]
    4434:	1d25      	adds	r5, r4, #4
    4436:	6029      	str	r1, [r5, #0]
    4438:	6081      	str	r1, [r0, #8]
    443a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    443e:	6023      	str	r3, [r4, #0]
    4440:	6029      	str	r1, [r5, #0]
    4442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4446:	f7ff bf81 	b.w	434c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    444a:	0000      	.short	0x0000
    444c:	4001e504 	.word	0x4001e504
    4450:	4000d000 	.word	0x4000d000
    4454:	4000d504 	.word	0x4000d504
    4458:	4000e000 	.word	0x4000e000
    445c:	4000f000 	.word	0x4000f000
    4460:	4000f500 	.word	0x4000f500

00004464 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4464:	b570      	push	{r4, r5, r6, lr}
    4466:	4c0b      	ldr	r4, [pc, #44]	; (4494 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x30>)
    4468:	460d      	mov	r5, r1
    446a:	6020      	str	r0, [r4, #0]
    446c:	f7ff ffb4 	bl	43d8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xbc>
    4470:	6820      	ldr	r0, [r4, #0]
    4472:	f7ff ff83 	bl	437c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x60>
    4476:	f000 f879 	bl	456c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    447a:	f000 f959 	bl	4730 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>
    447e:	f7ff ff65 	bl	434c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4482:	f00b fc09 	bl	fc98 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4486:	4628      	mov	r0, r5
    4488:	f000 f8aa 	bl	45e0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    448c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4490:	f000 b8c2 	b.w	4618 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4494:	20000090 	.word	0x20000090

00004498 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4498:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    449c:	4e2f      	ldr	r6, [pc, #188]	; (455c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    449e:	4683      	mov	fp, r0
    44a0:	6830      	ldr	r0, [r6, #0]
    44a2:	9001      	str	r0, [sp, #4]
    44a4:	2701      	movs	r7, #1
    44a6:	482e      	ldr	r0, [pc, #184]	; (4560 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    44a8:	f00a fa22 	bl	e8f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    44ac:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4560 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    44b0:	b920      	cbnz	r0, 44bc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    44b2:	2700      	movs	r7, #0
    44b4:	f108 0001 	add.w	r0, r8, #1
    44b8:	f00a fa31 	bl	e91e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    44bc:	4c29      	ldr	r4, [pc, #164]	; (4564 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    44be:	2500      	movs	r5, #0
    44c0:	f04f 0903 	mov.w	r9, #3
    44c4:	2001      	movs	r0, #1
    44c6:	6060      	str	r0, [r4, #4]
    44c8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    44cc:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    44d0:	f8c6 b000 	str.w	fp, [r6]
    44d4:	6020      	str	r0, [r4, #0]
    44d6:	f8df a090 	ldr.w	sl, [pc, #144]	; 4568 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    44da:	e017      	b.n	450c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    44dc:	f8da 0000 	ldr.w	r0, [sl]
    44e0:	06c0      	lsls	r0, r0, #27
    44e2:	d513      	bpl.n	450c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    44e4:	200e      	movs	r0, #14
    44e6:	f00b fbaa 	bl	fc3e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    44ea:	f3ef 8010 	mrs	r0, PRIMASK
    44ee:	9000      	str	r0, [sp, #0]
    44f0:	b672      	cpsid	i
    44f2:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    44f6:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    44fa:	b920      	cbnz	r0, 4506 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    44fc:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4500:	b908      	cbnz	r0, 4506 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4502:	f7ff f983 	bl	380c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4506:	9800      	ldr	r0, [sp, #0]
    4508:	b900      	cbnz	r0, 450c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    450a:	b662      	cpsie	i
    450c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4510:	b918      	cbnz	r0, 451a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4512:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4516:	2800      	cmp	r0, #0
    4518:	d0e0      	beq.n	44dc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    451a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    451e:	2800      	cmp	r0, #0
    4520:	d1d0      	bne.n	44c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    4522:	b137      	cbz	r7, 4532 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4524:	9801      	ldr	r0, [sp, #4]
    4526:	6030      	str	r0, [r6, #0]
    4528:	f108 0001 	add.w	r0, r8, #1
    452c:	f00a f9e0 	bl	e8f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4530:	e011      	b.n	4556 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    4532:	f108 0001 	add.w	r0, r8, #1
    4536:	f00a f9db 	bl	e8f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    453a:	2800      	cmp	r0, #0
    453c:	d1ba      	bne.n	44b4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    453e:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    4542:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4546:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    454a:	200e      	movs	r0, #14
    454c:	f00b fb77 	bl	fc3e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4550:	4803      	ldr	r0, [pc, #12]	; (4560 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4552:	f00a f9e4 	bl	e91e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4556:	2000      	movs	r0, #0
    4558:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    455c:	4000e504 	.word	0x4000e504
    4560:	200003a8 	.word	0x200003a8
    4564:	4000e000 	.word	0x4000e000
    4568:	e000ed10 	.word	0xe000ed10

0000456c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    456c:	b510      	push	{r4, lr}
    456e:	4808      	ldr	r0, [pc, #32]	; (4590 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4570:	f00a f9d1 	bl	e916 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4574:	b108      	cbz	r0, 457a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4576:	2124      	movs	r1, #36	; 0x24
    4578:	e006      	b.n	4588 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    457a:	4805      	ldr	r0, [pc, #20]	; (4590 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    457c:	1c40      	adds	r0, r0, #1
    457e:	f00a f9ca 	bl	e916 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4582:	2800      	cmp	r0, #0
    4584:	d003      	beq.n	458e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4586:	2128      	movs	r1, #40	; 0x28
    4588:	201d      	movs	r0, #29
    458a:	f7ff faf9 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    458e:	bd10      	pop	{r4, pc}
    4590:	200003a8 	.word	0x200003a8

00004594 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4594:	b570      	push	{r4, r5, r6, lr}
    4596:	4911      	ldr	r1, [pc, #68]	; (45dc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4598:	680a      	ldr	r2, [r1, #0]
    459a:	b1ea      	cbz	r2, 45d8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    459c:	2300      	movs	r3, #0
    459e:	461d      	mov	r5, r3
    45a0:	2401      	movs	r4, #1
    45a2:	684a      	ldr	r2, [r1, #4]
    45a4:	1c52      	adds	r2, r2, #1
    45a6:	604a      	str	r2, [r1, #4]
    45a8:	2a09      	cmp	r2, #9
    45aa:	d300      	bcc.n	45ae <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    45ac:	604d      	str	r5, [r1, #4]
    45ae:	790e      	ldrb	r6, [r1, #4]
    45b0:	fa04 f206 	lsl.w	r2, r4, r6
    45b4:	680e      	ldr	r6, [r1, #0]
    45b6:	4216      	tst	r6, r2
    45b8:	d00b      	beq.n	45d2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    45ba:	f3ef 8310 	mrs	r3, PRIMASK
    45be:	b672      	cpsid	i
    45c0:	680c      	ldr	r4, [r1, #0]
    45c2:	4394      	bics	r4, r2
    45c4:	600c      	str	r4, [r1, #0]
    45c6:	b903      	cbnz	r3, 45ca <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    45c8:	b662      	cpsie	i
    45ca:	6849      	ldr	r1, [r1, #4]
    45cc:	6001      	str	r1, [r0, #0]
    45ce:	2000      	movs	r0, #0
    45d0:	bd70      	pop	{r4, r5, r6, pc}
    45d2:	1c5b      	adds	r3, r3, #1
    45d4:	2b09      	cmp	r3, #9
    45d6:	d3e4      	bcc.n	45a2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    45d8:	2005      	movs	r0, #5
    45da:	bd70      	pop	{r4, r5, r6, pc}
    45dc:	20000094 	.word	0x20000094

000045e0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    45e0:	4802      	ldr	r0, [pc, #8]	; (45ec <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    45e2:	2100      	movs	r1, #0
    45e4:	6001      	str	r1, [r0, #0]
    45e6:	6041      	str	r1, [r0, #4]
    45e8:	4770      	bx	lr
    45ea:	0000      	.short	0x0000
    45ec:	20000094 	.word	0x20000094

000045f0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    45f0:	b510      	push	{r4, lr}
    45f2:	4c08      	ldr	r4, [pc, #32]	; (4614 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    45f4:	7861      	ldrb	r1, [r4, #1]
    45f6:	b109      	cbz	r1, 45fc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    45f8:	200f      	movs	r0, #15
    45fa:	bd10      	pop	{r4, pc}
    45fc:	f7ff f896 	bl	372c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4600:	7020      	strb	r0, [r4, #0]
    4602:	28ff      	cmp	r0, #255	; 0xff
    4604:	d001      	beq.n	460a <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4606:	2000      	movs	r0, #0
    4608:	bd10      	pop	{r4, pc}
    460a:	2172      	movs	r1, #114	; 0x72
    460c:	201f      	movs	r0, #31
    460e:	f7ff fab7 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4612:	0000      	.short	0x0000
    4614:	2000009c 	.word	0x2000009c

00004618 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4618:	4901      	ldr	r1, [pc, #4]	; (4620 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    461a:	2000      	movs	r0, #0
    461c:	7048      	strb	r0, [r1, #1]
    461e:	4770      	bx	lr
    4620:	2000009c 	.word	0x2000009c

00004624 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>:
    4624:	4906      	ldr	r1, [pc, #24]	; (4640 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1c>)
    4626:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
    462a:	2801      	cmp	r0, #1
    462c:	d107      	bne.n	463e <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1a>
    462e:	4805      	ldr	r0, [pc, #20]	; (4644 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x20>)
    4630:	6800      	ldr	r0, [r0, #0]
    4632:	2200      	movs	r2, #0
    4634:	b2c0      	uxtb	r0, r0
    4636:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    463a:	f000 b8e1 	b.w	4800 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>
    463e:	4770      	bx	lr
    4640:	4000d000 	.word	0x4000d000
    4644:	4000d508 	.word	0x4000d508

00004648 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>:
    4648:	4901      	ldr	r1, [pc, #4]	; (4650 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ+0x8>)
    464a:	2001      	movs	r0, #1
    464c:	6008      	str	r0, [r1, #0]
    464e:	4770      	bx	lr
    4650:	4000d504 	.word	0x4000d504

00004654 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>:
    4654:	b510      	push	{r4, lr}
    4656:	4806      	ldr	r0, [pc, #24]	; (4670 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x1c>)
    4658:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    465c:	2900      	cmp	r1, #0
    465e:	d0fb      	beq.n	4658 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x4>
    4660:	f7ff ffe0 	bl	4624 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>
    4664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4668:	200d      	movs	r0, #13
    466a:	f00b baf7 	b.w	fc5c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    466e:	0000      	.short	0x0000
    4670:	4000d000 	.word	0x4000d000

00004674 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>:
    4674:	b570      	push	{r4, r5, r6, lr}
    4676:	200d      	movs	r0, #13
    4678:	f00b fafd 	bl	fc76 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1e>
    467c:	4c08      	ldr	r4, [pc, #32]	; (46a0 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY+0x2c>)
    467e:	2000      	movs	r0, #0
    4680:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4684:	2501      	movs	r5, #1
    4686:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    468a:	200d      	movs	r0, #13
    468c:	f00b fae6 	bl	fc5c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    4690:	6025      	str	r5, [r4, #0]
    4692:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4696:	1460      	asrs	r0, r4, #17
    4698:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    469c:	bd70      	pop	{r4, r5, r6, pc}
    469e:	0000      	.short	0x0000
    46a0:	4000d000 	.word	0x4000d000

000046a4 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>:
    46a4:	b510      	push	{r4, lr}
    46a6:	200d      	movs	r0, #13
    46a8:	f00b fae5 	bl	fc76 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1e>
    46ac:	4805      	ldr	r0, [pc, #20]	; (46c4 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x20>)
    46ae:	2101      	movs	r1, #1
    46b0:	6041      	str	r1, [r0, #4]
    46b2:	2100      	movs	r1, #0
    46b4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    46b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46bc:	200d      	movs	r0, #13
    46be:	f00b bacd 	b.w	fc5c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    46c2:	0000      	.short	0x0000
    46c4:	4000d000 	.word	0x4000d000
    46c8:	b510      	push	{r4, lr}
    46ca:	4805      	ldr	r0, [pc, #20]	; (46e0 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x3c>)
    46cc:	f00a f910 	bl	e8f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    46d0:	2800      	cmp	r0, #0
    46d2:	d103      	bne.n	46dc <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x38>
    46d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46d8:	f7ff bfcc 	b.w	4674 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>
    46dc:	bd10      	pop	{r4, pc}
    46de:	0000      	.short	0x0000
    46e0:	200000b8 	.word	0x200000b8
    46e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46e8:	4615      	mov	r5, r2
    46ea:	460e      	mov	r6, r1
    46ec:	4604      	mov	r4, r0
    46ee:	2700      	movs	r7, #0
    46f0:	f00b faec 	bl	fccc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    46f4:	42a8      	cmp	r0, r5
    46f6:	d315      	bcc.n	4724 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x80>
    46f8:	2300      	movs	r3, #0
    46fa:	2041      	movs	r0, #65	; 0x41
    46fc:	e00f      	b.n	471e <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x7a>
    46fe:	bf00      	nop
    4700:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    4704:	5ca2      	ldrb	r2, [r4, r2]
    4706:	54f2      	strb	r2, [r6, r3]
    4708:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    470c:	1c49      	adds	r1, r1, #1
    470e:	fbb1 f2f0 	udiv	r2, r1, r0
    4712:	fb00 1112 	mls	r1, r0, r2, r1
    4716:	1c5b      	adds	r3, r3, #1
    4718:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    471c:	b2db      	uxtb	r3, r3
    471e:	42ab      	cmp	r3, r5
    4720:	d3ee      	bcc.n	4700 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x5c>
    4722:	2701      	movs	r7, #1
    4724:	f7ff ffd0 	bl	46c8 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    4728:	4638      	mov	r0, r7
    472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004730 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>:
    4730:	490e      	ldr	r1, [pc, #56]	; (476c <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x3c>)
    4732:	b510      	push	{r4, lr}
    4734:	2000      	movs	r0, #0
    4736:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    473a:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    473e:	3143      	adds	r1, #67	; 0x43
    4740:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4744:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4748:	3143      	adds	r1, #67	; 0x43
    474a:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    474e:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4752:	4807      	ldr	r0, [pc, #28]	; (4770 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    4754:	f00a f8df 	bl	e916 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4758:	4805      	ldr	r0, [pc, #20]	; (4770 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    475a:	1c40      	adds	r0, r0, #1
    475c:	f00a f8db 	bl	e916 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4760:	f7ff ff72 	bl	4648 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>
    4764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4768:	f7ff bfae 	b.w	46c8 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    476c:	20001890 	.word	0x20001890
    4770:	200000b8 	.word	0x200000b8

00004774 <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY>:
    4774:	4801      	ldr	r0, [pc, #4]	; (477c <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY+0x8>)
    4776:	f00b baa9 	b.w	fccc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    477a:	0000      	.short	0x0000
    477c:	200018d3 	.word	0x200018d3

00004780 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>:
    4780:	460a      	mov	r2, r1
    4782:	4601      	mov	r1, r0
    4784:	4801      	ldr	r0, [pc, #4]	; (478c <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y+0xc>)
    4786:	f7ff bfad 	b.w	46e4 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    478a:	0000      	.short	0x0000
    478c:	200018d3 	.word	0x200018d3

00004790 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>:
    4790:	4801      	ldr	r0, [pc, #4]	; (4798 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ+0x8>)
    4792:	f00b ba9b 	b.w	fccc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    4796:	0000      	.short	0x0000
    4798:	20001890 	.word	0x20001890

0000479c <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>:
    479c:	460a      	mov	r2, r1
    479e:	4601      	mov	r1, r0
    47a0:	4801      	ldr	r0, [pc, #4]	; (47a8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI+0xc>)
    47a2:	f7ff bf9f 	b.w	46e4 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    47a6:	0000      	.short	0x0000
    47a8:	20001890 	.word	0x20001890

000047ac <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>:
    47ac:	b570      	push	{r4, r5, r6, lr}
    47ae:	460c      	mov	r4, r1
    47b0:	4606      	mov	r6, r0
    47b2:	2941      	cmp	r1, #65	; 0x41
    47b4:	d903      	bls.n	47be <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x12>
    47b6:	21fb      	movs	r1, #251	; 0xfb
    47b8:	2023      	movs	r0, #35	; 0x23
    47ba:	f7ff f9e1 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47be:	480e      	ldr	r0, [pc, #56]	; (47f8 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x4c>)
    47c0:	6800      	ldr	r0, [r0, #0]
    47c2:	3810      	subs	r0, #16
    47c4:	b240      	sxtb	r0, r0
    47c6:	f00b fa72 	bl	fcae <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    47ca:	b2c5      	uxtb	r5, r0
    47cc:	200d      	movs	r0, #13
    47ce:	f00b fa6e 	bl	fcae <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    47d2:	b2c0      	uxtb	r0, r0
    47d4:	4285      	cmp	r5, r0
    47d6:	d801      	bhi.n	47dc <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x30>
    47d8:	2501      	movs	r5, #1
    47da:	e004      	b.n	47e6 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    47dc:	2500      	movs	r5, #0
    47de:	e002      	b.n	47e6 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    47e0:	b10d      	cbz	r5, 47e6 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    47e2:	f7ff ff37 	bl	4654 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>
    47e6:	4622      	mov	r2, r4
    47e8:	4631      	mov	r1, r6
    47ea:	4804      	ldr	r0, [pc, #16]	; (47fc <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x50>)
    47ec:	f7ff ff7a 	bl	46e4 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    47f0:	2800      	cmp	r0, #0
    47f2:	d0f5      	beq.n	47e0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x34>
    47f4:	bd70      	pop	{r4, r5, r6, pc}
    47f6:	0000      	.short	0x0000
    47f8:	e000ed04 	.word	0xe000ed04
    47fc:	20001890 	.word	0x20001890

00004800 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>:
    4800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4804:	4f1f      	ldr	r7, [pc, #124]	; (4884 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    4806:	4606      	mov	r6, r0
    4808:	2500      	movs	r5, #0
    480a:	bf00      	nop
    480c:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
    4810:	4620      	mov	r0, r4
    4812:	f00b fa67 	bl	fce4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4816:	b300      	cbz	r0, 485a <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x5a>
    4818:	1c6d      	adds	r5, r5, #1
    481a:	b2ed      	uxtb	r5, r5
    481c:	2d03      	cmp	r5, #3
    481e:	d3f5      	bcc.n	480c <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0xc>
    4820:	4819      	ldr	r0, [pc, #100]	; (4888 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4822:	f00b fa5f 	bl	fce4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4826:	2800      	cmp	r0, #0
    4828:	d02a      	beq.n	4880 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    482a:	4817      	ldr	r0, [pc, #92]	; (4888 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    482c:	3843      	subs	r0, #67	; 0x43
    482e:	f00b fa59 	bl	fce4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4832:	2800      	cmp	r0, #0
    4834:	d024      	beq.n	4880 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    4836:	4814      	ldr	r0, [pc, #80]	; (4888 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4838:	3043      	adds	r0, #67	; 0x43
    483a:	f00b fa53 	bl	fce4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    483e:	2800      	cmp	r0, #0
    4840:	d01e      	beq.n	4880 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    4842:	f7ff ff2f 	bl	46a4 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>
    4846:	480f      	ldr	r0, [pc, #60]	; (4884 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    4848:	1f00      	subs	r0, r0, #4
    484a:	f00a f851 	bl	e8f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    484e:	3023      	adds	r0, #35	; 0x23
    4850:	d010      	beq.n	4874 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x74>
    4852:	21b3      	movs	r1, #179	; 0xb3
    4854:	2023      	movs	r0, #35	; 0x23
    4856:	f7ff f993 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    485a:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    485e:	2141      	movs	r1, #65	; 0x41
    4860:	5426      	strb	r6, [r4, r0]
    4862:	f814 0f41 	ldrb.w	r0, [r4, #65]!
    4866:	1c40      	adds	r0, r0, #1
    4868:	fbb0 f2f1 	udiv	r2, r0, r1
    486c:	fb01 0012 	mls	r0, r1, r2, r0
    4870:	7020      	strb	r0, [r4, #0]
    4872:	e7d5      	b.n	4820 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x20>
    4874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4878:	4802      	ldr	r0, [pc, #8]	; (4884 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    487a:	1f00      	subs	r0, r0, #4
    487c:	f00a b84f 	b.w	e91e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4884:	200000bc 	.word	0x200000bc
    4888:	200018d3 	.word	0x200018d3

0000488c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    488c:	4905      	ldr	r1, [pc, #20]	; (48a4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    488e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4890:	4282      	cmp	r2, r0
    4892:	bf18      	it	ne
    4894:	4770      	bxne	lr
    4896:	2000      	movs	r0, #0
    4898:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    489c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    48a0:	8488      	strh	r0, [r1, #36]	; 0x24
    48a2:	4770      	bx	lr
    48a4:	20001820 	.word	0x20001820

000048a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    48a8:	4806      	ldr	r0, [pc, #24]	; (48c4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    48aa:	4a07      	ldr	r2, [pc, #28]	; (48c8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    48ac:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    48ae:	8852      	ldrh	r2, [r2, #2]
    48b0:	4291      	cmp	r1, r2
    48b2:	d105      	bne.n	48c0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x18>
    48b4:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    48b8:	2800      	cmp	r0, #0
    48ba:	bf1c      	itt	ne
    48bc:	2000      	movne	r0, #0
    48be:	4770      	bxne	lr
    48c0:	2001      	movs	r0, #1
    48c2:	4770      	bx	lr
    48c4:	20001820 	.word	0x20001820
    48c8:	20000394 	.word	0x20000394

000048cc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    48cc:	4901      	ldr	r1, [pc, #4]	; (48d4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    48ce:	8048      	strh	r0, [r1, #2]
    48d0:	4770      	bx	lr
    48d2:	0000      	.short	0x0000
    48d4:	20000394 	.word	0x20000394

000048d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    48d8:	4808      	ldr	r0, [pc, #32]	; (48fc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    48da:	4a09      	ldr	r2, [pc, #36]	; (4900 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    48dc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    48de:	8852      	ldrh	r2, [r2, #2]
    48e0:	4291      	cmp	r1, r2
    48e2:	d109      	bne.n	48f8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    48e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    48e8:	8481      	strh	r1, [r0, #36]	; 0x24
    48ea:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    48ee:	b119      	cbz	r1, 48f8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    48f0:	2100      	movs	r1, #0
    48f2:	7001      	strb	r1, [r0, #0]
    48f4:	2001      	movs	r0, #1
    48f6:	4770      	bx	lr
    48f8:	2000      	movs	r0, #0
    48fa:	4770      	bx	lr
    48fc:	20001820 	.word	0x20001820
    4900:	20000394 	.word	0x20000394

00004904 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4904:	4907      	ldr	r1, [pc, #28]	; (4924 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4906:	f101 0022 	add.w	r0, r1, #34	; 0x22
    490a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    490e:	2a01      	cmp	r2, #1
    4910:	bf04      	itt	eq
    4912:	2000      	moveq	r0, #0
    4914:	4770      	bxeq	lr
    4916:	2201      	movs	r2, #1
    4918:	7002      	strb	r2, [r0, #0]
    491a:	4803      	ldr	r0, [pc, #12]	; (4928 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    491c:	8800      	ldrh	r0, [r0, #0]
    491e:	8488      	strh	r0, [r1, #36]	; 0x24
    4920:	4610      	mov	r0, r2
    4922:	4770      	bx	lr
    4924:	20001820 	.word	0x20001820
    4928:	20000394 	.word	0x20000394

0000492c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    492c:	4907      	ldr	r1, [pc, #28]	; (494c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    492e:	4b08      	ldr	r3, [pc, #32]	; (4950 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
    4930:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4932:	885b      	ldrh	r3, [r3, #2]
    4934:	429a      	cmp	r2, r3
    4936:	d106      	bne.n	4946 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
    4938:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    493c:	2a00      	cmp	r2, #0
    493e:	bf1e      	ittt	ne
    4940:	6001      	strne	r1, [r0, #0]
    4942:	2001      	movne	r0, #1
    4944:	4770      	bxne	lr
    4946:	2000      	movs	r0, #0
    4948:	4770      	bx	lr
    494a:	0000      	.short	0x0000
    494c:	20001820 	.word	0x20001820
    4950:	20000394 	.word	0x20000394

00004954 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4954:	4909      	ldr	r1, [pc, #36]	; (497c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4956:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4958:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    495c:	3bff      	subs	r3, #255	; 0xff
    495e:	d003      	beq.n	4968 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x14>
    4960:	2100      	movs	r1, #0
    4962:	6001      	str	r1, [r0, #0]
    4964:	4608      	mov	r0, r1
    4966:	4770      	bx	lr
    4968:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    496c:	4903      	ldr	r1, [pc, #12]	; (497c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    496e:	2a01      	cmp	r2, #1
    4970:	bf1a      	itte	ne
    4972:	6001      	strne	r1, [r0, #0]
    4974:	2001      	movne	r0, #1
    4976:	2000      	moveq	r0, #0
    4978:	4770      	bx	lr
    497a:	0000      	.short	0x0000
    497c:	20001820 	.word	0x20001820

00004980 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4980:	4901      	ldr	r1, [pc, #4]	; (4988 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4982:	8008      	strh	r0, [r1, #0]
    4984:	4770      	bx	lr
    4986:	0000      	.short	0x0000
    4988:	20000394 	.word	0x20000394

0000498c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    498c:	4905      	ldr	r1, [pc, #20]	; (49a4 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x18>)
    498e:	2000      	movs	r0, #0
    4990:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4994:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4998:	8488      	strh	r0, [r1, #36]	; 0x24
    499a:	4903      	ldr	r1, [pc, #12]	; (49a8 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x1c>)
    499c:	8008      	strh	r0, [r1, #0]
    499e:	8048      	strh	r0, [r1, #2]
    49a0:	4770      	bx	lr
    49a2:	0000      	.short	0x0000
    49a4:	20001820 	.word	0x20001820
    49a8:	20000394 	.word	0x20000394

000049ac <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    49ac:	4905      	ldr	r1, [pc, #20]	; (49c4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    49ae:	2000      	movs	r0, #0
    49b0:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    49b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    49b8:	8488      	strh	r0, [r1, #36]	; 0x24
    49ba:	4903      	ldr	r1, [pc, #12]	; (49c8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    49bc:	8008      	strh	r0, [r1, #0]
    49be:	8048      	strh	r0, [r1, #2]
    49c0:	4770      	bx	lr
    49c2:	0000      	.short	0x0000
    49c4:	20001820 	.word	0x20001820
    49c8:	20000394 	.word	0x20000394

000049cc <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>:
    49cc:	4b0d      	ldr	r3, [pc, #52]	; (4a04 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x38>)
    49ce:	b169      	cbz	r1, 49ec <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x20>
    49d0:	2901      	cmp	r1, #1
    49d2:	bf04      	itt	eq
    49d4:	7899      	ldrbeq	r1, [r3, #2]
    49d6:	4281      	cmpeq	r1, r0
    49d8:	d110      	bne.n	49fc <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    49da:	f8d3 000f 	ldr.w	r0, [r3, #15]
    49de:	6010      	str	r0, [r2, #0]
    49e0:	f8b3 0013 	ldrh.w	r0, [r3, #19]
    49e4:	8090      	strh	r0, [r2, #4]
    49e6:	f04f 0001 	mov.w	r0, #1
    49ea:	4770      	bx	lr
    49ec:	7858      	ldrb	r0, [r3, #1]
    49ee:	b128      	cbz	r0, 49fc <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    49f0:	f8d3 0003 	ldr.w	r0, [r3, #3]
    49f4:	6010      	str	r0, [r2, #0]
    49f6:	f8b3 0007 	ldrh.w	r0, [r3, #7]
    49fa:	e7f3      	b.n	49e4 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x18>
    49fc:	f04f 0000 	mov.w	r0, #0
    4a00:	4770      	bx	lr
    4a02:	0000      	.short	0x0000
    4a04:	200003aa 	.word	0x200003aa

00004a08 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>:
    4a08:	4a07      	ldr	r2, [pc, #28]	; (4a28 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x20>)
    4a0a:	b129      	cbz	r1, 4a18 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x10>
    4a0c:	2901      	cmp	r1, #1
    4a0e:	bf04      	itt	eq
    4a10:	7891      	ldrbeq	r1, [r2, #2]
    4a12:	4281      	cmpeq	r1, r0
    4a14:	d002      	beq.n	4a1c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x14>
    4a16:	e004      	b.n	4a22 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    4a18:	7850      	ldrb	r0, [r2, #1]
    4a1a:	b110      	cbz	r0, 4a22 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    4a1c:	f04f 0001 	mov.w	r0, #1
    4a20:	4770      	bx	lr
    4a22:	f04f 0000 	mov.w	r0, #0
    4a26:	4770      	bx	lr
    4a28:	200003aa 	.word	0x200003aa

00004a2c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4a2c:	4a0c      	ldr	r2, [pc, #48]	; (4a60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x34>)
    4a2e:	b110      	cbz	r0, 4a36 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4a30:	2801      	cmp	r0, #1
    4a32:	d008      	beq.n	4a46 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x1a>
    4a34:	e011      	b.n	4a5a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4a36:	7850      	ldrb	r0, [r2, #1]
    4a38:	b178      	cbz	r0, 4a5a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4a3a:	f8d2 0003 	ldr.w	r0, [r2, #3]
    4a3e:	6008      	str	r0, [r1, #0]
    4a40:	f8b2 0007 	ldrh.w	r0, [r2, #7]
    4a44:	e006      	b.n	4a54 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a46:	7810      	ldrb	r0, [r2, #0]
    4a48:	b138      	cbz	r0, 4a5a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4a4a:	f8d2 0009 	ldr.w	r0, [r2, #9]
    4a4e:	6008      	str	r0, [r1, #0]
    4a50:	f8b2 000d 	ldrh.w	r0, [r2, #13]
    4a54:	8088      	strh	r0, [r1, #4]
    4a56:	2001      	movs	r0, #1
    4a58:	4770      	bx	lr
    4a5a:	2000      	movs	r0, #0
    4a5c:	4770      	bx	lr
    4a5e:	0000      	.short	0x0000
    4a60:	200003aa 	.word	0x200003aa

00004a64 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    4a64:	4901      	ldr	r1, [pc, #4]	; (4a6c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY+0x8>)
    4a66:	20ff      	movs	r0, #255	; 0xff
    4a68:	7088      	strb	r0, [r1, #2]
    4a6a:	4770      	bx	lr
    4a6c:	200003aa 	.word	0x200003aa

00004a70 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4a70:	4a0a      	ldr	r2, [pc, #40]	; (4a9c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x2c>)
    4a72:	2301      	movs	r3, #1
    4a74:	b150      	cbz	r0, 4a8c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x1c>
    4a76:	2801      	cmp	r0, #1
    4a78:	bf18      	it	ne
    4a7a:	4770      	bxne	lr
    4a7c:	7013      	strb	r3, [r2, #0]
    4a7e:	6808      	ldr	r0, [r1, #0]
    4a80:	f8c2 0009 	str.w	r0, [r2, #9]
    4a84:	8888      	ldrh	r0, [r1, #4]
    4a86:	f8a2 000d 	strh.w	r0, [r2, #13]
    4a8a:	4770      	bx	lr
    4a8c:	7053      	strb	r3, [r2, #1]
    4a8e:	6808      	ldr	r0, [r1, #0]
    4a90:	f8c2 0003 	str.w	r0, [r2, #3]
    4a94:	8888      	ldrh	r0, [r1, #4]
    4a96:	f8a2 0007 	strh.w	r0, [r2, #7]
    4a9a:	4770      	bx	lr
    4a9c:	200003aa 	.word	0x200003aa

00004aa0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4aa0:	4906      	ldr	r1, [pc, #24]	; (4abc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4aa2:	b110      	cbz	r0, 4aaa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4aa4:	2801      	cmp	r0, #1
    4aa6:	d003      	beq.n	4ab0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4aa8:	e006      	b.n	4ab8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4aaa:	7848      	ldrb	r0, [r1, #1]
    4aac:	b910      	cbnz	r0, 4ab4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    4aae:	e003      	b.n	4ab8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4ab0:	7808      	ldrb	r0, [r1, #0]
    4ab2:	b108      	cbz	r0, 4ab8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4ab4:	2001      	movs	r0, #1
    4ab6:	4770      	bx	lr
    4ab8:	2000      	movs	r0, #0
    4aba:	4770      	bx	lr
    4abc:	200003aa 	.word	0x200003aa

00004ac0 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>:
    4ac0:	4901      	ldr	r1, [pc, #4]	; (4ac8 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ+0x8>)
    4ac2:	2001      	movs	r0, #1
    4ac4:	7148      	strb	r0, [r1, #5]
    4ac6:	4770      	bx	lr
    4ac8:	200000c8 	.word	0x200000c8

00004acc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4acc:	4901      	ldr	r1, [pc, #4]	; (4ad4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4ace:	7448      	strb	r0, [r1, #17]
    4ad0:	4770      	bx	lr
    4ad2:	0000      	.short	0x0000
    4ad4:	20000a0a 	.word	0x20000a0a

00004ad8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4ad8:	4801      	ldr	r0, [pc, #4]	; (4ae0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4ada:	78c0      	ldrb	r0, [r0, #3]
    4adc:	4770      	bx	lr
    4ade:	0000      	.short	0x0000
    4ae0:	200000c8 	.word	0x200000c8

00004ae4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4ae4:	4801      	ldr	r0, [pc, #4]	; (4aec <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4ae6:	7900      	ldrb	r0, [r0, #4]
    4ae8:	4770      	bx	lr
    4aea:	0000      	.short	0x0000
    4aec:	200000c8 	.word	0x200000c8

00004af0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4af0:	4910      	ldr	r1, [pc, #64]	; (4b34 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x44>)
    4af2:	b430      	push	{r4, r5}
    4af4:	7c4a      	ldrb	r2, [r1, #17]
    4af6:	2a00      	cmp	r2, #0
    4af8:	bf19      	ittee	ne
    4afa:	7c0a      	ldrbne	r2, [r1, #16]
    4afc:	2a00      	cmpne	r2, #0
    4afe:	2000      	moveq	r0, #0
    4b00:	bc30      	popeq	{r4, r5}
    4b02:	bf08      	it	eq
    4b04:	4770      	bxeq	lr
    4b06:	f04f 0200 	mov.w	r2, #0
    4b0a:	f04f 0c1f 	mov.w	ip, #31
    4b0e:	4b0a      	ldr	r3, [pc, #40]	; (4b38 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>)
    4b10:	740a      	strb	r2, [r1, #16]
    4b12:	7042      	strb	r2, [r0, #1]
    4b14:	f880 c000 	strb.w	ip, [r0]
    4b18:	f8d3 415a 	ldr.w	r4, [r3, #346]	; 0x15a
    4b1c:	f8d3 515e 	ldr.w	r5, [r3, #350]	; 0x15e
    4b20:	6044      	str	r4, [r0, #4]
    4b22:	6085      	str	r5, [r0, #8]
    4b24:	7c0c      	ldrb	r4, [r1, #16]
    4b26:	2c00      	cmp	r4, #0
    4b28:	d1f2      	bne.n	4b10 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x20>
    4b2a:	bc30      	pop	{r4, r5}
    4b2c:	f04f 0001 	mov.w	r0, #1
    4b30:	4770      	bx	lr
    4b32:	0000      	.short	0x0000
    4b34:	20000a0a 	.word	0x20000a0a
    4b38:	200008b8 	.word	0x200008b8

00004b3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4b3c:	b570      	push	{r4, r5, r6, lr}
    4b3e:	4c08      	ldr	r4, [pc, #32]	; (4b60 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4b40:	4606      	mov	r6, r0
    4b42:	460d      	mov	r5, r1
    4b44:	7820      	ldrb	r0, [r4, #0]
    4b46:	b118      	cbz	r0, 4b50 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    4b48:	21ab      	movs	r1, #171	; 0xab
    4b4a:	2027      	movs	r0, #39	; 0x27
    4b4c:	f7ff f818 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b50:	2101      	movs	r1, #1
    4b52:	4804      	ldr	r0, [pc, #16]	; (4b64 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    4b54:	f00b fcac 	bl	104b0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4b58:	7226      	strb	r6, [r4, #8]
    4b5a:	6325      	str	r5, [r4, #48]	; 0x30
    4b5c:	bd70      	pop	{r4, r5, r6, pc}
    4b5e:	0000      	.short	0x0000
    4b60:	200000c8 	.word	0x200000c8
    4b64:	200009e8 	.word	0x200009e8

00004b68 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4b68:	4901      	ldr	r1, [pc, #4]	; (4b70 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4b6a:	2001      	movs	r0, #1
    4b6c:	71c8      	strb	r0, [r1, #7]
    4b6e:	4770      	bx	lr
    4b70:	200000c8 	.word	0x200000c8

00004b74 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b78:	4d82      	ldr	r5, [pc, #520]	; (4d84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x210>)
    4b7a:	b085      	sub	sp, #20
    4b7c:	782c      	ldrb	r4, [r5, #0]
    4b7e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    4b82:	2c00      	cmp	r4, #0
    4b84:	d175      	bne.n	4c72 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4b86:	2a00      	cmp	r2, #0
    4b88:	bf1c      	itt	ne
    4b8a:	2b00      	cmpne	r3, #0
    4b8c:	f1bc 0f00 	cmpne.w	ip, #0
    4b90:	d06f      	beq.n	4c72 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4b92:	f8c5 c020 	str.w	ip, [r5, #32]
    4b96:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    4b9a:	f04f 0000 	mov.w	r0, #0
    4b9e:	e9c5 2306 	strd	r2, r3, [r5, #24]
    4ba2:	71e8      	strb	r0, [r5, #7]
    4ba4:	71a8      	strb	r0, [r5, #6]
    4ba6:	70e8      	strb	r0, [r5, #3]
    4ba8:	70a8      	strb	r0, [r5, #2]
    4baa:	7128      	strb	r0, [r5, #4]
    4bac:	7168      	strb	r0, [r5, #5]
    4bae:	4f76      	ldr	r7, [pc, #472]	; (4d88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x214>)
    4bb0:	81e8      	strh	r0, [r5, #14]
    4bb2:	8228      	strh	r0, [r5, #16]
    4bb4:	6878      	ldr	r0, [r7, #4]
    4bb6:	f100 0678 	add.w	r6, r0, #120	; 0x78
    4bba:	4604      	mov	r4, r0
    4bbc:	f008 fe84 	bl	d8c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4bc0:	f008 fa28 	bl	d014 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4bc4:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    4bc8:	f008 ff16 	bl	d9f8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4bcc:	f104 0016 	add.w	r0, r4, #22
    4bd0:	f009 f9f4 	bl	dfbc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4bd4:	f104 0012 	add.w	r0, r4, #18
    4bd8:	f009 f9e4 	bl	dfa4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4bdc:	7ef0      	ldrb	r0, [r6, #27]
    4bde:	f009 fa3f 	bl	e060 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4be2:	7838      	ldrb	r0, [r7, #0]
    4be4:	f641 584c 	movw	r8, #7500	; 0x1d4c
    4be8:	2800      	cmp	r0, #0
    4bea:	d046      	beq.n	4c7a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x106>
    4bec:	2004      	movs	r0, #4
    4bee:	f7fe fe91 	bl	3914 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    4bf2:	6860      	ldr	r0, [r4, #4]
    4bf4:	4540      	cmp	r0, r8
    4bf6:	bf28      	it	cs
    4bf8:	2096      	movcs	r0, #150	; 0x96
    4bfa:	d203      	bcs.n	4c04 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x90>
    4bfc:	2001      	movs	r0, #1
    4bfe:	f009 f987 	bl	df10 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    4c02:	204d      	movs	r0, #77	; 0x4d
    4c04:	f008 fdb2 	bl	d76c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    4c08:	6878      	ldr	r0, [r7, #4]
    4c0a:	f890 0180 	ldrb.w	r0, [r0, #384]	; 0x180
    4c0e:	2800      	cmp	r0, #0
    4c10:	bf18      	it	ne
    4c12:	f008 fda1 	blne	d758 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4c16:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    4c1a:	2001      	movs	r0, #1
    4c1c:	f008 fbba 	bl	d394 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4c20:	2800      	cmp	r0, #0
    4c22:	bf04      	itt	eq
    4c24:	b005      	addeq	sp, #20
    4c26:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4c2a:	7838      	ldrb	r0, [r7, #0]
    4c2c:	2800      	cmp	r0, #0
    4c2e:	bf0c      	ite	eq
    4c30:	2003      	moveq	r0, #3
    4c32:	2001      	movne	r0, #1
    4c34:	f008 fdf8 	bl	d828 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4c38:	4854      	ldr	r0, [pc, #336]	; (4d8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x218>)
    4c3a:	e890 100e 	ldmia.w	r0, {r1, r2, r3, ip}
    4c3e:	e88d 100e 	stmia.w	sp, {r1, r2, r3, ip}
    4c42:	6900      	ldr	r0, [r0, #16]
    4c44:	9004      	str	r0, [sp, #16]
    4c46:	7838      	ldrb	r0, [r7, #0]
    4c48:	2800      	cmp	r0, #0
    4c4a:	bf0c      	ite	eq
    4c4c:	4850      	ldreq	r0, [pc, #320]	; (4d90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x21c>)
    4c4e:	4851      	ldrne	r0, [pc, #324]	; (4d94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x220>)
    4c50:	9004      	str	r0, [sp, #16]
    4c52:	4668      	mov	r0, sp
    4c54:	f008 fd04 	bl	d660 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4c58:	8820      	ldrh	r0, [r4, #0]
    4c5a:	f7ff fb5f 	bl	431c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4c5e:	6368      	str	r0, [r5, #52]	; 0x34
    4c60:	8820      	ldrh	r0, [r4, #0]
    4c62:	f7ff fb45 	bl	42f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4c66:	63a8      	str	r0, [r5, #56]	; 0x38
    4c68:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    4c6c:	bb68      	cbnz	r0, 4cca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4c6e:	e01c      	b.n	4caa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    4c70:	e7ff      	b.n	4c72 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4c72:	21d3      	movs	r1, #211	; 0xd3
    4c74:	2027      	movs	r0, #39	; 0x27
    4c76:	f7fe ff83 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c7a:	2003      	movs	r0, #3
    4c7c:	f7fe fe4a 	bl	3914 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    4c80:	6860      	ldr	r0, [r4, #4]
    4c82:	4540      	cmp	r0, r8
    4c84:	bf28      	it	cs
    4c86:	2096      	movcs	r0, #150	; 0x96
    4c88:	d203      	bcs.n	4c92 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11e>
    4c8a:	2001      	movs	r0, #1
    4c8c:	f009 f940 	bl	df10 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    4c90:	204d      	movs	r0, #77	; 0x4d
    4c92:	f008 fd6b 	bl	d76c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    4c96:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    4c9a:	2000      	movs	r0, #0
    4c9c:	f008 fb7a 	bl	d394 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4ca0:	2800      	cmp	r0, #0
    4ca2:	d1c2      	bne.n	4c2a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xb6>
    4ca4:	b005      	add	sp, #20
    4ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4caa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    4cac:	b168      	cbz	r0, 4cca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4cae:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
    4cb0:	8831      	ldrh	r1, [r6, #0]
    4cb2:	4288      	cmp	r0, r1
    4cb4:	d109      	bne.n	4cca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4cb6:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    4cba:	2201      	movs	r2, #1
    4cbc:	4408      	add	r0, r1
    4cbe:	8570      	strh	r0, [r6, #42]	; 0x2a
    4cc0:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    4cc4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    4cc6:	f7fd fcc5 	bl	2654 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4cca:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4cce:	4832      	ldr	r0, [pc, #200]	; (4d98 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x224>)
    4cd0:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4cd4:	f500 7884 	add.w	r8, r0, #264	; 0x108
    4cd8:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4cdc:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4cde:	f8c0 1121 	str.w	r1, [r0, #289]	; 0x121
    4ce2:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4ce4:	f8c0 1125 	str.w	r1, [r0, #293]	; 0x125
    4ce8:	20ff      	movs	r0, #255	; 0xff
    4cea:	72a8      	strb	r0, [r5, #10]
    4cec:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    4cf0:	f896 9012 	ldrb.w	r9, [r6, #18]
    4cf4:	f8b4 8038 	ldrh.w	r8, [r4, #56]	; 0x38
    4cf8:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    4cfa:	2908      	cmp	r1, #8
    4cfc:	d01c      	beq.n	4d38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c4>
    4cfe:	f00b f934 	bl	ff6a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4d02:	bf00      	nop
    4d04:	f1b9 0f00 	cmp.w	r9, #0
    4d08:	bf04      	itt	eq
    4d0a:	1d00      	addeq	r0, r0, #4
    4d0c:	b280      	uxtheq	r0, r0
    4d0e:	4580      	cmp	r8, r0
    4d10:	bf38      	it	cc
    4d12:	4640      	movcc	r0, r8
    4d14:	b2c0      	uxtb	r0, r0
    4d16:	7cb1      	ldrb	r1, [r6, #18]
    4d18:	2900      	cmp	r1, #0
    4d1a:	bf18      	it	ne
    4d1c:	2104      	movne	r1, #4
    4d1e:	4408      	add	r0, r1
    4d20:	b2c0      	uxtb	r0, r0
    4d22:	7268      	strb	r0, [r5, #9]
    4d24:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    4d28:	1d09      	adds	r1, r1, #4
    4d2a:	4281      	cmp	r1, r0
    4d2c:	d208      	bcs.n	4d40 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1cc>
    4d2e:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    4d32:	2027      	movs	r0, #39	; 0x27
    4d34:	f7fe ff24 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d38:	2104      	movs	r1, #4
    4d3a:	f00b f916 	bl	ff6a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4d3e:	e7e1      	b.n	4d04 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    4d40:	7838      	ldrb	r0, [r7, #0]
    4d42:	2800      	cmp	r0, #0
    4d44:	f04f 0001 	mov.w	r0, #1
    4d48:	d014      	beq.n	4d74 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x200>
    4d4a:	f000 fb4b 	bl	53e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    4d4e:	4813      	ldr	r0, [pc, #76]	; (4d9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x228>)
    4d50:	6800      	ldr	r0, [r0, #0]
    4d52:	2803      	cmp	r0, #3
    4d54:	bf18      	it	ne
    4d56:	280b      	cmpne	r0, #11
    4d58:	d00f      	beq.n	4d7a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x206>
    4d5a:	4d11      	ldr	r5, [pc, #68]	; (4da0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>)
    4d5c:	4628      	mov	r0, r5
    4d5e:	f00d f8c7 	bl	11ef0 <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>
    4d62:	8830      	ldrh	r0, [r6, #0]
    4d64:	8068      	strh	r0, [r5, #2]
    4d66:	8820      	ldrh	r0, [r4, #0]
    4d68:	8028      	strh	r0, [r5, #0]
    4d6a:	7ef0      	ldrb	r0, [r6, #27]
    4d6c:	7128      	strb	r0, [r5, #4]
    4d6e:	b005      	add	sp, #20
    4d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4d74:	f000 fbc4 	bl	5500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>
    4d78:	e7e9      	b.n	4d4e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1da>
    4d7a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    4d7e:	2027      	movs	r0, #39	; 0x27
    4d80:	f7fe fefe 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d84:	200000c8 	.word	0x200000c8
    4d88:	20000104 	.word	0x20000104
    4d8c:	000057cc 	.word	0x000057cc
    4d90:	0000bd09 	.word	0x0000bd09
    4d94:	00008bbd 	.word	0x00008bbd
    4d98:	200008b8 	.word	0x200008b8
    4d9c:	40001550 	.word	0x40001550
    4da0:	20000a0a 	.word	0x20000a0a

00004da4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4da8:	0006      	movs	r6, r0
    4daa:	4847      	ldr	r0, [pc, #284]	; (4ec8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x124>)
    4dac:	4d47      	ldr	r5, [pc, #284]	; (4ecc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x128>)
    4dae:	6840      	ldr	r0, [r0, #4]
    4db0:	f100 0478 	add.w	r4, r0, #120	; 0x78
    4db4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4db6:	f890 9001 	ldrb.w	r9, [r0, #1]
    4dba:	bf18      	it	ne
    4dbc:	2e01      	cmpne	r6, #1
    4dbe:	d103      	bne.n	4dc8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x24>
    4dc0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    4dc2:	f009 feda 	bl	eb7a <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4dc6:	7068      	strb	r0, [r5, #1]
    4dc8:	7868      	ldrb	r0, [r5, #1]
    4dca:	2700      	movs	r7, #0
    4dcc:	f04f 0801 	mov.w	r8, #1
    4dd0:	b150      	cbz	r0, 4de8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x44>
    4dd2:	2801      	cmp	r0, #1
    4dd4:	d030      	beq.n	4e38 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dd6:	2802      	cmp	r0, #2
    4dd8:	d056      	beq.n	4e88 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xe4>
    4dda:	2803      	cmp	r0, #3
    4ddc:	d068      	beq.n	4eb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x10c>
    4dde:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    4de2:	2027      	movs	r0, #39	; 0x27
    4de4:	f7fe fecc 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4de8:	2e01      	cmp	r6, #1
    4dea:	d012      	beq.n	4e12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6e>
    4dec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4dee:	2800      	cmp	r0, #0
    4df0:	d045      	beq.n	4e7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    4df2:	89a9      	ldrh	r1, [r5, #12]
    4df4:	1cca      	adds	r2, r1, #3
    4df6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    4df8:	f7fe fd38 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4dfc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4dfe:	62a8      	str	r0, [r5, #40]	; 0x28
    4e00:	2201      	movs	r2, #1
    4e02:	4649      	mov	r1, r9
    4e04:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4e06:	f00a fb8c 	bl	f522 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4e0a:	2e02      	cmp	r6, #2
    4e0c:	bf08      	it	eq
    4e0e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e12:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    4e16:	1c49      	adds	r1, r1, #1
    4e18:	f140 0000 	adc.w	r0, r0, #0
    4e1c:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    4e20:	79e0      	ldrb	r0, [r4, #7]
    4e22:	2801      	cmp	r0, #1
    4e24:	d101      	bne.n	4e2a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    4e26:	71e7      	strb	r7, [r4, #7]
    4e28:	e001      	b.n	4e2e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    4e2a:	f884 8007 	strb.w	r8, [r4, #7]
    4e2e:	7a28      	ldrb	r0, [r5, #8]
    4e30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e34:	f7fe bc98 	b.w	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4e38:	2e01      	cmp	r6, #1
    4e3a:	d011      	beq.n	4e60 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>
    4e3c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4e3e:	b1f0      	cbz	r0, 4e7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    4e40:	89a9      	ldrh	r1, [r5, #12]
    4e42:	1cca      	adds	r2, r1, #3
    4e44:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    4e46:	f7fe fd11 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e4a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4e4c:	62a8      	str	r0, [r5, #40]	; 0x28
    4e4e:	2200      	movs	r2, #0
    4e50:	4649      	mov	r1, r9
    4e52:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4e54:	f00a fb65 	bl	f522 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4e58:	2e02      	cmp	r6, #2
    4e5a:	bf08      	it	eq
    4e5c:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e60:	e9d4 0216 	ldrd	r0, r2, [r4, #88]	; 0x58
    4e64:	1c41      	adds	r1, r0, #1
    4e66:	f142 0000 	adc.w	r0, r2, #0
    4e6a:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    4e6e:	79e0      	ldrb	r0, [r4, #7]
    4e70:	2801      	cmp	r0, #1
    4e72:	bf0c      	ite	eq
    4e74:	71e7      	strbeq	r7, [r4, #7]
    4e76:	f884 8007 	strbne.w	r8, [r4, #7]
    4e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e7e:	f240 31f7 	movw	r1, #1015	; 0x3f7
    4e82:	2027      	movs	r0, #39	; 0x27
    4e84:	f7fe fe7c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e88:	2e01      	cmp	r6, #1
    4e8a:	d006      	beq.n	4e9a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xf6>
    4e8c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4e8e:	f00a fe1d 	bl	facc <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4e92:	2e02      	cmp	r6, #2
    4e94:	bf08      	it	eq
    4e96:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e9a:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    4e9e:	1c49      	adds	r1, r1, #1
    4ea0:	f140 0000 	adc.w	r0, r0, #0
    4ea4:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    4ea8:	79e0      	ldrb	r0, [r4, #7]
    4eaa:	2801      	cmp	r0, #1
    4eac:	d1bd      	bne.n	4e2a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    4eae:	e7ba      	b.n	4e26 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x82>
    4eb0:	2e01      	cmp	r6, #1
    4eb2:	bf08      	it	eq
    4eb4:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4eb8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4eba:	f00a fe07 	bl	facc <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4ebe:	7a28      	ldrb	r0, [r5, #8]
    4ec0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ec4:	f7fe bc50 	b.w	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4ec8:	20000104 	.word	0x20000104
    4ecc:	200000c8 	.word	0x200000c8

00004ed0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4ed0:	4802      	ldr	r0, [pc, #8]	; (4edc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xc>)
    4ed2:	7800      	ldrb	r0, [r0, #0]
    4ed4:	2800      	cmp	r0, #0
    4ed6:	bf18      	it	ne
    4ed8:	200c      	movne	r0, #12
    4eda:	4770      	bx	lr
    4edc:	200000c8 	.word	0x200000c8

00004ee0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4ee0:	4811      	ldr	r0, [pc, #68]	; (4f28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>)
    4ee2:	b510      	push	{r4, lr}
    4ee4:	7801      	ldrb	r1, [r0, #0]
    4ee6:	b159      	cbz	r1, 4f00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20>
    4ee8:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    4eec:	7800      	ldrb	r0, [r0, #0]
    4eee:	780a      	ldrb	r2, [r1, #0]
    4ef0:	b152      	cbz	r2, 4f08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28>
    4ef2:	2802      	cmp	r0, #2
    4ef4:	d010      	beq.n	4f18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    4ef6:	f240 1197 	movw	r1, #407	; 0x197
    4efa:	2027      	movs	r0, #39	; 0x27
    4efc:	f7fe fe40 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f04:	f000 ba12 	b.w	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    4f08:	2801      	cmp	r0, #1
    4f0a:	bf08      	it	eq
    4f0c:	bd10      	popeq	{r4, pc}
    4f0e:	f240 1193 	movw	r1, #403	; 0x193
    4f12:	2027      	movs	r0, #39	; 0x27
    4f14:	f7fe fe34 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f18:	6848      	ldr	r0, [r1, #4]
    4f1a:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    4f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f22:	f008 bba9 	b.w	d678 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4f26:	0000      	.short	0x0000
    4f28:	200000c8 	.word	0x200000c8
    4f2c:	b570      	push	{r4, r5, r6, lr}
    4f2e:	4c26      	ldr	r4, [pc, #152]	; (4fc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>)
    4f30:	4605      	mov	r5, r0
    4f32:	2900      	cmp	r1, #0
    4f34:	bf08      	it	eq
    4f36:	2d01      	cmpeq	r5, #1
    4f38:	d106      	bne.n	4f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>
    4f3a:	78e0      	ldrb	r0, [r4, #3]
    4f3c:	f100 0001 	add.w	r0, r0, #1
    4f40:	b2c0      	uxtb	r0, r0
    4f42:	70e0      	strb	r0, [r4, #3]
    4f44:	2801      	cmp	r0, #1
    4f46:	d83c      	bhi.n	4fc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    4f48:	69e1      	ldr	r1, [r4, #28]
    4f4a:	4628      	mov	r0, r5
    4f4c:	4788      	blx	r1
    4f4e:	2800      	cmp	r0, #0
    4f50:	d037      	beq.n	4fc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    4f52:	7960      	ldrb	r0, [r4, #5]
    4f54:	b148      	cbz	r0, 4f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a>
    4f56:	2d01      	cmp	r5, #1
    4f58:	d107      	bne.n	4f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a>
    4f5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4f5c:	7841      	ldrb	r1, [r0, #1]
    4f5e:	2900      	cmp	r1, #0
    4f60:	bf04      	itt	eq
    4f62:	7800      	ldrbeq	r0, [r0, #0]
    4f64:	f010 0f10 	tsteq.w	r0, #16
    4f68:	d02b      	beq.n	4fc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    4f6a:	79a0      	ldrb	r0, [r4, #6]
    4f6c:	bb48      	cbnz	r0, 4fc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    4f6e:	4817      	ldr	r0, [pc, #92]	; (4fcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>)
    4f70:	7801      	ldrb	r1, [r0, #0]
    4f72:	2900      	cmp	r1, #0
    4f74:	bf08      	it	eq
    4f76:	2d01      	cmpeq	r5, #1
    4f78:	d004      	beq.n	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa4>
    4f7a:	b101      	cbz	r1, 4f7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9e>
    4f7c:	b115      	cbz	r5, 4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa4>
    4f7e:	f04f 0000 	mov.w	r0, #0
    4f82:	bd70      	pop	{r4, r5, r6, pc}
    4f84:	4812      	ldr	r0, [pc, #72]	; (4fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>)
    4f86:	7801      	ldrb	r1, [r0, #0]
    4f88:	f011 0f10 	tst.w	r1, #16
    4f8c:	d106      	bne.n	4f9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>
    4f8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4f90:	7800      	ldrb	r0, [r0, #0]
    4f92:	f010 0f10 	tst.w	r0, #16
    4f96:	bf08      	it	eq
    4f98:	2001      	moveq	r0, #1
    4f9a:	d001      	beq.n	4fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    4f9c:	f04f 0000 	mov.w	r0, #0
    4fa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4fa2:	b932      	cbnz	r2, 4fb2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd2>
    4fa4:	89a2      	ldrh	r2, [r4, #12]
    4fa6:	b122      	cbz	r2, 4fb2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd2>
    4fa8:	f011 0f10 	tst.w	r1, #16
    4fac:	bf08      	it	eq
    4fae:	2101      	moveq	r1, #1
    4fb0:	d001      	beq.n	4fb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd6>
    4fb2:	f04f 0100 	mov.w	r1, #0
    4fb6:	89e2      	ldrh	r2, [r4, #14]
    4fb8:	ea40 0002 	orr.w	r0, r0, r2
    4fbc:	4308      	orrs	r0, r1
    4fbe:	bf08      	it	eq
    4fc0:	bd70      	popeq	{r4, r5, r6, pc}
    4fc2:	2001      	movs	r0, #1
    4fc4:	bd70      	pop	{r4, r5, r6, pc}
    4fc6:	0000      	.short	0x0000
    4fc8:	200000c8 	.word	0x200000c8
    4fcc:	20000104 	.word	0x20000104
    4fd0:	200000da 	.word	0x200000da
    4fd4:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4fd8:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 5280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    4fdc:	2700      	movs	r7, #0
    4fde:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    4fe2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    4fe6:	463d      	mov	r5, r7
    4fe8:	f100 0a78 	add.w	sl, r0, #120	; 0x78
    4fec:	7820      	ldrb	r0, [r4, #0]
    4fee:	2802      	cmp	r0, #2
    4ff0:	d004      	beq.n	4ffc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    4ff2:	f240 4149 	movw	r1, #1097	; 0x449
    4ff6:	2027      	movs	r0, #39	; 0x27
    4ff8:	f7fe fdc2 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ffc:	7c20      	ldrb	r0, [r4, #16]
    4ffe:	f010 0f40 	tst.w	r0, #64	; 0x40
    5002:	d107      	bne.n	5014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    5004:	2040      	movs	r0, #64	; 0x40
    5006:	69a2      	ldr	r2, [r4, #24]
    5008:	2100      	movs	r1, #0
    500a:	4790      	blx	r2
    500c:	8a20      	ldrh	r0, [r4, #16]
    500e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5012:	8220      	strh	r0, [r4, #16]
    5014:	9900      	ldr	r1, [sp, #0]
    5016:	489b      	ldr	r0, [pc, #620]	; (5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>)
    5018:	2900      	cmp	r1, #0
    501a:	f000 8100 	beq.w	521e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
    501e:	7941      	ldrb	r1, [r0, #5]
    5020:	1c49      	adds	r1, r1, #1
    5022:	7141      	strb	r1, [r0, #5]
    5024:	f89a 0012 	ldrb.w	r0, [sl, #18]
    5028:	f008 f874 	bl	d114 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    502c:	f008 f856 	bl	d0dc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5030:	f04f 0901 	mov.w	r9, #1
    5034:	b998      	cbnz	r0, 505e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    5036:	f89a 0012 	ldrb.w	r0, [sl, #18]
    503a:	b180      	cbz	r0, 505e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    503c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    503e:	7841      	ldrb	r1, [r0, #1]
    5040:	b169      	cbz	r1, 505e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    5042:	7800      	ldrb	r0, [r0, #0]
    5044:	f89a 1007 	ldrb.w	r1, [sl, #7]
    5048:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    504c:	4288      	cmp	r0, r1
    504e:	d106      	bne.n	505e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    5050:	f884 9002 	strb.w	r9, [r4, #2]
    5054:	b002      	add	sp, #8
    5056:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    505a:	f000 b967 	b.w	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    505e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5060:	7841      	ldrb	r1, [r0, #1]
    5062:	81a1      	strh	r1, [r4, #12]
    5064:	2900      	cmp	r1, #0
    5066:	bf08      	it	eq
    5068:	62e7      	streq	r7, [r4, #44]	; 0x2c
    506a:	d003      	beq.n	5074 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    506c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    506e:	f00a fce6 	bl	fa3e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5072:	62e0      	str	r0, [r4, #44]	; 0x2c
    5074:	8a20      	ldrh	r0, [r4, #16]
    5076:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    507a:	8220      	strh	r0, [r4, #16]
    507c:	70e7      	strb	r7, [r4, #3]
    507e:	f8d8 6004 	ldr.w	r6, [r8, #4]
    5082:	f106 0b78 	add.w	fp, r6, #120	; 0x78
    5086:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    508a:	2801      	cmp	r0, #1
    508c:	d11d      	bne.n	50ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    508e:	f008 ff45 	bl	df1c <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    5092:	4659      	mov	r1, fp
    5094:	4630      	mov	r0, r6
    5096:	f00b f841 	bl	1011c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    509a:	b1b0      	cbz	r0, 50ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    509c:	f898 0000 	ldrb.w	r0, [r8]
    50a0:	2800      	cmp	r0, #0
    50a2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    50a6:	bf0c      	ite	eq
    50a8:	f500 70a6 	addeq.w	r0, r0, #332	; 0x14c
    50ac:	f500 7001 	addne.w	r0, r0, #516	; 0x204
    50b0:	8831      	ldrh	r1, [r6, #0]
    50b2:	8041      	strh	r1, [r0, #2]
    50b4:	f89b 1008 	ldrb.w	r1, [fp, #8]
    50b8:	7101      	strb	r1, [r0, #4]
    50ba:	f89b 1009 	ldrb.w	r1, [fp, #9]
    50be:	7141      	strb	r1, [r0, #5]
    50c0:	f880 9000 	strb.w	r9, [r0]
    50c4:	7a20      	ldrb	r0, [r4, #8]
    50c6:	f7fe fb4f 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    50ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50cc:	f89a 1006 	ldrb.w	r1, [sl, #6]
    50d0:	7800      	ldrb	r0, [r0, #0]
    50d2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    50d6:	4288      	cmp	r0, r1
    50d8:	d049      	beq.n	516e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    50da:	f8d8 0004 	ldr.w	r0, [r8, #4]
    50de:	f100 0678 	add.w	r6, r0, #120	; 0x78
    50e2:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    50e6:	2800      	cmp	r0, #0
    50e8:	d03d      	beq.n	5166 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    50ea:	2802      	cmp	r0, #2
    50ec:	d10e      	bne.n	510c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x22c>
    50ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
    50f0:	f00a f9e3 	bl	f4ba <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    50f4:	2800      	cmp	r0, #0
    50f6:	d055      	beq.n	51a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    50f8:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    50fc:	1c49      	adds	r1, r1, #1
    50fe:	f140 0000 	adc.w	r0, r0, #0
    5102:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    5106:	7a20      	ldrb	r0, [r4, #8]
    5108:	f7fe fb2e 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    510c:	7177      	strb	r7, [r6, #5]
    510e:	f898 0000 	ldrb.w	r0, [r8]
    5112:	2800      	cmp	r0, #0
    5114:	bf1c      	itt	ne
    5116:	7930      	ldrbne	r0, [r6, #4]
    5118:	2800      	cmpne	r0, #0
    511a:	d009      	beq.n	5130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x250>
    511c:	7137      	strb	r7, [r6, #4]
    511e:	89e2      	ldrh	r2, [r4, #14]
    5120:	4639      	mov	r1, r7
    5122:	f042 0210 	orr.w	r2, r2, #16
    5126:	81e2      	strh	r2, [r4, #14]
    5128:	69a2      	ldr	r2, [r4, #24]
    512a:	f04f 0010 	mov.w	r0, #16
    512e:	4790      	blx	r2
    5130:	78f0      	ldrb	r0, [r6, #3]
    5132:	b190      	cbz	r0, 515a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27a>
    5134:	70f7      	strb	r7, [r6, #3]
    5136:	f7ff fbcf 	bl	48d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    513a:	b390      	cbz	r0, 51a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c2>
    513c:	89e2      	ldrh	r2, [r4, #14]
    513e:	2008      	movs	r0, #8
    5140:	f042 0208 	orr.w	r2, r2, #8
    5144:	81e2      	strh	r2, [r4, #14]
    5146:	69a2      	ldr	r2, [r4, #24]
    5148:	2100      	movs	r1, #0
    514a:	4790      	blx	r2
    514c:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    5150:	1c49      	adds	r1, r1, #1
    5152:	f140 0000 	adc.w	r0, r0, #0
    5156:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    515a:	79b0      	ldrb	r0, [r6, #6]
    515c:	2801      	cmp	r0, #1
    515e:	bf0c      	ite	eq
    5160:	71b7      	strbeq	r7, [r6, #6]
    5162:	f886 9006 	strbne.w	r9, [r6, #6]
    5166:	8a20      	ldrh	r0, [r4, #16]
    5168:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    516c:	8220      	strh	r0, [r4, #16]
    516e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5170:	f89a 3007 	ldrb.w	r3, [sl, #7]
    5174:	7808      	ldrb	r0, [r1, #0]
    5176:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    517a:	429a      	cmp	r2, r3
    517c:	d148      	bne.n	5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    517e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5182:	f000 0003 	and.w	r0, r0, #3
    5186:	f102 0678 	add.w	r6, r2, #120	; 0x78
    518a:	2801      	cmp	r0, #1
    518c:	bf18      	it	ne
    518e:	2802      	cmpne	r0, #2
    5190:	d027      	beq.n	51e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    5192:	2803      	cmp	r0, #3
    5194:	bf1c      	itt	ne
    5196:	79a0      	ldrbne	r0, [r4, #6]
    5198:	f040 0004 	orrne.w	r0, r0, #4
    519c:	d00c      	beq.n	51b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    519e:	71a0      	strb	r0, [r4, #6]
    51a0:	e036      	b.n	5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    51a2:	e004      	b.n	51ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ce>
    51a4:	f240 314b 	movw	r1, #843	; 0x34b
    51a8:	2027      	movs	r0, #39	; 0x27
    51aa:	f7fe fce9 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51ae:	f240 3163 	movw	r1, #867	; 0x363
    51b2:	2027      	movs	r0, #39	; 0x27
    51b4:	f7fe fce4 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51b8:	f886 9002 	strb.w	r9, [r6, #2]
    51bc:	8a22      	ldrh	r2, [r4, #16]
    51be:	4648      	mov	r0, r9
    51c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    51c4:	8222      	strh	r2, [r4, #16]
    51c6:	89e2      	ldrh	r2, [r4, #14]
    51c8:	f042 0201 	orr.w	r2, r2, #1
    51cc:	81e2      	strh	r2, [r4, #14]
    51ce:	69a2      	ldr	r2, [r4, #24]
    51d0:	4790      	blx	r2
    51d2:	79f0      	ldrb	r0, [r6, #7]
    51d4:	2801      	cmp	r0, #1
    51d6:	d101      	bne.n	51dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    51d8:	71f7      	strb	r7, [r6, #7]
    51da:	e019      	b.n	5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    51dc:	f886 9007 	strb.w	r9, [r6, #7]
    51e0:	e016      	b.n	5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    51e2:	7848      	ldrb	r0, [r1, #1]
    51e4:	b1b8      	cbz	r0, 5216 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    51e6:	8a21      	ldrh	r1, [r4, #16]
    51e8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    51ec:	8221      	strh	r1, [r4, #16]
    51ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    51f0:	b171      	cbz	r1, 5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    51f2:	28fb      	cmp	r0, #251	; 0xfb
    51f4:	bf84      	itt	hi
    51f6:	79a0      	ldrbhi	r0, [r4, #6]
    51f8:	f040 0010 	orrhi.w	r0, r0, #16
    51fc:	d8cf      	bhi.n	519e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    51fe:	79e0      	ldrb	r0, [r4, #7]
    5200:	2800      	cmp	r0, #0
    5202:	bf08      	it	eq
    5204:	464d      	moveq	r5, r9
    5206:	d003      	beq.n	5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    5208:	2020      	movs	r0, #32
    520a:	69a2      	ldr	r2, [r4, #24]
    520c:	2100      	movs	r1, #0
    520e:	4790      	blx	r2
    5210:	9801      	ldr	r0, [sp, #4]
    5212:	b9b8      	cbnz	r0, 5244 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>
    5214:	e011      	b.n	523a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    5216:	79f0      	ldrb	r0, [r6, #7]
    5218:	2801      	cmp	r0, #1
    521a:	d1df      	bne.n	51dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    521c:	e7dc      	b.n	51d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    521e:	7981      	ldrb	r1, [r0, #6]
    5220:	1c49      	adds	r1, r1, #1
    5222:	7181      	strb	r1, [r0, #6]
    5224:	f89a 0012 	ldrb.w	r0, [sl, #18]
    5228:	2800      	cmp	r0, #0
    522a:	bf18      	it	ne
    522c:	f007 ff6c 	blne	d108 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5230:	8a20      	ldrh	r0, [r4, #16]
    5232:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5236:	8220      	strh	r0, [r4, #16]
    5238:	e7ea      	b.n	5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    523a:	2001      	movs	r0, #1
    523c:	9900      	ldr	r1, [sp, #0]
    523e:	f7ff fe75 	bl	4f2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>
    5242:	b148      	cbz	r0, 5258 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    5244:	2d00      	cmp	r5, #0
    5246:	bf1c      	itt	ne
    5248:	2000      	movne	r0, #0
    524a:	f7ff fdab 	blne	4da4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    524e:	b002      	add	sp, #8
    5250:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5254:	f000 b86a 	b.w	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5258:	2d00      	cmp	r5, #0
    525a:	bf1c      	itt	ne
    525c:	2001      	movne	r0, #1
    525e:	f7ff fda1 	blne	4da4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5262:	2000      	movs	r0, #0
    5264:	f000 f94c 	bl	5500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>
    5268:	2d00      	cmp	r5, #0
    526a:	bf04      	itt	eq
    526c:	b002      	addeq	sp, #8
    526e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5272:	2002      	movs	r0, #2
    5274:	b002      	add	sp, #8
    5276:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    527a:	f7ff bd93 	b.w	4da4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    527e:	0000      	.short	0x0000
    5280:	20000104 	.word	0x20000104
    5284:	20000a0a 	.word	0x20000a0a
    5288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    528c:	4e26      	ldr	r6, [pc, #152]	; (5328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    528e:	4681      	mov	r9, r0
    5290:	f1a6 053c 	sub.w	r5, r6, #60	; 0x3c
    5294:	6870      	ldr	r0, [r6, #4]
    5296:	4688      	mov	r8, r1
    5298:	f100 0478 	add.w	r4, r0, #120	; 0x78
    529c:	7828      	ldrb	r0, [r5, #0]
    529e:	2801      	cmp	r0, #1
    52a0:	d004      	beq.n	52ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    52a2:	f240 4106 	movw	r1, #1030	; 0x406
    52a6:	2027      	movs	r0, #39	; 0x27
    52a8:	f7fe fc6a 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52ac:	78a0      	ldrb	r0, [r4, #2]
    52ae:	2701      	movs	r7, #1
    52b0:	b160      	cbz	r0, 52cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>
    52b2:	2100      	movs	r1, #0
    52b4:	70a1      	strb	r1, [r4, #2]
    52b6:	89ea      	ldrh	r2, [r5, #14]
    52b8:	2004      	movs	r0, #4
    52ba:	f042 0204 	orr.w	r2, r2, #4
    52be:	81ea      	strh	r2, [r5, #14]
    52c0:	69aa      	ldr	r2, [r5, #24]
    52c2:	4790      	blx	r2
    52c4:	7830      	ldrb	r0, [r6, #0]
    52c6:	2800      	cmp	r0, #0
    52c8:	bf18      	it	ne
    52ca:	7127      	strbne	r7, [r4, #4]
    52cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    52ce:	2603      	movs	r6, #3
    52d0:	7808      	ldrb	r0, [r1, #0]
    52d2:	ea36 0000 	bics.w	r0, r6, r0
    52d6:	d10d      	bne.n	52f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    52d8:	7960      	ldrb	r0, [r4, #5]
    52da:	b998      	cbnz	r0, 5304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    52dc:	89ea      	ldrh	r2, [r5, #14]
    52de:	2002      	movs	r0, #2
    52e0:	f042 0202 	orr.w	r2, r2, #2
    52e4:	81ea      	strh	r2, [r5, #14]
    52e6:	69aa      	ldr	r2, [r5, #24]
    52e8:	4790      	blx	r2
    52ea:	6a68      	ldr	r0, [r5, #36]	; 0x24
    52ec:	7800      	ldrb	r0, [r0, #0]
    52ee:	ea36 0000 	bics.w	r0, r6, r0
    52f2:	d007      	beq.n	5304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    52f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
    52f6:	7840      	ldrb	r0, [r0, #1]
    52f8:	2800      	cmp	r0, #0
    52fa:	bf0e      	itee	eq
    52fc:	7167      	strbeq	r7, [r4, #5]
    52fe:	2002      	movne	r0, #2
    5300:	7160      	strbne	r0, [r4, #5]
    5302:	e000      	b.n	5306 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x426>
    5304:	7166      	strb	r6, [r4, #5]
    5306:	ea38 0009 	bics.w	r0, r8, r9
    530a:	d004      	beq.n	5316 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x436>
    530c:	2101      	movs	r1, #1
    530e:	2000      	movs	r0, #0
    5310:	f7ff fe0c 	bl	4f2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>
    5314:	b118      	cbz	r0, 531e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x43e>
    5316:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    531a:	f000 b807 	b.w	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    531e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5322:	2000      	movs	r0, #0
    5324:	f000 b85e 	b.w	53e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    5328:	20000104 	.word	0x20000104
    532c:	b510      	push	{r4, lr}
    532e:	f007 ffbf 	bl	d2b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5332:	f007 fe6f 	bl	d014 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5336:	4818      	ldr	r0, [pc, #96]	; (5398 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b8>)
    5338:	6844      	ldr	r4, [r0, #4]
    533a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    533e:	2801      	cmp	r0, #1
    5340:	bf08      	it	eq
    5342:	f008 fdeb 	bleq	df1c <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    5346:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    534a:	b938      	cbnz	r0, 535c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>
    534c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    534e:	b128      	cbz	r0, 535c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>
    5350:	2200      	movs	r2, #0
    5352:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    5356:	4611      	mov	r1, r2
    5358:	f7fd f97c 	bl	2654 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    535c:	4c0f      	ldr	r4, [pc, #60]	; (539c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>)
    535e:	2100      	movs	r1, #0
    5360:	69a2      	ldr	r2, [r4, #24]
    5362:	8a20      	ldrh	r0, [r4, #16]
    5364:	4790      	blx	r2
    5366:	6a22      	ldr	r2, [r4, #32]
    5368:	79a1      	ldrb	r1, [r4, #6]
    536a:	78a0      	ldrb	r0, [r4, #2]
    536c:	4790      	blx	r2
    536e:	490c      	ldr	r1, [pc, #48]	; (53a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>)
    5370:	7c48      	ldrb	r0, [r1, #17]
    5372:	b170      	cbz	r0, 5392 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b2>
    5374:	f5a1 70a9 	sub.w	r0, r1, #338	; 0x152
    5378:	f8d0 2152 	ldr.w	r2, [r0, #338]	; 0x152
    537c:	f8d0 3156 	ldr.w	r3, [r0, #342]	; 0x156
    5380:	f8c0 215a 	str.w	r2, [r0, #346]	; 0x15a
    5384:	f8c0 315e 	str.w	r3, [r0, #350]	; 0x15e
    5388:	2001      	movs	r0, #1
    538a:	7408      	strb	r0, [r1, #16]
    538c:	7a20      	ldrb	r0, [r4, #8]
    538e:	f7fe f9eb 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5392:	2000      	movs	r0, #0
    5394:	7020      	strb	r0, [r4, #0]
    5396:	bd10      	pop	{r4, pc}
    5398:	20000104 	.word	0x20000104
    539c:	200000c8 	.word	0x200000c8
    53a0:	20000a0a 	.word	0x20000a0a
    53a4:	4808      	ldr	r0, [pc, #32]	; (53c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e8>)
    53a6:	b510      	push	{r4, lr}
    53a8:	7800      	ldrb	r0, [r0, #0]
    53aa:	2802      	cmp	r0, #2
    53ac:	d004      	beq.n	53b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    53ae:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    53b2:	2027      	movs	r0, #39	; 0x27
    53b4:	f7fe fbe4 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53b8:	4904      	ldr	r1, [pc, #16]	; (53cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ec>)
    53ba:	2001      	movs	r0, #1
    53bc:	71c8      	strb	r0, [r1, #7]
    53be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    53c2:	f7ff bfb3 	b.w	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    53c6:	0000      	.short	0x0000
    53c8:	200000c8 	.word	0x200000c8
    53cc:	20000a0a 	.word	0x20000a0a
    53d0:	4803      	ldr	r0, [pc, #12]	; (53e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x500>)
    53d2:	7800      	ldrb	r0, [r0, #0]
    53d4:	2800      	cmp	r0, #0
    53d6:	bf08      	it	eq
    53d8:	4770      	bxeq	lr
    53da:	f7ff bfa7 	b.w	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    53de:	0000      	.short	0x0000
    53e0:	200000c8 	.word	0x200000c8
    53e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53e8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 54f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>
    53ec:	4606      	mov	r6, r0
    53ee:	f8d8 4004 	ldr.w	r4, [r8, #4]
    53f2:	f104 0778 	add.w	r7, r4, #120	; 0x78
    53f6:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    53fa:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    53fc:	f894 908a 	ldrb.w	r9, [r4, #138]	; 0x8a
    5400:	8f25      	ldrh	r5, [r4, #56]	; 0x38
    5402:	2908      	cmp	r1, #8
    5404:	d011      	beq.n	542a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    5406:	f00a fdb0 	bl	ff6a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    540a:	bf00      	nop
    540c:	f1b9 0f00 	cmp.w	r9, #0
    5410:	bf04      	itt	eq
    5412:	1d00      	addeq	r0, r0, #4
    5414:	b280      	uxtheq	r0, r0
    5416:	4285      	cmp	r5, r0
    5418:	bf38      	it	cc
    541a:	4628      	movcc	r0, r5
    541c:	f000 09ff 	and.w	r9, r0, #255	; 0xff
    5420:	4d34      	ldr	r5, [pc, #208]	; (54f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>)
    5422:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5424:	62a8      	str	r0, [r5, #40]	; 0x28
    5426:	b976      	cbnz	r6, 5446 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x566>
    5428:	e003      	b.n	5432 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x552>
    542a:	2104      	movs	r1, #4
    542c:	f00a fd9d 	bl	ff6a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5430:	e7ec      	b.n	540c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    5432:	7a68      	ldrb	r0, [r5, #9]
    5434:	7aa9      	ldrb	r1, [r5, #10]
    5436:	4288      	cmp	r0, r1
    5438:	d105      	bne.n	5446 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x566>
    543a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    543e:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    5442:	4288      	cmp	r0, r1
    5444:	d004      	beq.n	5450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    5446:	7a68      	ldrb	r0, [r5, #9]
    5448:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    544c:	f008 fdbe 	bl	dfcc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5450:	7cb8      	ldrb	r0, [r7, #18]
    5452:	b348      	cbz	r0, 54a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>
    5454:	4828      	ldr	r0, [pc, #160]	; (54f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x618>)
    5456:	f008 fad5 	bl	da04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    545a:	f898 0000 	ldrb.w	r0, [r8]
    545e:	2800      	cmp	r0, #0
    5460:	bf0c      	ite	eq
    5462:	2001      	moveq	r0, #1
    5464:	2000      	movne	r0, #0
    5466:	f080 0101 	eor.w	r1, r0, #1
    546a:	4824      	ldr	r0, [pc, #144]	; (54fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x61c>)
    546c:	7601      	strb	r1, [r0, #24]
    546e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    5472:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5476:	f5a0 7284 	sub.w	r2, r0, #264	; 0x108
    547a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    547c:	f007 fdba 	bl	cff4 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5480:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    5484:	2801      	cmp	r0, #1
    5486:	bf08      	it	eq
    5488:	2200      	moveq	r2, #0
    548a:	d008      	beq.n	549e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    548c:	2802      	cmp	r0, #2
    548e:	bf08      	it	eq
    5490:	2201      	moveq	r2, #1
    5492:	d004      	beq.n	549e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5494:	f240 31b3 	movw	r1, #947	; 0x3b3
    5498:	2006      	movs	r0, #6
    549a:	f7fe fb71 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    549e:	4649      	mov	r1, r9
    54a0:	2001      	movs	r0, #1
    54a2:	f007 fdd5 	bl	d050 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    54a6:	e004      	b.n	54b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d2>
    54a8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    54aa:	f008 faab 	bl	da04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54ae:	f007 fdb1 	bl	d014 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    54b2:	2e00      	cmp	r6, #0
    54b4:	bf04      	itt	eq
    54b6:	2000      	moveq	r0, #0
    54b8:	f008 f912 	bleq	d6e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    54bc:	f641 514c 	movw	r1, #7500	; 0x1d4c
    54c0:	6860      	ldr	r0, [r4, #4]
    54c2:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    54c6:	4288      	cmp	r0, r1
    54c8:	f04f 0201 	mov.w	r2, #1
    54cc:	f04f 0100 	mov.w	r1, #0
    54d0:	bf34      	ite	cc
    54d2:	2001      	movcc	r0, #1
    54d4:	2000      	movcs	r0, #0
    54d6:	f008 fc75 	bl	ddc4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    54da:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    54de:	2801      	cmp	r0, #1
    54e0:	bf08      	it	eq
    54e2:	f008 fd27 	bleq	df34 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    54e6:	2002      	movs	r0, #2
    54e8:	7028      	strb	r0, [r5, #0]
    54ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54ee:	0000      	.short	0x0000
    54f0:	20000104 	.word	0x20000104
    54f4:	200000c8 	.word	0x200000c8
    54f8:	200008b8 	.word	0x200008b8
    54fc:	200009c0 	.word	0x200009c0
    5500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5504:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 57bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8dc>
    5508:	0002      	movs	r2, r0
    550a:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    550e:	f8d8 5004 	ldr.w	r5, [r8, #4]
    5512:	7aa0      	ldrb	r0, [r4, #10]
    5514:	b083      	sub	sp, #12
    5516:	f895 1066 	ldrb.w	r1, [r5, #102]	; 0x66
    551a:	f105 0778 	add.w	r7, r5, #120	; 0x78
    551e:	f1a8 0b18 	sub.w	fp, r8, #24
    5522:	bf01      	itttt	eq
    5524:	7a62      	ldrbeq	r2, [r4, #9]
    5526:	4282      	cmpeq	r2, r0
    5528:	f895 2067 	ldrbeq.w	r2, [r5, #103]	; 0x67
    552c:	428a      	cmpeq	r2, r1
    552e:	d001      	beq.n	5534 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>
    5530:	f008 fd4c 	bl	dfcc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5534:	7978      	ldrb	r0, [r7, #5]
    5536:	f8df a288 	ldr.w	sl, [pc, #648]	; 57c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e0>
    553a:	f04f 0900 	mov.w	r9, #0
    553e:	2601      	movs	r6, #1
    5540:	b150      	cbz	r0, 5558 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x678>
    5542:	2801      	cmp	r0, #1
    5544:	d06d      	beq.n	5622 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5546:	2802      	cmp	r0, #2
    5548:	d06c      	beq.n	5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x744>
    554a:	2803      	cmp	r0, #3
    554c:	d06b      	beq.n	5626 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    554e:	f240 2162 	movw	r1, #610	; 0x262
    5552:	2027      	movs	r0, #39	; 0x27
    5554:	f7fe fb14 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5558:	f8d8 0004 	ldr.w	r0, [r8, #4]
    555c:	f100 0178 	add.w	r1, r0, #120	; 0x78
    5560:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    5564:	2b24      	cmp	r3, #36	; 0x24
    5566:	bf1c      	itt	ne
    5568:	7b49      	ldrbne	r1, [r1, #13]
    556a:	2924      	cmpne	r1, #36	; 0x24
    556c:	d008      	beq.n	5580 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>
    556e:	f04f 0202 	mov.w	r2, #2
    5572:	2b1f      	cmp	r3, #31
    5574:	bf18      	it	ne
    5576:	2b20      	cmpne	r3, #32
    5578:	d01c      	beq.n	55b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    557a:	2922      	cmp	r1, #34	; 0x22
    557c:	d033      	beq.n	55e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    557e:	e053      	b.n	5628 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    5580:	f898 1000 	ldrb.w	r1, [r8]
    5584:	2900      	cmp	r1, #0
    5586:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    558a:	d00a      	beq.n	55a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    558c:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    5590:	2800      	cmp	r0, #0
    5592:	d04e      	beq.n	5632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5594:	2901      	cmp	r1, #1
    5596:	bf18      	it	ne
    5598:	2801      	cmpne	r0, #1
    559a:	d038      	beq.n	560e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    559c:	f04f 0102 	mov.w	r1, #2
    55a0:	e047      	b.n	5632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    55a2:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    55a6:	2800      	cmp	r0, #0
    55a8:	d043      	beq.n	5632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    55aa:	2901      	cmp	r1, #1
    55ac:	bf18      	it	ne
    55ae:	2801      	cmpne	r0, #1
    55b0:	d02d      	beq.n	560e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    55b2:	e7f3      	b.n	559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    55b4:	2922      	cmp	r1, #34	; 0x22
    55b6:	d016      	beq.n	55e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    55b8:	f898 1000 	ldrb.w	r1, [r8]
    55bc:	b381      	cbz	r1, 5620 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x740>
    55be:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    55c2:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    55c6:	f010 0f01 	tst.w	r0, #1
    55ca:	bf18      	it	ne
    55cc:	4630      	movne	r0, r6
    55ce:	d004      	beq.n	55da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fa>
    55d0:	2901      	cmp	r1, #1
    55d2:	bf18      	it	ne
    55d4:	2801      	cmpne	r0, #1
    55d6:	d01a      	beq.n	560e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    55d8:	e7e0      	b.n	559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    55da:	f010 0f02 	tst.w	r0, #2
    55de:	bf18      	it	ne
    55e0:	4610      	movne	r0, r2
    55e2:	d1f5      	bne.n	55d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    55e4:	e025      	b.n	5632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    55e6:	f898 1000 	ldrb.w	r1, [r8]
    55ea:	b1c9      	cbz	r1, 5620 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x740>
    55ec:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    55f0:	f890 31c0 	ldrb.w	r3, [r0, #448]	; 0x1c0
    55f4:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    55f8:	ea03 0000 	and.w	r0, r3, r0
    55fc:	f010 0f01 	tst.w	r0, #1
    5600:	bf18      	it	ne
    5602:	4630      	movne	r0, r6
    5604:	d006      	beq.n	5614 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x734>
    5606:	2901      	cmp	r1, #1
    5608:	bf18      	it	ne
    560a:	2801      	cmpne	r0, #1
    560c:	d1c6      	bne.n	559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    560e:	f04f 0101 	mov.w	r1, #1
    5612:	e00e      	b.n	5632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5614:	f010 0f02 	tst.w	r0, #2
    5618:	bf18      	it	ne
    561a:	4610      	movne	r0, r2
    561c:	d1f3      	bne.n	5606 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    561e:	e008      	b.n	5632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5620:	e002      	b.n	5628 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    5622:	e029      	b.n	5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>
    5624:	e03b      	b.n	569e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7be>
    5626:	e04a      	b.n	56be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7de>
    5628:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    562c:	2904      	cmp	r1, #4
    562e:	bf08      	it	eq
    5630:	2108      	moveq	r1, #8
    5632:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    5634:	f00a fc99 	bl	ff6a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5638:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    563a:	4281      	cmp	r1, r0
    563c:	bf38      	it	cc
    563e:	4608      	movcc	r0, r1
    5640:	f8ad 0004 	strh.w	r0, [sp, #4]
    5644:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    5648:	4658      	mov	r0, fp
    564a:	f7ff f96f 	bl	492c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    564e:	b148      	cbz	r0, 5664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x784>
    5650:	89e2      	ldrh	r2, [r4, #14]
    5652:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5658:	81e2      	strh	r2, [r4, #14]
    565a:	69a2      	ldr	r2, [r4, #24]
    565c:	2080      	movs	r0, #128	; 0x80
    565e:	4790      	blx	r2
    5660:	70fe      	strb	r6, [r7, #3]
    5662:	e030      	b.n	56c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5664:	466a      	mov	r2, sp
    5666:	a901      	add	r1, sp, #4
    5668:	6b60      	ldr	r0, [r4, #52]	; 0x34
    566a:	f00a f911 	bl	f890 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    566e:	6260      	str	r0, [r4, #36]	; 0x24
    5670:	b110      	cbz	r0, 5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>
    5672:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
    5676:	b111      	cbz	r1, 567e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x79e>
    5678:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
    567c:	e023      	b.n	56c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    567e:	f89d 1000 	ldrb.w	r1, [sp]
    5682:	b931      	cbnz	r1, 5692 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b2>
    5684:	f8a0 9000 	strh.w	r9, [r0]
    5688:	f880 9002 	strb.w	r9, [r0, #2]
    568c:	2101      	movs	r1, #1
    568e:	f00a ff0f 	bl	104b0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5692:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5696:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5698:	f00a fec4 	bl	10424 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    569c:	e013      	b.n	56c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    569e:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    56a2:	f8ad 0004 	strh.w	r0, [sp, #4]
    56a6:	466a      	mov	r2, sp
    56a8:	a901      	add	r1, sp, #4
    56aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    56ac:	f00a f8f0 	bl	f890 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    56b0:	6260      	str	r0, [r4, #36]	; 0x24
    56b2:	b940      	cbnz	r0, 56c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    56b4:	f240 2153 	movw	r1, #595	; 0x253
    56b8:	2027      	movs	r0, #39	; 0x27
    56ba:	f7fe fa61 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56be:	4658      	mov	r0, fp
    56c0:	f7ff f934 	bl	492c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    56c4:	b1e0      	cbz	r0, 5700 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x820>
    56c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    56c8:	2208      	movs	r2, #8
    56ca:	7801      	ldrb	r1, [r0, #0]
    56cc:	f021 0308 	bic.w	r3, r1, #8
    56d0:	7003      	strb	r3, [r0, #0]
    56d2:	79b9      	ldrb	r1, [r7, #6]
    56d4:	ea02 01c1 	and.w	r1, r2, r1, lsl #3
    56d8:	4319      	orrs	r1, r3
    56da:	f021 0304 	bic.w	r3, r1, #4
    56de:	7003      	strb	r3, [r0, #0]
    56e0:	79f9      	ldrb	r1, [r7, #7]
    56e2:	2204      	movs	r2, #4
    56e4:	ea02 0181 	and.w	r1, r2, r1, lsl #2
    56e8:	4319      	orrs	r1, r3
    56ea:	f021 0110 	bic.w	r1, r1, #16
    56ee:	7001      	strb	r1, [r0, #0]
    56f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    56f2:	f00a f89e 	bl	f832 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    56f6:	2800      	cmp	r0, #0
    56f8:	bf18      	it	ne
    56fa:	46b1      	movne	r9, r6
    56fc:	d10f      	bne.n	571e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83e>
    56fe:	e004      	b.n	570a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x82a>
    5700:	f44f 7117 	mov.w	r1, #604	; 0x25c
    5704:	2027      	movs	r0, #39	; 0x27
    5706:	f7fe fa3b 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    570a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    570c:	2103      	movs	r1, #3
    570e:	7800      	ldrb	r0, [r0, #0]
    5710:	ea31 0000 	bics.w	r0, r1, r0
    5714:	d003      	beq.n	571e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83e>
    5716:	f7ff f8c7 	bl	48a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    571a:	f080 0901 	eor.w	r9, r0, #1
    571e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5720:	7801      	ldrb	r1, [r0, #0]
    5722:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
    5726:	7001      	strb	r1, [r0, #0]
    5728:	7c79      	ldrb	r1, [r7, #17]
    572a:	2900      	cmp	r1, #0
    572c:	bf1c      	itt	ne
    572e:	7841      	ldrbne	r1, [r0, #1]
    5730:	2900      	cmpne	r1, #0
    5732:	d027      	beq.n	5784 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a4>
    5734:	4823      	ldr	r0, [pc, #140]	; (57c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e4>)
    5736:	f008 f965 	bl	da04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    573a:	f898 0000 	ldrb.w	r0, [r8]
    573e:	2800      	cmp	r0, #0
    5740:	bf0c      	ite	eq
    5742:	2101      	moveq	r1, #1
    5744:	2100      	movne	r1, #0
    5746:	4820      	ldr	r0, [pc, #128]	; (57c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e8>)
    5748:	7601      	strb	r1, [r0, #24]
    574a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    574e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5752:	f5a0 7184 	sub.w	r1, r0, #264	; 0x108
    5756:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5758:	f007 fc4c 	bl	cff4 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    575c:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
    5760:	2801      	cmp	r0, #1
    5762:	bf08      	it	eq
    5764:	2200      	moveq	r2, #0
    5766:	d008      	beq.n	577a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x89a>
    5768:	2802      	cmp	r0, #2
    576a:	bf08      	it	eq
    576c:	2201      	moveq	r2, #1
    576e:	d004      	beq.n	577a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x89a>
    5770:	f240 31b3 	movw	r1, #947	; 0x3b3
    5774:	2006      	movs	r0, #6
    5776:	f7fe fa03 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    577a:	21fb      	movs	r1, #251	; 0xfb
    577c:	2000      	movs	r0, #0
    577e:	f007 fc67 	bl	d050 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5782:	e003      	b.n	578c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8ac>
    5784:	f008 f93e 	bl	da04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5788:	f007 fc44 	bl	d014 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    578c:	6868      	ldr	r0, [r5, #4]
    578e:	f641 514c 	movw	r1, #7500	; 0x1d4c
    5792:	4288      	cmp	r0, r1
    5794:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
    5798:	f04f 0201 	mov.w	r2, #1
    579c:	4611      	mov	r1, r2
    579e:	bf34      	ite	cc
    57a0:	2001      	movcc	r0, #1
    57a2:	2000      	movcs	r0, #0
    57a4:	f008 fb0e 	bl	ddc4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    57a8:	7126      	strb	r6, [r4, #4]
    57aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57ac:	8801      	ldrh	r1, [r0, #0]
    57ae:	8261      	strh	r1, [r4, #18]
    57b0:	7880      	ldrb	r0, [r0, #2]
    57b2:	7520      	strb	r0, [r4, #20]
    57b4:	7026      	strb	r6, [r4, #0]
    57b6:	b003      	add	sp, #12
    57b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57bc:	20000104 	.word	0x20000104
    57c0:	200009e8 	.word	0x200009e8
    57c4:	200008b8 	.word	0x200008b8
    57c8:	200009c0 	.word	0x200009c0
    57cc:	000053a5 	.word	0x000053a5
    57d0:	00004fd5 	.word	0x00004fd5
    57d4:	00005289 	.word	0x00005289
    57d8:	000053d1 	.word	0x000053d1
    57dc:	00000000 	.word	0x00000000

000057e0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    57e0:	460a      	mov	r2, r1
    57e2:	4907      	ldr	r1, [pc, #28]	; (5800 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    57e4:	b510      	push	{r4, lr}
    57e6:	7809      	ldrb	r1, [r1, #0]
    57e8:	b141      	cbz	r1, 57fc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    57ea:	4b06      	ldr	r3, [pc, #24]	; (5804 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    57ec:	7899      	ldrb	r1, [r3, #2]
    57ee:	b129      	cbz	r1, 57fc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    57f0:	4402      	add	r2, r0
    57f2:	1cd8      	adds	r0, r3, #3
    57f4:	f007 fb28 	bl	ce48 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    57f8:	2001      	movs	r0, #1
    57fa:	bd10      	pop	{r4, pc}
    57fc:	2000      	movs	r0, #0
    57fe:	bd10      	pop	{r4, pc}
    5800:	20000398 	.word	0x20000398
    5804:	20001959 	.word	0x20001959

00005808 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5808:	4800      	ldr	r0, [pc, #0]	; (580c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    580a:	4770      	bx	lr
    580c:	20001b2c 	.word	0x20001b2c

00005810 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5810:	4904      	ldr	r1, [pc, #16]	; (5824 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5812:	788a      	ldrb	r2, [r1, #2]
    5814:	4282      	cmp	r2, r0
    5816:	bf86      	itte	hi
    5818:	4408      	addhi	r0, r1
    581a:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    581e:	2000      	movls	r0, #0
    5820:	4770      	bx	lr
    5822:	0000      	.short	0x0000
    5824:	20001959 	.word	0x20001959

00005828 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5828:	4904      	ldr	r1, [pc, #16]	; (583c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    582a:	788a      	ldrb	r2, [r1, #2]
    582c:	4282      	cmp	r2, r0
    582e:	bf86      	itte	hi
    5830:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    5834:	3083      	addhi	r0, #131	; 0x83
    5836:	2000      	movls	r0, #0
    5838:	4770      	bx	lr
    583a:	0000      	.short	0x0000
    583c:	20001959 	.word	0x20001959

00005840 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5840:	4a05      	ldr	r2, [pc, #20]	; (5858 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5842:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5846:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    584a:	6802      	ldr	r2, [r0, #0]
    584c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5850:	8880      	ldrh	r0, [r0, #4]
    5852:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5856:	4770      	bx	lr
    5858:	20001959 	.word	0x20001959

0000585c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5860:	460e      	mov	r6, r1
    5862:	4607      	mov	r7, r0
    5864:	4615      	mov	r5, r2
    5866:	2106      	movs	r1, #6
    5868:	4630      	mov	r0, r6
    586a:	f000 fe3b 	bl	64e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    586e:	4c1c      	ldr	r4, [pc, #112]	; (58e0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x84>)
    5870:	b198      	cbz	r0, 589a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x3e>
    5872:	78a1      	ldrb	r1, [r4, #2]
    5874:	b171      	cbz	r1, 5894 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    5876:	f504 709d 	add.w	r0, r4, #314	; 0x13a
    587a:	f011 0f01 	tst.w	r1, #1
    587e:	bf18      	it	ne
    5880:	f800 5f01 	strbne.w	r5, [r0, #1]!
    5884:	78a1      	ldrb	r1, [r4, #2]
    5886:	0849      	lsrs	r1, r1, #1
    5888:	d004      	beq.n	5894 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    588a:	7045      	strb	r5, [r0, #1]
    588c:	f800 5f02 	strb.w	r5, [r0, #2]!
    5890:	1e49      	subs	r1, r1, #1
    5892:	d1fa      	bne.n	588a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2e>
    5894:	2001      	movs	r0, #1
    5896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    589a:	4638      	mov	r0, r7
    589c:	4631      	mov	r1, r6
    589e:	f000 fad5 	bl	5e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    58a2:	2810      	cmp	r0, #16
    58a4:	d019      	beq.n	58da <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    58a6:	78a3      	ldrb	r3, [r4, #2]
    58a8:	2100      	movs	r1, #0
    58aa:	2b00      	cmp	r3, #0
    58ac:	d915      	bls.n	58da <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    58ae:	1862      	adds	r2, r4, r1
    58b0:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
    58b4:	4282      	cmp	r2, r0
    58b6:	d10b      	bne.n	58d0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x74>
    58b8:	2910      	cmp	r1, #16
    58ba:	bf18      	it	ne
    58bc:	2908      	cmpne	r1, #8
    58be:	d00c      	beq.n	58da <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    58c0:	eb04 0001 	add.w	r0, r4, r1
    58c4:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    58c8:	f04f 0001 	mov.w	r0, #1
    58cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58d0:	f101 0101 	add.w	r1, r1, #1
    58d4:	b2c9      	uxtb	r1, r1
    58d6:	428b      	cmp	r3, r1
    58d8:	d8e9      	bhi.n	58ae <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x52>
    58da:	2000      	movs	r0, #0
    58dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58e0:	20001959 	.word	0x20001959

000058e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    58e4:	4904      	ldr	r1, [pc, #16]	; (58f8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    58e6:	788a      	ldrb	r2, [r1, #2]
    58e8:	4282      	cmp	r2, r0
    58ea:	bf86      	itte	hi
    58ec:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    58f0:	1cc0      	addhi	r0, r0, #3
    58f2:	2000      	movls	r0, #0
    58f4:	4770      	bx	lr
    58f6:	0000      	.short	0x0000
    58f8:	20001959 	.word	0x20001959

000058fc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    58fc:	b510      	push	{r4, lr}
    58fe:	f240 12d3 	movw	r2, #467	; 0x1d3
    5902:	2100      	movs	r1, #0
    5904:	4807      	ldr	r0, [pc, #28]	; (5924 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    5906:	f009 f88d 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    590a:	2208      	movs	r2, #8
    590c:	21ff      	movs	r1, #255	; 0xff
    590e:	4806      	ldr	r0, [pc, #24]	; (5928 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5910:	f009 f888 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5914:	4805      	ldr	r0, [pc, #20]	; (592c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5916:	2100      	movs	r1, #0
    5918:	7001      	strb	r1, [r0, #0]
    591a:	7041      	strb	r1, [r0, #1]
    591c:	f44f 7161 	mov.w	r1, #900	; 0x384
    5920:	8041      	strh	r1, [r0, #2]
    5922:	bd10      	pop	{r4, pc}
    5924:	20001959 	.word	0x20001959
    5928:	2000039c 	.word	0x2000039c
    592c:	20000398 	.word	0x20000398

00005930 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5930:	4901      	ldr	r1, [pc, #4]	; (5938 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5932:	7008      	strb	r0, [r1, #0]
    5934:	4770      	bx	lr
    5936:	0000      	.short	0x0000
    5938:	20000398 	.word	0x20000398

0000593c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    593c:	4801      	ldr	r0, [pc, #4]	; (5944 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    593e:	7800      	ldrb	r0, [r0, #0]
    5940:	4770      	bx	lr
    5942:	0000      	.short	0x0000
    5944:	20000398 	.word	0x20000398

00005948 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5948:	4b0b      	ldr	r3, [pc, #44]	; (5978 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    594a:	f893 c002 	ldrb.w	ip, [r3, #2]
    594e:	4584      	cmp	ip, r0
    5950:	bf9c      	itt	ls
    5952:	2000      	movls	r0, #0
    5954:	4770      	bxls	lr
    5956:	4418      	add	r0, r3
    5958:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    595c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5960:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5964:	700b      	strb	r3, [r1, #0]
    5966:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    596a:	6011      	str	r1, [r2, #0]
    596c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5970:	8090      	strh	r0, [r2, #4]
    5972:	2001      	movs	r0, #1
    5974:	4770      	bx	lr
    5976:	0000      	.short	0x0000
    5978:	20001959 	.word	0x20001959

0000597c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    597c:	4907      	ldr	r1, [pc, #28]	; (599c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    597e:	788a      	ldrb	r2, [r1, #2]
    5980:	4282      	cmp	r2, r0
    5982:	bf9c      	itt	ls
    5984:	2000      	movls	r0, #0
    5986:	4770      	bxls	lr
    5988:	4408      	add	r0, r1
    598a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    598e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5992:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5996:	f000 0001 	and.w	r0, r0, #1
    599a:	4770      	bx	lr
    599c:	20001959 	.word	0x20001959

000059a0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    59a0:	b510      	push	{r4, lr}
    59a2:	f000 fa53 	bl	5e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    59a6:	2810      	cmp	r0, #16
    59a8:	d014      	beq.n	59d4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    59aa:	4a0b      	ldr	r2, [pc, #44]	; (59d8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    59ac:	4601      	mov	r1, r0
    59ae:	2000      	movs	r0, #0
    59b0:	f892 c002 	ldrb.w	ip, [r2, #2]
    59b4:	f1bc 0f00 	cmp.w	ip, #0
    59b8:	d90c      	bls.n	59d4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    59ba:	1813      	adds	r3, r2, r0
    59bc:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    59c0:	428b      	cmp	r3, r1
    59c2:	d103      	bne.n	59cc <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    59c4:	2810      	cmp	r0, #16
    59c6:	bf18      	it	ne
    59c8:	bd10      	popne	{r4, pc}
    59ca:	e003      	b.n	59d4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    59cc:	1c40      	adds	r0, r0, #1
    59ce:	b2c0      	uxtb	r0, r0
    59d0:	4584      	cmp	ip, r0
    59d2:	d8f2      	bhi.n	59ba <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    59d4:	2008      	movs	r0, #8
    59d6:	bd10      	pop	{r4, pc}
    59d8:	20001959 	.word	0x20001959

000059dc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    59dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59e0:	4698      	mov	r8, r3
    59e2:	4691      	mov	r9, r2
    59e4:	460f      	mov	r7, r1
    59e6:	4606      	mov	r6, r0
    59e8:	f000 fa30 	bl	5e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    59ec:	4c2d      	ldr	r4, [pc, #180]	; (5aa4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc8>)
    59ee:	4605      	mov	r5, r0
    59f0:	2810      	cmp	r0, #16
    59f2:	d017      	beq.n	5a24 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x48>
    59f4:	78a1      	ldrb	r1, [r4, #2]
    59f6:	2000      	movs	r0, #0
    59f8:	2900      	cmp	r1, #0
    59fa:	d90e      	bls.n	5a1a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    59fc:	1822      	adds	r2, r4, r0
    59fe:	f892 3103 	ldrb.w	r3, [r2, #259]	; 0x103
    5a02:	42ab      	cmp	r3, r5
    5a04:	d105      	bne.n	5a12 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x36>
    5a06:	2810      	cmp	r0, #16
    5a08:	bf1c      	itt	ne
    5a0a:	2012      	movne	r0, #18
    5a0c:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a10:	e003      	b.n	5a1a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5a12:	1c40      	adds	r0, r0, #1
    5a14:	b2c0      	uxtb	r0, r0
    5a16:	4281      	cmp	r1, r0
    5a18:	d8f0      	bhi.n	59fc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5a1a:	2908      	cmp	r1, #8
    5a1c:	d23f      	bcs.n	5a9e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5a1e:	2d10      	cmp	r5, #16
    5a20:	d003      	beq.n	5a2a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x4e>
    5a22:	e018      	b.n	5a56 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x7a>
    5a24:	78a1      	ldrb	r1, [r4, #2]
    5a26:	2908      	cmp	r1, #8
    5a28:	d239      	bcs.n	5a9e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5a2a:	7825      	ldrb	r5, [r4, #0]
    5a2c:	2100      	movs	r1, #0
    5a2e:	1c68      	adds	r0, r5, #1
    5a30:	7020      	strb	r0, [r4, #0]
    5a32:	2d10      	cmp	r5, #16
    5a34:	d303      	bcc.n	5a3e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x62>
    5a36:	2146      	movs	r1, #70	; 0x46
    5a38:	2028      	movs	r0, #40	; 0x28
    5a3a:	f7fe f8a1 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a3e:	eb04 00c5 	add.w	r0, r4, r5, lsl #3
    5a42:	683a      	ldr	r2, [r7, #0]
    5a44:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
    5a48:	88ba      	ldrh	r2, [r7, #4]
    5a4a:	f8a0 2158 	strh.w	r2, [r0, #344]	; 0x158
    5a4e:	f880 6153 	strb.w	r6, [r0, #339]	; 0x153
    5a52:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5a56:	78a6      	ldrb	r6, [r4, #2]
    5a58:	2210      	movs	r2, #16
    5a5a:	1c70      	adds	r0, r6, #1
    5a5c:	70a0      	strb	r0, [r4, #2]
    5a5e:	eb04 1706 	add.w	r7, r4, r6, lsl #4
    5a62:	1cf8      	adds	r0, r7, #3
    5a64:	4649      	mov	r1, r9
    5a66:	f000 fd07 	bl	6478 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5a6a:	f107 0083 	add.w	r0, r7, #131	; 0x83
    5a6e:	2210      	movs	r2, #16
    5a70:	4641      	mov	r1, r8
    5a72:	f000 fd01 	bl	6478 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5a76:	2110      	movs	r1, #16
    5a78:	4640      	mov	r0, r8
    5a7a:	f000 fd33 	bl	64e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5a7e:	4434      	add	r4, r6
    5a80:	2110      	movs	r1, #16
    5a82:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5a86:	4648      	mov	r0, r9
    5a88:	f000 fd2c 	bl	64e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5a8c:	f884 014b 	strb.w	r0, [r4, #331]	; 0x14b
    5a90:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
    5a94:	2000      	movs	r0, #0
    5a96:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
    5a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a9e:	2007      	movs	r0, #7
    5aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5aa4:	20001959 	.word	0x20001959

00005aa8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5aa8:	b470      	push	{r4, r5, r6}
    5aaa:	484d      	ldr	r0, [pc, #308]	; (5be0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x138>)
    5aac:	7881      	ldrb	r1, [r0, #2]
    5aae:	1e49      	subs	r1, r1, #1
    5ab0:	b24b      	sxtb	r3, r1
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	bfbc      	itt	lt
    5ab6:	bc70      	poplt	{r4, r5, r6}
    5ab8:	4770      	bxlt	lr
    5aba:	bf00      	nop
    5abc:	7881      	ldrb	r1, [r0, #2]
    5abe:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    5ac2:	1e49      	subs	r1, r1, #1
    5ac4:	b2ca      	uxtb	r2, r1
    5ac6:	7082      	strb	r2, [r0, #2]
    5ac8:	fa50 f183 	uxtab	r1, r0, r3
    5acc:	f891 1103 	ldrb.w	r1, [r1, #259]	; 0x103
    5ad0:	4594      	cmp	ip, r2
    5ad2:	d03e      	beq.n	5b52 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xaa>
    5ad4:	eb00 1502 	add.w	r5, r0, r2, lsl #4
    5ad8:	eb00 140c 	add.w	r4, r0, ip, lsl #4
    5adc:	f8d5 6003 	ldr.w	r6, [r5, #3]
    5ae0:	f8c4 6003 	str.w	r6, [r4, #3]
    5ae4:	f8d5 6007 	ldr.w	r6, [r5, #7]
    5ae8:	f8c4 6007 	str.w	r6, [r4, #7]
    5aec:	f8d5 600b 	ldr.w	r6, [r5, #11]
    5af0:	f8c4 600b 	str.w	r6, [r4, #11]
    5af4:	f8d5 600f 	ldr.w	r6, [r5, #15]
    5af8:	f8c4 600f 	str.w	r6, [r4, #15]
    5afc:	f8d5 6083 	ldr.w	r6, [r5, #131]	; 0x83
    5b00:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    5b04:	f8d5 6087 	ldr.w	r6, [r5, #135]	; 0x87
    5b08:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    5b0c:	f8d5 608b 	ldr.w	r6, [r5, #139]	; 0x8b
    5b10:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    5b14:	f8d5 508f 	ldr.w	r5, [r5, #143]	; 0x8f
    5b18:	f8c4 508f 	str.w	r5, [r4, #143]	; 0x8f
    5b1c:	1885      	adds	r5, r0, r2
    5b1e:	eb00 040c 	add.w	r4, r0, ip
    5b22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5b26:	f895 6103 	ldrb.w	r6, [r5, #259]	; 0x103
    5b2a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    5b2e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    5b32:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
    5b36:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    5b3a:	f8d2 610b 	ldr.w	r6, [r2, #267]	; 0x10b
    5b3e:	f8cc 610b 	str.w	r6, [ip, #267]	; 0x10b
    5b42:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5b46:	f8ac 210f 	strh.w	r2, [ip, #271]	; 0x10f
    5b4a:	f895 213b 	ldrb.w	r2, [r5, #315]	; 0x13b
    5b4e:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
    5b52:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    5b56:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    5b5a:	f012 0f01 	tst.w	r2, #1
    5b5e:	d133      	bne.n	5bc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5b60:	f890 c002 	ldrb.w	ip, [r0, #2]
    5b64:	2200      	movs	r2, #0
    5b66:	f1bc 0f00 	cmp.w	ip, #0
    5b6a:	d90b      	bls.n	5b84 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    5b6c:	1884      	adds	r4, r0, r2
    5b6e:	f894 5103 	ldrb.w	r5, [r4, #259]	; 0x103
    5b72:	428d      	cmp	r5, r1
    5b74:	d102      	bne.n	5b7c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xd4>
    5b76:	2a10      	cmp	r2, #16
    5b78:	d126      	bne.n	5bc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5b7a:	e003      	b.n	5b84 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    5b7c:	1c52      	adds	r2, r2, #1
    5b7e:	b2d2      	uxtb	r2, r2
    5b80:	4594      	cmp	ip, r2
    5b82:	d8f3      	bhi.n	5b6c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc4>
    5b84:	7802      	ldrb	r2, [r0, #0]
    5b86:	1e52      	subs	r2, r2, #1
    5b88:	b2d2      	uxtb	r2, r2
    5b8a:	7002      	strb	r2, [r0, #0]
    5b8c:	428a      	cmp	r2, r1
    5b8e:	d01b      	beq.n	5bc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5b90:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    5b94:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    5b98:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    5b9c:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    5ba0:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    5ba4:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    5ba8:	7884      	ldrb	r4, [r0, #2]
    5baa:	f890 c000 	ldrb.w	ip, [r0]
    5bae:	2200      	movs	r2, #0
    5bb0:	2c00      	cmp	r4, #0
    5bb2:	d909      	bls.n	5bc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5bb4:	1885      	adds	r5, r0, r2
    5bb6:	f895 5103 	ldrb.w	r5, [r5, #259]	; 0x103
    5bba:	4565      	cmp	r5, ip
    5bbc:	d10b      	bne.n	5bd6 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x12e>
    5bbe:	2a10      	cmp	r2, #16
    5bc0:	bf1c      	itt	ne
    5bc2:	4402      	addne	r2, r0
    5bc4:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    5bc8:	1e59      	subs	r1, r3, #1
    5bca:	b24b      	sxtb	r3, r1
    5bcc:	2b00      	cmp	r3, #0
    5bce:	f6bf af75 	bge.w	5abc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x14>
    5bd2:	bc70      	pop	{r4, r5, r6}
    5bd4:	4770      	bx	lr
    5bd6:	1c52      	adds	r2, r2, #1
    5bd8:	b2d2      	uxtb	r2, r2
    5bda:	4294      	cmp	r4, r2
    5bdc:	d8ea      	bhi.n	5bb4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x10c>
    5bde:	e7f3      	b.n	5bc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5be0:	20001959 	.word	0x20001959

00005be4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    5be4:	b510      	push	{r4, lr}
    5be6:	f000 f931 	bl	5e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5bea:	2810      	cmp	r0, #16
    5bec:	d016      	beq.n	5c1c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    5bee:	4a0c      	ldr	r2, [pc, #48]	; (5c20 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x3c>)
    5bf0:	4601      	mov	r1, r0
    5bf2:	2000      	movs	r0, #0
    5bf4:	7893      	ldrb	r3, [r2, #2]
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d910      	bls.n	5c1c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    5bfa:	bf00      	nop
    5bfc:	eb02 0c00 	add.w	ip, r2, r0
    5c00:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5c04:	458c      	cmp	ip, r1
    5c06:	d105      	bne.n	5c14 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x30>
    5c08:	2810      	cmp	r0, #16
    5c0a:	d007      	beq.n	5c1c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    5c0c:	f000 f942 	bl	5e94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xec>
    5c10:	2001      	movs	r0, #1
    5c12:	bd10      	pop	{r4, pc}
    5c14:	1c40      	adds	r0, r0, #1
    5c16:	b2c0      	uxtb	r0, r0
    5c18:	4283      	cmp	r3, r0
    5c1a:	d8ef      	bhi.n	5bfc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x18>
    5c1c:	2000      	movs	r0, #0
    5c1e:	bd10      	pop	{r4, pc}
    5c20:	20001959 	.word	0x20001959

00005c24 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5c24:	4801      	ldr	r0, [pc, #4]	; (5c2c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5c26:	8840      	ldrh	r0, [r0, #2]
    5c28:	4770      	bx	lr
    5c2a:	0000      	.short	0x0000
    5c2c:	20000398 	.word	0x20000398

00005c30 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5c30:	b138      	cbz	r0, 5c42 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5c32:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5c36:	4288      	cmp	r0, r1
    5c38:	d803      	bhi.n	5c42 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5c3a:	4903      	ldr	r1, [pc, #12]	; (5c48 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5c3c:	8048      	strh	r0, [r1, #2]
    5c3e:	2001      	movs	r0, #1
    5c40:	4770      	bx	lr
    5c42:	2000      	movs	r0, #0
    5c44:	4770      	bx	lr
    5c46:	0000      	.short	0x0000
    5c48:	20000398 	.word	0x20000398

00005c4c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5c4c:	4906      	ldr	r1, [pc, #24]	; (5c68 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    5c4e:	788a      	ldrb	r2, [r1, #2]
    5c50:	4282      	cmp	r2, r0
    5c52:	d906      	bls.n	5c62 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    5c54:	4408      	add	r0, r1
    5c56:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5c5a:	2800      	cmp	r0, #0
    5c5c:	bf04      	itt	eq
    5c5e:	2001      	moveq	r0, #1
    5c60:	4770      	bxeq	lr
    5c62:	2000      	movs	r0, #0
    5c64:	4770      	bx	lr
    5c66:	0000      	.short	0x0000
    5c68:	20001959 	.word	0x20001959

00005c6c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5c6c:	b570      	push	{r4, r5, r6, lr}
    5c6e:	460d      	mov	r5, r1
    5c70:	4604      	mov	r4, r0
    5c72:	f000 f8eb 	bl	5e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5c76:	4a1a      	ldr	r2, [pc, #104]	; (5ce0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    5c78:	2810      	cmp	r0, #16
    5c7a:	d014      	beq.n	5ca6 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    5c7c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    5c80:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    5c84:	f010 0f01 	tst.w	r0, #1
    5c88:	bf1c      	itt	ne
    5c8a:	2001      	movne	r0, #1
    5c8c:	bd70      	popne	{r4, r5, r6, pc}
    5c8e:	7850      	ldrb	r0, [r2, #1]
    5c90:	2808      	cmp	r0, #8
    5c92:	bf3c      	itt	cc
    5c94:	2001      	movcc	r0, #1
    5c96:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    5c9a:	d21e      	bcs.n	5cda <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    5c9c:	7850      	ldrb	r0, [r2, #1]
    5c9e:	1c40      	adds	r0, r0, #1
    5ca0:	7050      	strb	r0, [r2, #1]
    5ca2:	2001      	movs	r0, #1
    5ca4:	bd70      	pop	{r4, r5, r6, pc}
    5ca6:	7850      	ldrb	r0, [r2, #1]
    5ca8:	2808      	cmp	r0, #8
    5caa:	d216      	bcs.n	5cda <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    5cac:	7813      	ldrb	r3, [r2, #0]
    5cae:	2001      	movs	r0, #1
    5cb0:	1c59      	adds	r1, r3, #1
    5cb2:	7011      	strb	r1, [r2, #0]
    5cb4:	2b10      	cmp	r3, #16
    5cb6:	d303      	bcc.n	5cc0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    5cb8:	2146      	movs	r1, #70	; 0x46
    5cba:	2028      	movs	r0, #40	; 0x28
    5cbc:	f7fd ff60 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5cc4:	6829      	ldr	r1, [r5, #0]
    5cc6:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    5cca:	88a9      	ldrh	r1, [r5, #4]
    5ccc:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5cd0:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5cd4:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    5cd8:	e7e0      	b.n	5c9c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    5cda:	2000      	movs	r0, #0
    5cdc:	bd70      	pop	{r4, r5, r6, pc}
    5cde:	0000      	.short	0x0000
    5ce0:	20001959 	.word	0x20001959

00005ce4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    5ce4:	4901      	ldr	r1, [pc, #4]	; (5cec <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    5ce6:	7048      	strb	r0, [r1, #1]
    5ce8:	4770      	bx	lr
    5cea:	0000      	.short	0x0000
    5cec:	20000398 	.word	0x20000398

00005cf0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5cf0:	b470      	push	{r4, r5, r6}
    5cf2:	482b      	ldr	r0, [pc, #172]	; (5da0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    5cf4:	2500      	movs	r5, #0
    5cf6:	7801      	ldrb	r1, [r0, #0]
    5cf8:	1e49      	subs	r1, r1, #1
    5cfa:	b24b      	sxtb	r3, r1
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	db46      	blt.n	5d8e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    5d00:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    5d04:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5d08:	f011 0f01 	tst.w	r1, #1
    5d0c:	d03b      	beq.n	5d86 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5d0e:	7842      	ldrb	r2, [r0, #1]
    5d10:	b2d9      	uxtb	r1, r3
    5d12:	1e52      	subs	r2, r2, #1
    5d14:	7042      	strb	r2, [r0, #1]
    5d16:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    5d1a:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    5d1e:	f890 c002 	ldrb.w	ip, [r0, #2]
    5d22:	2200      	movs	r2, #0
    5d24:	f1bc 0f00 	cmp.w	ip, #0
    5d28:	d90b      	bls.n	5d42 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    5d2a:	1884      	adds	r4, r0, r2
    5d2c:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    5d30:	428e      	cmp	r6, r1
    5d32:	d102      	bne.n	5d3a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    5d34:	2a10      	cmp	r2, #16
    5d36:	d126      	bne.n	5d86 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5d38:	e003      	b.n	5d42 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    5d3a:	1c52      	adds	r2, r2, #1
    5d3c:	b2d2      	uxtb	r2, r2
    5d3e:	4594      	cmp	ip, r2
    5d40:	d8f3      	bhi.n	5d2a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    5d42:	7802      	ldrb	r2, [r0, #0]
    5d44:	1e52      	subs	r2, r2, #1
    5d46:	b2d2      	uxtb	r2, r2
    5d48:	7002      	strb	r2, [r0, #0]
    5d4a:	428a      	cmp	r2, r1
    5d4c:	d01b      	beq.n	5d86 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5d4e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    5d52:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    5d56:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    5d5a:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    5d5e:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    5d62:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    5d66:	7884      	ldrb	r4, [r0, #2]
    5d68:	f890 c000 	ldrb.w	ip, [r0]
    5d6c:	2200      	movs	r2, #0
    5d6e:	2c00      	cmp	r4, #0
    5d70:	d909      	bls.n	5d86 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5d72:	1886      	adds	r6, r0, r2
    5d74:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    5d78:	4566      	cmp	r6, ip
    5d7a:	d10c      	bne.n	5d96 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    5d7c:	2a10      	cmp	r2, #16
    5d7e:	bf1c      	itt	ne
    5d80:	4402      	addne	r2, r0
    5d82:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    5d86:	1e59      	subs	r1, r3, #1
    5d88:	b24b      	sxtb	r3, r1
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	dab8      	bge.n	5d00 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    5d8e:	4805      	ldr	r0, [pc, #20]	; (5da4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    5d90:	7045      	strb	r5, [r0, #1]
    5d92:	bc70      	pop	{r4, r5, r6}
    5d94:	4770      	bx	lr
    5d96:	1c52      	adds	r2, r2, #1
    5d98:	b2d2      	uxtb	r2, r2
    5d9a:	4294      	cmp	r4, r2
    5d9c:	d8e9      	bhi.n	5d72 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    5d9e:	e7f2      	b.n	5d86 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5da0:	20001959 	.word	0x20001959
    5da4:	20000398 	.word	0x20000398

00005da8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dac:	4d25      	ldr	r5, [pc, #148]	; (5e44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5dae:	2600      	movs	r6, #0
    5db0:	4634      	mov	r4, r6
    5db2:	7828      	ldrb	r0, [r5, #0]
    5db4:	2800      	cmp	r0, #0
    5db6:	bf8c      	ite	hi
    5db8:	4f23      	ldrhi	r7, [pc, #140]	; (5e48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5dba:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dbe:	bf00      	nop
    5dc0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5dc4:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    5dc8:	f011 0f01 	tst.w	r1, #1
    5dcc:	d032      	beq.n	5e34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5dce:	78aa      	ldrb	r2, [r5, #2]
    5dd0:	2100      	movs	r1, #0
    5dd2:	4623      	mov	r3, r4
    5dd4:	2a00      	cmp	r2, #0
    5dd6:	d909      	bls.n	5dec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    5dd8:	eb05 0c01 	add.w	ip, r5, r1
    5ddc:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5de0:	459c      	cmp	ip, r3
    5de2:	d004      	beq.n	5dee <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    5de4:	1c49      	adds	r1, r1, #1
    5de6:	b2c9      	uxtb	r1, r1
    5de8:	428a      	cmp	r2, r1
    5dea:	d8f5      	bhi.n	5dd8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    5dec:	2110      	movs	r1, #16
    5dee:	428a      	cmp	r2, r1
    5df0:	bf86      	itte	hi
    5df2:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    5df6:	1cd3      	addhi	r3, r2, #3
    5df8:	2300      	movls	r3, #0
    5dfa:	2200      	movs	r2, #0
    5dfc:	2910      	cmp	r1, #16
    5dfe:	d00c      	beq.n	5e1a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    5e00:	eb05 0c01 	add.w	ip, r5, r1
    5e04:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    5e08:	f1b8 0f01 	cmp.w	r8, #1
    5e0c:	d004      	beq.n	5e18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    5e0e:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    5e12:	f1bc 0f00 	cmp.w	ip, #0
    5e16:	d000      	beq.n	5e1a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    5e18:	2201      	movs	r2, #1
    5e1a:	1e52      	subs	r2, r2, #1
    5e1c:	4213      	tst	r3, r2
    5e1e:	d109      	bne.n	5e34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5e20:	55b9      	strb	r1, [r7, r6]
    5e22:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    5e26:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    5e2a:	4630      	mov	r0, r6
    5e2c:	1c73      	adds	r3, r6, #1
    5e2e:	b2de      	uxtb	r6, r3
    5e30:	f008 fb9c 	bl	e56c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5e34:	1c60      	adds	r0, r4, #1
    5e36:	b2c4      	uxtb	r4, r0
    5e38:	7828      	ldrb	r0, [r5, #0]
    5e3a:	42a0      	cmp	r0, r4
    5e3c:	d8c0      	bhi.n	5dc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    5e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e42:	0000      	.short	0x0000
    5e44:	20001959 	.word	0x20001959
    5e48:	2000039c 	.word	0x2000039c
    5e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e50:	4d0f      	ldr	r5, [pc, #60]	; (5e90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>)
    5e52:	4606      	mov	r6, r0
    5e54:	2400      	movs	r4, #0
    5e56:	7828      	ldrb	r0, [r5, #0]
    5e58:	460f      	mov	r7, r1
    5e5a:	2800      	cmp	r0, #0
    5e5c:	d912      	bls.n	5e84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xdc>
    5e5e:	bf00      	nop
    5e60:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5e64:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5e68:	42b1      	cmp	r1, r6
    5e6a:	d106      	bne.n	5e7a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd2>
    5e6c:	2206      	movs	r2, #6
    5e6e:	4639      	mov	r1, r7
    5e70:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5e74:	f008 fdc6 	bl	ea04 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5e78:	b138      	cbz	r0, 5e8a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe2>
    5e7a:	1c60      	adds	r0, r4, #1
    5e7c:	b2c4      	uxtb	r4, r0
    5e7e:	7828      	ldrb	r0, [r5, #0]
    5e80:	42a0      	cmp	r0, r4
    5e82:	d8ed      	bhi.n	5e60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb8>
    5e84:	2010      	movs	r0, #16
    5e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e8a:	4620      	mov	r0, r4
    5e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e90:	20001959 	.word	0x20001959
    5e94:	b470      	push	{r4, r5, r6}
    5e96:	4949      	ldr	r1, [pc, #292]	; (5fbc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x214>)
    5e98:	180d      	adds	r5, r1, r0
    5e9a:	788a      	ldrb	r2, [r1, #2]
    5e9c:	1e52      	subs	r2, r2, #1
    5e9e:	b2d3      	uxtb	r3, r2
    5ea0:	708b      	strb	r3, [r1, #2]
    5ea2:	f895 2103 	ldrb.w	r2, [r5, #259]	; 0x103
    5ea6:	4298      	cmp	r0, r3
    5ea8:	d03d      	beq.n	5f26 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x17e>
    5eaa:	eb01 1400 	add.w	r4, r1, r0, lsl #4
    5eae:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
    5eb2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5eb6:	f8dc 6003 	ldr.w	r6, [ip, #3]
    5eba:	f8c4 6003 	str.w	r6, [r4, #3]
    5ebe:	f8dc 6007 	ldr.w	r6, [ip, #7]
    5ec2:	f8c4 6007 	str.w	r6, [r4, #7]
    5ec6:	f8dc 600b 	ldr.w	r6, [ip, #11]
    5eca:	f8c4 600b 	str.w	r6, [r4, #11]
    5ece:	f8dc 600f 	ldr.w	r6, [ip, #15]
    5ed2:	f8c4 600f 	str.w	r6, [r4, #15]
    5ed6:	f8dc 6083 	ldr.w	r6, [ip, #131]	; 0x83
    5eda:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    5ede:	f8dc 6087 	ldr.w	r6, [ip, #135]	; 0x87
    5ee2:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    5ee6:	f8dc 608b 	ldr.w	r6, [ip, #139]	; 0x8b
    5eea:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    5eee:	f8dc c08f 	ldr.w	ip, [ip, #143]	; 0x8f
    5ef2:	f8c4 c08f 	str.w	ip, [r4, #143]	; 0x8f
    5ef6:	eb01 0c03 	add.w	ip, r1, r3
    5efa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5efe:	f89c 4103 	ldrb.w	r4, [ip, #259]	; 0x103
    5f02:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    5f06:	f885 4103 	strb.w	r4, [r5, #259]	; 0x103
    5f0a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5f0e:	f8d3 410b 	ldr.w	r4, [r3, #267]	; 0x10b
    5f12:	f8c0 410b 	str.w	r4, [r0, #267]	; 0x10b
    5f16:	f8b3 310f 	ldrh.w	r3, [r3, #271]	; 0x10f
    5f1a:	f8a0 310f 	strh.w	r3, [r0, #271]	; 0x10f
    5f1e:	f89c 013b 	ldrb.w	r0, [ip, #315]	; 0x13b
    5f22:	f885 013b 	strb.w	r0, [r5, #315]	; 0x13b
    5f26:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    5f2a:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5f2e:	f010 0f01 	tst.w	r0, #1
    5f32:	bf1c      	itt	ne
    5f34:	bc70      	popne	{r4, r5, r6}
    5f36:	4770      	bxne	lr
    5f38:	2000      	movs	r0, #0
    5f3a:	788c      	ldrb	r4, [r1, #2]
    5f3c:	2c00      	cmp	r4, #0
    5f3e:	d90d      	bls.n	5f5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    5f40:	180b      	adds	r3, r1, r0
    5f42:	f893 c103 	ldrb.w	ip, [r3, #259]	; 0x103
    5f46:	4594      	cmp	ip, r2
    5f48:	d104      	bne.n	5f54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ac>
    5f4a:	2810      	cmp	r0, #16
    5f4c:	bf1c      	itt	ne
    5f4e:	bc70      	popne	{r4, r5, r6}
    5f50:	4770      	bxne	lr
    5f52:	e003      	b.n	5f5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    5f54:	1c40      	adds	r0, r0, #1
    5f56:	b2c0      	uxtb	r0, r0
    5f58:	4284      	cmp	r4, r0
    5f5a:	d8f1      	bhi.n	5f40 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    5f5c:	7808      	ldrb	r0, [r1, #0]
    5f5e:	1e40      	subs	r0, r0, #1
    5f60:	b2c0      	uxtb	r0, r0
    5f62:	7008      	strb	r0, [r1, #0]
    5f64:	4290      	cmp	r0, r2
    5f66:	bf04      	itt	eq
    5f68:	bc70      	popeq	{r4, r5, r6}
    5f6a:	4770      	bxeq	lr
    5f6c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    5f70:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5f74:	f8d0 c153 	ldr.w	ip, [r0, #339]	; 0x153
    5f78:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    5f7c:	f8d0 0157 	ldr.w	r0, [r0, #343]	; 0x157
    5f80:	f8c3 0157 	str.w	r0, [r3, #343]	; 0x157
    5f84:	788c      	ldrb	r4, [r1, #2]
    5f86:	780b      	ldrb	r3, [r1, #0]
    5f88:	2000      	movs	r0, #0
    5f8a:	2c00      	cmp	r4, #0
    5f8c:	bf9c      	itt	ls
    5f8e:	bc70      	popls	{r4, r5, r6}
    5f90:	4770      	bxls	lr
    5f92:	bf00      	nop
    5f94:	eb01 0c00 	add.w	ip, r1, r0
    5f98:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5f9c:	459c      	cmp	ip, r3
    5f9e:	d106      	bne.n	5fae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x206>
    5fa0:	2810      	cmp	r0, #16
    5fa2:	bf1c      	itt	ne
    5fa4:	4408      	addne	r0, r1
    5fa6:	f880 2103 	strbne.w	r2, [r0, #259]	; 0x103
    5faa:	bc70      	pop	{r4, r5, r6}
    5fac:	4770      	bx	lr
    5fae:	1c40      	adds	r0, r0, #1
    5fb0:	b2c0      	uxtb	r0, r0
    5fb2:	4284      	cmp	r4, r0
    5fb4:	d8ee      	bhi.n	5f94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ec>
    5fb6:	bc70      	pop	{r4, r5, r6}
    5fb8:	4770      	bx	lr
    5fba:	0000      	.short	0x0000
    5fbc:	20001959 	.word	0x20001959
    5fc0:	4925      	ldr	r1, [pc, #148]	; (6058 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2b0>)
    5fc2:	b410      	push	{r4}
    5fc4:	784a      	ldrb	r2, [r1, #1]
    5fc6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    5fca:	1e52      	subs	r2, r2, #1
    5fcc:	704a      	strb	r2, [r1, #1]
    5fce:	2200      	movs	r2, #0
    5fd0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5fd4:	f891 c002 	ldrb.w	ip, [r1, #2]
    5fd8:	f1bc 0f00 	cmp.w	ip, #0
    5fdc:	d90d      	bls.n	5ffa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    5fde:	188b      	adds	r3, r1, r2
    5fe0:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    5fe4:	4284      	cmp	r4, r0
    5fe6:	d104      	bne.n	5ff2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24a>
    5fe8:	2a10      	cmp	r2, #16
    5fea:	bf1c      	itt	ne
    5fec:	bc10      	popne	{r4}
    5fee:	4770      	bxne	lr
    5ff0:	e003      	b.n	5ffa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    5ff2:	1c52      	adds	r2, r2, #1
    5ff4:	b2d2      	uxtb	r2, r2
    5ff6:	4594      	cmp	ip, r2
    5ff8:	d8f1      	bhi.n	5fde <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x236>
    5ffa:	780a      	ldrb	r2, [r1, #0]
    5ffc:	1e52      	subs	r2, r2, #1
    5ffe:	b2d2      	uxtb	r2, r2
    6000:	700a      	strb	r2, [r1, #0]
    6002:	4282      	cmp	r2, r0
    6004:	bf04      	itt	eq
    6006:	bc10      	popeq	{r4}
    6008:	4770      	bxeq	lr
    600a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    600e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    6012:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    6016:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    601a:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    601e:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    6022:	788c      	ldrb	r4, [r1, #2]
    6024:	f891 c000 	ldrb.w	ip, [r1]
    6028:	2200      	movs	r2, #0
    602a:	2c00      	cmp	r4, #0
    602c:	bf9c      	itt	ls
    602e:	bc10      	popls	{r4}
    6030:	4770      	bxls	lr
    6032:	188b      	adds	r3, r1, r2
    6034:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    6038:	4563      	cmp	r3, ip
    603a:	d106      	bne.n	604a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2a2>
    603c:	2a10      	cmp	r2, #16
    603e:	bf1c      	itt	ne
    6040:	4411      	addne	r1, r2
    6042:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    6046:	bc10      	pop	{r4}
    6048:	4770      	bx	lr
    604a:	1c52      	adds	r2, r2, #1
    604c:	b2d2      	uxtb	r2, r2
    604e:	4294      	cmp	r4, r2
    6050:	d8ef      	bhi.n	6032 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x28a>
    6052:	bc10      	pop	{r4}
    6054:	4770      	bx	lr
    6056:	0000      	.short	0x0000
    6058:	20001959 	.word	0x20001959

0000605c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    605c:	b570      	push	{r4, r5, r6, lr}
    605e:	b08c      	sub	sp, #48	; 0x30
    6060:	f100 0410 	add.w	r4, r0, #16
    6064:	461d      	mov	r5, r3
    6066:	4616      	mov	r6, r2
    6068:	f10d 3cff 	add.w	ip, sp, #4294967295	; 0xffffffff
    606c:	f05f 0008 	movs.w	r0, #8
    6070:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    6074:	f88c 2001 	strb.w	r2, [ip, #1]
    6078:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    607c:	f80c 2f02 	strb.w	r2, [ip, #2]!
    6080:	1e40      	subs	r0, r0, #1
    6082:	d1f5      	bne.n	6070 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    6084:	f101 0c10 	add.w	ip, r1, #16
    6088:	466c      	mov	r4, sp
    608a:	f10d 010f 	add.w	r1, sp, #15
    608e:	2008      	movs	r0, #8
    6090:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    6094:	704a      	strb	r2, [r1, #1]
    6096:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    609a:	f801 2f02 	strb.w	r2, [r1, #2]!
    609e:	1e40      	subs	r0, r0, #1
    60a0:	d1f6      	bne.n	6090 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    60a2:	4620      	mov	r0, r4
    60a4:	f009 fdd8 	bl	fc58 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    60a8:	b17e      	cbz	r6, 60ca <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    60aa:	1e6a      	subs	r2, r5, #1
    60ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
    60b0:	f05f 0108 	movs.w	r1, #8
    60b4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    60b8:	7053      	strb	r3, [r2, #1]
    60ba:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    60be:	f802 3f02 	strb.w	r3, [r2, #2]!
    60c2:	1e49      	subs	r1, r1, #1
    60c4:	d1f6      	bne.n	60b4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    60c6:	b00c      	add	sp, #48	; 0x30
    60c8:	bd70      	pop	{r4, r5, r6, pc}
    60ca:	9808      	ldr	r0, [sp, #32]
    60cc:	6028      	str	r0, [r5, #0]
    60ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    60d0:	6068      	str	r0, [r5, #4]
    60d2:	980a      	ldr	r0, [sp, #40]	; 0x28
    60d4:	60a8      	str	r0, [r5, #8]
    60d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    60d8:	60e8      	str	r0, [r5, #12]
    60da:	b00c      	add	sp, #48	; 0x30
    60dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000060e0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    60e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    60e4:	7e44      	ldrb	r4, [r0, #25]
    60e6:	b10c      	cbz	r4, 60ec <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    60e8:	2c25      	cmp	r4, #37	; 0x25
    60ea:	d903      	bls.n	60f4 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x14>
    60ec:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    60f0:	2012      	movs	r0, #18
    60f2:	4770      	bx	lr
    60f4:	2a00      	cmp	r2, #0
    60f6:	bf02      	ittt	eq
    60f8:	2000      	moveq	r0, #0
    60fa:	e8bd 03f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9}
    60fe:	4770      	bxeq	lr
    6100:	f891 c011 	ldrb.w	ip, [r1, #17]
    6104:	261f      	movs	r6, #31
    6106:	2301      	movs	r3, #1
    6108:	4d6c      	ldr	r5, [pc, #432]	; (62bc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    610a:	f04f 0800 	mov.w	r8, #0
    610e:	f1bc 0f00 	cmp.w	ip, #0
    6112:	d073      	beq.n	61fc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    6114:	f1bc 0f01 	cmp.w	ip, #1
    6118:	bf1e      	ittt	ne
    611a:	201f      	movne	r0, #31
    611c:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    6120:	4770      	bxne	lr
    6122:	f8b0 c000 	ldrh.w	ip, [r0]
    6126:	7d0a      	ldrb	r2, [r1, #20]
    6128:	7c8f      	ldrb	r7, [r1, #18]
    612a:	f891 9013 	ldrb.w	r9, [r1, #19]
    612e:	407a      	eors	r2, r7
    6130:	7d4f      	ldrb	r7, [r1, #21]
    6132:	ea87 0709 	eor.w	r7, r7, r9
    6136:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    613a:	ea82 0c0c 	eor.w	ip, r2, ip
    613e:	2700      	movs	r7, #0
    6140:	f00c 09ff 	and.w	r9, ip, #255	; 0xff
    6144:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    6148:	fa99 f9a9 	rbit	r9, r9
    614c:	fa9c fcac 	rbit	ip, ip
    6150:	ea4f 6919 	mov.w	r9, r9, lsr #24
    6154:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    6158:	ea49 2c0c 	orr.w	ip, r9, ip, lsl #8
    615c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
    6160:	1c7f      	adds	r7, r7, #1
    6162:	4494      	add	ip, r2
    6164:	b2ff      	uxtb	r7, r7
    6166:	fa1f fc8c 	uxth.w	ip, ip
    616a:	2f03      	cmp	r7, #3
    616c:	d3e8      	bcc.n	6140 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x60>
    616e:	ea8c 0c02 	eor.w	ip, ip, r2
    6172:	4f52      	ldr	r7, [pc, #328]	; (62bc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    6174:	2200      	movs	r2, #0
    6176:	fbec 7205 	umlal	r7, r2, ip, r5
    617a:	0912      	lsrs	r2, r2, #4
    617c:	f06f 0524 	mvn.w	r5, #36	; 0x24
    6180:	fb02 c205 	mla	r2, r2, r5, ip
    6184:	b2d2      	uxtb	r2, r2
    6186:	eb01 07d2 	add.w	r7, r1, r2, lsr #3
    618a:	7682      	strb	r2, [r0, #26]
    618c:	f002 0507 	and.w	r5, r2, #7
    6190:	7b3f      	ldrb	r7, [r7, #12]
    6192:	fa03 f505 	lsl.w	r5, r3, r5
    6196:	422f      	tst	r7, r5
    6198:	bf18      	it	ne
    619a:	76c2      	strbne	r2, [r0, #27]
    619c:	d17e      	bne.n	629c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1bc>
    619e:	fb04 f20c 	mul.w	r2, r4, ip
    61a2:	0c12      	lsrs	r2, r2, #16
    61a4:	1c52      	adds	r2, r2, #1
    61a6:	b2d2      	uxtb	r2, r2
    61a8:	f05f 0400 	movs.w	r4, #0
    61ac:	eb00 0c04 	add.w	ip, r0, r4
    61b0:	f89c c014 	ldrb.w	ip, [ip, #20]
    61b4:	4594      	cmp	ip, r2
    61b6:	bf3c      	itt	cc
    61b8:	eba2 020c 	subcc.w	r2, r2, ip
    61bc:	b2d2      	uxtbcc	r2, r2
    61be:	d312      	bcc.n	61e6 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x106>
    61c0:	190d      	adds	r5, r1, r4
    61c2:	f04f 0c00 	mov.w	ip, #0
    61c6:	7b2d      	ldrb	r5, [r5, #12]
    61c8:	fa03 f70c 	lsl.w	r7, r3, ip
    61cc:	423d      	tst	r5, r7
    61ce:	bf1c      	itt	ne
    61d0:	1e52      	subne	r2, r2, #1
    61d2:	b2d2      	uxtbne	r2, r2
    61d4:	2a00      	cmp	r2, #0
    61d6:	d069      	beq.n	62ac <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1cc>
    61d8:	f10c 0c01 	add.w	ip, ip, #1
    61dc:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    61e0:	f1bc 0f08 	cmp.w	ip, #8
    61e4:	d3f0      	bcc.n	61c8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xe8>
    61e6:	f104 0c01 	add.w	ip, r4, #1
    61ea:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    61ee:	2c05      	cmp	r4, #5
    61f0:	d3dc      	bcc.n	61ac <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xcc>
    61f2:	4630      	mov	r0, r6
    61f4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    61f8:	4770      	bx	lr
    61fa:	e7ff      	b.n	61fc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    61fc:	f890 c01a 	ldrb.w	ip, [r0, #26]
    6200:	f891 4020 	ldrb.w	r4, [r1, #32]
    6204:	4647      	mov	r7, r8
    6206:	fb04 c202 	mla	r2, r4, r2, ip
    620a:	4c2c      	ldr	r4, [pc, #176]	; (62bc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    620c:	f04f 0c00 	mov.w	ip, #0
    6210:	fbe2 4c05 	umlal	r4, ip, r2, r5
    6214:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    6218:	f06f 0424 	mvn.w	r4, #36	; 0x24
    621c:	fb0c 2204 	mla	r2, ip, r4, r2
    6220:	b2d2      	uxtb	r2, r2
    6222:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    6226:	7682      	strb	r2, [r0, #26]
    6228:	f002 0c07 	and.w	ip, r2, #7
    622c:	7b24      	ldrb	r4, [r4, #12]
    622e:	fa03 fc0c 	lsl.w	ip, r3, ip
    6232:	ea14 0f0c 	tst.w	r4, ip
    6236:	bf1f      	itttt	ne
    6238:	76c2      	strbne	r2, [r0, #27]
    623a:	4640      	movne	r0, r8
    623c:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    6240:	4770      	bxne	lr
    6242:	f890 c019 	ldrb.w	ip, [r0, #25]
    6246:	fbb2 f4fc 	udiv	r4, r2, ip
    624a:	fb0c 2214 	mls	r2, ip, r4, r2
    624e:	1c52      	adds	r2, r2, #1
    6250:	b2d2      	uxtb	r2, r2
    6252:	2400      	movs	r4, #0
    6254:	eb00 0c04 	add.w	ip, r0, r4
    6258:	f89c c014 	ldrb.w	ip, [ip, #20]
    625c:	4594      	cmp	ip, r2
    625e:	bf3c      	itt	cc
    6260:	eba2 020c 	subcc.w	r2, r2, ip
    6264:	b2d2      	uxtbcc	r2, r2
    6266:	d312      	bcc.n	628e <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1ae>
    6268:	190d      	adds	r5, r1, r4
    626a:	f04f 0c00 	mov.w	ip, #0
    626e:	7b2d      	ldrb	r5, [r5, #12]
    6270:	fa03 f80c 	lsl.w	r8, r3, ip
    6274:	ea15 0f08 	tst.w	r5, r8
    6278:	bf1c      	itt	ne
    627a:	1e52      	subne	r2, r2, #1
    627c:	b2d2      	uxtbne	r2, r2
    627e:	b172      	cbz	r2, 629e <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1be>
    6280:	f10c 0c01 	add.w	ip, ip, #1
    6284:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6288:	f1bc 0f08 	cmp.w	ip, #8
    628c:	d3f0      	bcc.n	6270 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x190>
    628e:	f104 0c01 	add.w	ip, r4, #1
    6292:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    6296:	2c05      	cmp	r4, #5
    6298:	d3dc      	bcc.n	6254 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x174>
    629a:	e7aa      	b.n	61f2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x112>
    629c:	e009      	b.n	62b2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1d2>
    629e:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    62a2:	76c1      	strb	r1, [r0, #27]
    62a4:	4638      	mov	r0, r7
    62a6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    62aa:	4770      	bx	lr
    62ac:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    62b0:	76c1      	strb	r1, [r0, #27]
    62b2:	4640      	mov	r0, r8
    62b4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    62b8:	4770      	bx	lr
    62ba:	0000      	.short	0x0000
    62bc:	6eb3e453 	.word	0x6eb3e453

000062c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    62c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62c4:	2701      	movs	r7, #1
    62c6:	4604      	mov	r4, r0
    62c8:	2500      	movs	r5, #0
    62ca:	b169      	cbz	r1, 62e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x28>
    62cc:	2901      	cmp	r1, #1
    62ce:	d05d      	beq.n	638c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>
    62d0:	2902      	cmp	r1, #2
    62d2:	d07c      	beq.n	63ce <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10e>
    62d4:	2903      	cmp	r1, #3
    62d6:	bf18      	it	ne
    62d8:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    62dc:	4601      	mov	r1, r0
    62de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62e2:	3078      	adds	r0, #120	; 0x78
    62e4:	f009 bfe2 	b.w	102ac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    62e8:	f104 0678 	add.w	r6, r4, #120	; 0x78
    62ec:	2288      	movs	r2, #136	; 0x88
    62ee:	2100      	movs	r1, #0
    62f0:	4630      	mov	r0, r6
    62f2:	f008 fb97 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    62f6:	71b5      	strb	r5, [r6, #6]
    62f8:	71f5      	strb	r5, [r6, #7]
    62fa:	7335      	strb	r5, [r6, #12]
    62fc:	7375      	strb	r5, [r6, #13]
    62fe:	73f5      	strb	r5, [r6, #15]
    6300:	7435      	strb	r5, [r6, #16]
    6302:	7175      	strb	r5, [r6, #5]
    6304:	76b5      	strb	r5, [r6, #26]
    6306:	76f5      	strb	r5, [r6, #27]
    6308:	f006 fd86 	bl	ce18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    630c:	f644 112b 	movw	r1, #18731	; 0x492b
    6310:	4008      	ands	r0, r1
    6312:	f886 0046 	strb.w	r0, [r6, #70]	; 0x46
    6316:	0a00      	lsrs	r0, r0, #8
    6318:	f886 0047 	strb.w	r0, [r6, #71]	; 0x47
    631c:	20fe      	movs	r0, #254	; 0xfe
    631e:	f886 007c 	strb.w	r0, [r6, #124]	; 0x7c
    6322:	8826      	ldrh	r6, [r4, #0]
    6324:	2274      	movs	r2, #116	; 0x74
    6326:	2100      	movs	r1, #0
    6328:	4620      	mov	r0, r4
    632a:	f008 fb7b 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    632e:	8026      	strh	r6, [r4, #0]
    6330:	2101      	movs	r1, #1
    6332:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    6336:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    633a:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    633e:	2100      	movs	r1, #0
    6340:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6344:	f00a fb1c 	bl	10980 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    6348:	221b      	movs	r2, #27
    634a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    634e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    6352:	66e5      	str	r5, [r4, #108]	; 0x6c
    6354:	6725      	str	r5, [r4, #112]	; 0x70
    6356:	7467      	strb	r7, [r4, #17]
    6358:	2280      	movs	r2, #128	; 0x80
    635a:	2100      	movs	r1, #0
    635c:	f504 7080 	add.w	r0, r4, #256	; 0x100
    6360:	f008 fb60 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6364:	4842      	ldr	r0, [pc, #264]	; (6470 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b0>)
    6366:	6060      	str	r0, [r4, #4]
    6368:	2212      	movs	r2, #18
    636a:	2100      	movs	r1, #0
    636c:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    6370:	f008 fb58 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6374:	f884 5181 	strb.w	r5, [r4, #385]	; 0x181
    6378:	f884 5188 	strb.w	r5, [r4, #392]	; 0x188
    637c:	f884 518b 	strb.w	r5, [r4, #395]	; 0x18b
    6380:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    6384:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
    6388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    638c:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
    6390:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
    6394:	6861      	ldr	r1, [r4, #4]
    6396:	4837      	ldr	r0, [pc, #220]	; (6474 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b4>)
    6398:	460a      	mov	r2, r1
    639a:	4408      	add	r0, r1
    639c:	fbb0 f0f1 	udiv	r0, r0, r1
    63a0:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    63a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    63a8:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    63ac:	8963      	ldrh	r3, [r4, #10]
    63ae:	f104 0078 	add.w	r0, r4, #120	; 0x78
    63b2:	f000 f8bb 	bl	652c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    63b6:	4621      	mov	r1, r4
    63b8:	f104 0078 	add.w	r0, r4, #120	; 0x78
    63bc:	f009 ff76 	bl	102ac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    63c0:	f008 fafc 	bl	e9bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    63c4:	b3f0      	cbz	r0, 6444 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x184>
    63c6:	f8d4 1012 	ldr.w	r1, [r4, #18]
    63ca:	0c08      	lsrs	r0, r1, #16
    63cc:	e000      	b.n	63d0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x110>
    63ce:	e045      	b.n	645c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19c>
    63d0:	f06f 021f 	mvn.w	r2, #31
    63d4:	ea02 2291 	and.w	r2, r2, r1, lsr #10
    63d8:	261f      	movs	r6, #31
    63da:	f5a0 41aa 	sub.w	r1, r0, #21760	; 0x5500
    63de:	3954      	subs	r1, #84	; 0x54
    63e0:	bf1c      	itt	ne
    63e2:	f5a0 41aa 	subne.w	r1, r0, #21760	; 0x5500
    63e6:	f1b1 0155 	subsne.w	r1, r1, #85	; 0x55
    63ea:	d00a      	beq.n	6402 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x142>
    63ec:	f5a0 5128 	sub.w	r1, r0, #10752	; 0x2a00
    63f0:	39aa      	subs	r1, #170	; 0xaa
    63f2:	bf1e      	ittt	ne
    63f4:	f5a0 412a 	subne.w	r1, r0, #43520	; 0xaa00
    63f8:	f1b1 01aa 	subsne.w	r1, r1, #170	; 0xaa
    63fc:	f04f 0901 	movne.w	r9, #1
    6400:	d101      	bne.n	6406 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x146>
    6402:	f04f 0900 	mov.w	r9, #0
    6406:	f04f 0c00 	mov.w	ip, #0
    640a:	4663      	mov	r3, ip
    640c:	ea4f 010c 	mov.w	r1, ip
    6410:	ea8c 0800 	eor.w	r8, ip, r0
    6414:	ea6f 0808 	mvn.w	r8, r8
    6418:	ea48 0803 	orr.w	r8, r8, r3
    641c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    6420:	d018      	beq.n	6454 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    6422:	f002 0801 	and.w	r8, r2, #1
    6426:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    642a:	ea4c 3cc8 	orr.w	ip, ip, r8, lsl #15
    642e:	f006 0801 	and.w	r8, r6, #1
    6432:	085b      	lsrs	r3, r3, #1
    6434:	0852      	lsrs	r2, r2, #1
    6436:	0876      	lsrs	r6, r6, #1
    6438:	1c49      	adds	r1, r1, #1
    643a:	ea43 33c8 	orr.w	r3, r3, r8, lsl #15
    643e:	2916      	cmp	r1, #22
    6440:	d3e6      	bcc.n	6410 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x150>
    6442:	e000      	b.n	6446 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x186>
    6444:	e002      	b.n	644c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x18c>
    6446:	f1b9 0f00 	cmp.w	r9, #0
    644a:	d003      	beq.n	6454 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    644c:	f884 5180 	strb.w	r5, [r4, #384]	; 0x180
    6450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6454:	f884 7180 	strb.w	r7, [r4, #384]	; 0x180
    6458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    645c:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    6460:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    6464:	6861      	ldr	r1, [r4, #4]
    6466:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    646a:	3078      	adds	r0, #120	; 0x78
    646c:	f000 b85e 	b.w	652c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    6470:	003d0900 	.word	0x003d0900
    6474:	01c9c37f 	.word	0x01c9c37f

00006478 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    6478:	2a00      	cmp	r2, #0
    647a:	bf08      	it	eq
    647c:	4770      	bxeq	lr
    647e:	4411      	add	r1, r2
    6480:	1e40      	subs	r0, r0, #1
    6482:	f012 0f01 	tst.w	r2, #1
    6486:	d003      	beq.n	6490 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x18>
    6488:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    648c:	f800 3f01 	strb.w	r3, [r0, #1]!
    6490:	0852      	lsrs	r2, r2, #1
    6492:	bf08      	it	eq
    6494:	4770      	bxeq	lr
    6496:	bf00      	nop
    6498:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    649c:	7043      	strb	r3, [r0, #1]
    649e:	f811 3d02 	ldrb.w	r3, [r1, #-2]!
    64a2:	f800 3f02 	strb.w	r3, [r0, #2]!
    64a6:	1e52      	subs	r2, r2, #1
    64a8:	d1f6      	bne.n	6498 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x20>
    64aa:	4770      	bx	lr

000064ac <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    64ac:	b510      	push	{r4, lr}
    64ae:	2820      	cmp	r0, #32
    64b0:	bf3e      	ittt	cc
    64b2:	4904      	ldrcc	r1, [pc, #16]	; (64c4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    64b4:	f831 0010 	ldrhcc.w	r0, [r1, r0, lsl #1]
    64b8:	bd10      	popcc	{r4, pc}
    64ba:	f240 1187 	movw	r1, #391	; 0x187
    64be:	2029      	movs	r0, #41	; 0x29
    64c0:	f7fd fb5e 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64c4:	20001846 	.word	0x20001846

000064c8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    64c8:	b510      	push	{r4, lr}
    64ca:	2820      	cmp	r0, #32
    64cc:	bf3e      	ittt	cc
    64ce:	4a04      	ldrcc	r2, [pc, #16]	; (64e0 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    64d0:	f822 1010 	strhcc.w	r1, [r2, r0, lsl #1]
    64d4:	bd10      	popcc	{r4, pc}
    64d6:	f240 118d 	movw	r1, #397	; 0x18d
    64da:	2029      	movs	r0, #41	; 0x29
    64dc:	f7fd fb50 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64e0:	20001846 	.word	0x20001846

000064e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    64e4:	b430      	push	{r4, r5}
    64e6:	2200      	movs	r2, #0
    64e8:	f1a1 0c01 	sub.w	ip, r1, #1
    64ec:	f1bc 0f00 	cmp.w	ip, #0
    64f0:	dd12      	ble.n	6518 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    64f2:	1e43      	subs	r3, r0, #1
    64f4:	f011 0f01 	tst.w	r1, #1
    64f8:	bf08      	it	eq
    64fa:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    64fe:	785c      	ldrb	r4, [r3, #1]
    6500:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    6504:	d008      	beq.n	6518 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    6506:	bf00      	nop
    6508:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    650c:	4322      	orrs	r2, r4
    650e:	785c      	ldrb	r4, [r3, #1]
    6510:	432a      	orrs	r2, r5
    6512:	f1bc 0c01 	subs.w	ip, ip, #1
    6516:	d1f7      	bne.n	6508 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    6518:	1e49      	subs	r1, r1, #1
    651a:	bf5c      	itt	pl
    651c:	5c40      	ldrbpl	r0, [r0, r1]
    651e:	4302      	orrpl	r2, r0
    6520:	2a00      	cmp	r2, #0
    6522:	bf0c      	ite	eq
    6524:	2001      	moveq	r0, #1
    6526:	2000      	movne	r0, #0
    6528:	bc30      	pop	{r4, r5}
    652a:	4770      	bx	lr
    652c:	b410      	push	{r4}
    652e:	f04f 0c00 	mov.w	ip, #0
    6532:	f8a0 c02e 	strh.w	ip, [r0, #46]	; 0x2e
    6536:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
    653a:	4c16      	ldr	r4, [pc, #88]	; (6594 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb0>)
    653c:	fb0c fc01 	mul.w	ip, ip, r1
    6540:	fbbc fcf2 	udiv	ip, ip, r2
    6544:	f8a0 c032 	strh.w	ip, [r0, #50]	; 0x32
    6548:	f242 7c10 	movw	ip, #10000	; 0x2710
    654c:	fb03 f30c 	mul.w	r3, r3, ip
    6550:	fbb3 f3f2 	udiv	r3, r3, r2
    6554:	1c5b      	adds	r3, r3, #1
    6556:	b29b      	uxth	r3, r3
    6558:	fb03 fc02 	mul.w	ip, r3, r2
    655c:	8603      	strh	r3, [r0, #48]	; 0x30
    655e:	45a4      	cmp	ip, r4
    6560:	bf84      	itt	hi
    6562:	1e5b      	subhi	r3, r3, #1
    6564:	8603      	strhhi	r3, [r0, #48]	; 0x30
    6566:	4b0c      	ldr	r3, [pc, #48]	; (6598 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb4>)
    6568:	f240 2c71 	movw	ip, #625	; 0x271
    656c:	fbb3 f3f2 	udiv	r3, r3, r2
    6570:	1c5b      	adds	r3, r3, #1
    6572:	86c3      	strh	r3, [r0, #54]	; 0x36
    6574:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    6576:	fb03 f30c 	mul.w	r3, r3, ip
    657a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    657e:	1e5b      	subs	r3, r3, #1
    6580:	fbb3 f3f2 	udiv	r3, r3, r2
    6584:	6243      	str	r3, [r0, #36]	; 0x24
    6586:	6a03      	ldr	r3, [r0, #32]
    6588:	4359      	muls	r1, r3
    658a:	fbb1 f1f2 	udiv	r1, r1, r2
    658e:	6201      	str	r1, [r0, #32]
    6590:	bc10      	pop	{r4}
    6592:	4770      	bx	lr
    6594:	01e84800 	.word	0x01e84800
    6598:	02625a00 	.word	0x02625a00
    659c:	78c3      	ldrb	r3, [r0, #3]
    659e:	4602      	mov	r2, r0
    65a0:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    65a4:	bf08      	it	eq
    65a6:	4770      	bxeq	lr
    65a8:	2005      	movs	r0, #5
    65aa:	7912      	ldrb	r2, [r2, #4]
    65ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    65b0:	f012 0f01 	tst.w	r2, #1
    65b4:	d037      	beq.n	6626 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x142>
    65b6:	2900      	cmp	r1, #0
    65b8:	bf14      	ite	ne
    65ba:	200b      	movne	r0, #11
    65bc:	4770      	bxeq	lr
    65be:	bf00      	nop
    65c0:	f012 0f02 	tst.w	r2, #2
    65c4:	d032      	beq.n	662c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x148>
    65c6:	2901      	cmp	r1, #1
    65c8:	bf14      	ite	ne
    65ca:	1d80      	addne	r0, r0, #6
    65cc:	4770      	bxeq	lr
    65ce:	bf00      	nop
    65d0:	f012 0f04 	tst.w	r2, #4
    65d4:	d02d      	beq.n	6632 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x14e>
    65d6:	2902      	cmp	r1, #2
    65d8:	bf14      	ite	ne
    65da:	1c40      	addne	r0, r0, #1
    65dc:	4770      	bxeq	lr
    65de:	bf00      	nop
    65e0:	f012 0f08 	tst.w	r2, #8
    65e4:	d028      	beq.n	6638 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x154>
    65e6:	2903      	cmp	r1, #3
    65e8:	bf14      	ite	ne
    65ea:	1c80      	addne	r0, r0, #2
    65ec:	4770      	bxeq	lr
    65ee:	bf00      	nop
    65f0:	f012 0f10 	tst.w	r2, #16
    65f4:	d023      	beq.n	663e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x15a>
    65f6:	2904      	cmp	r1, #4
    65f8:	bf14      	ite	ne
    65fa:	1cc0      	addne	r0, r0, #3
    65fc:	4770      	bxeq	lr
    65fe:	bf00      	nop
    6600:	f012 0f20 	tst.w	r2, #32
    6604:	d01e      	beq.n	6644 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x160>
    6606:	2905      	cmp	r1, #5
    6608:	bf1a      	itte	ne
    660a:	3012      	addne	r0, #18
    660c:	b2c0      	uxtbne	r0, r0
    660e:	4770      	bxeq	lr
    6610:	f012 0f40 	tst.w	r2, #64	; 0x40
    6614:	d019      	beq.n	664a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x166>
    6616:	2906      	cmp	r1, #6
    6618:	bf1a      	itte	ne
    661a:	1c40      	addne	r0, r0, #1
    661c:	b2c0      	uxtbne	r0, r0
    661e:	4770      	bxeq	lr
    6620:	2907      	cmp	r1, #7
    6622:	d118      	bne.n	6656 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6624:	e014      	b.n	6650 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x16c>
    6626:	2900      	cmp	r1, #0
    6628:	d1ca      	bne.n	65c0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xdc>
    662a:	e014      	b.n	6656 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    662c:	2901      	cmp	r1, #1
    662e:	d1cf      	bne.n	65d0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xec>
    6630:	e011      	b.n	6656 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6632:	2902      	cmp	r1, #2
    6634:	d1d4      	bne.n	65e0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xfc>
    6636:	e00e      	b.n	6656 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6638:	2903      	cmp	r1, #3
    663a:	d1d9      	bne.n	65f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10c>
    663c:	e00b      	b.n	6656 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    663e:	2904      	cmp	r1, #4
    6640:	d1de      	bne.n	6600 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x11c>
    6642:	e008      	b.n	6656 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6644:	2905      	cmp	r1, #5
    6646:	d1e3      	bne.n	6610 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x12c>
    6648:	e005      	b.n	6656 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    664a:	2906      	cmp	r1, #6
    664c:	d1e8      	bne.n	6620 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x13c>
    664e:	e002      	b.n	6656 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6650:	4283      	cmp	r3, r0
    6652:	bf88      	it	hi
    6654:	4770      	bxhi	lr
    6656:	2000      	movs	r0, #0
    6658:	4770      	bx	lr
	...

0000665c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    665c:	7841      	ldrb	r1, [r0, #1]
    665e:	b141      	cbz	r1, 6672 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6660:	78c0      	ldrb	r0, [r0, #3]
    6662:	2819      	cmp	r0, #25
    6664:	d203      	bcs.n	666e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6666:	4a04      	ldr	r2, [pc, #16]	; (6678 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6668:	5c10      	ldrb	r0, [r2, r0]
    666a:	4288      	cmp	r0, r1
    666c:	d101      	bne.n	6672 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    666e:	2001      	movs	r0, #1
    6670:	4770      	bx	lr
    6672:	2000      	movs	r0, #0
    6674:	4770      	bx	lr
    6676:	0000      	.short	0x0000
    6678:	00011f12 	.word	0x00011f12

0000667c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    667c:	a20c      	add	r2, pc, #48	; (adr r2, 66b0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x34>)
    667e:	b082      	sub	sp, #8
    6680:	e9d2 1200 	ldrd	r1, r2, [r2]
    6684:	e9cd 1200 	strd	r1, r2, [sp]
    6688:	7901      	ldrb	r1, [r0, #4]
    668a:	7940      	ldrb	r0, [r0, #5]
    668c:	f001 0207 	and.w	r2, r1, #7
    6690:	4669      	mov	r1, sp
    6692:	f81d 2002 	ldrb.w	r2, [sp, r2]
    6696:	2a01      	cmp	r2, #1
    6698:	d807      	bhi.n	66aa <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2e>
    669a:	f000 0007 	and.w	r0, r0, #7
    669e:	5c08      	ldrb	r0, [r1, r0]
    66a0:	2801      	cmp	r0, #1
    66a2:	bf9e      	ittt	ls
    66a4:	2001      	movls	r0, #1
    66a6:	b002      	addls	sp, #8
    66a8:	4770      	bxls	lr
    66aa:	2000      	movs	r0, #0
    66ac:	b002      	add	sp, #8
    66ae:	4770      	bx	lr
    66b0:	02010100 	.word	0x02010100
    66b4:	03020201 	.word	0x03020201

000066b8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    66b8:	b510      	push	{r4, lr}
    66ba:	2201      	movs	r2, #1
    66bc:	70c1      	strb	r1, [r0, #3]
    66be:	2919      	cmp	r1, #25
    66c0:	bf3c      	itt	cc
    66c2:	4a06      	ldrcc	r2, [pc, #24]	; (66dc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    66c4:	5c52      	ldrbcc	r2, [r2, r1]
    66c6:	d306      	bcc.n	66d6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    66c8:	29ff      	cmp	r1, #255	; 0xff
    66ca:	d004      	beq.n	66d6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    66cc:	f240 31b3 	movw	r1, #947	; 0x3b3
    66d0:	202a      	movs	r0, #42	; 0x2a
    66d2:	f7fd fa55 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66d6:	7042      	strb	r2, [r0, #1]
    66d8:	bd10      	pop	{r4, pc}
    66da:	0000      	.short	0x0000
    66dc:	00011f12 	.word	0x00011f12

000066e0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    66e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66e4:	b084      	sub	sp, #16
    66e6:	9804      	ldr	r0, [sp, #16]
    66e8:	b160      	cbz	r0, 6704 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x24>
    66ea:	f8df 8124 	ldr.w	r8, [pc, #292]	; 6810 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x130>
    66ee:	2102      	movs	r1, #2
    66f0:	f508 7014 	add.w	r0, r8, #592	; 0x250
    66f4:	f009 ffe8 	bl	106c8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    66f8:	b148      	cbz	r0, 670e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2e>
    66fa:	f240 31c3 	movw	r1, #963	; 0x3c3
    66fe:	202b      	movs	r0, #43	; 0x2b
    6700:	f7fd fa3e 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6704:	f240 31c2 	movw	r1, #962	; 0x3c2
    6708:	202b      	movs	r0, #43	; 0x2b
    670a:	f7fd fa39 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    670e:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6712:	9000      	str	r0, [sp, #0]
    6714:	2000      	movs	r0, #0
    6716:	f7fd fbe7 	bl	3ee8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    671a:	4604      	mov	r4, r0
    671c:	2001      	movs	r0, #1
    671e:	f7fd fbe3 	bl	3ee8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6722:	4420      	add	r0, r4
    6724:	f000 0bff 	and.w	fp, r0, #255	; 0xff
    6728:	f10b 0001 	add.w	r0, fp, #1
    672c:	f000 0aff 	and.w	sl, r0, #255	; 0xff
    6730:	f04f 0900 	mov.w	r9, #0
    6734:	4837      	ldr	r0, [pc, #220]	; (6814 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x134>)
    6736:	6801      	ldr	r1, [r0, #0]
    6738:	b119      	cbz	r1, 6742 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x62>
    673a:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    673e:	4550      	cmp	r0, sl
    6740:	d006      	beq.n	6750 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x70>
    6742:	4835      	ldr	r0, [pc, #212]	; (6818 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x138>)
    6744:	6801      	ldr	r1, [r0, #0]
    6746:	b131      	cbz	r1, 6756 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    6748:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    674c:	4558      	cmp	r0, fp
    674e:	d102      	bne.n	6756 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    6750:	9804      	ldr	r0, [sp, #16]
    6752:	4788      	blx	r1
    6754:	e006      	b.n	6764 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x84>
    6756:	4831      	ldr	r0, [pc, #196]	; (681c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x13c>)
    6758:	6802      	ldr	r2, [r0, #0]
    675a:	b12a      	cbz	r2, 6768 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    675c:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6760:	9904      	ldr	r1, [sp, #16]
    6762:	4790      	blx	r2
    6764:	2800      	cmp	r0, #0
    6766:	d13b      	bne.n	67e0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    6768:	f508 7414 	add.w	r4, r8, #592	; 0x250
    676c:	2502      	movs	r5, #2
    676e:	2000      	movs	r0, #0
    6770:	f7fd fbba 	bl	3ee8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6774:	4606      	mov	r6, r0
    6776:	2001      	movs	r0, #1
    6778:	f7fd fbb6 	bl	3ee8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    677c:	4430      	add	r0, r6
    677e:	b2c7      	uxtb	r7, r0
    6780:	2600      	movs	r6, #0
    6782:	f117 0f02 	cmn.w	r7, #2
    6786:	bf18      	it	ne
    6788:	443d      	addne	r5, r7
    678a:	d014      	beq.n	67b6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xd6>
    678c:	8820      	ldrh	r0, [r4, #0]
    678e:	1c40      	adds	r0, r0, #1
    6790:	b280      	uxth	r0, r0
    6792:	8020      	strh	r0, [r4, #0]
    6794:	42a8      	cmp	r0, r5
    6796:	bf28      	it	cs
    6798:	f8a4 9000 	strhcs.w	r9, [r4]
    679c:	8820      	ldrh	r0, [r4, #0]
    679e:	42b8      	cmp	r0, r7
    67a0:	d301      	bcc.n	67a6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xc6>
    67a2:	42a8      	cmp	r0, r5
    67a4:	d30b      	bcc.n	67be <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    67a6:	a902      	add	r1, sp, #8
    67a8:	f009 fb10 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    67ac:	b138      	cbz	r0, 67be <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    67ae:	1c70      	adds	r0, r6, #1
    67b0:	b2c6      	uxtb	r6, r0
    67b2:	42b5      	cmp	r5, r6
    67b4:	d8ea      	bhi.n	678c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xac>
    67b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    67ba:	8020      	strh	r0, [r4, #0]
    67bc:	e004      	b.n	67c8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xe8>
    67be:	f8b8 1250 	ldrh.w	r1, [r8, #592]	; 0x250
    67c2:	9800      	ldr	r0, [sp, #0]
    67c4:	4281      	cmp	r1, r0
    67c6:	d1b5      	bne.n	6734 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x54>
    67c8:	4815      	ldr	r0, [pc, #84]	; (6820 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x140>)
    67ca:	6801      	ldr	r1, [r0, #0]
    67cc:	b111      	cbz	r1, 67d4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xf4>
    67ce:	9804      	ldr	r0, [sp, #16]
    67d0:	4788      	blx	r1
    67d2:	b928      	cbnz	r0, 67e0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    67d4:	4813      	ldr	r0, [pc, #76]	; (6824 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x144>)
    67d6:	6801      	ldr	r1, [r0, #0]
    67d8:	b131      	cbz	r1, 67e8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    67da:	9804      	ldr	r0, [sp, #16]
    67dc:	4788      	blx	r1
    67de:	b118      	cbz	r0, 67e8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    67e0:	b005      	add	sp, #20
    67e2:	2001      	movs	r0, #1
    67e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67e8:	f898 023f 	ldrb.w	r0, [r8, #575]	; 0x23f
    67ec:	2800      	cmp	r0, #0
    67ee:	bf04      	itt	eq
    67f0:	b005      	addeq	sp, #20
    67f2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67f6:	9804      	ldr	r0, [sp, #16]
    67f8:	2121      	movs	r1, #33	; 0x21
    67fa:	f880 9001 	strb.w	r9, [r0, #1]
    67fe:	9804      	ldr	r0, [sp, #16]
    6800:	7001      	strb	r1, [r0, #0]
    6802:	f888 923f 	strb.w	r9, [r8, #575]	; 0x23f
    6806:	b005      	add	sp, #20
    6808:	2001      	movs	r0, #1
    680a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    680e:	0000      	.short	0x0000
    6810:	200010d4 	.word	0x200010d4
    6814:	20000354 	.word	0x20000354
    6818:	20000364 	.word	0x20000364
    681c:	2000035c 	.word	0x2000035c
    6820:	2000036c 	.word	0x2000036c
    6824:	20000358 	.word	0x20000358

00006828 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    6828:	b510      	push	{r4, lr}
    682a:	4604      	mov	r4, r0
    682c:	4815      	ldr	r0, [pc, #84]	; (6884 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x5c>)
    682e:	6801      	ldr	r1, [r0, #0]
    6830:	b329      	cbz	r1, 687e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6832:	4620      	mov	r0, r4
    6834:	4788      	blx	r1
    6836:	b310      	cbz	r0, 687e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6838:	7820      	ldrb	r0, [r4, #0]
    683a:	2814      	cmp	r0, #20
    683c:	d002      	beq.n	6844 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x1c>
    683e:	2817      	cmp	r0, #23
    6840:	d003      	beq.n	684a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x22>
    6842:	e01a      	b.n	687a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6844:	7920      	ldrb	r0, [r4, #4]
    6846:	b928      	cbnz	r0, 6854 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x2c>
    6848:	e017      	b.n	687a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    684a:	7920      	ldrb	r0, [r4, #4]
    684c:	b1a8      	cbz	r0, 687a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    684e:	f000 fe07 	bl	7460 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6852:	b990      	cbnz	r0, 687a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6854:	88e4      	ldrh	r4, [r4, #6]
    6856:	2101      	movs	r1, #1
    6858:	4620      	mov	r0, r4
    685a:	f009 f9ab 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    685e:	b160      	cbz	r0, 687a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6860:	8800      	ldrh	r0, [r0, #0]
    6862:	f7fe f813 	bl	488c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6866:	2101      	movs	r1, #1
    6868:	4620      	mov	r0, r4
    686a:	f7fd fbb5 	bl	3fd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    686e:	b120      	cbz	r0, 687a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6870:	f240 1115 	movw	r1, #277	; 0x115
    6874:	202b      	movs	r0, #43	; 0x2b
    6876:	f7fd f983 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    687a:	2001      	movs	r0, #1
    687c:	bd10      	pop	{r4, pc}
    687e:	2000      	movs	r0, #0
    6880:	bd10      	pop	{r4, pc}
    6882:	0000      	.short	0x0000
    6884:	20000350 	.word	0x20000350

00006888 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    688c:	b083      	sub	sp, #12
    688e:	460d      	mov	r5, r1
    6890:	4606      	mov	r6, r0
    6892:	4669      	mov	r1, sp
    6894:	f009 fa9a 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6898:	2800      	cmp	r0, #0
    689a:	d17d      	bne.n	6998 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    689c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 6a28 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1a0>
    68a0:	f8df a188 	ldr.w	sl, [pc, #392]	; 6a2c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1a4>
    68a4:	f05f 0700 	movs.w	r7, #0
    68a8:	f89d 0000 	ldrb.w	r0, [sp]
    68ac:	b180      	cbz	r0, 68d0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    68ae:	f000 fba9 	bl	7004 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    68b2:	42b0      	cmp	r0, r6
    68b4:	d070      	beq.n	6998 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    68b6:	f8da 2000 	ldr.w	r2, [sl]
    68ba:	b31a      	cbz	r2, 6904 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    68bc:	4629      	mov	r1, r5
    68be:	4630      	mov	r0, r6
    68c0:	4790      	blx	r2
    68c2:	b1f8      	cbz	r0, 6904 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    68c4:	4628      	mov	r0, r5
    68c6:	f000 f9e9 	bl	6c9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    68ca:	2800      	cmp	r0, #0
    68cc:	d1ec      	bne.n	68a8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    68ce:	e0a2      	b.n	6a16 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    68d0:	f005 f9d2 	bl	bc78 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    68d4:	42b0      	cmp	r0, r6
    68d6:	d05f      	beq.n	6998 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    68d8:	f8d9 2000 	ldr.w	r2, [r9]
    68dc:	b14a      	cbz	r2, 68f2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    68de:	4629      	mov	r1, r5
    68e0:	4630      	mov	r0, r6
    68e2:	4790      	blx	r2
    68e4:	b128      	cbz	r0, 68f2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    68e6:	4628      	mov	r0, r5
    68e8:	f000 f9d8 	bl	6c9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    68ec:	2800      	cmp	r0, #0
    68ee:	d1db      	bne.n	68a8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    68f0:	e091      	b.n	6a16 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    68f2:	9801      	ldr	r0, [sp, #4]
    68f4:	f100 0478 	add.w	r4, r0, #120	; 0x78
    68f8:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    68fc:	b968      	cbnz	r0, 691a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    68fe:	7f20      	ldrb	r0, [r4, #28]
    6900:	b940      	cbnz	r0, 6914 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x8c>
    6902:	e00a      	b.n	691a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6904:	9801      	ldr	r0, [sp, #4]
    6906:	f100 0478 	add.w	r4, r0, #120	; 0x78
    690a:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
    690e:	b920      	cbnz	r0, 691a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6910:	7f20      	ldrb	r0, [r4, #28]
    6912:	b110      	cbz	r0, 691a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6914:	f04f 0b01 	mov.w	fp, #1
    6918:	e001      	b.n	691e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x96>
    691a:	f04f 0b00 	mov.w	fp, #0
    691e:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
    6922:	2800      	cmp	r0, #0
    6924:	bf1c      	itt	ne
    6926:	f894 0040 	ldrbne.w	r0, [r4, #64]	; 0x40
    692a:	f010 0f02 	tstne.w	r0, #2
    692e:	d017      	beq.n	6960 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd8>
    6930:	706f      	strb	r7, [r5, #1]
    6932:	f04f 0001 	mov.w	r0, #1
    6936:	7028      	strb	r0, [r5, #0]
    6938:	712f      	strb	r7, [r5, #4]
    693a:	f8a5 6005 	strh.w	r6, [r5, #5]
    693e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    6942:	71e8      	strb	r0, [r5, #7]
    6944:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    6948:	8128      	strh	r0, [r5, #8]
    694a:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    694e:	8168      	strh	r0, [r5, #10]
    6950:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
    6954:	4628      	mov	r0, r5
    6956:	f000 f9a1 	bl	6c9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    695a:	2800      	cmp	r0, #0
    695c:	d1a4      	bne.n	68a8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    695e:	e05a      	b.n	6a16 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    6960:	4630      	mov	r0, r6
    6962:	f7fd fcdb 	bl	431c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6966:	ea5f 0800 	movs.w	r8, r0
    696a:	d01b      	beq.n	69a4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x11c>
    696c:	f008 febb 	bl	f6e6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6970:	b1e8      	cbz	r0, 69ae <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x126>
    6972:	706f      	strb	r7, [r5, #1]
    6974:	210f      	movs	r1, #15
    6976:	7029      	strb	r1, [r5, #0]
    6978:	80ee      	strh	r6, [r5, #6]
    697a:	8128      	strh	r0, [r5, #8]
    697c:	2101      	movs	r1, #1
    697e:	1e40      	subs	r0, r0, #1
    6980:	7129      	strb	r1, [r5, #4]
    6982:	b284      	uxth	r4, r0
    6984:	2200      	movs	r2, #0
    6986:	4611      	mov	r1, r2
    6988:	4640      	mov	r0, r8
    698a:	f009 f81a 	bl	f9c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    698e:	1e61      	subs	r1, r4, #1
    6990:	b28c      	uxth	r4, r1
    6992:	d2f7      	bcs.n	6984 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xfc>
    6994:	4628      	mov	r0, r5
    6996:	e000      	b.n	699a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6998:	e041      	b.n	6a1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    699a:	f000 f97f 	bl	6c9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    699e:	2800      	cmp	r0, #0
    69a0:	d182      	bne.n	68a8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    69a2:	e038      	b.n	6a16 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    69a4:	f44f 710f 	mov.w	r1, #572	; 0x23c
    69a8:	202b      	movs	r0, #43	; 0x2b
    69aa:	f7fd f8e9 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69ae:	4630      	mov	r0, r6
    69b0:	f7fd fc9e 	bl	42f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    69b4:	b148      	cbz	r0, 69ca <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x142>
    69b6:	f1bb 0f00 	cmp.w	fp, #0
    69ba:	d030      	beq.n	6a1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    69bc:	f008 fd75 	bl	f4aa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    69c0:	b368      	cbz	r0, 6a1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    69c2:	f89d 0000 	ldrb.w	r0, [sp]
    69c6:	b128      	cbz	r0, 69d4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x14c>
    69c8:	e00b      	b.n	69e2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x15a>
    69ca:	f240 215a 	movw	r1, #602	; 0x25a
    69ce:	202b      	movs	r0, #43	; 0x2b
    69d0:	f7fd f8d6 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69d4:	9801      	ldr	r0, [sp, #4]
    69d6:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    69da:	8841      	ldrh	r1, [r0, #2]
    69dc:	42b1      	cmp	r1, r6
    69de:	bf08      	it	eq
    69e0:	7007      	strbeq	r7, [r0, #0]
    69e2:	4630      	mov	r0, r6
    69e4:	f7fd ff52 	bl	488c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    69e8:	2100      	movs	r1, #0
    69ea:	4630      	mov	r0, r6
    69ec:	f7fd faf4 	bl	3fd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    69f0:	2101      	movs	r1, #1
    69f2:	4630      	mov	r0, r6
    69f4:	f7fd faf0 	bl	3fd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    69f8:	706f      	strb	r7, [r5, #1]
    69fa:	200c      	movs	r0, #12
    69fc:	7028      	strb	r0, [r5, #0]
    69fe:	712f      	strb	r7, [r5, #4]
    6a00:	f8a5 6005 	strh.w	r6, [r5, #5]
    6a04:	7f60      	ldrb	r0, [r4, #29]
    6a06:	71e8      	strb	r0, [r5, #7]
    6a08:	7727      	strb	r7, [r4, #28]
    6a0a:	4628      	mov	r0, r5
    6a0c:	f000 f946 	bl	6c9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6a10:	2800      	cmp	r0, #0
    6a12:	f47f af49 	bne.w	68a8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6a16:	b003      	add	sp, #12
    6a18:	2001      	movs	r0, #1
    6a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a1e:	b003      	add	sp, #12
    6a20:	2000      	movs	r0, #0
    6a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a26:	0000      	.short	0x0000
    6a28:	20000360 	.word	0x20000360
    6a2c:	20000368 	.word	0x20000368

00006a30 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a34:	f8df 815c 	ldr.w	r8, [pc, #348]	; 6b94 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x164>
    6a38:	4681      	mov	r9, r0
    6a3a:	b085      	sub	sp, #20
    6a3c:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    6a40:	468a      	mov	sl, r1
    6a42:	b130      	cbz	r0, 6a52 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6a44:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    6a48:	2800      	cmp	r0, #0
    6a4a:	bf04      	itt	eq
    6a4c:	b005      	addeq	sp, #20
    6a4e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a52:	2100      	movs	r1, #0
    6a54:	f208 204e 	addw	r0, r8, #590	; 0x24e
    6a58:	f009 fe36 	bl	106c8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6a5c:	2800      	cmp	r0, #0
    6a5e:	d17a      	bne.n	6b56 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x126>
    6a60:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    6a64:	f04f 0b00 	mov.w	fp, #0
    6a68:	f8cd 0000 	str.w	r0, [sp]
    6a6c:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    6a70:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    6a74:	39ff      	subs	r1, #255	; 0xff
    6a76:	d057      	beq.n	6b28 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    6a78:	f8a9 0000 	strh.w	r0, [r9]
    6a7c:	f889 b005 	strb.w	fp, [r9, #5]
    6a80:	f7fd fc36 	bl	42f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6a84:	4605      	mov	r5, r0
    6a86:	f008 fe5c 	bl	f742 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    6a8a:	0004      	movs	r4, r0
    6a8c:	d04c      	beq.n	6b28 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    6a8e:	4601      	mov	r1, r0
    6a90:	aa01      	add	r2, sp, #4
    6a92:	4628      	mov	r0, r5
    6a94:	f008 fe7a 	bl	f78c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6a98:	f8a9 0002 	strh.w	r0, [r9, #2]
    6a9c:	b128      	cbz	r0, 6aaa <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x7a>
    6a9e:	28fb      	cmp	r0, #251	; 0xfb
    6aa0:	d907      	bls.n	6ab2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x82>
    6aa2:	21c1      	movs	r1, #193	; 0xc1
    6aa4:	202b      	movs	r0, #43	; 0x2b
    6aa6:	f7fd f86b 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6aaa:	21c0      	movs	r1, #192	; 0xc0
    6aac:	202b      	movs	r0, #43	; 0x2b
    6aae:	f7fd f867 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ab2:	9801      	ldr	r0, [sp, #4]
    6ab4:	f009 fc8f 	bl	103d6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    6ab8:	2101      	movs	r1, #1
    6aba:	2801      	cmp	r0, #1
    6abc:	bf08      	it	eq
    6abe:	f889 1004 	strbeq.w	r1, [r9, #4]
    6ac2:	d008      	beq.n	6ad6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    6ac4:	2802      	cmp	r0, #2
    6ac6:	bf08      	it	eq
    6ac8:	f889 0004 	strbeq.w	r0, [r9, #4]
    6acc:	d003      	beq.n	6ad6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    6ace:	21d0      	movs	r1, #208	; 0xd0
    6ad0:	202b      	movs	r0, #43	; 0x2b
    6ad2:	f7fd f855 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ad6:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    6ada:	2003      	movs	r0, #3
    6adc:	9000      	str	r0, [sp, #0]
    6ade:	4652      	mov	r2, sl
    6ae0:	4621      	mov	r1, r4
    6ae2:	4628      	mov	r0, r5
    6ae4:	f008 fc77 	bl	f3d6 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    6ae8:	4628      	mov	r0, r5
    6aea:	f8c9 a008 	str.w	sl, [r9, #8]
    6aee:	f008 fda4 	bl	f63a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    6af2:	b188      	cbz	r0, 6b18 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe8>
    6af4:	2200      	movs	r2, #0
    6af6:	4611      	mov	r1, r2
    6af8:	4628      	mov	r0, r5
    6afa:	f008 ff62 	bl	f9c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6afe:	b178      	cbz	r0, 6b20 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6b00:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    6b04:	b120      	cbz	r0, 6b10 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    6b06:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    6b0a:	1e40      	subs	r0, r0, #1
    6b0c:	f8a8 025a 	strh.w	r0, [r8, #602]	; 0x25a
    6b10:	b005      	add	sp, #20
    6b12:	2001      	movs	r0, #1
    6b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b18:	21e0      	movs	r1, #224	; 0xe0
    6b1a:	202b      	movs	r0, #43	; 0x2b
    6b1c:	f7fd f830 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b20:	21e5      	movs	r1, #229	; 0xe5
    6b22:	202b      	movs	r0, #43	; 0x2b
    6b24:	f7fd f82c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b28:	2600      	movs	r6, #0
    6b2a:	f208 244e 	addw	r4, r8, #590	; 0x24e
    6b2e:	4630      	mov	r0, r6
    6b30:	f7fd f9da 	bl	3ee8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6b34:	4605      	mov	r5, r0
    6b36:	2001      	movs	r0, #1
    6b38:	f7fd f9d6 	bl	3ee8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6b3c:	4428      	add	r0, r5
    6b3e:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    6b42:	4637      	mov	r7, r6
    6b44:	bf18      	it	ne
    6b46:	442e      	addne	r6, r5
    6b48:	d016      	beq.n	6b78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x148>
    6b4a:	8820      	ldrh	r0, [r4, #0]
    6b4c:	1c40      	adds	r0, r0, #1
    6b4e:	b280      	uxth	r0, r0
    6b50:	8020      	strh	r0, [r4, #0]
    6b52:	42b0      	cmp	r0, r6
    6b54:	e000      	b.n	6b58 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x128>
    6b56:	e019      	b.n	6b8c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    6b58:	bf28      	it	cs
    6b5a:	f8a4 b000 	strhcs.w	fp, [r4]
    6b5e:	8820      	ldrh	r0, [r4, #0]
    6b60:	42a8      	cmp	r0, r5
    6b62:	d301      	bcc.n	6b68 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x138>
    6b64:	42b0      	cmp	r0, r6
    6b66:	d30b      	bcc.n	6b80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    6b68:	a902      	add	r1, sp, #8
    6b6a:	f009 f92f 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6b6e:	b138      	cbz	r0, 6b80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    6b70:	1c78      	adds	r0, r7, #1
    6b72:	b2c7      	uxtb	r7, r0
    6b74:	42be      	cmp	r6, r7
    6b76:	d8e8      	bhi.n	6b4a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x11a>
    6b78:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6b7c:	8020      	strh	r0, [r4, #0]
    6b7e:	e005      	b.n	6b8c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    6b80:	f8b8 124e 	ldrh.w	r1, [r8, #590]	; 0x24e
    6b84:	9800      	ldr	r0, [sp, #0]
    6b86:	4281      	cmp	r1, r0
    6b88:	f47f af70 	bne.w	6a6c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3c>
    6b8c:	b005      	add	sp, #20
    6b8e:	2000      	movs	r0, #0
    6b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b94:	200010d4 	.word	0x200010d4

00006b98 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    6b98:	b510      	push	{r4, lr}
    6b9a:	7901      	ldrb	r1, [r0, #4]
    6b9c:	b161      	cbz	r1, 6bb8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6b9e:	2901      	cmp	r1, #1
    6ba0:	bf1c      	itt	ne
    6ba2:	2000      	movne	r0, #0
    6ba4:	bd10      	popne	{r4, pc}
    6ba6:	8842      	ldrh	r2, [r0, #2]
    6ba8:	6883      	ldr	r3, [r0, #8]
    6baa:	8800      	ldrh	r0, [r0, #0]
    6bac:	f05f 0101 	movs.w	r1, #1
    6bb0:	f000 f80e 	bl	6bd0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x38>
    6bb4:	b940      	cbnz	r0, 6bc8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>
    6bb6:	e004      	b.n	6bc2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    6bb8:	8842      	ldrh	r2, [r0, #2]
    6bba:	6883      	ldr	r3, [r0, #8]
    6bbc:	8800      	ldrh	r0, [r0, #0]
    6bbe:	2102      	movs	r1, #2
    6bc0:	e7f6      	b.n	6bb0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6bc2:	4902      	ldr	r1, [pc, #8]	; (6bcc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>)
    6bc4:	2001      	movs	r0, #1
    6bc6:	7008      	strb	r0, [r1, #0]
    6bc8:	2001      	movs	r0, #1
    6bca:	bd10      	pop	{r4, pc}
    6bcc:	200010d4 	.word	0x200010d4
    6bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bd4:	b084      	sub	sp, #16
    6bd6:	4689      	mov	r9, r1
    6bd8:	469a      	mov	sl, r3
    6bda:	4615      	mov	r5, r2
    6bdc:	4606      	mov	r6, r0
    6bde:	a902      	add	r1, sp, #8
    6be0:	f009 f8f4 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6be4:	2800      	cmp	r0, #0
    6be6:	d14e      	bne.n	6c86 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    6be8:	9803      	ldr	r0, [sp, #12]
    6bea:	2d00      	cmp	r5, #0
    6bec:	f100 0478 	add.w	r4, r0, #120	; 0x78
    6bf0:	bf04      	itt	eq
    6bf2:	2001      	moveq	r0, #1
    6bf4:	74e0      	strbeq	r0, [r4, #19]
    6bf6:	d046      	beq.n	6c86 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    6bf8:	4630      	mov	r0, r6
    6bfa:	f7fd fb8f 	bl	431c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6bfe:	ea5f 0800 	movs.w	r8, r0
    6c02:	d00d      	beq.n	6c20 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x88>
    6c04:	4629      	mov	r1, r5
    6c06:	f008 fdd1 	bl	f7ac <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6c0a:	0007      	movs	r7, r0
    6c0c:	d004      	beq.n	6c18 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    6c0e:	4822      	ldr	r0, [pc, #136]	; (6c98 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x100>)
    6c10:	f8b0 0242 	ldrh.w	r0, [r0, #578]	; 0x242
    6c14:	4285      	cmp	r5, r0
    6c16:	d907      	bls.n	6c28 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x90>
    6c18:	b004      	add	sp, #16
    6c1a:	2000      	movs	r0, #0
    6c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c20:	2181      	movs	r1, #129	; 0x81
    6c22:	202b      	movs	r0, #43	; 0x2b
    6c24:	f7fc ffac 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c28:	aa01      	add	r2, sp, #4
    6c2a:	4639      	mov	r1, r7
    6c2c:	4640      	mov	r0, r8
    6c2e:	f008 fdad 	bl	f78c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6c32:	9801      	ldr	r0, [sp, #4]
    6c34:	2600      	movs	r6, #0
    6c36:	8006      	strh	r6, [r0, #0]
    6c38:	7086      	strb	r6, [r0, #2]
    6c3a:	7ce1      	ldrb	r1, [r4, #19]
    6c3c:	2900      	cmp	r1, #0
    6c3e:	bf18      	it	ne
    6c40:	f04f 0902 	movne.w	r9, #2
    6c44:	4649      	mov	r1, r9
    6c46:	f009 fc33 	bl	104b0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6c4a:	2003      	movs	r0, #3
    6c4c:	9000      	str	r0, [sp, #0]
    6c4e:	462b      	mov	r3, r5
    6c50:	4652      	mov	r2, sl
    6c52:	4639      	mov	r1, r7
    6c54:	4640      	mov	r0, r8
    6c56:	f008 fbf3 	bl	f440 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6c5a:	4629      	mov	r1, r5
    6c5c:	4640      	mov	r0, r8
    6c5e:	f008 fd15 	bl	f68c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6c62:	b1a0      	cbz	r0, 6c8e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf6>
    6c64:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6c68:	b160      	cbz	r0, 6c84 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    6c6a:	9803      	ldr	r0, [sp, #12]
    6c6c:	f890 010d 	ldrb.w	r0, [r0, #269]	; 0x10d
    6c70:	b128      	cbz	r0, 6c7e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe6>
    6c72:	9803      	ldr	r0, [sp, #12]
    6c74:	f880 610d 	strb.w	r6, [r0, #269]	; 0x10d
    6c78:	9803      	ldr	r0, [sp, #12]
    6c7a:	f009 ff96 	bl	10baa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    6c7e:	9803      	ldr	r0, [sp, #12]
    6c80:	f8a0 6102 	strh.w	r6, [r0, #258]	; 0x102
    6c84:	74e6      	strb	r6, [r4, #19]
    6c86:	b004      	add	sp, #16
    6c88:	2001      	movs	r0, #1
    6c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c8e:	2197      	movs	r1, #151	; 0x97
    6c90:	202b      	movs	r0, #43	; 0x2b
    6c92:	f7fc ff75 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c96:	0000      	.short	0x0000
    6c98:	200010d4 	.word	0x200010d4
    6c9c:	b530      	push	{r4, r5, lr}
    6c9e:	4604      	mov	r4, r0
    6ca0:	4862      	ldr	r0, [pc, #392]	; (6e2c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x294>)
    6ca2:	b087      	sub	sp, #28
    6ca4:	f890 1256 	ldrb.w	r1, [r0, #598]	; 0x256
    6ca8:	7820      	ldrb	r0, [r4, #0]
    6caa:	f011 0f01 	tst.w	r1, #1
    6cae:	bf08      	it	eq
    6cb0:	281d      	cmpeq	r0, #29
    6cb2:	d004      	beq.n	6cbe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x126>
    6cb4:	281c      	cmp	r0, #28
    6cb6:	d024      	beq.n	6d02 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x16a>
    6cb8:	2815      	cmp	r0, #21
    6cba:	d07c      	beq.n	6db6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21e>
    6cbc:	e0b2      	b.n	6e24 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    6cbe:	88a0      	ldrh	r0, [r4, #4]
    6cc0:	f8ad 0000 	strh.w	r0, [sp]
    6cc4:	a902      	add	r1, sp, #8
    6cc6:	f009 f881 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6cca:	b118      	cbz	r0, 6cd4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x13c>
    6ccc:	2151      	movs	r1, #81	; 0x51
    6cce:	202b      	movs	r0, #43	; 0x2b
    6cd0:	f7fc ff56 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd4:	9803      	ldr	r0, [sp, #12]
    6cd6:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    6cda:	f88d 1002 	strb.w	r1, [sp, #2]
    6cde:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    6ce2:	f88d 0003 	strb.w	r0, [sp, #3]
    6ce6:	2000      	movs	r0, #0
    6ce8:	f8ad 0004 	strh.w	r0, [sp, #4]
    6cec:	2102      	movs	r1, #2
    6cee:	4668      	mov	r0, sp
    6cf0:	f00a fcb2 	bl	11658 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6cf4:	2800      	cmp	r0, #0
    6cf6:	d04c      	beq.n	6d92 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1fa>
    6cf8:	f240 112b 	movw	r1, #299	; 0x12b
    6cfc:	202b      	movs	r0, #43	; 0x2b
    6cfe:	f7fc ff3f 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d02:	f011 0f02 	tst.w	r1, #2
    6d06:	d011      	beq.n	6d2c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>
    6d08:	88a5      	ldrh	r5, [r4, #4]
    6d0a:	2101      	movs	r1, #1
    6d0c:	4628      	mov	r0, r5
    6d0e:	f008 ff51 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6d12:	2800      	cmp	r0, #0
    6d14:	bf1c      	itt	ne
    6d16:	f890 006b 	ldrbne.w	r0, [r0, #107]	; 0x6b
    6d1a:	2800      	cmpne	r0, #0
    6d1c:	d03a      	beq.n	6d94 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1fc>
    6d1e:	88a4      	ldrh	r4, [r4, #4]
    6d20:	a903      	add	r1, sp, #12
    6d22:	4620      	mov	r0, r4
    6d24:	f00a fb72 	bl	1140c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6d28:	b1e8      	cbz	r0, 6d66 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1ce>
    6d2a:	e047      	b.n	6dbc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x224>
    6d2c:	88a4      	ldrh	r4, [r4, #4]
    6d2e:	a903      	add	r1, sp, #12
    6d30:	4620      	mov	r0, r4
    6d32:	f00a fb6b 	bl	1140c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6d36:	bbe8      	cbnz	r0, 6db4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21c>
    6d38:	f8ad 4000 	strh.w	r4, [sp]
    6d3c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6d40:	f8ad 0002 	strh.w	r0, [sp, #2]
    6d44:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6d48:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d4c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6d50:	f8ad 0006 	strh.w	r0, [sp, #6]
    6d54:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6d58:	f8ad 0008 	strh.w	r0, [sp, #8]
    6d5c:	4668      	mov	r0, sp
    6d5e:	f00a fbc4 	bl	114ea <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6d62:	bb48      	cbnz	r0, 6db8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x220>
    6d64:	e04a      	b.n	6dfc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    6d66:	f8ad 4000 	strh.w	r4, [sp]
    6d6a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6d6e:	f8ad 0002 	strh.w	r0, [sp, #2]
    6d72:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6d76:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d7a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6d7e:	f8ad 0006 	strh.w	r0, [sp, #6]
    6d82:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6d86:	f8ad 0008 	strh.w	r0, [sp, #8]
    6d8a:	4668      	mov	r0, sp
    6d8c:	f00a fbad 	bl	114ea <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6d90:	b990      	cbnz	r0, 6db8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x220>
    6d92:	e033      	b.n	6dfc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    6d94:	2100      	movs	r1, #0
    6d96:	4628      	mov	r0, r5
    6d98:	f008 ff0c 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6d9c:	2800      	cmp	r0, #0
    6d9e:	bf1c      	itt	ne
    6da0:	f890 006b 	ldrbne.w	r0, [r0, #107]	; 0x6b
    6da4:	2800      	cmpne	r0, #0
    6da6:	d03d      	beq.n	6e24 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    6da8:	88a4      	ldrh	r4, [r4, #4]
    6daa:	a903      	add	r1, sp, #12
    6dac:	4620      	mov	r0, r4
    6dae:	f00a fb2d 	bl	1140c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6db2:	e002      	b.n	6dba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x222>
    6db4:	e002      	b.n	6dbc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x224>
    6db6:	e024      	b.n	6e02 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x26a>
    6db8:	e01b      	b.n	6df2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x25a>
    6dba:	b120      	cbz	r0, 6dc6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x22e>
    6dbc:	f44f 7199 	mov.w	r1, #306	; 0x132
    6dc0:	202b      	movs	r0, #43	; 0x2b
    6dc2:	f7fc fedd 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dc6:	f8ad 4000 	strh.w	r4, [sp]
    6dca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6dce:	f8ad 0002 	strh.w	r0, [sp, #2]
    6dd2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6dd6:	f8ad 0004 	strh.w	r0, [sp, #4]
    6dda:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6dde:	f8ad 0006 	strh.w	r0, [sp, #6]
    6de2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6de6:	f8ad 0008 	strh.w	r0, [sp, #8]
    6dea:	4668      	mov	r0, sp
    6dec:	f00a fb7d 	bl	114ea <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6df0:	b120      	cbz	r0, 6dfc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    6df2:	f240 113b 	movw	r1, #315	; 0x13b
    6df6:	202b      	movs	r0, #43	; 0x2b
    6df8:	f7fc fec2 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dfc:	b007      	add	sp, #28
    6dfe:	2001      	movs	r0, #1
    6e00:	bd30      	pop	{r4, r5, pc}
    6e02:	f011 0f04 	tst.w	r1, #4
    6e06:	bf04      	itt	eq
    6e08:	7ba0      	ldrbeq	r0, [r4, #14]
    6e0a:	f010 0f01 	tsteq.w	r0, #1
    6e0e:	d0f5      	beq.n	6dfc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    6e10:	88a0      	ldrh	r0, [r4, #4]
    6e12:	4669      	mov	r1, sp
    6e14:	f008 ffda 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6e18:	b920      	cbnz	r0, 6e24 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    6e1a:	9801      	ldr	r0, [sp, #4]
    6e1c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6e20:	2800      	cmp	r0, #0
    6e22:	d1eb      	bne.n	6dfc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    6e24:	b007      	add	sp, #28
    6e26:	2000      	movs	r0, #0
    6e28:	bd30      	pop	{r4, r5, pc}
    6e2a:	0000      	.short	0x0000
    6e2c:	200010d4 	.word	0x200010d4

00006e30 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    6e30:	b570      	push	{r4, r5, r6, lr}
    6e32:	4c13      	ldr	r4, [pc, #76]	; (6e80 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x50>)
    6e34:	4605      	mov	r5, r0
    6e36:	7c61      	ldrb	r1, [r4, #17]
    6e38:	2902      	cmp	r1, #2
    6e3a:	bf18      	it	ne
    6e3c:	2903      	cmpne	r1, #3
    6e3e:	d109      	bne.n	6e54 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x24>
    6e40:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    6e44:	f104 0144 	add.w	r1, r4, #68	; 0x44
    6e48:	f7fe fdaa 	bl	59a0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6e4c:	2808      	cmp	r0, #8
    6e4e:	bf1c      	itt	ne
    6e50:	2001      	movne	r0, #1
    6e52:	bd70      	popne	{r4, r5, r6, pc}
    6e54:	7c60      	ldrb	r0, [r4, #17]
    6e56:	b145      	cbz	r5, 6e6a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x3a>
    6e58:	2800      	cmp	r0, #0
    6e5a:	bf16      	itet	ne
    6e5c:	2802      	cmpne	r0, #2
    6e5e:	2000      	moveq	r0, #0
    6e60:	2001      	movne	r0, #1
    6e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e66:	f7fd be1b 	b.w	4aa0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    6e6a:	2800      	cmp	r0, #0
    6e6c:	bf1a      	itte	ne
    6e6e:	2802      	cmpne	r0, #2
    6e70:	2101      	movne	r1, #1
    6e72:	2100      	moveq	r1, #0
    6e74:	7820      	ldrb	r0, [r4, #0]
    6e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e7a:	f7fd bdc5 	b.w	4a08 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>
    6e7e:	0000      	.short	0x0000
    6e80:	20001334 	.word	0x20001334

00006e84 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e88:	4c5c      	ldr	r4, [pc, #368]	; (6ffc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>)
    6e8a:	4601      	mov	r1, r0
    6e8c:	7c60      	ldrb	r0, [r4, #17]
    6e8e:	2800      	cmp	r0, #0
    6e90:	bf16      	itet	ne
    6e92:	2802      	cmpne	r0, #2
    6e94:	2000      	moveq	r0, #0
    6e96:	2001      	movne	r0, #1
    6e98:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    6e9c:	b301      	cbz	r1, 6ee0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5c>
    6e9e:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    6ea2:	f7fd fdc3 	bl	4a2c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6ea6:	7c60      	ldrb	r0, [r4, #17]
    6ea8:	2802      	cmp	r0, #2
    6eaa:	bf16      	itet	ne
    6eac:	2803      	cmpne	r0, #3
    6eae:	2101      	moveq	r1, #1
    6eb0:	2100      	movne	r1, #0
    6eb2:	74a1      	strb	r1, [r4, #18]
    6eb4:	f04f 0008 	mov.w	r0, #8
    6eb8:	74e0      	strb	r0, [r4, #19]
    6eba:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    6ebe:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    6ec2:	f04f 0501 	mov.w	r5, #1
    6ec6:	f04f 0600 	mov.w	r6, #0
    6eca:	2801      	cmp	r0, #1
    6ecc:	bf04      	itt	eq
    6ece:	7952      	ldrbeq	r2, [r2, #5]
    6ed0:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
    6ed4:	d013      	beq.n	6efe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    6ed6:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    6eda:	2801      	cmp	r0, #1
    6edc:	d008      	beq.n	6ef0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x6c>
    6ede:	e00c      	b.n	6efa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6ee0:	7823      	ldrb	r3, [r4, #0]
    6ee2:	4601      	mov	r1, r0
    6ee4:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    6ee8:	4618      	mov	r0, r3
    6eea:	f7fd fd6f 	bl	49cc <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>
    6eee:	e7da      	b.n	6ea6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x22>
    6ef0:	7950      	ldrb	r0, [r2, #5]
    6ef2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    6ef6:	2840      	cmp	r0, #64	; 0x40
    6ef8:	d001      	beq.n	6efe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    6efa:	2000      	movs	r0, #0
    6efc:	e000      	b.n	6f00 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7c>
    6efe:	2001      	movs	r0, #1
    6f00:	7520      	strb	r0, [r4, #20]
    6f02:	2900      	cmp	r1, #0
    6f04:	bf04      	itt	eq
    6f06:	78a0      	ldrbeq	r0, [r4, #2]
    6f08:	f010 0f04 	tsteq.w	r0, #4
    6f0c:	d006      	beq.n	6f1c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x98>
    6f0e:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    6f12:	f104 0144 	add.w	r1, r4, #68	; 0x44
    6f16:	f7fe fd43 	bl	59a0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6f1a:	74e0      	strb	r0, [r4, #19]
    6f1c:	6366      	str	r6, [r4, #52]	; 0x34
    6f1e:	f007 fc1c 	bl	e75a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6f22:	63a0      	str	r0, [r4, #56]	; 0x38
    6f24:	2700      	movs	r7, #0
    6f26:	7ce0      	ldrb	r0, [r4, #19]
    6f28:	f7fe fc7e 	bl	5828 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6f2c:	4680      	mov	r8, r0
    6f2e:	7ca0      	ldrb	r0, [r4, #18]
    6f30:	2800      	cmp	r0, #0
    6f32:	bf18      	it	ne
    6f34:	f1b8 0f00 	cmpne.w	r8, #0
    6f38:	d003      	beq.n	6f42 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6f3a:	7ce0      	ldrb	r0, [r4, #19]
    6f3c:	f7fe fc68 	bl	5810 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6f40:	b168      	cbz	r0, 6f5e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xda>
    6f42:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    6f46:	2800      	cmp	r0, #0
    6f48:	bf1c      	itt	ne
    6f4a:	7d20      	ldrbne	r0, [r4, #20]
    6f4c:	2800      	cmpne	r0, #0
    6f4e:	d01e      	beq.n	6f8e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    6f50:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    6f54:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    6f58:	2901      	cmp	r1, #1
    6f5a:	d00e      	beq.n	6f7a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf6>
    6f5c:	e012      	b.n	6f84 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x100>
    6f5e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    6f62:	463a      	mov	r2, r7
    6f64:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    6f68:	4640      	mov	r0, r8
    6f6a:	f008 fee1 	bl	fd30 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6f6e:	7ce1      	ldrb	r1, [r4, #19]
    6f70:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    6f74:	f7fe fc64 	bl	5840 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    6f78:	e009      	b.n	6f8e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    6f7a:	7940      	ldrb	r0, [r0, #5]
    6f7c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    6f80:	2840      	cmp	r0, #64	; 0x40
    6f82:	d032      	beq.n	6fea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x166>
    6f84:	4631      	mov	r1, r6
    6f86:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    6f8a:	f008 fec1 	bl	fd10 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    6f8e:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
    6f92:	78a0      	ldrb	r0, [r4, #2]
    6f94:	f010 0f04 	tst.w	r0, #4
    6f98:	bf1a      	itte	ne
    6f9a:	7ca0      	ldrbne	r0, [r4, #18]
    6f9c:	2800      	cmpne	r0, #0
    6f9e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fa2:	f04f 0700 	mov.w	r7, #0
    6fa6:	7ce0      	ldrb	r0, [r4, #19]
    6fa8:	f7fe fc9c 	bl	58e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6fac:	0006      	movs	r6, r0
    6fae:	bf08      	it	eq
    6fb0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fb4:	2110      	movs	r1, #16
    6fb6:	f7ff fa95 	bl	64e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6fba:	2800      	cmp	r0, #0
    6fbc:	bf18      	it	ne
    6fbe:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fc2:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
    6fc6:	463a      	mov	r2, r7
    6fc8:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    6fcc:	4630      	mov	r0, r6
    6fce:	f008 feaf 	bl	fd30 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6fd2:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    6fd6:	4c0a      	ldr	r4, [pc, #40]	; (7000 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x17c>)
    6fd8:	6820      	ldr	r0, [r4, #0]
    6fda:	f009 fb45 	bl	10668 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6fde:	6820      	ldr	r0, [r4, #0]
    6fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6fe4:	2101      	movs	r1, #1
    6fe6:	f009 bb46 	b.w	10676 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6fea:	f7fe fc0d 	bl	5808 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    6fee:	463a      	mov	r2, r7
    6ff0:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    6ff4:	f008 fe9c 	bl	fd30 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6ff8:	e7c9      	b.n	6f8e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    6ffa:	0000      	.short	0x0000
    6ffc:	20001334 	.word	0x20001334
    7000:	2000010c 	.word	0x2000010c

00007004 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>:
    7004:	4804      	ldr	r0, [pc, #16]	; (7018 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA+0x14>)
    7006:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    700a:	2900      	cmp	r1, #0
    700c:	bf14      	ite	ne
    700e:	f8b0 006c 	ldrhne.w	r0, [r0, #108]	; 0x6c
    7012:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    7016:	4770      	bx	lr
    7018:	20001334 	.word	0x20001334

0000701c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    701c:	480b      	ldr	r0, [pc, #44]	; (704c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x30>)
    701e:	8840      	ldrh	r0, [r0, #2]
    7020:	f3c0 1100 	ubfx	r1, r0, #4, #1
    7024:	b131      	cbz	r1, 7034 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x18>
    7026:	f3c0 0080 	ubfx	r0, r0, #2, #1
    702a:	2800      	cmp	r0, #0
    702c:	bf04      	itt	eq
    702e:	201f      	moveq	r0, #31
    7030:	4770      	bxeq	lr
    7032:	e002      	b.n	703a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1e>
    7034:	f3c0 0140 	ubfx	r1, r0, #1, #1
    7038:	b109      	cbz	r1, 703e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x22>
    703a:	2000      	movs	r0, #0
    703c:	4770      	bx	lr
    703e:	f010 0f01 	tst.w	r0, #1
    7042:	bf14      	ite	ne
    7044:	20ee      	movne	r0, #238	; 0xee
    7046:	20ff      	moveq	r0, #255	; 0xff
    7048:	4770      	bx	lr
    704a:	0000      	.short	0x0000
    704c:	20001334 	.word	0x20001334

00007050 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    7050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7054:	4c41      	ldr	r4, [pc, #260]	; (715c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x10c>)
    7056:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    705a:	2500      	movs	r5, #0
    705c:	b181      	cbz	r1, 7080 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    705e:	7045      	strb	r5, [r0, #1]
    7060:	211b      	movs	r1, #27
    7062:	7001      	strb	r1, [r0, #0]
    7064:	f8d4 1099 	ldr.w	r1, [r4, #153]	; 0x99
    7068:	6041      	str	r1, [r0, #4]
    706a:	f8d4 109d 	ldr.w	r1, [r4, #157]	; 0x9d
    706e:	6081      	str	r1, [r0, #8]
    7070:	f894 10a1 	ldrb.w	r1, [r4, #161]	; 0xa1
    7074:	7301      	strb	r1, [r0, #12]
    7076:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
    707a:	2001      	movs	r0, #1
    707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7080:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
    7084:	b141      	cbz	r1, 7098 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x48>
    7086:	7045      	strb	r5, [r0, #1]
    7088:	2107      	movs	r1, #7
    708a:	7001      	strb	r1, [r0, #0]
    708c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    7090:	6041      	str	r1, [r0, #4]
    7092:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    7096:	e05d      	b.n	7154 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7098:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    709c:	2114      	movs	r1, #20
    709e:	4f30      	ldr	r7, [pc, #192]	; (7160 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x110>)
    70a0:	2601      	movs	r6, #1
    70a2:	b30a      	cbz	r2, 70e8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x98>
    70a4:	4680      	mov	r8, r0
    70a6:	7045      	strb	r5, [r0, #1]
    70a8:	f800 1b04 	strb.w	r1, [r0], #4
    70ac:	2220      	movs	r2, #32
    70ae:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    70b2:	f7fc fbdb 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    70b6:	f888 6008 	strb.w	r6, [r8, #8]
    70ba:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    70be:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    70c2:	2800      	cmp	r0, #0
    70c4:	d146      	bne.n	7154 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    70c6:	bf00      	nop
    70c8:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    70cc:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    70d0:	6878      	ldr	r0, [r7, #4]
    70d2:	7c41      	ldrb	r1, [r0, #17]
    70d4:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    70d8:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
    70dc:	8800      	ldrh	r0, [r0, #0]
    70de:	f7fd f907 	bl	42f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    70e2:	f008 fc1d 	bl	f920 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    70e6:	e035      	b.n	7154 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    70e8:	f894 208a 	ldrb.w	r2, [r4, #138]	; 0x8a
    70ec:	b302      	cbz	r2, 7130 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xe0>
    70ee:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    70f2:	b18a      	cbz	r2, 7118 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xc8>
    70f4:	4680      	mov	r8, r0
    70f6:	7045      	strb	r5, [r0, #1]
    70f8:	f800 1b04 	strb.w	r1, [r0], #4
    70fc:	2220      	movs	r2, #32
    70fe:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    7102:	f7fc fbb3 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7106:	f888 6008 	strb.w	r6, [r8, #8]
    710a:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    710e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    7112:	2800      	cmp	r0, #0
    7114:	d0d8      	beq.n	70c8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x78>
    7116:	e01d      	b.n	7154 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7118:	7045      	strb	r5, [r0, #1]
    711a:	2117      	movs	r1, #23
    711c:	7001      	strb	r1, [r0, #0]
    711e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    7122:	6041      	str	r1, [r0, #4]
    7124:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    7128:	8101      	strh	r1, [r0, #8]
    712a:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
    712e:	e011      	b.n	7154 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7130:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
    7134:	2900      	cmp	r1, #0
    7136:	bf04      	itt	eq
    7138:	2000      	moveq	r0, #0
    713a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    713e:	7045      	strb	r5, [r0, #1]
    7140:	2120      	movs	r1, #32
    7142:	f800 1b04 	strb.w	r1, [r0], #4
    7146:	2222      	movs	r2, #34	; 0x22
    7148:	f104 01a3 	add.w	r1, r4, #163	; 0xa3
    714c:	f7fc fb8e 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7150:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    7154:	2001      	movs	r0, #1
    7156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    715a:	0000      	.short	0x0000
    715c:	20001334 	.word	0x20001334
    7160:	2000010c 	.word	0x2000010c

00007164 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    7164:	4801      	ldr	r0, [pc, #4]	; (716c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q+0x8>)
    7166:	6880      	ldr	r0, [r0, #8]
    7168:	4770      	bx	lr
    716a:	0000      	.short	0x0000
    716c:	20001334 	.word	0x20001334

00007170 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    7170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7172:	4c0f      	ldr	r4, [pc, #60]	; (71b0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x40>)
    7174:	8861      	ldrh	r1, [r4, #2]
    7176:	f3c1 1200 	ubfx	r2, r1, #4, #1
    717a:	2a00      	cmp	r2, #0
    717c:	bf04      	itt	eq
    717e:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
    7182:	2900      	cmpeq	r1, #0
    7184:	d111      	bne.n	71aa <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x3a>
    7186:	4605      	mov	r5, r0
    7188:	f104 0018 	add.w	r0, r4, #24
    718c:	f009 fc5c 	bl	10a48 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7190:	7922      	ldrb	r2, [r4, #4]
    7192:	7963      	ldrb	r3, [r4, #5]
    7194:	2600      	movs	r6, #0
    7196:	4629      	mov	r1, r5
    7198:	9600      	str	r6, [sp, #0]
    719a:	f000 ff19 	bl	7fd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    719e:	4601      	mov	r1, r0
    71a0:	68a0      	ldr	r0, [r4, #8]
    71a2:	4281      	cmp	r1, r0
    71a4:	bf84      	itt	hi
    71a6:	4630      	movhi	r0, r6
    71a8:	bdf8      	pophi	{r3, r4, r5, r6, r7, pc}
    71aa:	2001      	movs	r0, #1
    71ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71ae:	0000      	.short	0x0000
    71b0:	20001334 	.word	0x20001334

000071b4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    71b4:	b538      	push	{r3, r4, r5, lr}
    71b6:	4c0d      	ldr	r4, [pc, #52]	; (71ec <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x38>)
    71b8:	f104 0018 	add.w	r0, r4, #24
    71bc:	f009 fc44 	bl	10a48 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    71c0:	8861      	ldrh	r1, [r4, #2]
    71c2:	f3c1 1200 	ubfx	r2, r1, #4, #1
    71c6:	b122      	cbz	r2, 71d2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x1e>
    71c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    71cc:	2228      	movs	r2, #40	; 0x28
    71ce:	f001 baa5 	b.w	871c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    71d2:	f3c1 0140 	ubfx	r1, r1, #1, #1
    71d6:	2900      	cmp	r1, #0
    71d8:	bf14      	ite	ne
    71da:	8e61      	ldrhne	r1, [r4, #50]	; 0x32
    71dc:	8e21      	ldrheq	r1, [r4, #48]	; 0x30
    71de:	2201      	movs	r2, #1
    71e0:	9200      	str	r2, [sp, #0]
    71e2:	7963      	ldrb	r3, [r4, #5]
    71e4:	7922      	ldrb	r2, [r4, #4]
    71e6:	f000 fef3 	bl	7fd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    71ea:	bd38      	pop	{r3, r4, r5, pc}
    71ec:	20001334 	.word	0x20001334

000071f0 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    71f0:	4904      	ldr	r1, [pc, #16]	; (7204 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0x14>)
    71f2:	2200      	movs	r2, #0
    71f4:	624a      	str	r2, [r1, #36]	; 0x24
    71f6:	884b      	ldrh	r3, [r1, #2]
    71f8:	2b1d      	cmp	r3, #29
    71fa:	bf0c      	ite	eq
    71fc:	734a      	strbeq	r2, [r1, #13]
    71fe:	7348      	strbne	r0, [r1, #13]
    7200:	4770      	bx	lr
    7202:	0000      	.short	0x0000
    7204:	20001334 	.word	0x20001334

00007208 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7208:	b538      	push	{r3, r4, r5, lr}
    720a:	4d56      	ldr	r5, [pc, #344]	; (7364 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x15c>)
    720c:	4604      	mov	r4, r0
    720e:	7a80      	ldrb	r0, [r0, #10]
    7210:	7468      	strb	r0, [r5, #17]
    7212:	7820      	ldrb	r0, [r4, #0]
    7214:	7028      	strb	r0, [r5, #0]
    7216:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    721a:	f8ad 0000 	strh.w	r0, [sp]
    721e:	f89d 0000 	ldrb.w	r0, [sp]
    7222:	f000 0101 	and.w	r1, r0, #1
    7226:	f3c0 0240 	ubfx	r2, r0, #1, #1
    722a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    722e:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7232:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7236:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    723a:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    723e:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7242:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7246:	f3c0 1240 	ubfx	r2, r0, #5, #1
    724a:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    724e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7252:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7256:	8068      	strh	r0, [r5, #2]
    7258:	7d20      	ldrb	r0, [r4, #20]
    725a:	2801      	cmp	r0, #1
    725c:	bf18      	it	ne
    725e:	2802      	cmpne	r0, #2
    7260:	d006      	beq.n	7270 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x68>
    7262:	bf00      	nop
    7264:	f240 21a1 	movw	r1, #673	; 0x2a1
    7268:	f04f 0006 	mov.w	r0, #6
    726c:	f7fc fc88 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7270:	7128      	strb	r0, [r5, #4]
    7272:	7860      	ldrb	r0, [r4, #1]
    7274:	f010 0f10 	tst.w	r0, #16
    7278:	d009      	beq.n	728e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x86>
    727a:	7a61      	ldrb	r1, [r4, #9]
    727c:	f105 0018 	add.w	r0, r5, #24
    7280:	f009 fc35 	bl	10aee <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7284:	7d20      	ldrb	r0, [r4, #20]
    7286:	2101      	movs	r1, #1
    7288:	2802      	cmp	r0, #2
    728a:	d10b      	bne.n	72a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x9c>
    728c:	e006      	b.n	729c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x94>
    728e:	7da0      	ldrb	r0, [r4, #22]
    7290:	2801      	cmp	r0, #1
    7292:	bf14      	ite	ne
    7294:	2802      	cmpne	r0, #2
    7296:	7168      	strbeq	r0, [r5, #5]
    7298:	d1e4      	bne.n	7264 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x5c>
    729a:	e7ee      	b.n	727a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x72>
    729c:	7d60      	ldrb	r0, [r4, #21]
    729e:	f100 0001 	add.w	r0, r0, #1
    72a2:	b2c1      	uxtb	r1, r0
    72a4:	7ea0      	ldrb	r0, [r4, #26]
    72a6:	f100 0001 	add.w	r0, r0, #1
    72aa:	b2c2      	uxtb	r2, r0
    72ac:	f105 0018 	add.w	r0, r5, #24
    72b0:	f009 fbb3 	bl	10a1a <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    72b4:	78a8      	ldrb	r0, [r5, #2]
    72b6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    72ba:	2800      	cmp	r0, #0
    72bc:	bf1c      	itt	ne
    72be:	2000      	movne	r0, #0
    72c0:	60a8      	strne	r0, [r5, #8]
    72c2:	d01c      	beq.n	72fe <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    72c4:	7ca0      	ldrb	r0, [r4, #18]
    72c6:	7428      	strb	r0, [r5, #16]
    72c8:	7ae0      	ldrb	r0, [r4, #11]
    72ca:	2800      	cmp	r0, #0
    72cc:	bf16      	itet	ne
    72ce:	2802      	cmpne	r0, #2
    72d0:	2000      	moveq	r0, #0
    72d2:	2001      	movne	r0, #1
    72d4:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
    72d8:	68e0      	ldr	r0, [r4, #12]
    72da:	6468      	str	r0, [r5, #68]	; 0x44
    72dc:	8a20      	ldrh	r0, [r4, #16]
    72de:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
    72e2:	7de0      	ldrb	r0, [r4, #23]
    72e4:	f895 1020 	ldrb.w	r1, [r5, #32]
    72e8:	f360 1107 	bfi	r1, r0, #4, #4
    72ec:	f885 1020 	strb.w	r1, [r5, #32]
    72f0:	7e20      	ldrb	r0, [r4, #24]
    72f2:	2801      	cmp	r0, #1
    72f4:	bf18      	it	ne
    72f6:	2000      	movne	r0, #0
    72f8:	7328      	strb	r0, [r5, #12]
    72fa:	2000      	movs	r0, #0
    72fc:	bd38      	pop	{r3, r4, r5, pc}
    72fe:	7860      	ldrb	r0, [r4, #1]
    7300:	f010 0f10 	tst.w	r0, #16
    7304:	f105 0018 	add.w	r0, r5, #24
    7308:	d022      	beq.n	7350 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    730a:	f009 fb9d 	bl	10a48 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    730e:	8869      	ldrh	r1, [r5, #2]
    7310:	2228      	movs	r2, #40	; 0x28
    7312:	f001 fa03 	bl	871c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7316:	bf00      	nop
    7318:	f240 2171 	movw	r1, #625	; 0x271
    731c:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    7320:	fbb0 f0f1 	udiv	r0, r0, r1
    7324:	4348      	muls	r0, r1
    7326:	f8d4 1002 	ldr.w	r1, [r4, #2]
    732a:	f240 2271 	movw	r2, #625	; 0x271
    732e:	0a09      	lsrs	r1, r1, #8
    7330:	434a      	muls	r2, r1
    7332:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7336:	f240 2371 	movw	r3, #625	; 0x271
    733a:	0a09      	lsrs	r1, r1, #8
    733c:	4359      	muls	r1, r3
    733e:	4290      	cmp	r0, r2
    7340:	bf98      	it	ls
    7342:	60aa      	strls	r2, [r5, #8]
    7344:	d9be      	bls.n	72c4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
    7346:	4288      	cmp	r0, r1
    7348:	bf94      	ite	ls
    734a:	60a8      	strls	r0, [r5, #8]
    734c:	60a9      	strhi	r1, [r5, #8]
    734e:	e7b9      	b.n	72c4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
    7350:	f009 fb7a 	bl	10a48 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7354:	2101      	movs	r1, #1
    7356:	9100      	str	r1, [sp, #0]
    7358:	796b      	ldrb	r3, [r5, #5]
    735a:	792a      	ldrb	r2, [r5, #4]
    735c:	21fb      	movs	r1, #251	; 0xfb
    735e:	f000 fe37 	bl	7fd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    7362:	e7d9      	b.n	7318 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x110>
    7364:	20001334 	.word	0x20001334

00007368 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7368:	b570      	push	{r4, r5, r6, lr}
    736a:	491b      	ldr	r1, [pc, #108]	; (73d8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x70>)
    736c:	2400      	movs	r4, #0
    736e:	700c      	strb	r4, [r1, #0]
    7370:	4d1a      	ldr	r5, [pc, #104]	; (73dc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x74>)
    7372:	6028      	str	r0, [r5, #0]
    7374:	7808      	ldrb	r0, [r1, #0]
    7376:	b120      	cbz	r0, 7382 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
    7378:	f44f 7133 	mov.w	r1, #716	; 0x2cc
    737c:	202d      	movs	r0, #45	; 0x2d
    737e:	f7fc fbff 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7382:	22c8      	movs	r2, #200	; 0xc8
    7384:	2100      	movs	r1, #0
    7386:	4816      	ldr	r0, [pc, #88]	; (73e0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    7388:	f007 fb4c 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    738c:	4814      	ldr	r0, [pc, #80]	; (73e0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    738e:	f8c0 40c8 	str.w	r4, [r0, #200]	; 0xc8
    7392:	f8c0 40cc 	str.w	r4, [r0, #204]	; 0xcc
    7396:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
    739a:	f8c0 40d4 	str.w	r4, [r0, #212]	; 0xd4
    739e:	21ff      	movs	r1, #255	; 0xff
    73a0:	f800 1b21 	strb.w	r1, [r0], #33
    73a4:	217f      	movs	r1, #127	; 0x7f
    73a6:	f800 191f 	strb.w	r1, [r0], #-31
    73aa:	2113      	movs	r1, #19
    73ac:	f820 1b5e 	strh.w	r1, [r0], #94
    73b0:	2101      	movs	r1, #1
    73b2:	f800 1951 	strb.w	r1, [r0], #-81
    73b6:	f800 4b09 	strb.w	r4, [r0], #9
    73ba:	f009 fbbd 	bl	10b38 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    73be:	f005 ff33 	bl	d228 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    73c2:	f005 fd59 	bl	ce78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    73c6:	68a8      	ldr	r0, [r5, #8]
    73c8:	2800      	cmp	r0, #0
    73ca:	bf18      	it	ne
    73cc:	bd70      	popne	{r4, r5, r6, pc}
    73ce:	f240 21cf 	movw	r1, #719	; 0x2cf
    73d2:	202d      	movs	r0, #45	; 0x2d
    73d4:	f7fc fbd4 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73d8:	200013fc 	.word	0x200013fc
    73dc:	2000010c 	.word	0x2000010c
    73e0:	20001334 	.word	0x20001334

000073e4 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    73e4:	4907      	ldr	r1, [pc, #28]	; (7404 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x20>)
    73e6:	8848      	ldrh	r0, [r1, #2]
    73e8:	f3c0 1200 	ubfx	r2, r0, #4, #1
    73ec:	b93a      	cbnz	r2, 73fe <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    73ee:	f3c0 0040 	ubfx	r0, r0, #1, #1
    73f2:	b120      	cbz	r0, 73fe <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    73f4:	f8b1 0064 	ldrh.w	r0, [r1, #100]	; 0x64
    73f8:	2800      	cmp	r0, #0
    73fa:	bf08      	it	eq
    73fc:	4770      	bxeq	lr
    73fe:	2001      	movs	r0, #1
    7400:	4770      	bx	lr
    7402:	0000      	.short	0x0000
    7404:	20001334 	.word	0x20001334

00007408 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
    7408:	4807      	ldr	r0, [pc, #28]	; (7428 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x20>)
    740a:	8840      	ldrh	r0, [r0, #2]
    740c:	f3c0 1100 	ubfx	r1, r0, #4, #1
    7410:	b119      	cbz	r1, 741a <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
    7412:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7416:	b128      	cbz	r0, 7424 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    7418:	e002      	b.n	7420 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x18>
    741a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    741e:	b108      	cbz	r0, 7424 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    7420:	2000      	movs	r0, #0
    7422:	4770      	bx	lr
    7424:	2001      	movs	r0, #1
    7426:	4770      	bx	lr
    7428:	20001334 	.word	0x20001334

0000742c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    742c:	4802      	ldr	r0, [pc, #8]	; (7438 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ+0xc>)
    742e:	7880      	ldrb	r0, [r0, #2]
    7430:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7434:	4770      	bx	lr
    7436:	0000      	.short	0x0000
    7438:	20001334 	.word	0x20001334

0000743c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    743c:	4802      	ldr	r0, [pc, #8]	; (7448 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ+0xc>)
    743e:	7880      	ldrb	r0, [r0, #2]
    7440:	f000 0001 	and.w	r0, r0, #1
    7444:	4770      	bx	lr
    7446:	0000      	.short	0x0000
    7448:	20001334 	.word	0x20001334

0000744c <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
    744c:	4803      	ldr	r0, [pc, #12]	; (745c <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ+0x10>)
    744e:	8840      	ldrh	r0, [r0, #2]
    7450:	2809      	cmp	r0, #9
    7452:	bf0c      	ite	eq
    7454:	2001      	moveq	r0, #1
    7456:	2000      	movne	r0, #0
    7458:	4770      	bx	lr
    745a:	0000      	.short	0x0000
    745c:	20001334 	.word	0x20001334

00007460 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    7460:	4802      	ldr	r0, [pc, #8]	; (746c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI+0xc>)
    7462:	7880      	ldrb	r0, [r0, #2]
    7464:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7468:	4770      	bx	lr
    746a:	0000      	.short	0x0000
    746c:	20001334 	.word	0x20001334

00007470 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    7470:	4802      	ldr	r0, [pc, #8]	; (747c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY+0xc>)
    7472:	7880      	ldrb	r0, [r0, #2]
    7474:	f3c0 1000 	ubfx	r0, r0, #4, #1
    7478:	4770      	bx	lr
    747a:	0000      	.short	0x0000
    747c:	20001334 	.word	0x20001334

00007480 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    7480:	4802      	ldr	r0, [pc, #8]	; (748c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ+0xc>)
    7482:	7880      	ldrb	r0, [r0, #2]
    7484:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7488:	4770      	bx	lr
    748a:	0000      	.short	0x0000
    748c:	20001334 	.word	0x20001334

00007490 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7490:	4902      	ldr	r1, [pc, #8]	; (749c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7492:	4801      	ldr	r0, [pc, #4]	; (7498 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7494:	6088      	str	r0, [r1, #8]
    7496:	4770      	bx	lr
    7498:	00008704 	.word	0x00008704
    749c:	2000010c 	.word	0x2000010c

000074a0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    74a0:	4801      	ldr	r0, [pc, #4]	; (74a8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY+0x8>)
    74a2:	f990 000f 	ldrsb.w	r0, [r0, #15]
    74a6:	4770      	bx	lr
    74a8:	20001334 	.word	0x20001334

000074ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    74ac:	4903      	ldr	r1, [pc, #12]	; (74bc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0x10>)
    74ae:	7809      	ldrb	r1, [r1, #0]
    74b0:	4281      	cmp	r1, r0
    74b2:	bf0c      	ite	eq
    74b4:	2001      	moveq	r0, #1
    74b6:	2000      	movne	r0, #0
    74b8:	4770      	bx	lr
    74ba:	0000      	.short	0x0000
    74bc:	20001334 	.word	0x20001334

000074c0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    74c0:	4801      	ldr	r0, [pc, #4]	; (74c8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0x8>)
    74c2:	6880      	ldr	r0, [r0, #8]
    74c4:	6800      	ldr	r0, [r0, #0]
    74c6:	4700      	bx	r0
    74c8:	2000010c 	.word	0x2000010c

000074cc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    74cc:	4816      	ldr	r0, [pc, #88]	; (7528 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x5c>)
    74ce:	b510      	push	{r4, lr}
    74d0:	7800      	ldrb	r0, [r0, #0]
    74d2:	2800      	cmp	r0, #0
    74d4:	bf18      	it	ne
    74d6:	240c      	movne	r4, #12
    74d8:	d001      	beq.n	74de <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
    74da:	4620      	mov	r0, r4
    74dc:	bd10      	pop	{r4, pc}
    74de:	2400      	movs	r4, #0
    74e0:	22c8      	movs	r2, #200	; 0xc8
    74e2:	4621      	mov	r1, r4
    74e4:	4811      	ldr	r0, [pc, #68]	; (752c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    74e6:	f007 fa9d 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    74ea:	4910      	ldr	r1, [pc, #64]	; (752c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    74ec:	2000      	movs	r0, #0
    74ee:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    74f2:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    74f6:	f8c1 00d0 	str.w	r0, [r1, #208]	; 0xd0
    74fa:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
    74fe:	22ff      	movs	r2, #255	; 0xff
    7500:	700a      	strb	r2, [r1, #0]
    7502:	227f      	movs	r2, #127	; 0x7f
    7504:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    7508:	2213      	movs	r2, #19
    750a:	804a      	strh	r2, [r1, #2]
    750c:	2201      	movs	r2, #1
    750e:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
    7512:	73c8      	strb	r0, [r1, #15]
    7514:	f101 0018 	add.w	r0, r1, #24
    7518:	f009 fb0e 	bl	10b38 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    751c:	f005 fe84 	bl	d228 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7520:	f005 fcaa 	bl	ce78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7524:	e7d9      	b.n	74da <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7526:	0000      	.short	0x0000
    7528:	200013fc 	.word	0x200013fc
    752c:	20001334 	.word	0x20001334

00007530 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    7530:	4801      	ldr	r0, [pc, #4]	; (7538 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI+0x8>)
    7532:	7b00      	ldrb	r0, [r0, #12]
    7534:	4770      	bx	lr
    7536:	0000      	.short	0x0000
    7538:	20001334 	.word	0x20001334

0000753c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    753c:	4801      	ldr	r0, [pc, #4]	; (7544 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x8>)
    753e:	7940      	ldrb	r0, [r0, #5]
    7540:	4770      	bx	lr
    7542:	0000      	.short	0x0000
    7544:	20001334 	.word	0x20001334

00007548 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    7548:	4901      	ldr	r1, [pc, #4]	; (7550 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY+0x8>)
    754a:	6048      	str	r0, [r1, #4]
    754c:	4770      	bx	lr
    754e:	0000      	.short	0x0000
    7550:	2000010c 	.word	0x2000010c

00007554 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    7554:	4a05      	ldr	r2, [pc, #20]	; (756c <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y+0x18>)
    7556:	2300      	movs	r3, #0
    7558:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
    755c:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62
    7560:	2001      	movs	r0, #1
    7562:	6591      	str	r1, [r2, #88]	; 0x58
    7564:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
    7568:	4770      	bx	lr
    756a:	0000      	.short	0x0000
    756c:	20001334 	.word	0x20001334

00007570 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    7570:	4a05      	ldr	r2, [pc, #20]	; (7588 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA+0x18>)
    7572:	2300      	movs	r3, #0
    7574:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    7578:	65d1      	str	r1, [r2, #92]	; 0x5c
    757a:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    757e:	2001      	movs	r0, #1
    7580:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    7584:	4770      	bx	lr
    7586:	0000      	.short	0x0000
    7588:	20001334 	.word	0x20001334

0000758c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    758c:	4805      	ldr	r0, [pc, #20]	; (75a4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
    758e:	b510      	push	{r4, lr}
    7590:	7800      	ldrb	r0, [r0, #0]
    7592:	2801      	cmp	r0, #1
    7594:	bf1c      	itt	ne
    7596:	2000      	movne	r0, #0
    7598:	bd10      	popne	{r4, pc}
    759a:	f000 feb7 	bl	830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>
    759e:	2000      	movs	r0, #0
    75a0:	bd10      	pop	{r4, pc}
    75a2:	0000      	.short	0x0000
    75a4:	200013fc 	.word	0x200013fc

000075a8 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    75a8:	4901      	ldr	r1, [pc, #4]	; (75b0 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY+0x8>)
    75aa:	f881 0054 	strb.w	r0, [r1, #84]	; 0x54
    75ae:	4770      	bx	lr
    75b0:	20001334 	.word	0x20001334

000075b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    75b4:	4904      	ldr	r1, [pc, #16]	; (75c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14>)
    75b6:	4803      	ldr	r0, [pc, #12]	; (75c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>)
    75b8:	6008      	str	r0, [r1, #0]
    75ba:	4905      	ldr	r1, [pc, #20]	; (75d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c>)
    75bc:	4803      	ldr	r0, [pc, #12]	; (75cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x18>)
    75be:	6008      	str	r0, [r1, #0]
    75c0:	4770      	bx	lr
    75c2:	0000      	.short	0x0000
    75c4:	000085dd 	.word	0x000085dd
    75c8:	2000011c 	.word	0x2000011c
    75cc:	00008481 	.word	0x00008481
    75d0:	20000118 	.word	0x20000118

000075d4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    75d4:	b570      	push	{r4, r5, r6, lr}
    75d6:	4c10      	ldr	r4, [pc, #64]	; (7618 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x44>)
    75d8:	4e10      	ldr	r6, [pc, #64]	; (761c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x48>)
    75da:	2501      	movs	r5, #1
    75dc:	78a0      	ldrb	r0, [r4, #2]
    75de:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    75e2:	b130      	cbz	r0, 75f2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    75e4:	223c      	movs	r2, #60	; 0x3c
    75e6:	21ff      	movs	r1, #255	; 0xff
    75e8:	6870      	ldr	r0, [r6, #4]
    75ea:	f000 fecd 	bl	8388 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x388>
    75ee:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    75f2:	78a0      	ldrb	r0, [r4, #2]
    75f4:	f010 0f01 	tst.w	r0, #1
    75f8:	bf1c      	itt	ne
    75fa:	6870      	ldrne	r0, [r6, #4]
    75fc:	8801      	ldrhne	r1, [r0, #0]
    75fe:	f04f 023c 	mov.w	r2, #60	; 0x3c
    7602:	bf12      	itee	ne
    7604:	2001      	movne	r0, #1
    7606:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    760a:	2000      	moveq	r0, #0
    760c:	f000 fc16 	bl	7e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    7610:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    7614:	bd70      	pop	{r4, r5, r6, pc}
    7616:	0000      	.short	0x0000
    7618:	20001334 	.word	0x20001334
    761c:	2000010c 	.word	0x2000010c

00007620 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    7620:	4802      	ldr	r0, [pc, #8]	; (762c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc>)
    7622:	7c00      	ldrb	r0, [r0, #16]
    7624:	2800      	cmp	r0, #0
    7626:	bf18      	it	ne
    7628:	2001      	movne	r0, #1
    762a:	4770      	bx	lr
    762c:	20001334 	.word	0x20001334
    7630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7634:	4e68      	ldr	r6, [pc, #416]	; (77d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1b8>)
    7636:	0007      	movs	r7, r0
    7638:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    763c:	d027      	beq.n	768e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x6e>
    763e:	f104 0018 	add.w	r0, r4, #24
    7642:	f009 fa56 	bl	10af2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7646:	b9c0      	cbnz	r0, 767a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5a>
    7648:	78a0      	ldrb	r0, [r4, #2]
    764a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    764e:	2800      	cmp	r0, #0
    7650:	d039      	beq.n	76c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa6>
    7652:	f104 0018 	add.w	r0, r4, #24
    7656:	f009 f9f7 	bl	10a48 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    765a:	4605      	mov	r5, r0
    765c:	f104 0018 	add.w	r0, r4, #24
    7660:	f009 fa47 	bl	10af2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7664:	1a28      	subs	r0, r5, r0
    7666:	b2c0      	uxtb	r0, r0
    7668:	f009 fa73 	bl	10b52 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    766c:	6871      	ldr	r1, [r6, #4]
    766e:	4408      	add	r0, r1
    7670:	6070      	str	r0, [r6, #4]
    7672:	f104 0018 	add.w	r0, r4, #24
    7676:	f009 fa67 	bl	10b48 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    767a:	f104 0018 	add.w	r0, r4, #24
    767e:	f009 f9f3 	bl	10a68 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7682:	f006 fced 	bl	e060 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7686:	7921      	ldrb	r1, [r4, #4]
    7688:	2025      	movs	r0, #37	; 0x25
    768a:	f006 fccb 	bl	e024 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    768e:	4d53      	ldr	r5, [pc, #332]	; (77dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1bc>)
    7690:	f894 804a 	ldrb.w	r8, [r4, #74]	; 0x4a
    7694:	2100      	movs	r1, #0
    7696:	6828      	ldr	r0, [r5, #0]
    7698:	8001      	strh	r1, [r0, #0]
    769a:	7801      	ldrb	r1, [r0, #0]
    769c:	f021 0120 	bic.w	r1, r1, #32
    76a0:	7001      	strb	r1, [r0, #0]
    76a2:	8861      	ldrh	r1, [r4, #2]
    76a4:	2913      	cmp	r1, #19
    76a6:	d02b      	beq.n	7700 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    76a8:	dc11      	bgt.n	76ce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    76aa:	2910      	cmp	r1, #16
    76ac:	bf08      	it	eq
    76ae:	2102      	moveq	r1, #2
    76b0:	d039      	beq.n	7726 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    76b2:	2912      	cmp	r1, #18
    76b4:	bf08      	it	eq
    76b6:	2106      	moveq	r1, #6
    76b8:	d035      	beq.n	7726 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    76ba:	bf00      	nop
    76bc:	f240 51a9 	movw	r1, #1449	; 0x5a9
    76c0:	202d      	movs	r0, #45	; 0x2d
    76c2:	f7fc fa5d 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    76ca:	f000 be1f 	b.w	830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>
    76ce:	2915      	cmp	r1, #21
    76d0:	bf18      	it	ne
    76d2:	291d      	cmpne	r1, #29
    76d4:	d1f2      	bne.n	76bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9c>
    76d6:	f04f 0101 	mov.w	r1, #1
    76da:	f008 ffa3 	bl	10624 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    76de:	6828      	ldr	r0, [r5, #0]
    76e0:	f1b8 0f00 	cmp.w	r8, #0
    76e4:	7801      	ldrb	r1, [r0, #0]
    76e6:	f041 0120 	orr.w	r1, r1, #32
    76ea:	7001      	strb	r1, [r0, #0]
    76ec:	d011      	beq.n	7712 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    76ee:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    76f2:	f008 ffb9 	bl	10668 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    76f6:	2101      	movs	r1, #1
    76f8:	6828      	ldr	r0, [r5, #0]
    76fa:	f008 ffbc 	bl	10676 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    76fe:	e014      	b.n	772a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7700:	2100      	movs	r1, #0
    7702:	f008 ff8f 	bl	10624 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7706:	6828      	ldr	r0, [r5, #0]
    7708:	7801      	ldrb	r1, [r0, #0]
    770a:	f041 0120 	orr.w	r1, r1, #32
    770e:	7001      	strb	r1, [r0, #0]
    7710:	e00b      	b.n	772a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7712:	f104 0144 	add.w	r1, r4, #68	; 0x44
    7716:	f008 ffa7 	bl	10668 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    771a:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
    771e:	6828      	ldr	r0, [r5, #0]
    7720:	f008 ffa9 	bl	10676 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7724:	e001      	b.n	772a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7726:	f008 ff7d 	bl	10624 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    772a:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    772e:	6828      	ldr	r0, [r5, #0]
    7730:	f008 ffaa 	bl	10688 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7734:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7738:	6828      	ldr	r0, [r5, #0]
    773a:	f008 ffac 	bl	10696 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    773e:	8860      	ldrh	r0, [r4, #2]
    7740:	281d      	cmp	r0, #29
    7742:	bf18      	it	ne
    7744:	2815      	cmpne	r0, #21
    7746:	d004      	beq.n	7752 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7748:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    774a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    774c:	6828      	ldr	r0, [r5, #0]
    774e:	f008 ff11 	bl	10574 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7752:	b1ef      	cbz	r7, 7790 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x170>
    7754:	f104 0018 	add.w	r0, r4, #24
    7758:	68b7      	ldr	r7, [r6, #8]
    775a:	f009 f975 	bl	10a48 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    775e:	4680      	mov	r8, r0
    7760:	f104 0018 	add.w	r0, r4, #24
    7764:	f009 f9c5 	bl	10af2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7768:	eba8 0000 	sub.w	r0, r8, r0
    776c:	1e40      	subs	r0, r0, #1
    776e:	b2c0      	uxtb	r0, r0
    7770:	8861      	ldrh	r1, [r4, #2]
    7772:	2228      	movs	r2, #40	; 0x28
    7774:	f000 fff8 	bl	8768 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7778:	19c1      	adds	r1, r0, r7
    777a:	78a0      	ldrb	r0, [r4, #2]
    777c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7780:	2800      	cmp	r0, #0
    7782:	bf1c      	itt	ne
    7784:	6870      	ldrne	r0, [r6, #4]
    7786:	4401      	addne	r1, r0
    7788:	7922      	ldrb	r2, [r4, #4]
    778a:	2000      	movs	r0, #0
    778c:	f006 f986 	bl	da9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7790:	6828      	ldr	r0, [r5, #0]
    7792:	f006 f937 	bl	da04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7796:	2004      	movs	r0, #4
    7798:	7030      	strb	r0, [r6, #0]
    779a:	8860      	ldrh	r0, [r4, #2]
    779c:	2813      	cmp	r0, #19
    779e:	d010      	beq.n	77c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    77a0:	dc0b      	bgt.n	77ba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x19a>
    77a2:	2810      	cmp	r0, #16
    77a4:	bf08      	it	eq
    77a6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    77aa:	2812      	cmp	r0, #18
    77ac:	d009      	beq.n	77c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    77ae:	bf00      	nop
    77b0:	f640 4119 	movw	r1, #3097	; 0xc19
    77b4:	202d      	movs	r0, #45	; 0x2d
    77b6:	f7fc f9e3 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77ba:	2815      	cmp	r0, #21
    77bc:	bf18      	it	ne
    77be:	281d      	cmpne	r0, #29
    77c0:	d1f6      	bne.n	77b0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x190>
    77c2:	7923      	ldrb	r3, [r4, #4]
    77c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    77c8:	f04f 0201 	mov.w	r2, #1
    77cc:	4611      	mov	r1, r2
    77ce:	f04f 0000 	mov.w	r0, #0
    77d2:	f006 baf7 	b.w	ddc4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    77d6:	0000      	.short	0x0000
    77d8:	200013fc 	.word	0x200013fc
    77dc:	2000010c 	.word	0x2000010c
    77e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    77e4:	4e3d      	ldr	r6, [pc, #244]	; (78dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2bc>)
    77e6:	4681      	mov	r9, r0
    77e8:	7830      	ldrb	r0, [r6, #0]
    77ea:	2802      	cmp	r0, #2
    77ec:	bf1c      	itt	ne
    77ee:	7830      	ldrbne	r0, [r6, #0]
    77f0:	2803      	cmpne	r0, #3
    77f2:	d005      	beq.n	7800 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1e0>
    77f4:	f44f 613a 	mov.w	r1, #2976	; 0xba0
    77f8:	f04f 002d 	mov.w	r0, #45	; 0x2d
    77fc:	f7fc f9c0 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7800:	4d37      	ldr	r5, [pc, #220]	; (78e0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c0>)
    7802:	7b28      	ldrb	r0, [r5, #12]
    7804:	b150      	cbz	r0, 781c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1fc>
    7806:	f105 0021 	add.w	r0, r5, #33	; 0x21
    780a:	f006 fba1 	bl	df50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    780e:	2800      	cmp	r0, #0
    7810:	bf04      	itt	eq
    7812:	207f      	moveq	r0, #127	; 0x7f
    7814:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    7818:	f006 fb80 	bl	df1c <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    781c:	4c31      	ldr	r4, [pc, #196]	; (78e4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c4>)
    781e:	6820      	ldr	r0, [r4, #0]
    7820:	f008 fe5e 	bl	104e0 <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>
    7824:	4607      	mov	r7, r0
    7826:	6860      	ldr	r0, [r4, #4]
    7828:	f04f 0800 	mov.w	r8, #0
    782c:	2800      	cmp	r0, #0
    782e:	bf18      	it	ne
    7830:	f890 806b 	ldrbne.w	r8, [r0, #107]	; 0x6b
    7834:	f1b9 0f00 	cmp.w	r9, #0
    7838:	d03e      	beq.n	78b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    783a:	f006 f80b 	bl	d854 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    783e:	2800      	cmp	r0, #0
    7840:	d03a      	beq.n	78b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7842:	2f05      	cmp	r7, #5
    7844:	d11b      	bne.n	787e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7846:	6820      	ldr	r0, [r4, #0]
    7848:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    784c:	f000 001f 	and.w	r0, r0, #31
    7850:	2810      	cmp	r0, #16
    7852:	d914      	bls.n	787e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7854:	7ba8      	ldrb	r0, [r5, #14]
    7856:	b190      	cbz	r0, 787e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7858:	20ff      	movs	r0, #255	; 0xff
    785a:	f88d 0000 	strb.w	r0, [sp]
    785e:	2701      	movs	r7, #1
    7860:	4669      	mov	r1, sp
    7862:	2005      	movs	r0, #5
    7864:	f000 fb24 	bl	7eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    7868:	b330      	cbz	r0, 78b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    786a:	f885 70a2 	strb.w	r7, [r5, #162]	; 0xa2
    786e:	6820      	ldr	r0, [r4, #0]
    7870:	2222      	movs	r2, #34	; 0x22
    7872:	1cc1      	adds	r1, r0, #3
    7874:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
    7878:	f7fb fff8 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    787c:	e01c      	b.n	78b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    787e:	4641      	mov	r1, r8
    7880:	6820      	ldr	r0, [r4, #0]
    7882:	f008 fe31 	bl	104e8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7886:	b1b8      	cbz	r0, 78b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7888:	7831      	ldrb	r1, [r6, #0]
    788a:	4638      	mov	r0, r7
    788c:	2902      	cmp	r1, #2
    788e:	bf1c      	itt	ne
    7890:	7831      	ldrbne	r1, [r6, #0]
    7892:	2903      	cmpne	r1, #3
    7894:	d005      	beq.n	78a2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x282>
    7896:	f640 3179 	movw	r1, #2937	; 0xb79
    789a:	f04f 002d 	mov.w	r0, #45	; 0x2d
    789e:	f7fc f96f 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78a2:	68a1      	ldr	r1, [r4, #8]
    78a4:	7832      	ldrb	r2, [r6, #0]
    78a6:	6949      	ldr	r1, [r1, #20]
    78a8:	f06f 0307 	mvn.w	r3, #7
    78ac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    78b0:	5889      	ldr	r1, [r1, r2]
    78b2:	4788      	blx	r1
    78b4:	4605      	mov	r5, r0
    78b6:	e000      	b.n	78ba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x29a>
    78b8:	2501      	movs	r5, #1
    78ba:	7bb0      	ldrb	r0, [r6, #14]
    78bc:	b118      	cbz	r0, 78c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2a6>
    78be:	f005 fcb3 	bl	d228 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    78c2:	f005 fad9 	bl	ce78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    78c6:	2d00      	cmp	r5, #0
    78c8:	bf08      	it	eq
    78ca:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    78ce:	68a0      	ldr	r0, [r4, #8]
    78d0:	6880      	ldr	r0, [r0, #8]
    78d2:	b001      	add	sp, #4
    78d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    78d8:	4700      	bx	r0
    78da:	0000      	.short	0x0000
    78dc:	200013fc 	.word	0x200013fc
    78e0:	20001334 	.word	0x20001334
    78e4:	2000010c 	.word	0x2000010c
    78e8:	b538      	push	{r3, r4, r5, lr}
    78ea:	2803      	cmp	r0, #3
    78ec:	d002      	beq.n	78f4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2d4>
    78ee:	2805      	cmp	r0, #5
    78f0:	d067      	beq.n	79c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a2>
    78f2:	e064      	b.n	79be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    78f4:	20ff      	movs	r0, #255	; 0xff
    78f6:	f88d 0000 	strb.w	r0, [sp]
    78fa:	4669      	mov	r1, sp
    78fc:	2003      	movs	r0, #3
    78fe:	f000 fad7 	bl	7eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    7902:	2800      	cmp	r0, #0
    7904:	d05b      	beq.n	79be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    7906:	4c33      	ldr	r4, [pc, #204]	; (79d4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b4>)
    7908:	4d33      	ldr	r5, [pc, #204]	; (79d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b8>)
    790a:	7b20      	ldrb	r0, [r4, #12]
    790c:	b3b0      	cbz	r0, 797c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    790e:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
    7912:	bb98      	cbnz	r0, 797c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    7914:	f89d 0000 	ldrb.w	r0, [sp]
    7918:	2101      	movs	r1, #1
    791a:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    791e:	7821      	ldrb	r1, [r4, #0]
    7920:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    7924:	28ff      	cmp	r0, #255	; 0xff
    7926:	d011      	beq.n	794c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x32c>
    7928:	f104 029b 	add.w	r2, r4, #155	; 0x9b
    792c:	1e51      	subs	r1, r2, #1
    792e:	f7fe f80b 	bl	5948 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7932:	b130      	cbz	r0, 7942 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x322>
    7934:	f894 009a 	ldrb.w	r0, [r4, #154]	; 0x9a
    7938:	f040 0002 	orr.w	r0, r0, #2
    793c:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    7940:	e012      	b.n	7968 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x348>
    7942:	f640 6129 	movw	r1, #3625	; 0xe29
    7946:	202d      	movs	r0, #45	; 0x2d
    7948:	f7fc f91a 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    794c:	6828      	ldr	r0, [r5, #0]
    794e:	7801      	ldrb	r1, [r0, #0]
    7950:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7954:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    7958:	f8d0 1003 	ldr.w	r1, [r0, #3]
    795c:	f8c4 109b 	str.w	r1, [r4, #155]	; 0x9b
    7960:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7964:	f8a4 009f 	strh.w	r0, [r4, #159]	; 0x9f
    7968:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
    796c:	f104 00a1 	add.w	r0, r4, #161	; 0xa1
    7970:	297f      	cmp	r1, #127	; 0x7f
    7972:	d01f      	beq.n	79b4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x394>
    7974:	7001      	strb	r1, [r0, #0]
    7976:	207f      	movs	r0, #127	; 0x7f
    7978:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    797c:	6828      	ldr	r0, [r5, #0]
    797e:	2100      	movs	r1, #0
    7980:	8001      	strh	r1, [r0, #0]
    7982:	2104      	movs	r1, #4
    7984:	f008 fe4e 	bl	10624 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7988:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    798c:	6828      	ldr	r0, [r5, #0]
    798e:	f008 fe7b 	bl	10688 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7992:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7996:	6828      	ldr	r0, [r5, #0]
    7998:	f008 fe7d 	bl	10696 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    799c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    799e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    79a0:	6828      	ldr	r0, [r5, #0]
    79a2:	f008 fe81 	bl	106a8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    79a6:	490d      	ldr	r1, [pc, #52]	; (79dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3bc>)
    79a8:	2005      	movs	r0, #5
    79aa:	7008      	strb	r0, [r1, #0]
    79ac:	6828      	ldr	r0, [r5, #0]
    79ae:	f006 f829 	bl	da04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    79b2:	e00c      	b.n	79ce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    79b4:	f640 41cb 	movw	r1, #3275	; 0xccb
    79b8:	202d      	movs	r0, #45	; 0x2d
    79ba:	f7fc f8e1 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79be:	2001      	movs	r0, #1
    79c0:	bd38      	pop	{r3, r4, r5, pc}
    79c2:	4807      	ldr	r0, [pc, #28]	; (79e0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c0>)
    79c4:	6800      	ldr	r0, [r0, #0]
    79c6:	b110      	cbz	r0, 79ce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    79c8:	4780      	blx	r0
    79ca:	2800      	cmp	r0, #0
    79cc:	d0f7      	beq.n	79be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    79ce:	2000      	movs	r0, #0
    79d0:	bd38      	pop	{r3, r4, r5, pc}
    79d2:	0000      	.short	0x0000
    79d4:	20001334 	.word	0x20001334
    79d8:	2000010c 	.word	0x2000010c
    79dc:	200013fc 	.word	0x200013fc
    79e0:	2000011c 	.word	0x2000011c
    79e4:	b510      	push	{r4, lr}
    79e6:	b990      	cbnz	r0, 7a0e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    79e8:	2900      	cmp	r1, #0
    79ea:	bf08      	it	eq
    79ec:	bd10      	popeq	{r4, pc}
    79ee:	f000 feed 	bl	87cc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    79f2:	b160      	cbz	r0, 7a0e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    79f4:	4808      	ldr	r0, [pc, #32]	; (7a18 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3f8>)
    79f6:	4909      	ldr	r1, [pc, #36]	; (7a1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3fc>)
    79f8:	6880      	ldr	r0, [r0, #8]
    79fa:	7809      	ldrb	r1, [r1, #0]
    79fc:	6900      	ldr	r0, [r0, #16]
    79fe:	f06f 020f 	mvn.w	r2, #15
    7a02:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7a06:	5840      	ldr	r0, [r0, r1]
    7a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a0c:	4700      	bx	r0
    7a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a12:	f000 bc7b 	b.w	830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>
    7a16:	0000      	.short	0x0000
    7a18:	2000010c 	.word	0x2000010c
    7a1c:	200013fc 	.word	0x200013fc
    7a20:	b570      	push	{r4, r5, r6, lr}
    7a22:	4c1a      	ldr	r4, [pc, #104]	; (7a8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x46c>)
    7a24:	2500      	movs	r5, #0
    7a26:	8860      	ldrh	r0, [r4, #2]
    7a28:	2810      	cmp	r0, #16
    7a2a:	d011      	beq.n	7a50 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x430>
    7a2c:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
    7a30:	7bb0      	ldrb	r0, [r6, #14]
    7a32:	b120      	cbz	r0, 7a3e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x41e>
    7a34:	f005 fa4c 	bl	ced0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7a38:	2040      	movs	r0, #64	; 0x40
    7a3a:	f005 fc05 	bl	d248 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7a3e:	4814      	ldr	r0, [pc, #80]	; (7a90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x470>)
    7a40:	6800      	ldr	r0, [r0, #0]
    7a42:	f005 ffdf 	bl	da04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7a46:	78a0      	ldrb	r0, [r4, #2]
    7a48:	f010 0f04 	tst.w	r0, #4
    7a4c:	d005      	beq.n	7a5a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x43a>
    7a4e:	e011      	b.n	7a74 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x454>
    7a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a54:	2001      	movs	r0, #1
    7a56:	f7ff bdeb 	b.w	7630 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    7a5a:	7c20      	ldrb	r0, [r4, #16]
    7a5c:	2801      	cmp	r0, #1
    7a5e:	bf14      	ite	ne
    7a60:	2803      	cmpne	r0, #3
    7a62:	2510      	moveq	r5, #16
    7a64:	f045 020e 	orr.w	r2, r5, #14
    7a68:	f04f 0100 	mov.w	r1, #0
    7a6c:	7923      	ldrb	r3, [r4, #4]
    7a6e:	4608      	mov	r0, r1
    7a70:	f006 f9a8 	bl	ddc4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7a74:	7b20      	ldrb	r0, [r4, #12]
    7a76:	2800      	cmp	r0, #0
    7a78:	bf18      	it	ne
    7a7a:	f006 fa5b 	blne	df34 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    7a7e:	2000      	movs	r0, #0
    7a80:	f005 fe2e 	bl	d6e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7a84:	2002      	movs	r0, #2
    7a86:	7030      	strb	r0, [r6, #0]
    7a88:	bd70      	pop	{r4, r5, r6, pc}
    7a8a:	0000      	.short	0x0000
    7a8c:	20001334 	.word	0x20001334
    7a90:	2000010c 	.word	0x2000010c
    7a94:	b570      	push	{r4, r5, r6, lr}
    7a96:	4d1e      	ldr	r5, [pc, #120]	; (7b10 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f0>)
    7a98:	7b28      	ldrb	r0, [r5, #12]
    7a9a:	b150      	cbz	r0, 7ab2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x492>
    7a9c:	f105 0021 	add.w	r0, r5, #33	; 0x21
    7aa0:	f006 fa56 	bl	df50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7aa4:	2800      	cmp	r0, #0
    7aa6:	bf04      	itt	eq
    7aa8:	207f      	moveq	r0, #127	; 0x7f
    7aaa:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    7aae:	f006 fa35 	bl	df1c <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7ab2:	4c18      	ldr	r4, [pc, #96]	; (7b14 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f4>)
    7ab4:	7ba0      	ldrb	r0, [r4, #14]
    7ab6:	b118      	cbz	r0, 7ac0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4a0>
    7ab8:	f005 fbb6 	bl	d228 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7abc:	f005 f9dc 	bl	ce78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7ac0:	f000 fe84 	bl	87cc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7ac4:	b1a0      	cbz	r0, 7af0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    7ac6:	8868      	ldrh	r0, [r5, #2]
    7ac8:	f3c0 1100 	ubfx	r1, r0, #4, #1
    7acc:	2900      	cmp	r1, #0
    7ace:	bf04      	itt	eq
    7ad0:	f3c0 00c0 	ubfxeq	r0, r0, #3, #1
    7ad4:	2800      	cmpeq	r0, #0
    7ad6:	d00b      	beq.n	7af0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    7ad8:	7820      	ldrb	r0, [r4, #0]
    7ada:	2802      	cmp	r0, #2
    7adc:	bf1c      	itt	ne
    7ade:	7820      	ldrbne	r0, [r4, #0]
    7ae0:	2803      	cmpne	r0, #3
    7ae2:	d009      	beq.n	7af8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d8>
    7ae4:	f640 21b5 	movw	r1, #2741	; 0xab5
    7ae8:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7aec:	f7fc f848 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7af4:	f000 bc0a 	b.w	830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>
    7af8:	4807      	ldr	r0, [pc, #28]	; (7b18 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f8>)
    7afa:	7821      	ldrb	r1, [r4, #0]
    7afc:	6880      	ldr	r0, [r0, #8]
    7afe:	68c0      	ldr	r0, [r0, #12]
    7b00:	f06f 0207 	mvn.w	r2, #7
    7b04:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7b08:	5840      	ldr	r0, [r0, r1]
    7b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b0e:	4700      	bx	r0
    7b10:	20001334 	.word	0x20001334
    7b14:	200013fc 	.word	0x200013fc
    7b18:	2000010c 	.word	0x2000010c

00007b1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b20:	4ea1      	ldr	r6, [pc, #644]	; (7da8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28c>)
    7b22:	b087      	sub	sp, #28
    7b24:	7830      	ldrb	r0, [r6, #0]
    7b26:	2800      	cmp	r0, #0
    7b28:	d17d      	bne.n	7c26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    7b2a:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    7b2e:	7820      	ldrb	r0, [r4, #0]
    7b30:	28ff      	cmp	r0, #255	; 0xff
    7b32:	d078      	beq.n	7c26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    7b34:	2500      	movs	r5, #0
    7b36:	81b5      	strh	r5, [r6, #12]
    7b38:	6075      	str	r5, [r6, #4]
    7b3a:	7075      	strb	r5, [r6, #1]
    7b3c:	70b5      	strb	r5, [r6, #2]
    7b3e:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    7b42:	4628      	mov	r0, r5
    7b44:	f005 fe70 	bl	d828 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    7b48:	4898      	ldr	r0, [pc, #608]	; (7dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    7b4a:	af01      	add	r7, sp, #4
    7b4c:	f100 010c 	add.w	r1, r0, #12
    7b50:	f8df 825c 	ldr.w	r8, [pc, #604]	; 7db0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>
    7b54:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    7b58:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    7b5c:	69c0      	ldr	r0, [r0, #28]
    7b5e:	9005      	str	r0, [sp, #20]
    7b60:	f8d8 0008 	ldr.w	r0, [r8, #8]
    7b64:	6840      	ldr	r0, [r0, #4]
    7b66:	9004      	str	r0, [sp, #16]
    7b68:	a801      	add	r0, sp, #4
    7b6a:	f005 fd79 	bl	d660 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7b6e:	f005 feab 	bl	d8c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7b72:	f005 fb59 	bl	d228 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7b76:	f005 f97f 	bl	ce78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7b7a:	488e      	ldr	r0, [pc, #568]	; (7db4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    7b7c:	f006 fa12 	bl	dfa4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7b80:	488d      	ldr	r0, [pc, #564]	; (7db8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>)
    7b82:	f006 fa1b 	bl	dfbc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7b86:	2000      	movs	r0, #0
    7b88:	f7fb fec4 	bl	3914 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    7b8c:	f104 0018 	add.w	r0, r4, #24
    7b90:	f008 ffda 	bl	10b48 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7b94:	f104 0018 	add.w	r0, r4, #24
    7b98:	f008 ff66 	bl	10a68 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7b9c:	f006 fa60 	bl	e060 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7ba0:	7921      	ldrb	r1, [r4, #4]
    7ba2:	2025      	movs	r0, #37	; 0x25
    7ba4:	f006 fa3e 	bl	e024 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7ba8:	f994 000f 	ldrsb.w	r0, [r4, #15]
    7bac:	f005 ff24 	bl	d9f8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7bb0:	7921      	ldrb	r1, [r4, #4]
    7bb2:	2000      	movs	r0, #0
    7bb4:	f005 fbee 	bl	d394 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7bb8:	2701      	movs	r7, #1
    7bba:	60b0      	str	r0, [r6, #8]
    7bbc:	2800      	cmp	r0, #0
    7bbe:	bf08      	it	eq
    7bc0:	7037      	strbeq	r7, [r6, #0]
    7bc2:	f000 80ed 	beq.w	7da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    7bc6:	210f      	movs	r1, #15
    7bc8:	2005      	movs	r0, #5
    7bca:	f005 fb6b 	bl	d2a4 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    7bce:	7d20      	ldrb	r0, [r4, #20]
    7bd0:	2800      	cmp	r0, #0
    7bd2:	bf01      	itttt	eq
    7bd4:	7ca0      	ldrbeq	r0, [r4, #18]
    7bd6:	2800      	cmpeq	r0, #0
    7bd8:	78a0      	ldrbeq	r0, [r4, #2]
    7bda:	f010 0f04 	tsteq.w	r0, #4
    7bde:	d06b      	beq.n	7cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    7be0:	f006 fdbb 	bl	e75a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7be4:	4681      	mov	r9, r0
    7be6:	4649      	mov	r1, r9
    7be8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7bea:	f7f9 fc47 	bl	147c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7bee:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 7dbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>
    7bf2:	4682      	mov	sl, r0
    7bf4:	fb90 f0fb 	sdiv	r0, r0, fp
    7bf8:	fb0b a010 	mls	r0, fp, r0, sl
    7bfc:	4241      	negs	r1, r0
    7bfe:	4648      	mov	r0, r9
    7c00:	f7f9 fc06 	bl	1410 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7c04:	63a0      	str	r0, [r4, #56]	; 0x38
    7c06:	fb9a f0fb 	sdiv	r0, sl, fp
    7c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7c0c:	4408      	add	r0, r1
    7c0e:	6360      	str	r0, [r4, #52]	; 0x34
    7c10:	f7fe f808 	bl	5c24 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7c16:	4288      	cmp	r0, r1
    7c18:	d86a      	bhi.n	7cf0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7c1a:	e9c4 590d 	strd	r5, r9, [r4, #52]	; 0x34
    7c1e:	f04f 0901 	mov.w	r9, #1
    7c22:	7ce0      	ldrb	r0, [r4, #19]
    7c24:	e000      	b.n	7c28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
    7c26:	e01a      	b.n	7c5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    7c28:	f7fd fdfe 	bl	5828 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    7c2c:	4682      	mov	sl, r0
    7c2e:	7ca0      	ldrb	r0, [r4, #18]
    7c30:	2800      	cmp	r0, #0
    7c32:	bf18      	it	ne
    7c34:	f1ba 0f00 	cmpne.w	sl, #0
    7c38:	d003      	beq.n	7c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x126>
    7c3a:	7ce0      	ldrb	r0, [r4, #19]
    7c3c:	f7fd fde8 	bl	5810 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    7c40:	b188      	cbz	r0, 7c66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x14a>
    7c42:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    7c46:	2800      	cmp	r0, #0
    7c48:	bf1c      	itt	ne
    7c4a:	7d20      	ldrbne	r0, [r4, #20]
    7c4c:	2800      	cmpne	r0, #0
    7c4e:	d022      	beq.n	7c96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7c50:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7c54:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7c58:	2801      	cmp	r0, #1
    7c5a:	d012      	beq.n	7c82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    7c5c:	e016      	b.n	7c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7c5e:	b007      	add	sp, #28
    7c60:	200c      	movs	r0, #12
    7c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c66:	463a      	mov	r2, r7
    7c68:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    7c6c:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7c70:	4650      	mov	r0, sl
    7c72:	f008 f85d 	bl	fd30 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7c76:	7ce1      	ldrb	r1, [r4, #19]
    7c78:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7c7c:	f7fd fde0 	bl	5840 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    7c80:	e009      	b.n	7c96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7c82:	7948      	ldrb	r0, [r1, #5]
    7c84:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    7c88:	2840      	cmp	r0, #64	; 0x40
    7c8a:	d016      	beq.n	7cba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    7c8c:	4649      	mov	r1, r9
    7c8e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7c92:	f008 f83d 	bl	fd10 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7c96:	78a0      	ldrb	r0, [r4, #2]
    7c98:	f010 0f04 	tst.w	r0, #4
    7c9c:	bf1c      	itt	ne
    7c9e:	7ca0      	ldrbne	r0, [r4, #18]
    7ca0:	2800      	cmpne	r0, #0
    7ca2:	d025      	beq.n	7cf0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7ca4:	7ce0      	ldrb	r0, [r4, #19]
    7ca6:	f7fd fe1d 	bl	58e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7caa:	ea5f 0900 	movs.w	r9, r0
    7cae:	d01f      	beq.n	7cf0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7cb0:	2110      	movs	r1, #16
    7cb2:	f7fe fc17 	bl	64e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7cb6:	b140      	cbz	r0, 7cca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    7cb8:	e01a      	b.n	7cf0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7cba:	f7fd fda5 	bl	5808 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7cbe:	463a      	mov	r2, r7
    7cc0:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7cc4:	f008 f834 	bl	fd30 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7cc8:	e7e5      	b.n	7c96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7cca:	463a      	mov	r2, r7
    7ccc:	f884 704a 	strb.w	r7, [r4, #74]	; 0x4a
    7cd0:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    7cd4:	4648      	mov	r0, r9
    7cd6:	f008 f82b 	bl	fd30 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7cda:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    7cde:	f8d8 0000 	ldr.w	r0, [r8]
    7ce2:	f008 fcc1 	bl	10668 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7ce6:	2101      	movs	r1, #1
    7ce8:	f8d8 0000 	ldr.w	r0, [r8]
    7cec:	f008 fcc3 	bl	10676 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7cf0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7cf4:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7cf8:	f006 f948 	bl	df8c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    7cfc:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7d00:	b340      	cbz	r0, 7d54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x238>
    7d02:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
    7d06:	8620      	strh	r0, [r4, #48]	; 0x30
    7d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d0a:	62a0      	str	r0, [r4, #40]	; 0x28
    7d0c:	78a0      	ldrb	r0, [r4, #2]
    7d0e:	f3c0 1000 	ubfx	r0, r0, #4, #1
    7d12:	b9e8      	cbnz	r0, 7d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x234>
    7d14:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    7d18:	2102      	movs	r1, #2
    7d1a:	f3c0 070b 	ubfx	r7, r0, #0, #12
    7d1e:	f8ad 7000 	strh.w	r7, [sp]
    7d22:	4668      	mov	r0, sp
    7d24:	f7fc fd2c 	bl	4780 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    7d28:	b128      	cbz	r0, 7d36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x21a>
    7d2a:	f8bd 0000 	ldrh.w	r0, [sp]
    7d2e:	f3c0 000b 	ubfx	r0, r0, #0, #12
    7d32:	42b8      	cmp	r0, r7
    7d34:	d104      	bne.n	7d40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x224>
    7d36:	f8bd 0000 	ldrh.w	r0, [sp]
    7d3a:	1c40      	adds	r0, r0, #1
    7d3c:	f8ad 0000 	strh.w	r0, [sp]
    7d40:	f8bd 0000 	ldrh.w	r0, [sp]
    7d44:	f8b4 101f 	ldrh.w	r1, [r4, #31]
    7d48:	f360 010b 	bfi	r1, r0, #0, #12
    7d4c:	f8a4 101f 	strh.w	r1, [r4, #31]
    7d50:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    7d54:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    7d58:	b130      	cbz	r0, 7d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    7d5a:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    7d5e:	8660      	strh	r0, [r4, #50]	; 0x32
    7d60:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7d62:	62e0      	str	r0, [r4, #44]	; 0x2c
    7d64:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    7d68:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    7d6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7d6e:	f3c0 000b 	ubfx	r0, r0, #0, #12
    7d72:	fa50 f081 	uxtab	r0, r0, r1
    7d76:	7fa1      	ldrb	r1, [r4, #30]
    7d78:	4b11      	ldr	r3, [pc, #68]	; (7dc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a4>)
    7d7a:	4408      	add	r0, r1
    7d7c:	461a      	mov	r2, r3
    7d7e:	2100      	movs	r1, #0
    7d80:	fbe0 2103 	umlal	r2, r1, r0, r3
    7d84:	0909      	lsrs	r1, r1, #4
    7d86:	f06f 0224 	mvn.w	r2, #36	; 0x24
    7d8a:	fb01 0002 	mla	r0, r1, r2, r0
    7d8e:	77a0      	strb	r0, [r4, #30]
    7d90:	f7fe f80a 	bl	5da8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7d94:	2103      	movs	r1, #3
    7d96:	f8d8 0000 	ldr.w	r0, [r8]
    7d9a:	f7fd fd21 	bl	57e0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7d9e:	73b0      	strb	r0, [r6, #14]
    7da0:	b007      	add	sp, #28
    7da2:	2000      	movs	r0, #0
    7da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7da8:	200013fc 	.word	0x200013fc
    7dac:	000086d4 	.word	0x000086d4
    7db0:	2000010c 	.word	0x2000010c
    7db4:	000086dc 	.word	0x000086dc
    7db8:	000086d9 	.word	0x000086d9
    7dbc:	000f4240 	.word	0x000f4240
    7dc0:	6eb3e453 	.word	0x6eb3e453
    7dc4:	b570      	push	{r4, r5, r6, lr}
    7dc6:	4d1b      	ldr	r5, [pc, #108]	; (7e34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>)
    7dc8:	7828      	ldrb	r0, [r5, #0]
    7dca:	2800      	cmp	r0, #0
    7dcc:	bf08      	it	eq
    7dce:	bd70      	popeq	{r4, r5, r6, pc}
    7dd0:	7828      	ldrb	r0, [r5, #0]
    7dd2:	4c19      	ldr	r4, [pc, #100]	; (7e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>)
    7dd4:	2802      	cmp	r0, #2
    7dd6:	bf1c      	itt	ne
    7dd8:	7828      	ldrbne	r0, [r5, #0]
    7dda:	2803      	cmpne	r0, #3
    7ddc:	d112      	bne.n	7e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7dde:	7b20      	ldrb	r0, [r4, #12]
    7de0:	b150      	cbz	r0, 7df8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    7de2:	f104 0021 	add.w	r0, r4, #33	; 0x21
    7de6:	f006 f8b3 	bl	df50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7dea:	2800      	cmp	r0, #0
    7dec:	bf04      	itt	eq
    7dee:	207f      	moveq	r0, #127	; 0x7f
    7df0:	f884 0021 	strbeq.w	r0, [r4, #33]	; 0x21
    7df4:	f006 f892 	bl	df1c <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7df8:	7ba8      	ldrb	r0, [r5, #14]
    7dfa:	b118      	cbz	r0, 7e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7dfc:	f005 fa14 	bl	d228 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7e00:	f005 f83a 	bl	ce78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7e04:	f7fb fd72 	bl	38ec <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    7e08:	f000 fce0 	bl	87cc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7e0c:	b168      	cbz	r0, 7e2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    7e0e:	78a0      	ldrb	r0, [r4, #2]
    7e10:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7e14:	b920      	cbnz	r0, 7e20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    7e16:	f104 0018 	add.w	r0, r4, #24
    7e1a:	f008 fe6a 	bl	10af2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7e1e:	b120      	cbz	r0, 7e2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    7e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e24:	2001      	movs	r0, #1
    7e26:	f7ff bc03 	b.w	7630 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    7e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e2e:	f000 ba6d 	b.w	830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>
    7e32:	0000      	.short	0x0000
    7e34:	200013fc 	.word	0x200013fc
    7e38:	20001334 	.word	0x20001334
    7e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e40:	4b19      	ldr	r3, [pc, #100]	; (7ea8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>)
    7e42:	2600      	movs	r6, #0
    7e44:	2701      	movs	r7, #1
    7e46:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
    7e4a:	781c      	ldrb	r4, [r3, #0]
    7e4c:	f893 c00d 	ldrb.w	ip, [r3, #13]
    7e50:	b1b8      	cbz	r0, 7e82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x366>
    7e52:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    7e56:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
    7e5a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    7e5e:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    7e62:	f1bc 0f00 	cmp.w	ip, #0
    7e66:	bf0c      	ite	eq
    7e68:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    7e6c:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    7e70:	480e      	ldr	r0, [pc, #56]	; (7eac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>)
    7e72:	6840      	ldr	r0, [r0, #4]
    7e74:	8800      	ldrh	r0, [r0, #0]
    7e76:	f7fc fa3b 	bl	42f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7e7e:	f007 bd55 	b.w	f92c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7e82:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7e86:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    7e8a:	f8a3 008e 	strh.w	r0, [r3, #142]	; 0x8e
    7e8e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    7e92:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    7e96:	f1bc 0f00 	cmp.w	ip, #0
    7e9a:	bf14      	ite	ne
    7e9c:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    7ea0:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    7ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ea8:	20001334 	.word	0x20001334
    7eac:	2000010c 	.word	0x2000010c
    7eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7eb4:	4c43      	ldr	r4, [pc, #268]	; (7fc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>)
    7eb6:	4680      	mov	r8, r0
    7eb8:	460f      	mov	r7, r1
    7eba:	8860      	ldrh	r0, [r4, #2]
    7ebc:	f1b8 0f03 	cmp.w	r8, #3
    7ec0:	bf08      	it	eq
    7ec2:	f3c0 0540 	ubfxeq	r5, r0, #1, #1
    7ec6:	d008      	beq.n	7eda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7ec8:	f000 0501 	and.w	r5, r0, #1
    7ecc:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
    7ed0:	2800      	cmp	r0, #0
    7ed2:	bf18      	it	ne
    7ed4:	f04f 0901 	movne.w	r9, #1
    7ed8:	d101      	bne.n	7ede <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    7eda:	f04f 0900 	mov.w	r9, #0
    7ede:	f005 f9db 	bl	d298 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7ee2:	4606      	mov	r6, r0
    7ee4:	f1b8 0f03 	cmp.w	r8, #3
    7ee8:	bf0c      	ite	eq
    7eea:	f04f 0802 	moveq.w	r8, #2
    7eee:	f04f 0801 	movne.w	r8, #1
    7ef2:	ea35 0009 	bics.w	r0, r5, r9
    7ef6:	bf08      	it	eq
    7ef8:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7efc:	4832      	ldr	r0, [pc, #200]	; (7fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ac>)
    7efe:	7b80      	ldrb	r0, [r0, #14]
    7f00:	b138      	cbz	r0, 7f12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f6>
    7f02:	f007 ff4d 	bl	fda0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7f06:	7038      	strb	r0, [r7, #0]
    7f08:	28ff      	cmp	r0, #255	; 0xff
    7f0a:	d002      	beq.n	7f12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f6>
    7f0c:	f7fd fd36 	bl	597c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7f10:	4306      	orrs	r6, r0
    7f12:	4d2e      	ldr	r5, [pc, #184]	; (7fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>)
    7f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    7f18:	6828      	ldr	r0, [r5, #0]
    7f1a:	7801      	ldrb	r1, [r0, #0]
    7f1c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7f20:	4291      	cmp	r1, r2
    7f22:	d109      	bne.n	7f38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41c>
    7f24:	2206      	movs	r2, #6
    7f26:	f104 0144 	add.w	r1, r4, #68	; 0x44
    7f2a:	1cc0      	adds	r0, r0, #3
    7f2c:	f006 fd6a 	bl	ea04 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7f30:	2800      	cmp	r0, #0
    7f32:	bf08      	it	eq
    7f34:	2001      	moveq	r0, #1
    7f36:	d000      	beq.n	7f3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41e>
    7f38:	2000      	movs	r0, #0
    7f3a:	7839      	ldrb	r1, [r7, #0]
    7f3c:	29ff      	cmp	r1, #255	; 0xff
    7f3e:	d004      	beq.n	7f4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    7f40:	b9b8      	cbnz	r0, 7f72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    7f42:	7ce0      	ldrb	r0, [r4, #19]
    7f44:	4288      	cmp	r0, r1
    7f46:	d116      	bne.n	7f76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    7f48:	e013      	b.n	7f72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    7f4a:	b1a0      	cbz	r0, 7f76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    7f4c:	6829      	ldr	r1, [r5, #0]
    7f4e:	f811 0b03 	ldrb.w	r0, [r1], #3
    7f52:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7f56:	f7fd fd23 	bl	59a0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7f5a:	4607      	mov	r7, r0
    7f5c:	f7fd fe76 	bl	5c4c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    7f60:	b138      	cbz	r0, 7f72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    7f62:	4638      	mov	r0, r7
    7f64:	f7fd fcbe 	bl	58e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7f68:	b118      	cbz	r0, 7f72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    7f6a:	2110      	movs	r1, #16
    7f6c:	f7fe faba 	bl	64e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7f70:	b108      	cbz	r0, 7f76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    7f72:	2001      	movs	r0, #1
    7f74:	e000      	b.n	7f78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>
    7f76:	2000      	movs	r0, #0
    7f78:	78a1      	ldrb	r1, [r4, #2]
    7f7a:	f011 0f04 	tst.w	r1, #4
    7f7e:	d001      	beq.n	7f84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x468>
    7f80:	b1e0      	cbz	r0, 7fbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    7f82:	e018      	b.n	7fb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    7f84:	b9be      	cbnz	r6, 7fb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    7f86:	7c20      	ldrb	r0, [r4, #16]
    7f88:	2800      	cmp	r0, #0
    7f8a:	bf18      	it	ne
    7f8c:	4540      	cmpne	r0, r8
    7f8e:	d115      	bne.n	7fbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    7f90:	6829      	ldr	r1, [r5, #0]
    7f92:	f811 0b03 	ldrb.w	r0, [r1], #3
    7f96:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7f9a:	f7fd fd01 	bl	59a0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7f9e:	4604      	mov	r4, r0
    7fa0:	f7fd fe54 	bl	5c4c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    7fa4:	b138      	cbz	r0, 7fb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    7fa6:	4620      	mov	r0, r4
    7fa8:	f7fd fc9c 	bl	58e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7fac:	b118      	cbz	r0, 7fb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    7fae:	2110      	movs	r1, #16
    7fb0:	f7fe fa98 	bl	64e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7fb4:	b110      	cbz	r0, 7fbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    7fb6:	2001      	movs	r0, #1
    7fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fbc:	2000      	movs	r0, #0
    7fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fc2:	0000      	.short	0x0000
    7fc4:	20001334 	.word	0x20001334
    7fc8:	200013fc 	.word	0x200013fc
    7fcc:	2000010c 	.word	0x2000010c
    7fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fd4:	2a02      	cmp	r2, #2
    7fd6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    7fda:	bf0c      	ite	eq
    7fdc:	f44f 7c7a 	moveq.w	ip, #1000	; 0x3e8
    7fe0:	f640 0c34 	movwne	ip, #2100	; 0x834
    7fe4:	f24a 14df 	movw	r4, #41439	; 0xa1df
    7fe8:	44a4      	add	ip, r4
    7fea:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    7fee:	fbbc f6f4 	udiv	r6, ip, r4
    7ff2:	2a08      	cmp	r2, #8
    7ff4:	bf08      	it	eq
    7ff6:	2440      	moveq	r4, #64	; 0x40
    7ff8:	d00a      	beq.n	8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    7ffa:	2a04      	cmp	r2, #4
    7ffc:	bf08      	it	eq
    7ffe:	2410      	moveq	r4, #16
    8000:	d006      	beq.n	8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    8002:	2a02      	cmp	r2, #2
    8004:	bf06      	itte	eq
    8006:	2404      	moveq	r4, #4
    8008:	f04f 0c12 	moveq.w	ip, #18
    800c:	2408      	movne	r4, #8
    800e:	d001      	beq.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    8010:	f04f 0c19 	mov.w	ip, #25
    8014:	fb14 f50c 	smulbb	r5, r4, ip
    8018:	2400      	movs	r4, #0
    801a:	272e      	movs	r7, #46	; 0x2e
    801c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    8020:	2a08      	cmp	r2, #8
    8022:	bf04      	itt	eq
    8024:	4667      	moveq	r7, ip
    8026:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    802a:	d009      	beq.n	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    802c:	2a04      	cmp	r2, #4
    802e:	bf08      	it	eq
    8030:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    8034:	d004      	beq.n	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    8036:	4627      	mov	r7, r4
    8038:	2a02      	cmp	r2, #2
    803a:	bf0c      	ite	eq
    803c:	2218      	moveq	r2, #24
    803e:	2228      	movne	r2, #40	; 0x28
    8040:	443a      	add	r2, r7
    8042:	442a      	add	r2, r5
    8044:	fb02 6200 	mla	r2, r2, r0, r6
    8048:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    804c:	eb05 10c0 	add.w	r0, r5, r0, lsl #7
    8050:	4402      	add	r2, r0
    8052:	48ad      	ldr	r0, [pc, #692]	; (8308 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x308>)
    8054:	f101 050b 	add.w	r5, r1, #11
    8058:	f244 2655 	movw	r6, #16981	; 0x4255
    805c:	7880      	ldrb	r0, [r0, #2]
    805e:	fb05 f506 	mul.w	r5, r5, r6
    8062:	f010 0701 	ands.w	r7, r0, #1
    8066:	ea4f 5895 	mov.w	r8, r5, lsr #22
    806a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    806e:	f04f 0a10 	mov.w	sl, #16
    8072:	f44f 75c8 	mov.w	r5, #400	; 0x190
    8076:	f44f 76bf 	mov.w	r6, #382	; 0x17e
    807a:	bf08      	it	eq
    807c:	2800      	cmpeq	r0, #0
    807e:	f000 80f5 	beq.w	826c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>
    8082:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    8086:	b1b8      	cbz	r0, 80b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    8088:	2b08      	cmp	r3, #8
    808a:	bf04      	itt	eq
    808c:	46ab      	moveq	fp, r5
    808e:	2040      	moveq	r0, #64	; 0x40
    8090:	d00c      	beq.n	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    8092:	2b04      	cmp	r3, #4
    8094:	bf04      	itt	eq
    8096:	46b3      	moveq	fp, r6
    8098:	2010      	moveq	r0, #16
    809a:	d007      	beq.n	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    809c:	2b02      	cmp	r3, #2
    809e:	bf07      	ittee	eq
    80a0:	f104 0b18 	addeq.w	fp, r4, #24
    80a4:	2004      	moveq	r0, #4
    80a6:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
    80aa:	2008      	movne	r0, #8
    80ac:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
    80b0:	eb0e 1080 	add.w	r0, lr, r0, lsl #6
    80b4:	4458      	add	r0, fp
    80b6:	e018      	b.n	80ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea>
    80b8:	f1b9 0f00 	cmp.w	r9, #0
    80bc:	d017      	beq.n	80ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xee>
    80be:	2b08      	cmp	r3, #8
    80c0:	bf04      	itt	eq
    80c2:	46ab      	moveq	fp, r5
    80c4:	2040      	moveq	r0, #64	; 0x40
    80c6:	d00c      	beq.n	80e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe2>
    80c8:	2b04      	cmp	r3, #4
    80ca:	bf04      	itt	eq
    80cc:	46b3      	moveq	fp, r6
    80ce:	2010      	moveq	r0, #16
    80d0:	d007      	beq.n	80e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe2>
    80d2:	2b02      	cmp	r3, #2
    80d4:	bf07      	ittee	eq
    80d6:	f104 0b18 	addeq.w	fp, r4, #24
    80da:	2004      	moveq	r0, #4
    80dc:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
    80e0:	2008      	movne	r0, #8
    80e2:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    80e6:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    80ea:	4410      	add	r0, r2
    80ec:	e020      	b.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    80ee:	29ff      	cmp	r1, #255	; 0xff
    80f0:	bf34      	ite	cc
    80f2:	4608      	movcc	r0, r1
    80f4:	20ff      	movcs	r0, #255	; 0xff
    80f6:	f100 0b05 	add.w	fp, r0, #5
    80fa:	2b08      	cmp	r3, #8
    80fc:	bf04      	itt	eq
    80fe:	4660      	moveq	r0, ip
    8100:	fb0b 2200 	mlaeq	r2, fp, r0, r2
    8104:	d04c      	beq.n	81a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    8106:	2b04      	cmp	r3, #4
    8108:	bf04      	itt	eq
    810a:	fb0b 220a 	mlaeq	r2, fp, sl, r2
    810e:	202e      	moveq	r0, #46	; 0x2e
    8110:	d046      	beq.n	81a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    8112:	2b02      	cmp	r3, #2
    8114:	bf0c      	ite	eq
    8116:	2004      	moveq	r0, #4
    8118:	2008      	movne	r0, #8
    811a:	fb0b 2200 	mla	r2, fp, r0, r2
    811e:	bf07      	ittee	eq
    8120:	4620      	moveq	r0, r4
    8122:	f04f 0b18 	moveq.w	fp, #24
    8126:	2000      	movne	r0, #0
    8128:	f04f 0b28 	movne.w	fp, #40	; 0x28
    812c:	4458      	add	r0, fp
    812e:	4410      	add	r0, r2
    8130:	309c      	adds	r0, #156	; 0x9c
    8132:	2b08      	cmp	r3, #8
    8134:	bf04      	itt	eq
    8136:	462a      	moveq	r2, r5
    8138:	f04f 0b40 	moveq.w	fp, #64	; 0x40
    813c:	d00f      	beq.n	815e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e>
    813e:	2b04      	cmp	r3, #4
    8140:	bf04      	itt	eq
    8142:	4632      	moveq	r2, r6
    8144:	f04f 0b10 	moveq.w	fp, #16
    8148:	d009      	beq.n	815e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e>
    814a:	2b02      	cmp	r3, #2
    814c:	bf07      	ittee	eq
    814e:	f104 0218 	addeq.w	r2, r4, #24
    8152:	f04f 0b04 	moveq.w	fp, #4
    8156:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    815a:	f04f 0b08 	movne.w	fp, #8
    815e:	ebcb 0bcb 	rsb	fp, fp, fp, lsl #3
    8162:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    8166:	eb02 024b 	add.w	r2, r2, fp, lsl #1
    816a:	4410      	add	r0, r2
    816c:	3098      	adds	r0, #152	; 0x98
    816e:	b1d7      	cbz	r7, 81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    8170:	2b08      	cmp	r3, #8
    8172:	bf08      	it	eq
    8174:	2140      	moveq	r1, #64	; 0x40
    8176:	d00c      	beq.n	8192 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x192>
    8178:	2b04      	cmp	r3, #4
    817a:	bf04      	itt	eq
    817c:	4635      	moveq	r5, r6
    817e:	2110      	moveq	r1, #16
    8180:	d007      	beq.n	8192 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x192>
    8182:	2b02      	cmp	r3, #2
    8184:	bf07      	ittee	eq
    8186:	f104 0518 	addeq.w	r5, r4, #24
    818a:	2104      	moveq	r1, #4
    818c:	f104 0528 	addne.w	r5, r4, #40	; 0x28
    8190:	2108      	movne	r1, #8
    8192:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    8196:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    819a:	4429      	add	r1, r5
    819c:	4408      	add	r0, r1
    819e:	e062      	b.n	8266 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x266>
    81a0:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    81a4:	e7c2      	b.n	812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>
    81a6:	f1b9 0f00 	cmp.w	r9, #0
    81aa:	d01b      	beq.n	81e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>
    81ac:	2b08      	cmp	r3, #8
    81ae:	bf04      	itt	eq
    81b0:	462a      	moveq	r2, r5
    81b2:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    81b6:	d00f      	beq.n	81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>
    81b8:	2b04      	cmp	r3, #4
    81ba:	bf04      	itt	eq
    81bc:	4632      	moveq	r2, r6
    81be:	f04f 0c10 	moveq.w	ip, #16
    81c2:	d009      	beq.n	81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>
    81c4:	2b02      	cmp	r3, #2
    81c6:	bf07      	ittee	eq
    81c8:	f104 0218 	addeq.w	r2, r4, #24
    81cc:	f04f 0c04 	moveq.w	ip, #4
    81d0:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    81d4:	f04f 0c08 	movne.w	ip, #8
    81d8:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    81dc:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    81e0:	4410      	add	r0, r2
    81e2:	e020      	b.n	8226 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x226>
    81e4:	29ff      	cmp	r1, #255	; 0xff
    81e6:	bf34      	ite	cc
    81e8:	460a      	movcc	r2, r1
    81ea:	22ff      	movcs	r2, #255	; 0xff
    81ec:	1d52      	adds	r2, r2, #5
    81ee:	2b08      	cmp	r3, #8
    81f0:	bf08      	it	eq
    81f2:	fb02 000c 	mlaeq	r0, r2, ip, r0
    81f6:	d01f      	beq.n	8238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    81f8:	2b04      	cmp	r3, #4
    81fa:	bf04      	itt	eq
    81fc:	fb02 000a 	mlaeq	r0, r2, sl, r0
    8200:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    8204:	d018      	beq.n	8238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    8206:	2b02      	cmp	r3, #2
    8208:	bf0c      	ite	eq
    820a:	f04f 0c04 	moveq.w	ip, #4
    820e:	f04f 0c08 	movne.w	ip, #8
    8212:	fb02 000c 	mla	r0, r2, ip, r0
    8216:	bf07      	ittee	eq
    8218:	46a4      	moveq	ip, r4
    821a:	2218      	moveq	r2, #24
    821c:	f04f 0c00 	movne.w	ip, #0
    8220:	2228      	movne	r2, #40	; 0x28
    8222:	4462      	add	r2, ip
    8224:	4410      	add	r0, r2
    8226:	29eb      	cmp	r1, #235	; 0xeb
    8228:	d91d      	bls.n	8266 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x266>
    822a:	2b08      	cmp	r3, #8
    822c:	d00a      	beq.n	8244 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x244>
    822e:	2b04      	cmp	r3, #4
    8230:	d005      	beq.n	823e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23e>
    8232:	2b02      	cmp	r3, #2
    8234:	d008      	beq.n	8248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>
    8236:	e00b      	b.n	8250 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x250>
    8238:	f44f 72a8 	mov.w	r2, #336	; 0x150
    823c:	e7f1      	b.n	8222 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x222>
    823e:	4635      	mov	r5, r6
    8240:	2110      	movs	r1, #16
    8242:	e008      	b.n	8256 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x256>
    8244:	2140      	movs	r1, #64	; 0x40
    8246:	e006      	b.n	8256 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x256>
    8248:	f104 0518 	add.w	r5, r4, #24
    824c:	2104      	movs	r1, #4
    824e:	e002      	b.n	8256 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x256>
    8250:	f104 0528 	add.w	r5, r4, #40	; 0x28
    8254:	2108      	movs	r1, #8
    8256:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    825a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    825e:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    8262:	fb08 0001 	mla	r0, r8, r1, r0
    8266:	30e9      	adds	r0, #233	; 0xe9
    8268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    826c:	f502 70a5 	add.w	r0, r2, #330	; 0x14a
    8270:	f1b9 0f00 	cmp.w	r9, #0
    8274:	d01b      	beq.n	82ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ae>
    8276:	2b08      	cmp	r3, #8
    8278:	bf04      	itt	eq
    827a:	462a      	moveq	r2, r5
    827c:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    8280:	d00f      	beq.n	82a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a2>
    8282:	2b04      	cmp	r3, #4
    8284:	bf04      	itt	eq
    8286:	4632      	moveq	r2, r6
    8288:	f04f 0c10 	moveq.w	ip, #16
    828c:	d009      	beq.n	82a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a2>
    828e:	2b02      	cmp	r3, #2
    8290:	bf07      	ittee	eq
    8292:	f104 0218 	addeq.w	r2, r4, #24
    8296:	f04f 0c04 	moveq.w	ip, #4
    829a:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    829e:	f04f 0c08 	movne.w	ip, #8
    82a2:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    82a6:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    82aa:	4410      	add	r0, r2
    82ac:	e020      	b.n	82f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>
    82ae:	29ff      	cmp	r1, #255	; 0xff
    82b0:	bf34      	ite	cc
    82b2:	460a      	movcc	r2, r1
    82b4:	22ff      	movcs	r2, #255	; 0xff
    82b6:	1d52      	adds	r2, r2, #5
    82b8:	2b08      	cmp	r3, #8
    82ba:	bf08      	it	eq
    82bc:	fb02 000c 	mlaeq	r0, r2, ip, r0
    82c0:	d01f      	beq.n	8302 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x302>
    82c2:	2b04      	cmp	r3, #4
    82c4:	bf04      	itt	eq
    82c6:	fb02 000a 	mlaeq	r0, r2, sl, r0
    82ca:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    82ce:	d018      	beq.n	8302 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x302>
    82d0:	2b02      	cmp	r3, #2
    82d2:	bf0c      	ite	eq
    82d4:	f04f 0c04 	moveq.w	ip, #4
    82d8:	f04f 0c08 	movne.w	ip, #8
    82dc:	fb02 000c 	mla	r0, r2, ip, r0
    82e0:	bf07      	ittee	eq
    82e2:	46a4      	moveq	ip, r4
    82e4:	2218      	moveq	r2, #24
    82e6:	f04f 0c00 	movne.w	ip, #0
    82ea:	2228      	movne	r2, #40	; 0x28
    82ec:	4462      	add	r2, ip
    82ee:	4410      	add	r0, r2
    82f0:	29eb      	cmp	r1, #235	; 0xeb
    82f2:	d9b8      	bls.n	8266 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x266>
    82f4:	2b08      	cmp	r3, #8
    82f6:	d0a5      	beq.n	8244 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x244>
    82f8:	2b04      	cmp	r3, #4
    82fa:	d0a0      	beq.n	823e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23e>
    82fc:	2b02      	cmp	r3, #2
    82fe:	d1a7      	bne.n	8250 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x250>
    8300:	e7a2      	b.n	8248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>
    8302:	f44f 72a8 	mov.w	r2, #336	; 0x150
    8306:	e7f1      	b.n	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    8308:	20001334 	.word	0x20001334
    830c:	b570      	push	{r4, r5, r6, lr}
    830e:	4c1c      	ldr	r4, [pc, #112]	; (8380 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x380>)
    8310:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    8314:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8316:	1c40      	adds	r0, r0, #1
    8318:	6260      	str	r0, [r4, #36]	; 0x24
    831a:	7ba8      	ldrb	r0, [r5, #14]
    831c:	2600      	movs	r6, #0
    831e:	b120      	cbz	r0, 832a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32a>
    8320:	f004 ff82 	bl	d228 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8324:	f004 fda8 	bl	ce78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8328:	73ae      	strb	r6, [r5, #14]
    832a:	702e      	strb	r6, [r5, #0]
    832c:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
    8330:	b120      	cbz	r0, 833c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33c>
    8332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8336:	2001      	movs	r0, #1
    8338:	f000 ba80 	b.w	883c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    833c:	7b60      	ldrb	r0, [r4, #13]
    833e:	b1d0      	cbz	r0, 8376 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x376>
    8340:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8342:	4288      	cmp	r0, r1
    8344:	d817      	bhi.n	8376 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x376>
    8346:	2001      	movs	r0, #1
    8348:	f000 fa78 	bl	883c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    834c:	78a0      	ldrb	r0, [r4, #2]
    834e:	f010 0f01 	tst.w	r0, #1
    8352:	d008      	beq.n	8366 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x366>
    8354:	480b      	ldr	r0, [pc, #44]	; (8384 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x384>)
    8356:	2243      	movs	r2, #67	; 0x43
    8358:	6840      	ldr	r0, [r0, #4]
    835a:	8801      	ldrh	r1, [r0, #0]
    835c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8360:	2001      	movs	r0, #1
    8362:	f7ff bd6b 	b.w	7e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    8366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    836a:	2243      	movs	r2, #67	; 0x43
    836c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8370:	2000      	movs	r0, #0
    8372:	f7ff bd63 	b.w	7e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    8376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    837a:	2000      	movs	r0, #0
    837c:	f000 ba5e 	b.w	883c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8380:	20001334 	.word	0x20001334
    8384:	2000010c 	.word	0x2000010c
    8388:	b570      	push	{r4, r5, r6, lr}
    838a:	4c3a      	ldr	r4, [pc, #232]	; (8474 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x474>)
    838c:	4605      	mov	r5, r0
    838e:	460e      	mov	r6, r1
    8390:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    8394:	b120      	cbz	r0, 83a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a0>
    8396:	f640 21e9 	movw	r1, #2793	; 0xae9
    839a:	202d      	movs	r0, #45	; 0x2d
    839c:	f7fb fbf0 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83a0:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    83a4:	8828      	ldrh	r0, [r5, #0]
    83a6:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    83aa:	2a00      	cmp	r2, #0
    83ac:	bf18      	it	ne
    83ae:	bd70      	popne	{r4, r5, r6, pc}
    83b0:	6868      	ldr	r0, [r5, #4]
    83b2:	f007 fd2f 	bl	fe14 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    83b6:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    83ba:	8928      	ldrh	r0, [r5, #8]
    83bc:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    83c0:	8968      	ldrh	r0, [r5, #10]
    83c2:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    83c6:	f895 0184 	ldrb.w	r0, [r5, #388]	; 0x184
    83ca:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    83ce:	7ca0      	ldrb	r0, [r4, #18]
    83d0:	2500      	movs	r5, #0
    83d2:	b150      	cbz	r0, 83ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ea>
    83d4:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    83d8:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    83dc:	2901      	cmp	r1, #1
    83de:	d104      	bne.n	83ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ea>
    83e0:	7940      	ldrb	r0, [r0, #5]
    83e2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    83e6:	2840      	cmp	r0, #64	; 0x40
    83e8:	d02d      	beq.n	8446 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x446>
    83ea:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    83ee:	b148      	cbz	r0, 8404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    83f0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    83f4:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    83f8:	2901      	cmp	r1, #1
    83fa:	bf04      	itt	eq
    83fc:	7940      	ldrbeq	r0, [r0, #5]
    83fe:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
    8402:	d020      	beq.n	8446 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x446>
    8404:	481c      	ldr	r0, [pc, #112]	; (8478 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x478>)
    8406:	f009 fd7c 	bl	11f02 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    840a:	481c      	ldr	r0, [pc, #112]	; (847c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x47c>)
    840c:	2eff      	cmp	r6, #255	; 0xff
    840e:	6800      	ldr	r0, [r0, #0]
    8410:	7801      	ldrb	r1, [r0, #0]
    8412:	f3c1 1180 	ubfx	r1, r1, #6, #1
    8416:	f884 106f 	strb.w	r1, [r4, #111]	; 0x6f
    841a:	f8d0 1003 	ldr.w	r1, [r0, #3]
    841e:	d020      	beq.n	8462 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x462>
    8420:	67e1      	str	r1, [r4, #124]	; 0x7c
    8422:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8426:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    842a:	f104 0270 	add.w	r2, r4, #112	; 0x70
    842e:	1e51      	subs	r1, r2, #1
    8430:	4630      	mov	r0, r6
    8432:	f7fd fa89 	bl	5948 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    8436:	b178      	cbz	r0, 8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    8438:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    843c:	f040 0002 	orr.w	r0, r0, #2
    8440:	f884 006f 	strb.w	r0, [r4, #111]	; 0x6f
    8444:	bd70      	pop	{r4, r5, r6, pc}
    8446:	f8d4 003d 	ldr.w	r0, [r4, #61]	; 0x3d
    844a:	f8c4 0076 	str.w	r0, [r4, #118]	; 0x76
    844e:	f8b4 0041 	ldrh.w	r0, [r4, #65]	; 0x41
    8452:	f8a4 007a 	strh.w	r0, [r4, #122]	; 0x7a
    8456:	e7d8      	b.n	840a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40a>
    8458:	f640 310a 	movw	r1, #2826	; 0xb0a
    845c:	202d      	movs	r0, #45	; 0x2d
    845e:	f7fb fb8f 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8462:	6721      	str	r1, [r4, #112]	; 0x70
    8464:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8468:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
    846c:	67e5      	str	r5, [r4, #124]	; 0x7c
    846e:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
    8472:	bd70      	pop	{r4, r5, r6, pc}
    8474:	20001334 	.word	0x20001334
    8478:	200013aa 	.word	0x200013aa
    847c:	2000010c 	.word	0x2000010c
    8480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8484:	b084      	sub	sp, #16
    8486:	4c52      	ldr	r4, [pc, #328]	; (85d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d0>)
    8488:	20ff      	movs	r0, #255	; 0xff
    848a:	f88d 0000 	strb.w	r0, [sp]
    848e:	6820      	ldr	r0, [r4, #0]
    8490:	f04f 0901 	mov.w	r9, #1
    8494:	7801      	ldrb	r1, [r0, #0]
    8496:	f3c1 1880 	ubfx	r8, r1, #6, #1
    849a:	f8d0 1003 	ldr.w	r1, [r0, #3]
    849e:	9101      	str	r1, [sp, #4]
    84a0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    84a4:	f8ad 0008 	strh.w	r0, [sp, #8]
    84a8:	4669      	mov	r1, sp
    84aa:	2005      	movs	r0, #5
    84ac:	f7ff fd00 	bl	7eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    84b0:	2800      	cmp	r0, #0
    84b2:	d07d      	beq.n	85b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b0>
    84b4:	e9d4 0500 	ldrd	r0, r5, [r4]
    84b8:	4f46      	ldr	r7, [pc, #280]	; (85d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d4>)
    84ba:	f8d0 100f 	ldr.w	r1, [r0, #15]
    84be:	797e      	ldrb	r6, [r7, #5]
    84c0:	f8c5 1012 	str.w	r1, [r5, #18]
    84c4:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    84c8:	82e9      	strh	r1, [r5, #22]
    84ca:	7d41      	ldrb	r1, [r0, #21]
    84cc:	7629      	strb	r1, [r5, #24]
    84ce:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    84d2:	f007 fc93 	bl	fdfc <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    84d6:	4682      	mov	sl, r0
    84d8:	6068      	str	r0, [r5, #4]
    84da:	6820      	ldr	r0, [r4, #0]
    84dc:	4651      	mov	r1, sl
    84de:	7d80      	ldrb	r0, [r0, #22]
    84e0:	f007 feda 	bl	10298 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    84e4:	8368      	strh	r0, [r5, #26]
    84e6:	6820      	ldr	r0, [r4, #0]
    84e8:	4651      	mov	r1, sl
    84ea:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    84ee:	f007 feca 	bl	10286 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    84f2:	61e8      	str	r0, [r5, #28]
    84f4:	6820      	ldr	r0, [r4, #0]
    84f6:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    84fa:	8129      	strh	r1, [r5, #8]
    84fc:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    8500:	8169      	strh	r1, [r5, #10]
    8502:	f100 011f 	add.w	r1, r0, #31
    8506:	f105 000c 	add.w	r0, r5, #12
    850a:	f009 fcf5 	bl	11ef8 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    850e:	6820      	ldr	r0, [r4, #0]
    8510:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    8514:	f001 011f 	and.w	r1, r1, #31
    8518:	f885 1020 	strb.w	r1, [r5, #32]
    851c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    8520:	0940      	lsrs	r0, r0, #5
    8522:	f885 0184 	strb.w	r0, [r5, #388]	; 0x184
    8526:	f885 6066 	strb.w	r6, [r5, #102]	; 0x66
    852a:	f885 6067 	strb.w	r6, [r5, #103]	; 0x67
    852e:	2101      	movs	r1, #1
    8530:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
    8534:	2100      	movs	r1, #0
    8536:	f105 0028 	add.w	r0, r5, #40	; 0x28
    853a:	f008 fa21 	bl	10980 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    853e:	7bf8      	ldrb	r0, [r7, #15]
    8540:	f885 006a 	strb.w	r0, [r5, #106]	; 0x6a
    8544:	2200      	movs	r2, #0
    8546:	f89d 1000 	ldrb.w	r1, [sp]
    854a:	6860      	ldr	r0, [r4, #4]
    854c:	f7ff ff1c 	bl	8388 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x388>
    8550:	2106      	movs	r1, #6
    8552:	6860      	ldr	r0, [r4, #4]
    8554:	f000 fb86 	bl	8c64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8558:	481f      	ldr	r0, [pc, #124]	; (85d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d8>)
    855a:	2100      	movs	r1, #0
    855c:	ad01      	add	r5, sp, #4
    855e:	6806      	ldr	r6, [r0, #0]
    8560:	6820      	ldr	r0, [r4, #0]
    8562:	8001      	strh	r1, [r0, #0]
    8564:	2108      	movs	r1, #8
    8566:	f008 f85d 	bl	10624 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    856a:	2100      	movs	r1, #0
    856c:	6820      	ldr	r0, [r4, #0]
    856e:	f007 fff8 	bl	10562 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>
    8572:	4631      	mov	r1, r6
    8574:	6820      	ldr	r0, [r4, #0]
    8576:	f008 f827 	bl	105c8 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    857a:	2306      	movs	r3, #6
    857c:	2200      	movs	r2, #0
    857e:	f107 013d 	add.w	r1, r7, #61	; 0x3d
    8582:	6820      	ldr	r0, [r4, #0]
    8584:	f008 f806 	bl	10594 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    8588:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
    858c:	6820      	ldr	r0, [r4, #0]
    858e:	f008 f882 	bl	10696 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8592:	4641      	mov	r1, r8
    8594:	6820      	ldr	r0, [r4, #0]
    8596:	f008 f86e 	bl	10676 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    859a:	2306      	movs	r3, #6
    859c:	2201      	movs	r2, #1
    859e:	4629      	mov	r1, r5
    85a0:	6820      	ldr	r0, [r4, #0]
    85a2:	f007 fff7 	bl	10594 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    85a6:	7979      	ldrb	r1, [r7, #5]
    85a8:	20ff      	movs	r0, #255	; 0xff
    85aa:	f005 fd3b 	bl	e024 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    85ae:	e000      	b.n	85b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b2>
    85b0:	e007      	b.n	85c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c2>
    85b2:	6820      	ldr	r0, [r4, #0]
    85b4:	f005 fa26 	bl	da04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    85b8:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
    85bc:	2009      	movs	r0, #9
    85be:	7008      	strb	r0, [r1, #0]
    85c0:	e001      	b.n	85c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c6>
    85c2:	f7ff fea3 	bl	830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>
    85c6:	b004      	add	sp, #16
    85c8:	4648      	mov	r0, r9
    85ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85ce:	0000      	.short	0x0000
    85d0:	2000010c 	.word	0x2000010c
    85d4:	20001334 	.word	0x20001334
    85d8:	000086d4 	.word	0x000086d4
    85dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    85e0:	20ff      	movs	r0, #255	; 0xff
    85e2:	f88d 0000 	strb.w	r0, [sp]
    85e6:	2701      	movs	r7, #1
    85e8:	4669      	mov	r1, sp
    85ea:	2005      	movs	r0, #5
    85ec:	f7ff fc60 	bl	7eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    85f0:	2800      	cmp	r0, #0
    85f2:	bf08      	it	eq
    85f4:	2700      	moveq	r7, #0
    85f6:	d065      	beq.n	86c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c4>
    85f8:	4d34      	ldr	r5, [pc, #208]	; (86cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6cc>)
    85fa:	2601      	movs	r6, #1
    85fc:	6828      	ldr	r0, [r5, #0]
    85fe:	686c      	ldr	r4, [r5, #4]
    8600:	7802      	ldrb	r2, [r0, #0]
    8602:	7c61      	ldrb	r1, [r4, #17]
    8604:	f3c2 1240 	ubfx	r2, r2, #5, #1
    8608:	4011      	ands	r1, r2
    860a:	7461      	strb	r1, [r4, #17]
    860c:	f8d0 100f 	ldr.w	r1, [r0, #15]
    8610:	f8c4 1012 	str.w	r1, [r4, #18]
    8614:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    8618:	82e1      	strh	r1, [r4, #22]
    861a:	7d41      	ldrb	r1, [r0, #21]
    861c:	7621      	strb	r1, [r4, #24]
    861e:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    8622:	f007 fbeb 	bl	fdfc <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8626:	4680      	mov	r8, r0
    8628:	6060      	str	r0, [r4, #4]
    862a:	6828      	ldr	r0, [r5, #0]
    862c:	4641      	mov	r1, r8
    862e:	7d80      	ldrb	r0, [r0, #22]
    8630:	f007 fe32 	bl	10298 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8634:	8360      	strh	r0, [r4, #26]
    8636:	6828      	ldr	r0, [r5, #0]
    8638:	4641      	mov	r1, r8
    863a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    863e:	f007 fe22 	bl	10286 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8642:	61e0      	str	r0, [r4, #28]
    8644:	6828      	ldr	r0, [r5, #0]
    8646:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    864a:	8121      	strh	r1, [r4, #8]
    864c:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    8650:	8161      	strh	r1, [r4, #10]
    8652:	f100 011f 	add.w	r1, r0, #31
    8656:	f104 000c 	add.w	r0, r4, #12
    865a:	f009 fc4d 	bl	11ef8 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    865e:	6828      	ldr	r0, [r5, #0]
    8660:	46b0      	mov	r8, r6
    8662:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    8666:	f001 011f 	and.w	r1, r1, #31
    866a:	f884 1020 	strb.w	r1, [r4, #32]
    866e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    8672:	0940      	lsrs	r0, r0, #5
    8674:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    8678:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
    867c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    8680:	f884 8068 	strb.w	r8, [r4, #104]	; 0x68
    8684:	2100      	movs	r1, #0
    8686:	f104 0028 	add.w	r0, r4, #40	; 0x28
    868a:	f008 f979 	bl	10980 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    868e:	4e10      	ldr	r6, [pc, #64]	; (86d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d0>)
    8690:	2200      	movs	r2, #0
    8692:	7bf0      	ldrb	r0, [r6, #15]
    8694:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    8698:	f89d 1000 	ldrb.w	r1, [sp]
    869c:	6868      	ldr	r0, [r5, #4]
    869e:	f7ff fe73 	bl	8388 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x388>
    86a2:	f886 8068 	strb.w	r8, [r6, #104]	; 0x68
    86a6:	f896 206a 	ldrb.w	r2, [r6, #106]	; 0x6a
    86aa:	f8b6 106c 	ldrh.w	r1, [r6, #108]	; 0x6c
    86ae:	2001      	movs	r0, #1
    86b0:	f7ff fbc4 	bl	7e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    86b4:	f106 01c8 	add.w	r1, r6, #200	; 0xc8
    86b8:	2000      	movs	r0, #0
    86ba:	7008      	strb	r0, [r1, #0]
    86bc:	2105      	movs	r1, #5
    86be:	6868      	ldr	r0, [r5, #4]
    86c0:	f000 fad0 	bl	8c64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    86c4:	4638      	mov	r0, r7
    86c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    86ca:	0000      	.short	0x0000
    86cc:	2000010c 	.word	0x2000010c
    86d0:	20001334 	.word	0x20001334
    86d4:	00000003 	.word	0x00000003
    86d8:	55555501 	.word	0x55555501
    86dc:	8e89bed6 	.word	0x8e89bed6
    86e0:	00007a95 	.word	0x00007a95
    86e4:	000077e1 	.word	0x000077e1
    86e8:	000079e5 	.word	0x000079e5
    86ec:	00000000 	.word	0x00000000
    86f0:	00008bbd 	.word	0x00008bbd
    86f4:	000078e9 	.word	0x000078e9
    86f8:	00007a21 	.word	0x00007a21
    86fc:	000109f3 	.word	0x000109f3
    8700:	000109f9 	.word	0x000109f9
    8704:	000109ff 	.word	0x000109ff
    8708:	00007dc5 	.word	0x00007dc5
    870c:	00010a15 	.word	0x00010a15
    8710:	00008700 	.word	0x00008700
    8714:	000086f8 	.word	0x000086f8
    8718:	000086f4 	.word	0x000086f4

0000871c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    871c:	b510      	push	{r4, lr}
    871e:	1e42      	subs	r2, r0, #1
    8720:	2a02      	cmp	r2, #2
    8722:	d903      	bls.n	872c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
    8724:	21ca      	movs	r1, #202	; 0xca
    8726:	202f      	movs	r0, #47	; 0x2f
    8728:	f7fb fa2a 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    872c:	1e40      	subs	r0, r0, #1
    872e:	2910      	cmp	r1, #16
    8730:	bf02      	ittt	eq
    8732:	490a      	ldreq	r1, [pc, #40]	; (875c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
    8734:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
    8738:	bd10      	popeq	{r4, pc}
    873a:	2912      	cmp	r1, #18
    873c:	bf14      	ite	ne
    873e:	2913      	cmpne	r1, #19
    8740:	4907      	ldreq	r1, [pc, #28]	; (8760 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
    8742:	d007      	beq.n	8754 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8744:	2915      	cmp	r1, #21
    8746:	bf08      	it	eq
    8748:	4906      	ldreq	r1, [pc, #24]	; (8764 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
    874a:	d003      	beq.n	8754 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    874c:	21d8      	movs	r1, #216	; 0xd8
    874e:	202f      	movs	r0, #47	; 0x2f
    8750:	f7fb fa16 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8754:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8758:	bd10      	pop	{r4, pc}
    875a:	0000      	.short	0x0000
    875c:	00010b72 	.word	0x00010b72
    8760:	00010b6c 	.word	0x00010b6c
    8764:	00010b78 	.word	0x00010b78

00008768 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8768:	1e42      	subs	r2, r0, #1
    876a:	b510      	push	{r4, lr}
    876c:	b2d2      	uxtb	r2, r2
    876e:	2a01      	cmp	r2, #1
    8770:	d905      	bls.n	877e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
    8772:	291d      	cmp	r1, #29
    8774:	d01e      	beq.n	87b4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    8776:	21ee      	movs	r1, #238	; 0xee
    8778:	202f      	movs	r0, #47	; 0x2f
    877a:	f7fb fa01 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    877e:	2913      	cmp	r1, #19
    8780:	d014      	beq.n	87ac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    8782:	dc08      	bgt.n	8796 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    8784:	2910      	cmp	r1, #16
    8786:	bf02      	ittt	eq
    8788:	480d      	ldreq	r0, [pc, #52]	; (87c0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
    878a:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
    878e:	bd10      	popeq	{r4, pc}
    8790:	2912      	cmp	r1, #18
    8792:	d00b      	beq.n	87ac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    8794:	e005      	b.n	87a2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
    8796:	2915      	cmp	r1, #21
    8798:	bf08      	it	eq
    879a:	480a      	ldreq	r0, [pc, #40]	; (87c4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
    879c:	d007      	beq.n	87ae <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
    879e:	291d      	cmp	r1, #29
    87a0:	d008      	beq.n	87b4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    87a2:	f44f 7181 	mov.w	r1, #258	; 0x102
    87a6:	202f      	movs	r0, #47	; 0x2f
    87a8:	f7fb f9ea 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87ac:	4806      	ldr	r0, [pc, #24]	; (87c8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
    87ae:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    87b2:	bd10      	pop	{r4, pc}
    87b4:	f240 315a 	movw	r1, #858	; 0x35a
    87b8:	fb10 f001 	smulbb	r0, r0, r1
    87bc:	bd10      	pop	{r4, pc}
    87be:	0000      	.short	0x0000
    87c0:	00010b60 	.word	0x00010b60
    87c4:	00010b68 	.word	0x00010b68
    87c8:	00010b64 	.word	0x00010b64

000087cc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    87cc:	b570      	push	{r4, r5, r6, lr}
    87ce:	4c1a      	ldr	r4, [pc, #104]	; (8838 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x6c>)
    87d0:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    87d4:	2800      	cmp	r0, #0
    87d6:	bf1c      	itt	ne
    87d8:	2000      	movne	r0, #0
    87da:	bd70      	popne	{r4, r5, r6, pc}
    87dc:	7a20      	ldrb	r0, [r4, #8]
    87de:	b138      	cbz	r0, 87f0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    87e0:	68e1      	ldr	r1, [r4, #12]
    87e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    87e4:	4288      	cmp	r0, r1
    87e6:	d903      	bls.n	87f0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    87e8:	f7fe fef4 	bl	75d4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    87ec:	2000      	movs	r0, #0
    87ee:	bd70      	pop	{r4, r5, r6, pc}
    87f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    87f2:	b1f8      	cbz	r0, 8834 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    87f4:	f7fe fcb6 	bl	7164 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    87f8:	4605      	mov	r5, r0
    87fa:	f7fe fcdb 	bl	71b4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    87fe:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    8802:	4428      	add	r0, r5
    8804:	f242 7110 	movw	r1, #10000	; 0x2710
    8808:	1846      	adds	r6, r0, r1
    880a:	f005 ffa6 	bl	e75a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    880e:	4605      	mov	r5, r0
    8810:	4629      	mov	r1, r5
    8812:	6b20      	ldr	r0, [r4, #48]	; 0x30
    8814:	f7f8 fe32 	bl	147c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8818:	6325      	str	r5, [r4, #48]	; 0x30
    881a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    881c:	1982      	adds	r2, r0, r6
    881e:	4291      	cmp	r1, r2
    8820:	bf24      	itt	cs
    8822:	1a08      	subcs	r0, r1, r0
    8824:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    8826:	d205      	bcs.n	8834 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    8828:	2001      	movs	r0, #1
    882a:	62e0      	str	r0, [r4, #44]	; 0x2c
    882c:	f7fe fed2 	bl	75d4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8830:	2000      	movs	r0, #0
    8832:	bd70      	pop	{r4, r5, r6, pc}
    8834:	2001      	movs	r0, #1
    8836:	bd70      	pop	{r4, r5, r6, pc}
    8838:	2000140c 	.word	0x2000140c

0000883c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    883e:	4f25      	ldr	r7, [pc, #148]	; (88d4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x98>)
    8840:	4c25      	ldr	r4, [pc, #148]	; (88d8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x9c>)
    8842:	2500      	movs	r5, #0
    8844:	b130      	cbz	r0, 8854 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x18>
    8846:	2801      	cmp	r0, #1
    8848:	d039      	beq.n	88be <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x82>
    884a:	f240 7153 	movw	r1, #1875	; 0x753
    884e:	2030      	movs	r0, #48	; 0x30
    8850:	f7fb f996 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8854:	7860      	ldrb	r0, [r4, #1]
    8856:	2600      	movs	r6, #0
    8858:	b160      	cbz	r0, 8874 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x38>
    885a:	2101      	movs	r1, #1
    885c:	4668      	mov	r0, sp
    885e:	f7fb ff8f 	bl	4780 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    8862:	f89d 0000 	ldrb.w	r0, [sp]
    8866:	f242 7110 	movw	r1, #10000	; 0x2710
    886a:	0200      	lsls	r0, r0, #8
    886c:	fbb0 f2f1 	udiv	r2, r0, r1
    8870:	fb01 0612 	mls	r6, r1, r2, r0
    8874:	f7fe fc76 	bl	7164 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8878:	1981      	adds	r1, r0, r6
    887a:	6a20      	ldr	r0, [r4, #32]
    887c:	f7f8 fdc8 	bl	1410 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8880:	6220      	str	r0, [r4, #32]
    8882:	7525      	strb	r5, [r4, #20]
    8884:	77e5      	strb	r5, [r4, #31]
    8886:	2003      	movs	r0, #3
    8888:	77a0      	strb	r0, [r4, #30]
    888a:	2064      	movs	r0, #100	; 0x64
    888c:	83a0      	strh	r0, [r4, #28]
    888e:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    8892:	b928      	cbnz	r0, 88a0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x64>
    8894:	7820      	ldrb	r0, [r4, #0]
    8896:	f104 0114 	add.w	r1, r4, #20
    889a:	f7f8 ff0d 	bl	16b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    889e:	b148      	cbz	r0, 88b4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x78>
    88a0:	84a5      	strh	r5, [r4, #36]	; 0x24
    88a2:	f004 ffdd 	bl	d860 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    88a6:	f7f9 fd7b 	bl	23a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    88aa:	7978      	ldrb	r0, [r7, #5]
    88ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    88b0:	f7fa bf5a 	b.w	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    88b4:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
    88b8:	2030      	movs	r0, #48	; 0x30
    88ba:	f7fb f961 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88be:	7225      	strb	r5, [r4, #8]
    88c0:	f004 ffce 	bl	d860 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    88c4:	f7f9 fd6c 	bl	23a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    88c8:	7978      	ldrb	r0, [r7, #5]
    88ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    88ce:	f7fa bf4b 	b.w	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    88d2:	0000      	.short	0x0000
    88d4:	20000120 	.word	0x20000120
    88d8:	2000140c 	.word	0x2000140c

000088dc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    88dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88e0:	4d48      	ldr	r5, [pc, #288]	; (8a04 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    88e2:	4606      	mov	r6, r0
    88e4:	460f      	mov	r7, r1
    88e6:	7c28      	ldrb	r0, [r5, #16]
    88e8:	2800      	cmp	r0, #0
    88ea:	d150      	bne.n	898e <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    88ec:	4846      	ldr	r0, [pc, #280]	; (8a08 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    88ee:	f7f9 fd35 	bl	235c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    88f2:	2820      	cmp	r0, #32
    88f4:	d04b      	beq.n	898e <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    88f6:	2400      	movs	r4, #0
    88f8:	602c      	str	r4, [r5, #0]
    88fa:	606c      	str	r4, [r5, #4]
    88fc:	60ac      	str	r4, [r5, #8]
    88fe:	60ec      	str	r4, [r5, #12]
    8900:	612c      	str	r4, [r5, #16]
    8902:	616c      	str	r4, [r5, #20]
    8904:	61ac      	str	r4, [r5, #24]
    8906:	61ec      	str	r4, [r5, #28]
    8908:	622c      	str	r4, [r5, #32]
    890a:	626c      	str	r4, [r5, #36]	; 0x24
    890c:	62ac      	str	r4, [r5, #40]	; 0x28
    890e:	62ec      	str	r4, [r5, #44]	; 0x2c
    8910:	632c      	str	r4, [r5, #48]	; 0x30
    8912:	636c      	str	r4, [r5, #52]	; 0x34
    8914:	63ac      	str	r4, [r5, #56]	; 0x38
    8916:	7028      	strb	r0, [r5, #0]
    8918:	f04f 0803 	mov.w	r8, #3
    891c:	606e      	str	r6, [r5, #4]
    891e:	f885 8010 	strb.w	r8, [r5, #16]
    8922:	b15e      	cbz	r6, 893c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x60>
    8924:	2101      	movs	r1, #1
    8926:	f506 7098 	add.w	r0, r6, #304	; 0x130
    892a:	f7fb ff3f 	bl	47ac <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    892e:	f896 0130 	ldrb.w	r0, [r6, #304]	; 0x130
    8932:	f000 0007 	and.w	r0, r0, #7
    8936:	1c40      	adds	r0, r0, #1
    8938:	f886 0130 	strb.w	r0, [r6, #304]	; 0x130
    893c:	2064      	movs	r0, #100	; 0x64
    893e:	83a8      	strh	r0, [r5, #28]
    8940:	f885 801e 	strb.w	r8, [r5, #30]
    8944:	77ec      	strb	r4, [r5, #31]
    8946:	752c      	strb	r4, [r5, #20]
    8948:	f7f8 feac 	bl	16a4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    894c:	8ba9      	ldrh	r1, [r5, #28]
    894e:	4288      	cmp	r0, r1
    8950:	bf98      	it	ls
    8952:	4608      	movls	r0, r1
    8954:	f200 60c2 	addw	r0, r0, #1730	; 0x6c2
    8958:	b286      	uxth	r6, r0
    895a:	f7fe fd81 	bl	7460 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    895e:	f04f 0801 	mov.w	r8, #1
    8962:	b1f8      	cbz	r0, 89a4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc8>
    8964:	61af      	str	r7, [r5, #24]
    8966:	f005 fef8 	bl	e75a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    896a:	4631      	mov	r1, r6
    896c:	f7f8 fd50 	bl	1410 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8970:	6228      	str	r0, [r5, #32]
    8972:	706c      	strb	r4, [r5, #1]
    8974:	f885 8008 	strb.w	r8, [r5, #8]
    8978:	f7fe fd68 	bl	744c <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
    897c:	b150      	cbz	r0, 8994 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb8>
    897e:	f7fe fc19 	bl	71b4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8982:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    8986:	1a38      	subs	r0, r7, r0
    8988:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
    898c:	e007      	b.n	899e <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc2>
    898e:	200c      	movs	r0, #12
    8990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8994:	f008 f8e1 	bl	10b5a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    8998:	1a38      	subs	r0, r7, r0
    899a:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
    899e:	62ec      	str	r4, [r5, #44]	; 0x2c
    89a0:	60e8      	str	r0, [r5, #12]
    89a2:	e01d      	b.n	89e0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x104>
    89a4:	f7fe fc06 	bl	71b4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    89a8:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    89ac:	61a8      	str	r0, [r5, #24]
    89ae:	f885 8001 	strb.w	r8, [r5, #1]
    89b2:	f005 fed2 	bl	e75a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    89b6:	4680      	mov	r8, r0
    89b8:	2101      	movs	r1, #1
    89ba:	4668      	mov	r0, sp
    89bc:	f7fb feee 	bl	479c <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    89c0:	f89d 0000 	ldrb.w	r0, [sp]
    89c4:	f242 7110 	movw	r1, #10000	; 0x2710
    89c8:	0200      	lsls	r0, r0, #8
    89ca:	fbb0 f2f1 	udiv	r2, r0, r1
    89ce:	fb01 0012 	mls	r0, r1, r2, r0
    89d2:	1981      	adds	r1, r0, r6
    89d4:	4640      	mov	r0, r8
    89d6:	f7f8 fd1b 	bl	1410 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    89da:	6228      	str	r0, [r5, #32]
    89dc:	e9c5 780b 	strd	r7, r8, [r5, #44]	; 0x2c
    89e0:	7828      	ldrb	r0, [r5, #0]
    89e2:	f105 0114 	add.w	r1, r5, #20
    89e6:	f7f8 fe67 	bl	16b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    89ea:	b130      	cbz	r0, 89fa <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11e>
    89ec:	84ac      	strh	r4, [r5, #36]	; 0x24
    89ee:	2000      	movs	r0, #0
    89f0:	f7fe fdda 	bl	75a8 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    89f4:	2000      	movs	r0, #0
    89f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    89fa:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    89fe:	2030      	movs	r0, #48	; 0x30
    8a00:	f7fb f8be 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a04:	2000140c 	.word	0x2000140c
    8a08:	00009519 	.word	0x00009519

00008a0c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    8a0c:	b510      	push	{r4, lr}
    8a0e:	4c11      	ldr	r4, [pc, #68]	; (8a54 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x48>)
    8a10:	7c20      	ldrb	r0, [r4, #16]
    8a12:	b158      	cbz	r0, 8a2c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x20>
    8a14:	2001      	movs	r0, #1
    8a16:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    8a1a:	f7fe fdc5 	bl	75a8 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8a1e:	7c20      	ldrb	r0, [r4, #16]
    8a20:	2803      	cmp	r0, #3
    8a22:	d005      	beq.n	8a30 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x24>
    8a24:	7c60      	ldrb	r0, [r4, #17]
    8a26:	2800      	cmp	r0, #0
    8a28:	bf08      	it	eq
    8a2a:	bd10      	popeq	{r4, pc}
    8a2c:	200c      	movs	r0, #12
    8a2e:	bd10      	pop	{r4, pc}
    8a30:	7820      	ldrb	r0, [r4, #0]
    8a32:	f7f9 fa5d 	bl	1ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8a36:	7820      	ldrb	r0, [r4, #0]
    8a38:	f7f9 fb88 	bl	214c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8a3c:	7820      	ldrb	r0, [r4, #0]
    8a3e:	f7f9 fb63 	bl	2108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8a42:	b110      	cbz	r0, 8a4a <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    8a44:	2000      	movs	r0, #0
    8a46:	7420      	strb	r0, [r4, #16]
    8a48:	bd10      	pop	{r4, pc}
    8a4a:	f240 11ef 	movw	r1, #495	; 0x1ef
    8a4e:	2030      	movs	r0, #48	; 0x30
    8a50:	f7fb f896 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a54:	2000140c 	.word	0x2000140c

00008a58 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    8a58:	4801      	ldr	r0, [pc, #4]	; (8a60 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A+0x8>)
    8a5a:	6840      	ldr	r0, [r0, #4]
    8a5c:	4770      	bx	lr
    8a5e:	0000      	.short	0x0000
    8a60:	2000140c 	.word	0x2000140c

00008a64 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    8a64:	4802      	ldr	r0, [pc, #8]	; (8a70 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xc>)
    8a66:	7c00      	ldrb	r0, [r0, #16]
    8a68:	2800      	cmp	r0, #0
    8a6a:	bf18      	it	ne
    8a6c:	2001      	movne	r0, #1
    8a6e:	4770      	bx	lr
    8a70:	2000140c 	.word	0x2000140c

00008a74 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    8a74:	4906      	ldr	r1, [pc, #24]	; (8a90 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x1c>)
    8a76:	7148      	strb	r0, [r1, #5]
    8a78:	2000      	movs	r0, #0
    8a7a:	7088      	strb	r0, [r1, #2]
    8a7c:	2201      	movs	r2, #1
    8a7e:	700a      	strb	r2, [r1, #0]
    8a80:	7048      	strb	r0, [r1, #1]
    8a82:	710a      	strb	r2, [r1, #4]
    8a84:	70c8      	strb	r0, [r1, #3]
    8a86:	4903      	ldr	r1, [pc, #12]	; (8a94 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x20>)
    8a88:	7408      	strb	r0, [r1, #16]
    8a8a:	f000 b805 	b.w	8a98 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    8a8e:	0000      	.short	0x0000
    8a90:	20000120 	.word	0x20000120
    8a94:	2000140c 	.word	0x2000140c

00008a98 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    8a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a9c:	4c3d      	ldr	r4, [pc, #244]	; (8b94 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xfc>)
    8a9e:	b084      	sub	sp, #16
    8aa0:	7c20      	ldrb	r0, [r4, #16]
    8aa2:	2601      	movs	r6, #1
    8aa4:	2500      	movs	r5, #0
    8aa6:	b148      	cbz	r0, 8abc <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    8aa8:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    8aac:	2001      	movs	r0, #1
    8aae:	f7fe fd7b 	bl	75a8 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8ab2:	7c20      	ldrb	r0, [r4, #16]
    8ab4:	2803      	cmp	r0, #3
    8ab6:	bf18      	it	ne
    8ab8:	7c60      	ldrbne	r0, [r4, #17]
    8aba:	d00b      	beq.n	8ad4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x3c>
    8abc:	4f36      	ldr	r7, [pc, #216]	; (8b98 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x100>)
    8abe:	70fe      	strb	r6, [r7, #3]
    8ac0:	4669      	mov	r1, sp
    8ac2:	2001      	movs	r0, #1
    8ac4:	f007 f880 	bl	fbc8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8ac8:	2800      	cmp	r0, #0
    8aca:	bf08      	it	eq
    8acc:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    8ad0:	d040      	beq.n	8b54 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    8ad2:	e03a      	b.n	8b4a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xb2>
    8ad4:	7820      	ldrb	r0, [r4, #0]
    8ad6:	f7f9 fa0b 	bl	1ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8ada:	7820      	ldrb	r0, [r4, #0]
    8adc:	f7f9 fb36 	bl	214c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8ae0:	7820      	ldrb	r0, [r4, #0]
    8ae2:	f7f9 fb11 	bl	2108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8ae6:	2800      	cmp	r0, #0
    8ae8:	bf18      	it	ne
    8aea:	7425      	strbne	r5, [r4, #16]
    8aec:	d1e6      	bne.n	8abc <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    8aee:	f240 11ef 	movw	r1, #495	; 0x1ef
    8af2:	2030      	movs	r0, #48	; 0x30
    8af4:	f7fb f844 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8af8:	9802      	ldr	r0, [sp, #8]
    8afa:	2800      	cmp	r0, #0
    8afc:	bf1c      	itt	ne
    8afe:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    8b02:	2900      	cmpne	r1, #0
    8b04:	d026      	beq.n	8b54 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    8b06:	8800      	ldrh	r0, [r0, #0]
    8b08:	42b0      	cmp	r0, r6
    8b0a:	bf18      	it	ne
    8b0c:	f04f 0820 	movne.w	r8, #32
    8b10:	d03b      	beq.n	8b8a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    8b12:	2101      	movs	r1, #1
    8b14:	f007 f84e 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8b18:	0004      	movs	r4, r0
    8b1a:	d021      	beq.n	8b60 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xc8>
    8b1c:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8b20:	f7f9 fb14 	bl	214c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8b24:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    8b28:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8b2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8b30:	f7fd fcca 	bl	64c8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    8b34:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8b38:	f7f9 fae6 	bl	2108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8b3c:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    8b40:	4669      	mov	r1, sp
    8b42:	2001      	movs	r0, #1
    8b44:	f007 f840 	bl	fbc8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8b48:	b1d0      	cbz	r0, 8b80 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    8b4a:	f240 111d 	movw	r1, #285	; 0x11d
    8b4e:	2030      	movs	r0, #48	; 0x30
    8b50:	f7fb f816 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b54:	4668      	mov	r0, sp
    8b56:	f7fb fa19 	bl	3f8c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8b5a:	2800      	cmp	r0, #0
    8b5c:	d0cc      	beq.n	8af8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x60>
    8b5e:	e014      	b.n	8b8a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    8b60:	f240 113d 	movw	r1, #317	; 0x13d
    8b64:	2030      	movs	r0, #48	; 0x30
    8b66:	f7fb f80b 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b6a:	9802      	ldr	r0, [sp, #8]
    8b6c:	2800      	cmp	r0, #0
    8b6e:	bf1c      	itt	ne
    8b70:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    8b74:	2900      	cmpne	r1, #0
    8b76:	d003      	beq.n	8b80 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    8b78:	8800      	ldrh	r0, [r0, #0]
    8b7a:	42b0      	cmp	r0, r6
    8b7c:	d1c9      	bne.n	8b12 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x7a>
    8b7e:	e004      	b.n	8b8a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    8b80:	4668      	mov	r0, sp
    8b82:	f7fb fa03 	bl	3f8c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8b86:	2800      	cmp	r0, #0
    8b88:	d0ef      	beq.n	8b6a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xd2>
    8b8a:	70fd      	strb	r5, [r7, #3]
    8b8c:	b004      	add	sp, #16
    8b8e:	2000      	movs	r0, #0
    8b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b94:	2000140c 	.word	0x2000140c
    8b98:	20000120 	.word	0x20000120

00008b9c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    8b9c:	4806      	ldr	r0, [pc, #24]	; (8bb8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x1c>)
    8b9e:	7c00      	ldrb	r0, [r0, #16]
    8ba0:	2800      	cmp	r0, #0
    8ba2:	bf1c      	itt	ne
    8ba4:	2000      	movne	r0, #0
    8ba6:	4770      	bxne	lr
    8ba8:	b510      	push	{r4, lr}
    8baa:	2001      	movs	r0, #1
    8bac:	f006 fff0 	bl	fb90 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    8bb0:	f080 0001 	eor.w	r0, r0, #1
    8bb4:	bd10      	pop	{r4, pc}
    8bb6:	0000      	.short	0x0000
    8bb8:	2000140c 	.word	0x2000140c

00008bbc <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    8bbc:	4904      	ldr	r1, [pc, #16]	; (8bd0 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x14>)
    8bbe:	788a      	ldrb	r2, [r1, #2]
    8bc0:	2a02      	cmp	r2, #2
    8bc2:	bf07      	ittee	eq
    8bc4:	6949      	ldreq	r1, [r1, #20]
    8bc6:	f8c1 0178 	streq.w	r0, [r1, #376]	; 0x178
    8bca:	4902      	ldrne	r1, [pc, #8]	; (8bd4 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    8bcc:	6288      	strne	r0, [r1, #40]	; 0x28
    8bce:	4770      	bx	lr
    8bd0:	20000120 	.word	0x20000120
    8bd4:	2000140c 	.word	0x2000140c

00008bd8 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    8bd8:	4901      	ldr	r1, [pc, #4]	; (8be0 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    8bda:	7008      	strb	r0, [r1, #0]
    8bdc:	4770      	bx	lr
    8bde:	0000      	.short	0x0000
    8be0:	20000120 	.word	0x20000120

00008be4 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    8be4:	4901      	ldr	r1, [pc, #4]	; (8bec <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    8be6:	7048      	strb	r0, [r1, #1]
    8be8:	4770      	bx	lr
    8bea:	0000      	.short	0x0000
    8bec:	20000120 	.word	0x20000120

00008bf0 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    8bf0:	4905      	ldr	r1, [pc, #20]	; (8c08 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    8bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8bf6:	fbb1 f1f2 	udiv	r1, r1, r2
    8bfa:	b510      	push	{r4, lr}
    8bfc:	f201 210d 	addw	r1, r1, #525	; 0x20d
    8c00:	f007 fed8 	bl	109b4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8c04:	b280      	uxth	r0, r0
    8c06:	bd10      	pop	{r4, pc}
    8c08:	0001527d 	.word	0x0001527d

00008c0c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c10:	4c13      	ldr	r4, [pc, #76]	; (8c60 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x54>)
    8c12:	4606      	mov	r6, r0
    8c14:	f8d0 7178 	ldr.w	r7, [r0, #376]	; 0x178
    8c18:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    8c1c:	7860      	ldrb	r0, [r4, #1]
    8c1e:	b120      	cbz	r0, 8c2a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1e>
    8c20:	463a      	mov	r2, r7
    8c22:	4628      	mov	r0, r5
    8c24:	f007 f907 	bl	fe36 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8c28:	4605      	mov	r5, r0
    8c2a:	68a0      	ldr	r0, [r4, #8]
    8c2c:	4285      	cmp	r5, r0
    8c2e:	d005      	beq.n	8c3c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x30>
    8c30:	6921      	ldr	r1, [r4, #16]
    8c32:	1a28      	subs	r0, r5, r0
    8c34:	4408      	add	r0, r1
    8c36:	6120      	str	r0, [r4, #16]
    8c38:	f7f9 fc4a 	bl	24d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8c3c:	60a5      	str	r5, [r4, #8]
    8c3e:	42af      	cmp	r7, r5
    8c40:	d80a      	bhi.n	8c58 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x4c>
    8c42:	6870      	ldr	r0, [r6, #4]
    8c44:	f641 514c 	movw	r1, #7500	; 0x1d4c
    8c48:	4281      	cmp	r1, r0
    8c4a:	bf9c      	itt	ls
    8c4c:	78e0      	ldrbls	r0, [r4, #3]
    8c4e:	2800      	cmpls	r0, #0
    8c50:	bf04      	itt	eq
    8c52:	2001      	moveq	r0, #1
    8c54:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c58:	f04f 0000 	mov.w	r0, #0
    8c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c60:	20000120 	.word	0x20000120

00008c64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c68:	4a67      	ldr	r2, [pc, #412]	; (8e08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a4>)
    8c6a:	2304      	movs	r3, #4
    8c6c:	2600      	movs	r6, #0
    8c6e:	4d67      	ldr	r5, [pc, #412]	; (8e0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a8>)
    8c70:	6a92      	ldr	r2, [r2, #40]	; 0x28
    8c72:	2908      	cmp	r1, #8
    8c74:	d27e      	bcs.n	8d74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x110>
    8c76:	e8df f001 	tbb	[pc, r1]
    8c7a:	2c08      	.short	0x2c08
    8c7c:	b1311b04 	.word	0xb1311b04
    8c80:	bbb7      	.short	0xbbb7
    8c82:	4604      	mov	r4, r0
    8c84:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    8c88:	e006      	b.n	8c98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34>
    8c8a:	4604      	mov	r4, r0
    8c8c:	78e8      	ldrb	r0, [r5, #3]
    8c8e:	2800      	cmp	r0, #0
    8c90:	bf18      	it	ne
    8c92:	f884 3140 	strbne.w	r3, [r4, #320]	; 0x140
    8c96:	d00d      	beq.n	8cb4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x50>
    8c98:	f004 fde2 	bl	d860 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8c9c:	f7f9 fb80 	bl	23a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8ca0:	f8a4 6172 	strh.w	r6, [r4, #370]	; 0x172
    8ca4:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    8ca8:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    8cac:	f884 6155 	strb.w	r6, [r4, #341]	; 0x155
    8cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cb4:	9600      	str	r6, [sp, #0]
    8cb6:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    8cba:	2301      	movs	r3, #1
    8cbc:	2200      	movs	r2, #0
    8cbe:	4620      	mov	r0, r4
    8cc0:	f000 f8f8 	bl	8eb4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    8cc4:	2800      	cmp	r0, #0
    8cc6:	d0e7      	beq.n	8c98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34>
    8cc8:	f240 619e 	movw	r1, #1694	; 0x69e
    8ccc:	2030      	movs	r0, #48	; 0x30
    8cce:	f7fa ff57 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cd2:	2103      	movs	r1, #3
    8cd4:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
    8cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cdc:	f004 fdb4 	bl	d848 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8ce0:	696c      	ldr	r4, [r5, #20]
    8ce2:	f8c4 017c 	str.w	r0, [r4, #380]	; 0x17c
    8ce6:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    8cea:	f009 f86d 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8cee:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    8cf2:	1a08      	subs	r0, r1, r0
    8cf4:	68a9      	ldr	r1, [r5, #8]
    8cf6:	4401      	add	r1, r0
    8cf8:	60a9      	str	r1, [r5, #8]
    8cfa:	68e9      	ldr	r1, [r5, #12]
    8cfc:	4408      	add	r0, r1
    8cfe:	60e8      	str	r0, [r5, #12]
    8d00:	696c      	ldr	r4, [r5, #20]
    8d02:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    8d06:	2800      	cmp	r0, #0
    8d08:	bf08      	it	eq
    8d0a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d0e:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    8d12:	2803      	cmp	r0, #3
    8d14:	bf18      	it	ne
    8d16:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d1a:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    8d1e:	7829      	ldrb	r1, [r5, #0]
    8d20:	290c      	cmp	r1, #12
    8d22:	d206      	bcs.n	8d32 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xce>
    8d24:	483a      	ldr	r0, [pc, #232]	; (8e10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1ac>)
    8d26:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
    8d2a:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    8d2e:	290c      	cmp	r1, #12
    8d30:	d304      	bcc.n	8d3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd8>
    8d32:	f44f 7147 	mov.w	r1, #796	; 0x31c
    8d36:	2006      	movs	r0, #6
    8d38:	f7fa ff22 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d3c:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
    8d40:	1898      	adds	r0, r3, r2
    8d42:	b285      	uxth	r5, r0
    8d44:	f502 60c8 	add.w	r0, r2, #1600	; 0x640
    8d48:	fa1f f980 	uxth.w	r9, r0
    8d4c:	4640      	mov	r0, r8
    8d4e:	f009 f83b 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8d52:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    8d56:	1a0f      	subs	r7, r1, r0
    8d58:	4640      	mov	r0, r8
    8d5a:	f009 f843 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8d5e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    8d62:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    8d66:	fbb0 f0fa 	udiv	r0, r0, sl
    8d6a:	1a3f      	subs	r7, r7, r0
    8d6c:	4640      	mov	r0, r8
    8d6e:	f009 f82b 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8d72:	e000      	b.n	8d76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x112>
    8d74:	e043      	b.n	8dfe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19a>
    8d76:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    8d7a:	eba1 0b00 	sub.w	fp, r1, r0
    8d7e:	4640      	mov	r0, r8
    8d80:	f009 f830 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8d84:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8d88:	4408      	add	r0, r1
    8d8a:	fbb0 f0fa 	udiv	r0, r0, sl
    8d8e:	ebab 0000 	sub.w	r0, fp, r0
    8d92:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    8d96:	4369      	muls	r1, r5
    8d98:	fbb1 f1f9 	udiv	r1, r1, r9
    8d9c:	2229      	movs	r2, #41	; 0x29
    8d9e:	eb02 0050 	add.w	r0, r2, r0, lsr #1
    8da2:	3160      	adds	r1, #96	; 0x60
    8da4:	eba0 0251 	sub.w	r2, r0, r1, lsr #1
    8da8:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    8dac:	4297      	cmp	r7, r2
    8dae:	d301      	bcc.n	8db4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x150>
    8db0:	4287      	cmp	r7, r0
    8db2:	d901      	bls.n	8db8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x154>
    8db4:	f7fa fb4a 	bl	344c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    8db8:	4629      	mov	r1, r5
    8dba:	6860      	ldr	r0, [r4, #4]
    8dbc:	f005 fd01 	bl	e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8dc0:	6861      	ldr	r1, [r4, #4]
    8dc2:	f641 524c 	movw	r2, #7500	; 0x1d4c
    8dc6:	4291      	cmp	r1, r2
    8dc8:	bf34      	ite	cc
    8dca:	2102      	movcc	r1, #2
    8dcc:	2100      	movcs	r1, #0
    8dce:	4408      	add	r0, r1
    8dd0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    8dd4:	f884 6156 	strb.w	r6, [r4, #342]	; 0x156
    8dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ddc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8de0:	2100      	movs	r1, #0
    8de2:	4610      	mov	r0, r2
    8de4:	f000 b816 	b.w	8e14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    8de8:	f8c0 2178 	str.w	r2, [r0, #376]	; 0x178
    8dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8df0:	f8d0 0178 	ldr.w	r0, [r0, #376]	; 0x178
    8df4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8df8:	2101      	movs	r1, #1
    8dfa:	f000 b80b 	b.w	8e14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    8dfe:	f240 7141 	movw	r1, #1857	; 0x741
    8e02:	2030      	movs	r0, #48	; 0x30
    8e04:	f7fa febc 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e08:	2000140c 	.word	0x2000140c
    8e0c:	20000120 	.word	0x20000120
    8e10:	00010c78 	.word	0x00010c78
    8e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e18:	4c24      	ldr	r4, [pc, #144]	; (8eac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x248>)
    8e1a:	2500      	movs	r5, #0
    8e1c:	4680      	mov	r8, r0
    8e1e:	7225      	strb	r5, [r4, #8]
    8e20:	6a26      	ldr	r6, [r4, #32]
    8e22:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    8e26:	7425      	strb	r5, [r4, #16]
    8e28:	2701      	movs	r7, #1
    8e2a:	7467      	strb	r7, [r4, #17]
    8e2c:	4639      	mov	r1, r7
    8e2e:	6860      	ldr	r0, [r4, #4]
    8e30:	f7fd fa46 	bl	62c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8e34:	6861      	ldr	r1, [r4, #4]
    8e36:	f8c1 6168 	str.w	r6, [r1, #360]	; 0x168
    8e3a:	7820      	ldrb	r0, [r4, #0]
    8e3c:	f881 0174 	strb.w	r0, [r1, #372]	; 0x174
    8e40:	f8c1 8178 	str.w	r8, [r1, #376]	; 0x178
    8e44:	f8c1 616c 	str.w	r6, [r1, #364]	; 0x16c
    8e48:	8809      	ldrh	r1, [r1, #0]
    8e4a:	f7fd fb3d 	bl	64c8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    8e4e:	6864      	ldr	r4, [r4, #4]
    8e50:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    8e54:	2300      	movs	r3, #0
    8e56:	f8a4 5170 	strh.w	r5, [r4, #368]	; 0x170
    8e5a:	461a      	mov	r2, r3
    8e5c:	4619      	mov	r1, r3
    8e5e:	4620      	mov	r0, r4
    8e60:	9500      	str	r5, [sp, #0]
    8e62:	f000 f827 	bl	8eb4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    8e66:	b120      	cbz	r0, 8e72 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x20e>
    8e68:	f240 210e 	movw	r1, #526	; 0x20e
    8e6c:	2030      	movs	r0, #48	; 0x30
    8e6e:	f7fa fe87 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e72:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    8e76:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    8e7a:	f884 7140 	strb.w	r7, [r4, #320]	; 0x140
    8e7e:	f8a4 5152 	strh.w	r5, [r4, #338]	; 0x152
    8e82:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
    8e86:	f884 5155 	strb.w	r5, [r4, #341]	; 0x155
    8e8a:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    8e8e:	1e40      	subs	r0, r0, #1
    8e90:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    8e94:	f8a4 5172 	strh.w	r5, [r4, #370]	; 0x172
    8e98:	f004 fce2 	bl	d860 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8e9c:	f7f9 fa80 	bl	23a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8ea0:	4803      	ldr	r0, [pc, #12]	; (8eb0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24c>)
    8ea2:	7940      	ldrb	r0, [r0, #5]
    8ea4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ea8:	f7fa bc5e 	b.w	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8eac:	2000140c 	.word	0x2000140c
    8eb0:	20000120 	.word	0x20000120
    8eb4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8eb8:	b085      	sub	sp, #20
    8eba:	4604      	mov	r4, r0
    8ebc:	2000      	movs	r0, #0
    8ebe:	9000      	str	r0, [sp, #0]
    8ec0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    8ec4:	469b      	mov	fp, r3
    8ec6:	e9cd 3002 	strd	r3, r0, [sp, #8]
    8eca:	48ff      	ldr	r0, [pc, #1020]	; (92c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    8ecc:	4689      	mov	r9, r1
    8ece:	7800      	ldrb	r0, [r0, #0]
    8ed0:	280c      	cmp	r0, #12
    8ed2:	d279      	bcs.n	8fc8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    8ed4:	49fd      	ldr	r1, [pc, #1012]	; (92cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x668>)
    8ed6:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    8eda:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
    8ede:	280c      	cmp	r0, #12
    8ee0:	d272      	bcs.n	8fc8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    8ee2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8ee6:	4410      	add	r0, r2
    8ee8:	b285      	uxth	r5, r0
    8eea:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    8eee:	280d      	cmp	r0, #13
    8ef0:	bf0c      	ite	eq
    8ef2:	2001      	moveq	r0, #1
    8ef4:	2000      	movne	r0, #0
    8ef6:	9004      	str	r0, [sp, #16]
    8ef8:	9807      	ldr	r0, [sp, #28]
    8efa:	2800      	cmp	r0, #0
    8efc:	bf04      	itt	eq
    8efe:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
    8f02:	2803      	cmpeq	r0, #3
    8f04:	d128      	bne.n	8f58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    8f06:	9804      	ldr	r0, [sp, #16]
    8f08:	b330      	cbz	r0, 8f58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    8f0a:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    8f0e:	4548      	cmp	r0, r9
    8f10:	d122      	bne.n	8f58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    8f12:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    8f16:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    8f1a:	6860      	ldr	r0, [r4, #4]
    8f1c:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    8f20:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    8f24:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    8f28:	4408      	add	r0, r1
    8f2a:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    8f2e:	4620      	mov	r0, r4
    8f30:	f000 fd16 	bl	9960 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8f34:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    8f38:	61e0      	str	r0, [r4, #28]
    8f3a:	f8b4 01a6 	ldrh.w	r0, [r4, #422]	; 0x1a6
    8f3e:	8360      	strh	r0, [r4, #26]
    8f40:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    8f44:	6060      	str	r0, [r4, #4]
    8f46:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    8f4a:	8120      	strh	r0, [r4, #8]
    8f4c:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    8f50:	8160      	strh	r0, [r4, #10]
    8f52:	2002      	movs	r0, #2
    8f54:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    8f58:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    8f5c:	f504 76ac 	add.w	r6, r4, #344	; 0x158
    8f60:	eba9 0000 	sub.w	r0, r9, r0
    8f64:	fa0f f880 	sxth.w	r8, r0
    8f68:	f8b4 0170 	ldrh.w	r0, [r4, #368]	; 0x170
    8f6c:	eba9 0000 	sub.w	r0, r9, r0
    8f70:	b207      	sxth	r7, r0
    8f72:	2f00      	cmp	r7, #0
    8f74:	da09      	bge.n	8f8a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x326>
    8f76:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    8f7a:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    8f7e:	2001      	movs	r0, #1
    8f80:	9002      	str	r0, [sp, #8]
    8f82:	2000      	movs	r0, #0
    8f84:	4647      	mov	r7, r8
    8f86:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    8f8a:	48cf      	ldr	r0, [pc, #828]	; (92c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    8f8c:	f04f 0a00 	mov.w	sl, #0
    8f90:	7900      	ldrb	r0, [r0, #4]
    8f92:	2800      	cmp	r0, #0
    8f94:	d07e      	beq.n	9094 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    8f96:	f7fa fa77 	bl	3488 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8f9a:	2800      	cmp	r0, #0
    8f9c:	d07a      	beq.n	9094 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    8f9e:	f8b4 012c 	ldrh.w	r0, [r4, #300]	; 0x12c
    8fa2:	2802      	cmp	r0, #2
    8fa4:	d37f      	bcc.n	90a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    8fa6:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    8faa:	2802      	cmp	r0, #2
    8fac:	d07b      	beq.n	90a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    8fae:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    8fb2:	2800      	cmp	r0, #0
    8fb4:	d177      	bne.n	90a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    8fb6:	6860      	ldr	r0, [r4, #4]
    8fb8:	f641 514c 	movw	r1, #7500	; 0x1d4c
    8fbc:	4288      	cmp	r0, r1
    8fbe:	d372      	bcc.n	90a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    8fc0:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    8fc4:	290c      	cmp	r1, #12
    8fc6:	d304      	bcc.n	8fd2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x36e>
    8fc8:	f44f 7147 	mov.w	r1, #796	; 0x31c
    8fcc:	2006      	movs	r0, #6
    8fce:	f7fa fdd7 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fd2:	4abe      	ldr	r2, [pc, #760]	; (92cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x668>)
    8fd4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8fd8:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    8fdc:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
    8fe0:	b289      	uxth	r1, r1
    8fe2:	460d      	mov	r5, r1
    8fe4:	2a01      	cmp	r2, #1
    8fe6:	d017      	beq.n	9018 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    8fe8:	f005 fbeb 	bl	e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8fec:	4601      	mov	r1, r0
    8fee:	6862      	ldr	r2, [r4, #4]
    8ff0:	f641 504c 	movw	r0, #7500	; 0x1d4c
    8ff4:	4282      	cmp	r2, r0
    8ff6:	bf2c      	ite	cs
    8ff8:	2000      	movcs	r0, #0
    8ffa:	2002      	movcc	r0, #2
    8ffc:	4408      	add	r0, r1
    8ffe:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    9002:	b280      	uxth	r0, r0
    9004:	4442      	add	r2, r8
    9006:	1bd1      	subs	r1, r2, r7
    9008:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    900c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    9010:	1a82      	subs	r2, r0, r2
    9012:	fb01 aa02 	mla	sl, r1, r2, sl
    9016:	e043      	b.n	90a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x43c>
    9018:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    901c:	2803      	cmp	r0, #3
    901e:	d056      	beq.n	90ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x46a>
    9020:	48ab      	ldr	r0, [pc, #684]	; (92d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>)
    9022:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    9026:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    902a:	f006 ffdd 	bl	ffe8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    902e:	69e1      	ldr	r1, [r4, #28]
    9030:	4408      	add	r0, r1
    9032:	9001      	str	r0, [sp, #4]
    9034:	4629      	mov	r1, r5
    9036:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    903a:	f005 fbc2 	bl	e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    903e:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    9042:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    9046:	1a82      	subs	r2, r0, r2
    9048:	fb01 aa02 	mla	sl, r1, r2, sl
    904c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    9050:	4629      	mov	r1, r5
    9052:	9801      	ldr	r0, [sp, #4]
    9054:	f005 fbb5 	bl	e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9058:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    905c:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    9060:	1a41      	subs	r1, r0, r1
    9062:	448a      	add	sl, r1
    9064:	4629      	mov	r1, r5
    9066:	6860      	ldr	r0, [r4, #4]
    9068:	f005 fbab 	bl	e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    906c:	4601      	mov	r1, r0
    906e:	6862      	ldr	r2, [r4, #4]
    9070:	f641 504c 	movw	r0, #7500	; 0x1d4c
    9074:	4282      	cmp	r2, r0
    9076:	bf34      	ite	cc
    9078:	2002      	movcc	r0, #2
    907a:	2000      	movcs	r0, #0
    907c:	4408      	add	r0, r1
    907e:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    9082:	4442      	add	r2, r8
    9084:	1bd1      	subs	r1, r2, r7
    9086:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    908a:	1a89      	subs	r1, r1, r2
    908c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    9090:	1a82      	subs	r2, r0, r2
    9092:	e000      	b.n	9096 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x432>
    9094:	e007      	b.n	90a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    9096:	1e49      	subs	r1, r1, #1
    9098:	fb01 aa02 	mla	sl, r1, r2, sl
    909c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    90a0:	2001      	movs	r0, #1
    90a2:	f884 0156 	strb.w	r0, [r4, #342]	; 0x156
    90a6:	f8cd a004 	str.w	sl, [sp, #4]
    90aa:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    90ae:	f24a 3aa1 	movw	sl, #41889	; 0xa3a1
    90b2:	b190      	cbz	r0, 90da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x476>
    90b4:	2801      	cmp	r0, #1
    90b6:	f000 80ed 	beq.w	9294 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    90ba:	2802      	cmp	r0, #2
    90bc:	d079      	beq.n	91b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x54e>
    90be:	2803      	cmp	r0, #3
    90c0:	f000 811b 	beq.w	92fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x696>
    90c4:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    90c8:	2030      	movs	r0, #48	; 0x30
    90ca:	f7fa fd59 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90ce:	69e1      	ldr	r1, [r4, #28]
    90d0:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    90d4:	4408      	add	r0, r1
    90d6:	9001      	str	r0, [sp, #4]
    90d8:	e7ac      	b.n	9034 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3d0>
    90da:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    90de:	2800      	cmp	r0, #0
    90e0:	d062      	beq.n	91a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x544>
    90e2:	487b      	ldr	r0, [pc, #492]	; (92d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>)
    90e4:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    90e8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    90ec:	f006 ff7c 	bl	ffe8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    90f0:	4607      	mov	r7, r0
    90f2:	69e0      	ldr	r0, [r4, #28]
    90f4:	4629      	mov	r1, r5
    90f6:	4438      	add	r0, r7
    90f8:	f005 fb63 	bl	e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    90fc:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    9100:	4629      	mov	r1, r5
    9102:	6860      	ldr	r0, [r4, #4]
    9104:	f005 fb5d 	bl	e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9108:	6862      	ldr	r2, [r4, #4]
    910a:	f641 514c 	movw	r1, #7500	; 0x1d4c
    910e:	428a      	cmp	r2, r1
    9110:	bf2c      	ite	cs
    9112:	2100      	movcs	r1, #0
    9114:	2102      	movcc	r1, #2
    9116:	4408      	add	r0, r1
    9118:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    911c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9120:	f008 fe60 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9124:	f64d 7141 	movw	r1, #57153	; 0xdf41
    9128:	4408      	add	r0, r1
    912a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    912e:	fbb0 f0f5 	udiv	r0, r0, r5
    9132:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    9136:	f44f 71a8 	mov.w	r1, #336	; 0x150
    913a:	4620      	mov	r0, r4
    913c:	f007 fbd6 	bl	108ec <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    9140:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    9144:	9000      	str	r0, [sp, #0]
    9146:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    914a:	f008 fe4b 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    914e:	4450      	add	r0, sl
    9150:	fbb0 f0f5 	udiv	r0, r0, r5
    9154:	69e1      	ldr	r1, [r4, #28]
    9156:	9a00      	ldr	r2, [sp, #0]
    9158:	4439      	add	r1, r7
    915a:	1a09      	subs	r1, r1, r0
    915c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9160:	1a09      	subs	r1, r1, r0
    9162:	4411      	add	r1, r2
    9164:	3920      	subs	r1, #32
    9166:	9100      	str	r1, [sp, #0]
    9168:	0040      	lsls	r0, r0, #1
    916a:	8b61      	ldrh	r1, [r4, #26]
    916c:	3060      	adds	r0, #96	; 0x60
    916e:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    9172:	1847      	adds	r7, r0, r1
    9174:	4640      	mov	r0, r8
    9176:	f008 fe35 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    917a:	4450      	add	r0, sl
    917c:	fbb0 f5f5 	udiv	r5, r0, r5
    9180:	4640      	mov	r0, r8
    9182:	f008 fe21 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9186:	4950      	ldr	r1, [pc, #320]	; (92c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    9188:	4428      	add	r0, r5
    918a:	4438      	add	r0, r7
    918c:	6188      	str	r0, [r1, #24]
    918e:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    9192:	9900      	ldr	r1, [sp, #0]
    9194:	1a08      	subs	r0, r1, r0
    9196:	f5b0 7ff5 	cmp.w	r0, #490	; 0x1ea
    919a:	f200 8122 	bhi.w	93e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    919e:	f240 41c2 	movw	r1, #1218	; 0x4c2
    91a2:	2030      	movs	r0, #48	; 0x30
    91a4:	f7fa fcec 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91a8:	f240 41a2 	movw	r1, #1186	; 0x4a2
    91ac:	2030      	movs	r0, #48	; 0x30
    91ae:	f7fa fce7 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91b2:	69e1      	ldr	r1, [r4, #28]
    91b4:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    91b8:	4408      	add	r0, r1
    91ba:	4629      	mov	r1, r5
    91bc:	f005 fb01 	bl	e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    91c0:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    91c4:	4629      	mov	r1, r5
    91c6:	6860      	ldr	r0, [r4, #4]
    91c8:	f005 fafb 	bl	e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    91cc:	6862      	ldr	r2, [r4, #4]
    91ce:	f641 514c 	movw	r1, #7500	; 0x1d4c
    91d2:	428a      	cmp	r2, r1
    91d4:	bf34      	ite	cc
    91d6:	2102      	movcc	r1, #2
    91d8:	2100      	movcs	r1, #0
    91da:	4408      	add	r0, r1
    91dc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    91e0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    91e4:	f008 fdfe 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    91e8:	f64d 7141 	movw	r1, #57153	; 0xdf41
    91ec:	4408      	add	r0, r1
    91ee:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    91f2:	fbb0 f0f7 	udiv	r0, r0, r7
    91f6:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    91fa:	f44f 71a8 	mov.w	r1, #336	; 0x150
    91fe:	4620      	mov	r0, r4
    9200:	f007 fb74 	bl	108ec <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    9204:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    9208:	b9e0      	cbnz	r0, 9244 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5e0>
    920a:	f1bb 0f00 	cmp.w	fp, #0
    920e:	d019      	beq.n	9244 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5e0>
    9210:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    9214:	4628      	mov	r0, r5
    9216:	f008 fde5 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    921a:	4450      	add	r0, sl
    921c:	fbb0 f0f7 	udiv	r0, r0, r7
    9220:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    9224:	69e2      	ldr	r2, [r4, #28]
    9226:	4408      	add	r0, r1
    9228:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    922c:	4411      	add	r1, r2
    922e:	eba1 0800 	sub.w	r8, r1, r0
    9232:	4628      	mov	r0, r5
    9234:	f008 fdc8 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9238:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    923c:	1a08      	subs	r0, r1, r0
    923e:	4440      	add	r0, r8
    9240:	3820      	subs	r0, #32
    9242:	e006      	b.n	9252 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ee>
    9244:	69e1      	ldr	r1, [r4, #28]
    9246:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    924a:	4408      	add	r0, r1
    924c:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    9250:	1a40      	subs	r0, r0, r1
    9252:	9000      	str	r0, [sp, #0]
    9254:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    9258:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    925c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9260:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    9264:	fb01 0002 	mla	r0, r1, r2, r0
    9268:	0040      	lsls	r0, r0, #1
    926a:	8b61      	ldrh	r1, [r4, #26]
    926c:	3060      	adds	r0, #96	; 0x60
    926e:	1845      	adds	r5, r0, r1
    9270:	4640      	mov	r0, r8
    9272:	f008 fdb7 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9276:	4450      	add	r0, sl
    9278:	fbb0 f7f7 	udiv	r7, r0, r7
    927c:	4640      	mov	r0, r8
    927e:	f008 fda3 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9282:	4911      	ldr	r1, [pc, #68]	; (92c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    9284:	4438      	add	r0, r7
    9286:	4428      	add	r0, r5
    9288:	6188      	str	r0, [r1, #24]
    928a:	2001      	movs	r0, #1
    928c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    9290:	e0a7      	b.n	93e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    9292:	bf00      	nop
    9294:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    9298:	6860      	ldr	r0, [r4, #4]
    929a:	1a80      	subs	r0, r0, r2
    929c:	4378      	muls	r0, r7
    929e:	9000      	str	r0, [sp, #0]
    92a0:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    92a4:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    92a8:	4440      	add	r0, r8
    92aa:	1a40      	subs	r0, r0, r1
    92ac:	f8d4 c134 	ldr.w	ip, [r4, #308]	; 0x134
    92b0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    92b4:	1e40      	subs	r0, r0, #1
    92b6:	fb0c 3101 	mla	r1, ip, r1, r3
    92ba:	fb00 1002 	mla	r0, r0, r2, r1
    92be:	0040      	lsls	r0, r0, #1
    92c0:	8b61      	ldrh	r1, [r4, #26]
    92c2:	3060      	adds	r0, #96	; 0x60
    92c4:	1845      	adds	r5, r0, r1
    92c6:	e005      	b.n	92d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x670>
    92c8:	20000120 	.word	0x20000120
    92cc:	00010c78 	.word	0x00010c78
    92d0:	2000140c 	.word	0x2000140c
    92d4:	f894 7067 	ldrb.w	r7, [r4, #103]	; 0x67
    92d8:	4638      	mov	r0, r7
    92da:	f008 fd83 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    92de:	eb00 010a 	add.w	r1, r0, sl
    92e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    92e6:	fbb1 f8f0 	udiv	r8, r1, r0
    92ea:	4638      	mov	r0, r7
    92ec:	f008 fd6c 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    92f0:	4987      	ldr	r1, [pc, #540]	; (9510 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    92f2:	4440      	add	r0, r8
    92f4:	4428      	add	r0, r5
    92f6:	6188      	str	r0, [r1, #24]
    92f8:	e073      	b.n	93e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    92fa:	6860      	ldr	r0, [r4, #4]
    92fc:	4378      	muls	r0, r7
    92fe:	9000      	str	r0, [sp, #0]
    9300:	f1bb 0f00 	cmp.w	fp, #0
    9304:	d007      	beq.n	9316 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6b2>
    9306:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    930a:	2900      	cmp	r1, #0
    930c:	bf04      	itt	eq
    930e:	2100      	moveq	r1, #0
    9310:	f884 1157 	strbeq.w	r1, [r4, #343]	; 0x157
    9314:	d003      	beq.n	931e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ba>
    9316:	f894 1157 	ldrb.w	r1, [r4, #343]	; 0x157
    931a:	2900      	cmp	r1, #0
    931c:	d161      	bne.n	93e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    931e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    9322:	fb07 0011 	mls	r0, r7, r1, r0
    9326:	9000      	str	r0, [sp, #0]
    9328:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
    932c:	2824      	cmp	r0, #36	; 0x24
    932e:	bf1c      	itt	ne
    9330:	f894 0085 	ldrbne.w	r0, [r4, #133]	; 0x85
    9334:	2824      	cmpne	r0, #36	; 0x24
    9336:	d10b      	bne.n	9350 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ec>
    9338:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    933c:	eba9 0000 	sub.w	r0, r9, r0
    9340:	b200      	sxth	r0, r0
    9342:	2800      	cmp	r0, #0
    9344:	db04      	blt.n	9350 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ec>
    9346:	f894 01a7 	ldrb.w	r0, [r4, #423]	; 0x1a7
    934a:	2800      	cmp	r0, #0
    934c:	bf18      	it	ne
    934e:	9003      	strne	r0, [sp, #12]
    9350:	9802      	ldr	r0, [sp, #8]
    9352:	b300      	cbz	r0, 9396 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x732>
    9354:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    9358:	b9e8      	cbnz	r0, 9396 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x732>
    935a:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    935e:	2800      	cmp	r0, #0
    9360:	bf1c      	itt	ne
    9362:	f8d4 0178 	ldrne.w	r0, [r4, #376]	; 0x178
    9366:	2800      	cmpne	r0, #0
    9368:	d07c      	beq.n	9464 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x800>
    936a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    936e:	f008 fd39 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9372:	eb00 010a 	add.w	r1, r0, sl
    9376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    937a:	fbb1 f0f0 	udiv	r0, r1, r0
    937e:	9900      	ldr	r1, [sp, #0]
    9380:	1a0d      	subs	r5, r1, r0
    9382:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9386:	f008 fd1f 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    938a:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    938e:	1a08      	subs	r0, r1, r0
    9390:	4428      	add	r0, r5
    9392:	3820      	subs	r0, #32
    9394:	9000      	str	r0, [sp, #0]
    9396:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    939a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    939e:	4440      	add	r0, r8
    93a0:	4348      	muls	r0, r1
    93a2:	0040      	lsls	r0, r0, #1
    93a4:	9f03      	ldr	r7, [sp, #12]
    93a6:	f100 0560 	add.w	r5, r0, #96	; 0x60
    93aa:	4638      	mov	r0, r7
    93ac:	f008 fd1a 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    93b0:	eb00 010a 	add.w	r1, r0, sl
    93b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    93b8:	fbb1 f8f0 	udiv	r8, r1, r0
    93bc:	4638      	mov	r0, r7
    93be:	f008 fd03 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    93c2:	4953      	ldr	r1, [pc, #332]	; (9510 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    93c4:	4440      	add	r0, r8
    93c6:	4428      	add	r0, r5
    93c8:	6188      	str	r0, [r1, #24]
    93ca:	6860      	ldr	r0, [r4, #4]
    93cc:	f641 514c 	movw	r1, #7500	; 0x1d4c
    93d0:	4288      	cmp	r0, r1
    93d2:	d206      	bcs.n	93e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    93d4:	466b      	mov	r3, sp
    93d6:	4a4f      	ldr	r2, [pc, #316]	; (9514 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8b0>)
    93d8:	4629      	mov	r1, r5
    93da:	f006 ff43 	bl	10264 <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>
    93de:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    93e2:	e9dd 1000 	ldrd	r1, r0, [sp]
    93e6:	1a08      	subs	r0, r1, r0
    93e8:	9000      	str	r0, [sp, #0]
    93ea:	4a49      	ldr	r2, [pc, #292]	; (9510 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    93ec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    93f0:	6860      	ldr	r0, [r4, #4]
    93f2:	6991      	ldr	r1, [r2, #24]
    93f4:	1ac0      	subs	r0, r0, r3
    93f6:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
    93fa:	61d0      	str	r0, [r2, #28]
    93fc:	4281      	cmp	r1, r0
    93fe:	bf98      	it	ls
    9400:	4608      	movls	r0, r1
    9402:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    9406:	2000      	movs	r0, #0
    9408:	7030      	strb	r0, [r6, #0]
    940a:	2064      	movs	r0, #100	; 0x64
    940c:	8130      	strh	r0, [r6, #8]
    940e:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    9412:	9900      	ldr	r1, [sp, #0]
    9414:	f7f7 fffc 	bl	1410 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9418:	60f0      	str	r0, [r6, #12]
    941a:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    941e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9420:	4408      	add	r0, r1
    9422:	6070      	str	r0, [r6, #4]
    9424:	68f0      	ldr	r0, [r6, #12]
    9426:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    942a:	f8a4 9170 	strh.w	r9, [r4, #368]	; 0x170
    942e:	f000 facb 	bl	99c8 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>
    9432:	b110      	cbz	r0, 943a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7d6>
    9434:	6870      	ldr	r0, [r6, #4]
    9436:	301e      	adds	r0, #30
    9438:	6070      	str	r0, [r6, #4]
    943a:	2001      	movs	r0, #1
    943c:	72b0      	strb	r0, [r6, #10]
    943e:	f8b4 1100 	ldrh.w	r1, [r4, #256]	; 0x100
    9442:	eba1 0109 	sub.w	r1, r1, r9
    9446:	b209      	sxth	r1, r1
    9448:	2900      	cmp	r1, #0
    944a:	bfc4      	itt	gt
    944c:	2103      	movgt	r1, #3
    944e:	72b1      	strbgt	r1, [r6, #10]
    9450:	9904      	ldr	r1, [sp, #16]
    9452:	b3c9      	cbz	r1, 94c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x864>
    9454:	f1bb 0f00 	cmp.w	fp, #0
    9458:	d027      	beq.n	94aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    945a:	bf00      	nop
    945c:	f8b4 212c 	ldrh.w	r2, [r4, #300]	; 0x12c
    9460:	2a00      	cmp	r2, #0
    9462:	e000      	b.n	9466 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x802>
    9464:	e031      	b.n	94ca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x866>
    9466:	bf0c      	ite	eq
    9468:	2100      	moveq	r1, #0
    946a:	f8b4 112e 	ldrhne.w	r1, [r4, #302]	; 0x12e
    946e:	f8a4 112e 	strh.w	r1, [r4, #302]	; 0x12e
    9472:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    9476:	1c49      	adds	r1, r1, #1
    9478:	4359      	muls	r1, r3
    947a:	4291      	cmp	r1, r2
    947c:	d215      	bcs.n	94aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    947e:	7ab1      	ldrb	r1, [r6, #10]
    9480:	1e49      	subs	r1, r1, #1
    9482:	2900      	cmp	r1, #0
    9484:	dd11      	ble.n	94aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    9486:	72b0      	strb	r0, [r6, #10]
    9488:	f8b4 012e 	ldrh.w	r0, [r4, #302]	; 0x12e
    948c:	2101      	movs	r1, #1
    948e:	1c40      	adds	r0, r0, #1
    9490:	f8a4 012e 	strh.w	r0, [r4, #302]	; 0x12e
    9494:	f504 7098 	add.w	r0, r4, #304	; 0x130
    9498:	f7fb f972 	bl	4780 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    949c:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
    94a0:	f000 0007 	and.w	r0, r0, #7
    94a4:	1c40      	adds	r0, r0, #1
    94a6:	f884 0130 	strb.w	r0, [r4, #304]	; 0x130
    94aa:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    94ae:	4631      	mov	r1, r6
    94b0:	f7f8 f902 	bl	16b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    94b4:	b338      	cbz	r0, 9506 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a2>
    94b6:	9807      	ldr	r0, [sp, #28]
    94b8:	f080 0001 	eor.w	r0, r0, #1
    94bc:	f884 0154 	strb.w	r0, [r4, #340]	; 0x154
    94c0:	b009      	add	sp, #36	; 0x24
    94c2:	2000      	movs	r0, #0
    94c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94c8:	e004      	b.n	94d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    94ca:	f240 5113 	movw	r1, #1299	; 0x513
    94ce:	2030      	movs	r0, #48	; 0x30
    94d0:	f7fa fb56 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94d4:	f1bb 0f00 	cmp.w	fp, #0
    94d8:	d1c0      	bne.n	945c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f8>
    94da:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    94de:	2800      	cmp	r0, #0
    94e0:	d0e3      	beq.n	94aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    94e2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    94e6:	6860      	ldr	r0, [r4, #4]
    94e8:	1a41      	subs	r1, r0, r1
    94ea:	4630      	mov	r0, r6
    94ec:	f006 fdf2 	bl	100d4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    94f0:	0400      	lsls	r0, r0, #16
    94f2:	0c00      	lsrs	r0, r0, #16
    94f4:	d0d9      	beq.n	94aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    94f6:	9912      	ldr	r1, [sp, #72]	; 0x48
    94f8:	2900      	cmp	r1, #0
    94fa:	bf18      	it	ne
    94fc:	8008      	strhne	r0, [r1, #0]
    94fe:	2001      	movs	r0, #1
    9500:	b009      	add	sp, #36	; 0x24
    9502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9506:	f240 5175 	movw	r1, #1397	; 0x575
    950a:	2030      	movs	r0, #48	; 0x30
    950c:	f7fa fb38 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9510:	20000120 	.word	0x20000120
    9514:	20000138 	.word	0x20000138
    9518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    951c:	4cfd      	ldr	r4, [pc, #1012]	; (9914 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcb0>)
    951e:	468a      	mov	sl, r1
    9520:	b083      	sub	sp, #12
    9522:	7c21      	ldrb	r1, [r4, #16]
    9524:	2702      	movs	r7, #2
    9526:	4dfc      	ldr	r5, [pc, #1008]	; (9918 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcb4>)
    9528:	2600      	movs	r6, #0
    952a:	f04f 0801 	mov.w	r8, #1
    952e:	f04f 2be0 	mov.w	fp, #3758153728	; 0xe000e000
    9532:	2903      	cmp	r1, #3
    9534:	bf04      	itt	eq
    9536:	7821      	ldrbeq	r1, [r4, #0]
    9538:	4281      	cmpeq	r1, r0
    953a:	f040 80e3 	bne.w	9704 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaa0>
    953e:	6860      	ldr	r0, [r4, #4]
    9540:	6168      	str	r0, [r5, #20]
    9542:	7c20      	ldrb	r0, [r4, #16]
    9544:	2803      	cmp	r0, #3
    9546:	d003      	beq.n	9550 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ec>
    9548:	21d2      	movs	r1, #210	; 0xd2
    954a:	2030      	movs	r0, #48	; 0x30
    954c:	f7fa fb18 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9550:	f04f 0903 	mov.w	r9, #3
    9554:	f1ba 0f08 	cmp.w	sl, #8
    9558:	f080 80d0 	bcs.w	96fc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa98>
    955c:	e8df f00a 	tbb	[pc, sl]
    9560:	39391604 	.word	0x39391604
    9564:	c7becef6 	.word	0xc7becef6
    9568:	62a6      	str	r6, [r4, #40]	; 0x28
    956a:	f7fd ffa9 	bl	74c0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    956e:	b120      	cbz	r0, 957a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x916>
    9570:	f240 2169 	movw	r1, #617	; 0x269
    9574:	2030      	movs	r0, #48	; 0x30
    9576:	f7fa fb03 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    957a:	69a0      	ldr	r0, [r4, #24]
    957c:	38f9      	subs	r0, #249	; 0xf9
    957e:	f7f8 ffa7 	bl	24d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9582:	f885 9002 	strb.w	r9, [r5, #2]
    9586:	b003      	add	sp, #12
    9588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    958c:	f7fd ff68 	bl	7460 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9590:	b998      	cbnz	r0, 95ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x956>
    9592:	f7fd fe0f 	bl	71b4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9596:	f500 7586 	add.w	r5, r0, #268	; 0x10c
    959a:	69a0      	ldr	r0, [r4, #24]
    959c:	42a8      	cmp	r0, r5
    959e:	d20b      	bcs.n	95b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x954>
    95a0:	1a28      	subs	r0, r5, r0
    95a2:	2104      	movs	r1, #4
    95a4:	f7f7 fe3c 	bl	1220 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    95a8:	b130      	cbz	r0, 95b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x954>
    95aa:	61a5      	str	r5, [r4, #24]
    95ac:	b003      	add	sp, #12
    95ae:	2000      	movs	r0, #0
    95b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95b4:	f7ff b942 	b.w	883c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    95b8:	61a5      	str	r5, [r4, #24]
    95ba:	f7fd ffe7 	bl	758c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    95be:	2800      	cmp	r0, #0
    95c0:	bf04      	itt	eq
    95c2:	b003      	addeq	sp, #12
    95c4:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95c8:	f240 219d 	movw	r1, #669	; 0x29d
    95cc:	2030      	movs	r0, #48	; 0x30
    95ce:	f7fa fad7 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95d2:	2064      	movs	r0, #100	; 0x64
    95d4:	83a0      	strh	r0, [r4, #28]
    95d6:	7526      	strb	r6, [r4, #20]
    95d8:	77e6      	strb	r6, [r4, #31]
    95da:	7a20      	ldrb	r0, [r4, #8]
    95dc:	f04f 0a01 	mov.w	sl, #1
    95e0:	f242 7b10 	movw	fp, #10000	; 0x2710
    95e4:	b158      	cbz	r0, 95fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x99a>
    95e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    95ea:	6a20      	ldr	r0, [r4, #32]
    95ec:	f7f7 ff10 	bl	1410 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    95f0:	6220      	str	r0, [r4, #32]
    95f2:	2100      	movs	r1, #0
    95f4:	f104 0014 	add.w	r0, r4, #20
    95f8:	f006 fd6c 	bl	100d4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    95fc:	e019      	b.n	9632 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ce>
    95fe:	2101      	movs	r1, #1
    9600:	4668      	mov	r0, sp
    9602:	f7fb f8cb 	bl	479c <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    9606:	f89d 0000 	ldrb.w	r0, [sp]
    960a:	0200      	lsls	r0, r0, #8
    960c:	fbb0 f1fb 	udiv	r1, r0, fp
    9610:	fb0b 0a11 	mls	sl, fp, r1, r0
    9614:	f7fd fda6 	bl	7164 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9618:	4482      	add	sl, r0
    961a:	4651      	mov	r1, sl
    961c:	6a20      	ldr	r0, [r4, #32]
    961e:	f7f7 fef7 	bl	1410 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9622:	6220      	str	r0, [r4, #32]
    9624:	4651      	mov	r1, sl
    9626:	f104 0014 	add.w	r0, r4, #20
    962a:	f006 fd53 	bl	100d4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    962e:	f100 0a01 	add.w	sl, r0, #1
    9632:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    9634:	1c41      	adds	r1, r0, #1
    9636:	290a      	cmp	r1, #10
    9638:	bf3c      	itt	cc
    963a:	4450      	addcc	r0, sl
    963c:	84a0      	strhcc	r0, [r4, #36]	; 0x24
    963e:	6860      	ldr	r0, [r4, #4]
    9640:	b128      	cbz	r0, 964e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ea>
    9642:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    9644:	1c40      	adds	r0, r0, #1
    9646:	280a      	cmp	r0, #10
    9648:	bf28      	it	cs
    964a:	77a7      	strbcs	r7, [r4, #30]
    964c:	d201      	bcs.n	9652 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ee>
    964e:	f884 901e 	strb.w	r9, [r4, #30]
    9652:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    9656:	bb40      	cbnz	r0, 96aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa46>
    9658:	7a20      	ldrb	r0, [r4, #8]
    965a:	b130      	cbz	r0, 966a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa06>
    965c:	68e1      	ldr	r1, [r4, #12]
    965e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9660:	4288      	cmp	r0, r1
    9662:	d902      	bls.n	966a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa06>
    9664:	f7fd ffb6 	bl	75d4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    9668:	e01f      	b.n	96aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa46>
    966a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    966c:	b338      	cbz	r0, 96be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa5a>
    966e:	f7fd fd79 	bl	7164 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9672:	4607      	mov	r7, r0
    9674:	f7fd fd9e 	bl	71b4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9678:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    967c:	4438      	add	r0, r7
    967e:	eb00 090b 	add.w	r9, r0, fp
    9682:	f005 f86a 	bl	e75a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9686:	4607      	mov	r7, r0
    9688:	4639      	mov	r1, r7
    968a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    968c:	f7f7 fef6 	bl	147c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9690:	6327      	str	r7, [r4, #48]	; 0x30
    9692:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9694:	eb00 0209 	add.w	r2, r0, r9
    9698:	4291      	cmp	r1, r2
    969a:	bf24      	itt	cs
    969c:	1a08      	subcs	r0, r1, r0
    969e:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    96a0:	d20d      	bcs.n	96be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa5a>
    96a2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    96a6:	f7fd ff95 	bl	75d4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    96aa:	7820      	ldrb	r0, [r4, #0]
    96ac:	f7f8 fd2c 	bl	2108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    96b0:	7426      	strb	r6, [r4, #16]
    96b2:	7968      	ldrb	r0, [r5, #5]
    96b4:	b003      	add	sp, #12
    96b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96ba:	f7fa b855 	b.w	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    96be:	f814 0b14 	ldrb.w	r0, [r4], #20
    96c2:	4621      	mov	r1, r4
    96c4:	f7f7 fff8 	bl	16b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    96c8:	2800      	cmp	r0, #0
    96ca:	bf1c      	itt	ne
    96cc:	b003      	addne	sp, #12
    96ce:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96d2:	f240 6174 	movw	r1, #1652	; 0x674
    96d6:	2030      	movs	r0, #48	; 0x30
    96d8:	f7fa fa52 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96dc:	f004 fb4e 	bl	dd7c <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>
    96e0:	f004 fcc4 	bl	e06c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    96e4:	f8cb 7280 	str.w	r7, [fp, #640]	; 0x280
    96e8:	b003      	add	sp, #12
    96ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96ee:	4608      	mov	r0, r1
    96f0:	f7f8 fd0a 	bl	2108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    96f4:	7426      	strb	r6, [r4, #16]
    96f6:	b003      	add	sp, #12
    96f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96fc:	21f3      	movs	r1, #243	; 0xf3
    96fe:	2030      	movs	r0, #48	; 0x30
    9700:	f7fa fa3e 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9704:	4681      	mov	r9, r0
    9706:	f7fc fed1 	bl	64ac <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    970a:	2101      	movs	r1, #1
    970c:	f006 fa52 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9710:	0004      	movs	r4, r0
    9712:	d009      	beq.n	9728 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    9714:	4648      	mov	r0, r9
    9716:	f7fc fec9 	bl	64ac <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    971a:	8821      	ldrh	r1, [r4, #0]
    971c:	4288      	cmp	r0, r1
    971e:	d007      	beq.n	9730 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xacc>
    9720:	219b      	movs	r1, #155	; 0x9b
    9722:	2030      	movs	r0, #48	; 0x30
    9724:	f7fa fa2c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9728:	219a      	movs	r1, #154	; 0x9a
    972a:	2030      	movs	r0, #48	; 0x30
    972c:	f7fa fa28 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9730:	f04f 0920 	mov.w	r9, #32
    9734:	616c      	str	r4, [r5, #20]
    9736:	f1ba 0f08 	cmp.w	sl, #8
    973a:	f080 810c 	bcs.w	9956 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcf2>
    973e:	e8df f00a 	tbb	[pc, sl]
    9742:	5506      	.short	0x5506
    9744:	ed5a5f5f 	.word	0xed5a5f5f
    9748:	ee04      	.short	0xee04
    974a:	e7c7      	b.n	96dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa78>
    974c:	e053      	b.n	97f6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb92>
    974e:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
    9752:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
    9756:	f894 1154 	ldrb.w	r1, [r4, #340]	; 0x154
    975a:	4620      	mov	r0, r4
    975c:	b191      	cbz	r1, 9784 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb20>
    975e:	f8b0 2152 	ldrh.w	r2, [r0, #338]	; 0x152
    9762:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    9766:	428a      	cmp	r2, r1
    9768:	d107      	bne.n	977a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb16>
    976a:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
    976e:	1a51      	subs	r1, r2, r1
    9770:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9774:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
    9778:	e00f      	b.n	979a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb36>
    977a:	1a51      	subs	r1, r2, r1
    977c:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9780:	b291      	uxth	r1, r2
    9782:	e008      	b.n	9796 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb32>
    9784:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    9788:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
    978c:	1a89      	subs	r1, r1, r2
    978e:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9792:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    9796:	f8a0 1078 	strh.w	r1, [r0, #120]	; 0x78
    979a:	f8d0 1164 	ldr.w	r1, [r0, #356]	; 0x164
    979e:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    97a2:	f000 f9bd 	bl	9b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    97a6:	f7f7 ff7d 	bl	16a4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    97aa:	2864      	cmp	r0, #100	; 0x64
    97ac:	bf98      	it	ls
    97ae:	2064      	movls	r0, #100	; 0x64
    97b0:	f200 18b9 	addw	r8, r0, #441	; 0x1b9
    97b4:	4620      	mov	r0, r4
    97b6:	f240 221d 	movw	r2, #541	; 0x21d
    97ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    97bc:	f007 f803 	bl	107c6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    97c0:	4606      	mov	r6, r0
    97c2:	4642      	mov	r2, r8
    97c4:	4620      	mov	r0, r4
    97c6:	6861      	ldr	r1, [r4, #4]
    97c8:	f006 fffd 	bl	107c6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    97cc:	4601      	mov	r1, r0
    97ce:	60e8      	str	r0, [r5, #12]
    97d0:	428e      	cmp	r6, r1
    97d2:	bf38      	it	cc
    97d4:	4631      	movcc	r1, r6
    97d6:	60a9      	str	r1, [r5, #8]
    97d8:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    97dc:	38bd      	subs	r0, #189	; 0xbd
    97de:	6128      	str	r0, [r5, #16]
    97e0:	f7f8 fe76 	bl	24d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    97e4:	70af      	strb	r7, [r5, #2]
    97e6:	b003      	add	sp, #12
    97e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97ec:	b003      	add	sp, #12
    97ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97f2:	f000 bb4b 	b.w	9e8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    97f6:	b003      	add	sp, #12
    97f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97fc:	f004 bc36 	b.w	e06c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9800:	f004 ffab 	bl	e75a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9804:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
    9808:	4601      	mov	r1, r0
    980a:	4610      	mov	r0, r2
    980c:	f7f7 fe36 	bl	147c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9810:	6861      	ldr	r1, [r4, #4]
    9812:	2900      	cmp	r1, #0
    9814:	bf14      	ite	ne
    9816:	fbb0 f0f1 	udivne	r0, r0, r1
    981a:	4630      	moveq	r0, r6
    981c:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    9820:	290d      	cmp	r1, #13
    9822:	d011      	beq.n	9848 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe4>
    9824:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    9828:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
    982c:	180b      	adds	r3, r1, r0
    982e:	1ad3      	subs	r3, r2, r3
    9830:	b21b      	sxth	r3, r3
    9832:	2b00      	cmp	r3, #0
    9834:	bfae      	itee	ge
    9836:	1c50      	addge	r0, r2, #1
    9838:	1c40      	addlt	r0, r0, #1
    983a:	4408      	addlt	r0, r1
    983c:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9840:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    9844:	b978      	cbnz	r0, 9866 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc02>
    9846:	e005      	b.n	9854 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbf0>
    9848:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    984c:	1c40      	adds	r0, r0, #1
    984e:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9852:	e008      	b.n	9866 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc02>
    9854:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9858:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    985c:	4288      	cmp	r0, r1
    985e:	bf04      	itt	eq
    9860:	1c40      	addeq	r0, r0, #1
    9862:	f8a4 0152 	strheq.w	r0, [r4, #338]	; 0x152
    9866:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    986a:	f10d 0a04 	add.w	sl, sp, #4
    986e:	1c40      	adds	r0, r0, #1
    9870:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
    9874:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
    9878:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
    987c:	1a40      	subs	r0, r0, r1
    987e:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    9882:	1e40      	subs	r0, r0, #1
    9884:	4408      	add	r0, r1
    9886:	b287      	uxth	r7, r0
    9888:	e034      	b.n	98f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc90>
    988a:	2300      	movs	r3, #0
    988c:	461a      	mov	r2, r3
    988e:	4620      	mov	r0, r4
    9890:	f8cd a000 	str.w	sl, [sp]
    9894:	f7ff fb0e 	bl	8eb4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    9898:	b130      	cbz	r0, 98a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc44>
    989a:	2801      	cmp	r0, #1
    989c:	d023      	beq.n	98e6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc82>
    989e:	f240 6124 	movw	r1, #1572	; 0x624
    98a2:	2030      	movs	r0, #48	; 0x30
    98a4:	f7fa f96c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98a8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    98aa:	2800      	cmp	r0, #0
    98ac:	bf04      	itt	eq
    98ae:	b003      	addeq	sp, #12
    98b0:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98b4:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    98b8:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    98bc:	1a80      	subs	r0, r0, r2
    98be:	b201      	sxth	r1, r0
    98c0:	2900      	cmp	r1, #0
    98c2:	bfdc      	itt	le
    98c4:	b003      	addle	sp, #12
    98c6:	e8bd 8ff0 	ldmiale.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98ca:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    98ce:	4401      	add	r1, r0
    98d0:	1e49      	subs	r1, r1, #1
    98d2:	fb91 f1f0 	sdiv	r1, r1, r0
    98d6:	b289      	uxth	r1, r1
    98d8:	fb01 2000 	mla	r0, r1, r0, r2
    98dc:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    98e0:	b003      	add	sp, #12
    98e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98e6:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    98ea:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    98ee:	4408      	add	r0, r1
    98f0:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    98f4:	f8b4 1152 	ldrh.w	r1, [r4, #338]	; 0x152
    98f8:	1a78      	subs	r0, r7, r1
    98fa:	b200      	sxth	r0, r0
    98fc:	2800      	cmp	r0, #0
    98fe:	dac4      	bge.n	988a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc26>
    9900:	2008      	movs	r0, #8
    9902:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    9906:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
    990a:	4620      	mov	r0, r4
    990c:	f007 fac8 	bl	10ea0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9910:	e00d      	b.n	992e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcca>
    9912:	e004      	b.n	991e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcba>
    9914:	2000140c 	.word	0x2000140c
    9918:	20000120 	.word	0x20000120
    991c:	e01b      	b.n	9956 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcf2>
    991e:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    9922:	2804      	cmp	r0, #4
    9924:	d003      	beq.n	992e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcca>
    9926:	21bf      	movs	r1, #191	; 0xbf
    9928:	2030      	movs	r0, #48	; 0x30
    992a:	f7fa f929 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    992e:	f884 6140 	strb.w	r6, [r4, #320]	; 0x140
    9932:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9936:	f64f 71ff 	movw	r1, #65535	; 0xffff
    993a:	f7fc fdc5 	bl	64c8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    993e:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9942:	f7f8 fbe1 	bl	2108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9946:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    994a:	7968      	ldrb	r0, [r5, #5]
    994c:	b003      	add	sp, #12
    994e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9952:	f7f9 bf09 	b.w	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9956:	21c7      	movs	r1, #199	; 0xc7
    9958:	2030      	movs	r0, #48	; 0x30
    995a:	f7fa f911 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
	...

00009960 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    9960:	b510      	push	{r4, lr}
    9962:	4604      	mov	r4, r0
    9964:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
    9968:	6861      	ldr	r1, [r4, #4]
    996a:	4288      	cmp	r0, r1
    996c:	d109      	bne.n	9982 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    996e:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
    9972:	8922      	ldrh	r2, [r4, #8]
    9974:	4291      	cmp	r1, r2
    9976:	d104      	bne.n	9982 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    9978:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
    997c:	8962      	ldrh	r2, [r4, #10]
    997e:	4291      	cmp	r1, r2
    9980:	d015      	beq.n	99ae <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    9982:	8821      	ldrh	r1, [r4, #0]
    9984:	f8a4 11cc 	strh.w	r1, [r4, #460]	; 0x1cc
    9988:	f006 fa44 	bl	fe14 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    998c:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    9990:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    9994:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    9998:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    999c:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    99a0:	2001      	movs	r0, #1
    99a2:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
    99a6:	4807      	ldr	r0, [pc, #28]	; (99c4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    99a8:	7940      	ldrb	r0, [r0, #5]
    99aa:	f7f9 fedd 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    99ae:	2102      	movs	r1, #2
    99b0:	4620      	mov	r0, r4
    99b2:	f7fc fc85 	bl	62c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    99b6:	2000      	movs	r0, #0
    99b8:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    99bc:	2003      	movs	r0, #3
    99be:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    99c2:	bd10      	pop	{r4, pc}
    99c4:	20000140 	.word	0x20000140

000099c8 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>:
    99c8:	4802      	ldr	r0, [pc, #8]	; (99d4 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA+0xc>)
    99ca:	6980      	ldr	r0, [r0, #24]
    99cc:	2800      	cmp	r0, #0
    99ce:	bf18      	it	ne
    99d0:	2001      	movne	r0, #1
    99d2:	4770      	bx	lr
    99d4:	20000140 	.word	0x20000140

000099d8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    99d8:	4806      	ldr	r0, [pc, #24]	; (99f4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    99da:	4905      	ldr	r1, [pc, #20]	; (99f0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    99dc:	6501      	str	r1, [r0, #80]	; 0x50
    99de:	4906      	ldr	r1, [pc, #24]	; (99f8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    99e0:	6541      	str	r1, [r0, #84]	; 0x54
    99e2:	4807      	ldr	r0, [pc, #28]	; (9a00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    99e4:	4905      	ldr	r1, [pc, #20]	; (99fc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    99e6:	6501      	str	r1, [r0, #80]	; 0x50
    99e8:	4906      	ldr	r1, [pc, #24]	; (9a04 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    99ea:	6541      	str	r1, [r0, #84]	; 0x54
    99ec:	4770      	bx	lr
    99ee:	0000      	.short	0x0000
    99f0:	0000b075 	.word	0x0000b075
    99f4:	20000160 	.word	0x20000160
    99f8:	0000b14d 	.word	0x0000b14d
    99fc:	0000b94d 	.word	0x0000b94d
    9a00:	200001c4 	.word	0x200001c4
    9a04:	0000b97d 	.word	0x0000b97d

00009a08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    9a08:	491d      	ldr	r1, [pc, #116]	; (9a80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    9a0a:	2200      	movs	r2, #0
    9a0c:	618a      	str	r2, [r1, #24]
    9a0e:	61ca      	str	r2, [r1, #28]
    9a10:	7148      	strb	r0, [r1, #5]
    9a12:	481d      	ldr	r0, [pc, #116]	; (9a88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9a14:	491b      	ldr	r1, [pc, #108]	; (9a84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    9a16:	6081      	str	r1, [r0, #8]
    9a18:	491c      	ldr	r1, [pc, #112]	; (9a8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    9a1a:	6041      	str	r1, [r0, #4]
    9a1c:	491c      	ldr	r1, [pc, #112]	; (9a90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    9a1e:	6001      	str	r1, [r0, #0]
    9a20:	491c      	ldr	r1, [pc, #112]	; (9a94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    9a22:	6281      	str	r1, [r0, #40]	; 0x28
    9a24:	491c      	ldr	r1, [pc, #112]	; (9a98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    9a26:	62c1      	str	r1, [r0, #44]	; 0x2c
    9a28:	491c      	ldr	r1, [pc, #112]	; (9a9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    9a2a:	60c1      	str	r1, [r0, #12]
    9a2c:	491c      	ldr	r1, [pc, #112]	; (9aa0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    9a2e:	6181      	str	r1, [r0, #24]
    9a30:	491c      	ldr	r1, [pc, #112]	; (9aa4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    9a32:	6301      	str	r1, [r0, #48]	; 0x30
    9a34:	491c      	ldr	r1, [pc, #112]	; (9aa8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    9a36:	6201      	str	r1, [r0, #32]
    9a38:	491c      	ldr	r1, [pc, #112]	; (9aac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    9a3a:	64c1      	str	r1, [r0, #76]	; 0x4c
    9a3c:	491c      	ldr	r1, [pc, #112]	; (9ab0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    9a3e:	6481      	str	r1, [r0, #72]	; 0x48
    9a40:	491c      	ldr	r1, [pc, #112]	; (9ab4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    9a42:	6441      	str	r1, [r0, #68]	; 0x44
    9a44:	491c      	ldr	r1, [pc, #112]	; (9ab8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    9a46:	6341      	str	r1, [r0, #52]	; 0x34
    9a48:	491c      	ldr	r1, [pc, #112]	; (9abc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    9a4a:	61c1      	str	r1, [r0, #28]
    9a4c:	481d      	ldr	r0, [pc, #116]	; (9ac4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    9a4e:	491c      	ldr	r1, [pc, #112]	; (9ac0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    9a50:	6081      	str	r1, [r0, #8]
    9a52:	491d      	ldr	r1, [pc, #116]	; (9ac8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    9a54:	61c1      	str	r1, [r0, #28]
    9a56:	491d      	ldr	r1, [pc, #116]	; (9acc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    9a58:	6241      	str	r1, [r0, #36]	; 0x24
    9a5a:	491d      	ldr	r1, [pc, #116]	; (9ad0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    9a5c:	62c1      	str	r1, [r0, #44]	; 0x2c
    9a5e:	491d      	ldr	r1, [pc, #116]	; (9ad4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    9a60:	6101      	str	r1, [r0, #16]
    9a62:	491d      	ldr	r1, [pc, #116]	; (9ad8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    9a64:	6141      	str	r1, [r0, #20]
    9a66:	491d      	ldr	r1, [pc, #116]	; (9adc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    9a68:	6441      	str	r1, [r0, #68]	; 0x44
    9a6a:	6341      	str	r1, [r0, #52]	; 0x34
    9a6c:	491c      	ldr	r1, [pc, #112]	; (9ae0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    9a6e:	6181      	str	r1, [r0, #24]
    9a70:	491c      	ldr	r1, [pc, #112]	; (9ae4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    9a72:	6301      	str	r1, [r0, #48]	; 0x30
    9a74:	491c      	ldr	r1, [pc, #112]	; (9ae8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    9a76:	6481      	str	r1, [r0, #72]	; 0x48
    9a78:	491c      	ldr	r1, [pc, #112]	; (9aec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    9a7a:	64c1      	str	r1, [r0, #76]	; 0x4c
    9a7c:	4770      	bx	lr
    9a7e:	0000      	.short	0x0000
    9a80:	20000140 	.word	0x20000140
    9a84:	0000b699 	.word	0x0000b699
    9a88:	20000160 	.word	0x20000160
    9a8c:	0000ae01 	.word	0x0000ae01
    9a90:	0000ae65 	.word	0x0000ae65
    9a94:	0000b241 	.word	0x0000b241
    9a98:	0000b291 	.word	0x0000b291
    9a9c:	0000af21 	.word	0x0000af21
    9aa0:	0000b65d 	.word	0x0000b65d
    9aa4:	0000b809 	.word	0x0000b809
    9aa8:	0000afcd 	.word	0x0000afcd
    9aac:	0000b211 	.word	0x0000b211
    9ab0:	0000b1dd 	.word	0x0000b1dd
    9ab4:	0000b5a5 	.word	0x0000b5a5
    9ab8:	0000b60d 	.word	0x0000b60d
    9abc:	0000b6d1 	.word	0x0000b6d1
    9ac0:	0000bb69 	.word	0x0000bb69
    9ac4:	200001c4 	.word	0x200001c4
    9ac8:	0000bb91 	.word	0x0000bb91
    9acc:	0000b909 	.word	0x0000b909
    9ad0:	0000ba25 	.word	0x0000ba25
    9ad4:	0000b8dd 	.word	0x0000b8dd
    9ad8:	0000bacd 	.word	0x0000bacd
    9adc:	0000baa9 	.word	0x0000baa9
    9ae0:	0000baf1 	.word	0x0000baf1
    9ae4:	0000bc05 	.word	0x0000bc05
    9ae8:	0000b9c1 	.word	0x0000b9c1
    9aec:	0000b9f1 	.word	0x0000b9f1

00009af0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    9af0:	4806      	ldr	r0, [pc, #24]	; (9b0c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    9af2:	4905      	ldr	r1, [pc, #20]	; (9b08 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    9af4:	6581      	str	r1, [r0, #88]	; 0x58
    9af6:	4906      	ldr	r1, [pc, #24]	; (9b10 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    9af8:	6601      	str	r1, [r0, #96]	; 0x60
    9afa:	4807      	ldr	r0, [pc, #28]	; (9b18 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    9afc:	4905      	ldr	r1, [pc, #20]	; (9b14 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    9afe:	6581      	str	r1, [r0, #88]	; 0x58
    9b00:	4906      	ldr	r1, [pc, #24]	; (9b1c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    9b02:	65c1      	str	r1, [r0, #92]	; 0x5c
    9b04:	4770      	bx	lr
    9b06:	0000      	.short	0x0000
    9b08:	0000b2b1 	.word	0x0000b2b1
    9b0c:	20000160 	.word	0x20000160
    9b10:	0000b391 	.word	0x0000b391
    9b14:	0000ba51 	.word	0x0000ba51
    9b18:	200001c4 	.word	0x200001c4
    9b1c:	0000ba81 	.word	0x0000ba81

00009b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    9b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b24:	2701      	movs	r7, #1
    9b26:	4cd1      	ldr	r4, [pc, #836]	; (9e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x34c>)
    9b28:	2500      	movs	r5, #0
    9b2a:	f367 0907 	bfi	r9, r7, #0, #8
    9b2e:	80e5      	strh	r5, [r4, #6]
    9b30:	70e5      	strb	r5, [r4, #3]
    9b32:	7125      	strb	r5, [r4, #4]
    9b34:	7025      	strb	r5, [r4, #0]
    9b36:	60e0      	str	r0, [r4, #12]
    9b38:	4606      	mov	r6, r0
    9b3a:	f880 710e 	strb.w	r7, [r0, #270]	; 0x10e
    9b3e:	8800      	ldrh	r0, [r0, #0]
    9b40:	f7fa fbec 	bl	431c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9b44:	ea5f 0a00 	movs.w	sl, r0
    9b48:	d010      	beq.n	9b6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c>
    9b4a:	68e0      	ldr	r0, [r4, #12]
    9b4c:	8800      	ldrh	r0, [r0, #0]
    9b4e:	f7fa ff17 	bl	4980 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    9b52:	68e0      	ldr	r0, [r4, #12]
    9b54:	8800      	ldrh	r0, [r0, #0]
    9b56:	f7fa feb9 	bl	48cc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9b5a:	68e0      	ldr	r0, [r4, #12]
    9b5c:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    9b60:	b1a1      	cbz	r1, 9b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c>
    9b62:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    9b66:	29fe      	cmp	r1, #254	; 0xfe
    9b68:	d005      	beq.n	9b76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56>
    9b6a:	e014      	b.n	9b96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x76>
    9b6c:	f640 319e 	movw	r1, #2974	; 0xb9e
    9b70:	2031      	movs	r0, #49	; 0x31
    9b72:	f7fa f805 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b76:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    9b7a:	b189      	cbz	r1, 9ba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    9b7c:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    9b80:	2301      	movs	r3, #1
    9b82:	4619      	mov	r1, r3
    9b84:	3078      	adds	r0, #120	; 0x78
    9b86:	f006 f96c 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b8a:	b188      	cbz	r0, 9bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    9b8c:	68e0      	ldr	r0, [r4, #12]
    9b8e:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    9b92:	28fe      	cmp	r0, #254	; 0xfe
    9b94:	d004      	beq.n	9ba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    9b96:	68e0      	ldr	r0, [r4, #12]
    9b98:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    9b9c:	f000 fbcc 	bl	a338 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ac>
    9ba0:	68e0      	ldr	r0, [r4, #12]
    9ba2:	f890 110f 	ldrb.w	r1, [r0, #271]	; 0x10f
    9ba6:	2900      	cmp	r1, #0
    9ba8:	bf18      	it	ne
    9baa:	8125      	strhne	r5, [r4, #8]
    9bac:	d11b      	bne.n	9be6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    9bae:	e00f      	b.n	9bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    9bb0:	68e0      	ldr	r0, [r4, #12]
    9bb2:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    9bb6:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    9bba:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    9bbe:	2100      	movs	r1, #0
    9bc0:	2002      	movs	r0, #2
    9bc2:	f001 f879 	bl	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9bc6:	68e0      	ldr	r0, [r4, #12]
    9bc8:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
    9bcc:	2002      	movs	r0, #2
    9bce:	e7e5      	b.n	9b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    9bd0:	f890 11c8 	ldrb.w	r1, [r0, #456]	; 0x1c8
    9bd4:	b929      	cbnz	r1, 9be2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc2>
    9bd6:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    9bd8:	8902      	ldrh	r2, [r0, #8]
    9bda:	4291      	cmp	r1, r2
    9bdc:	bf88      	it	hi
    9bde:	8121      	strhhi	r1, [r4, #8]
    9be0:	d801      	bhi.n	9be6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    9be2:	8901      	ldrh	r1, [r0, #8]
    9be4:	8121      	strh	r1, [r4, #8]
    9be6:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    9bea:	1e49      	subs	r1, r1, #1
    9bec:	fa1f f881 	uxth.w	r8, r1
    9bf0:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    9bf4:	4441      	add	r1, r8
    9bf6:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    9bfa:	f890 110c 	ldrb.w	r1, [r0, #268]	; 0x10c
    9bfe:	2900      	cmp	r1, #0
    9c00:	bf1c      	itt	ne
    9c02:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    9c06:	f880 510c 	strbne.w	r5, [r0, #268]	; 0x10c
    9c0a:	d104      	bne.n	9c16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6>
    9c0c:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    9c10:	4441      	add	r1, r8
    9c12:	f8a0 110a 	strh.w	r1, [r0, #266]	; 0x10a
    9c16:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    9c1a:	4441      	add	r1, r8
    9c1c:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    9c20:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9c24:	b939      	cbnz	r1, 9c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116>
    9c26:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9c2a:	2301      	movs	r3, #1
    9c2c:	2106      	movs	r1, #6
    9c2e:	3078      	adds	r0, #120	; 0x78
    9c30:	f006 f917 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c34:	b128      	cbz	r0, 9c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122>
    9c36:	68e0      	ldr	r0, [r4, #12]
    9c38:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    9c3c:	4441      	add	r1, r8
    9c3e:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    9c42:	68e0      	ldr	r0, [r4, #12]
    9c44:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    9c48:	2901      	cmp	r1, #1
    9c4a:	bf9c      	itt	ls
    9c4c:	1c49      	addls	r1, r1, #1
    9c4e:	f8a0 1102 	strhls.w	r1, [r0, #258]	; 0x102
    9c52:	f1b8 0f00 	cmp.w	r8, #0
    9c56:	bf18      	it	ne
    9c58:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    9c5c:	4650      	mov	r0, sl
    9c5e:	f005 fc24 	bl	f4aa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9c62:	4680      	mov	r8, r0
    9c64:	68e0      	ldr	r0, [r4, #12]
    9c66:	f890 110d 	ldrb.w	r1, [r0, #269]	; 0x10d
    9c6a:	b199      	cbz	r1, 9c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    9c6c:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    9c70:	8922      	ldrh	r2, [r4, #8]
    9c72:	4291      	cmp	r1, r2
    9c74:	d20e      	bcs.n	9c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    9c76:	f1b8 0f00 	cmp.w	r8, #0
    9c7a:	bf1c      	itt	ne
    9c7c:	f890 1181 	ldrbne.w	r1, [r0, #385]	; 0x181
    9c80:	2900      	cmpne	r1, #0
    9c82:	d007      	beq.n	9c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    9c84:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    9c88:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
    9c8c:	4281      	cmp	r1, r0
    9c8e:	bf28      	it	cs
    9c90:	f7fa ff16 	blcs	4ac0 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>
    9c94:	68e2      	ldr	r2, [r4, #12]
    9c96:	f882 510d 	strb.w	r5, [r2, #269]	; 0x10d
    9c9a:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    9c9e:	280b      	cmp	r0, #11
    9ca0:	bf18      	it	ne
    9ca2:	280c      	cmpne	r0, #12
    9ca4:	d118      	bne.n	9cd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    9ca6:	f8b2 1078 	ldrh.w	r1, [r2, #120]	; 0x78
    9caa:	f8b2 31a4 	ldrh.w	r3, [r2, #420]	; 0x1a4
    9cae:	eba1 0103 	sub.w	r1, r1, r3
    9cb2:	b209      	sxth	r1, r1
    9cb4:	2900      	cmp	r1, #0
    9cb6:	db0f      	blt.n	9cd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    9cb8:	f502 71d3 	add.w	r1, r2, #422	; 0x1a6
    9cbc:	f102 000c 	add.w	r0, r2, #12
    9cc0:	f008 f91a 	bl	11ef8 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    9cc4:	2103      	movs	r1, #3
    9cc6:	68e0      	ldr	r0, [r4, #12]
    9cc8:	f7fc fafa 	bl	62c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9ccc:	68e0      	ldr	r0, [r4, #12]
    9cce:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9cd2:	f880 70c0 	strb.w	r7, [r0, #192]	; 0xc0
    9cd6:	e093      	b.n	9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9cd8:	2824      	cmp	r0, #36	; 0x24
    9cda:	d146      	bne.n	9d6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    9cdc:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    9ce0:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    9ce4:	1a40      	subs	r0, r0, r1
    9ce6:	b200      	sxth	r0, r0
    9ce8:	2800      	cmp	r0, #0
    9cea:	db3e      	blt.n	9d6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    9cec:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    9cf0:	2800      	cmp	r0, #0
    9cf2:	bf14      	ite	ne
    9cf4:	f04f 0a01 	movne.w	sl, #1
    9cf8:	f04f 0a00 	moveq.w	sl, #0
    9cfc:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    9d00:	2900      	cmp	r1, #0
    9d02:	bf14      	ite	ne
    9d04:	f04f 0c01 	movne.w	ip, #1
    9d08:	f04f 0c00 	moveq.w	ip, #0
    9d0c:	f1ba 0f00 	cmp.w	sl, #0
    9d10:	bf08      	it	eq
    9d12:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    9d16:	f1bc 0f00 	cmp.w	ip, #0
    9d1a:	bf08      	it	eq
    9d1c:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    9d20:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    9d24:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    9d28:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    9d2c:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    9d30:	2801      	cmp	r0, #1
    9d32:	d005      	beq.n	9d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    9d34:	f1ba 0f00 	cmp.w	sl, #0
    9d38:	bf08      	it	eq
    9d3a:	f1bc 0f00 	cmpeq.w	ip, #0
    9d3e:	d003      	beq.n	9d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9d40:	f04f 0000 	mov.w	r0, #0
    9d44:	f001 f82e 	bl	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    9d48:	68e0      	ldr	r0, [r4, #12]
    9d4a:	f006 fd83 	bl	10854 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9d4e:	b130      	cbz	r0, 9d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    9d50:	68e1      	ldr	r1, [r4, #12]
    9d52:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    9d56:	8808      	ldrh	r0, [r1, #0]
    9d58:	3128      	adds	r1, #40	; 0x28
    9d5a:	f006 fcfe 	bl	1075a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9d5e:	68e0      	ldr	r0, [r4, #12]
    9d60:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9d64:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    9d68:	e04a      	b.n	9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9d6a:	f892 0084 	ldrb.w	r0, [r2, #132]	; 0x84
    9d6e:	2824      	cmp	r0, #36	; 0x24
    9d70:	bf18      	it	ne
    9d72:	2825      	cmpne	r0, #37	; 0x25
    9d74:	d144      	bne.n	9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9d76:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    9d7a:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    9d7e:	eba0 0001 	sub.w	r0, r0, r1
    9d82:	b200      	sxth	r0, r0
    9d84:	2800      	cmp	r0, #0
    9d86:	db3b      	blt.n	9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9d88:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    9d8c:	2800      	cmp	r0, #0
    9d8e:	bf14      	ite	ne
    9d90:	f04f 0a01 	movne.w	sl, #1
    9d94:	f04f 0a00 	moveq.w	sl, #0
    9d98:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    9d9c:	2900      	cmp	r1, #0
    9d9e:	bf14      	ite	ne
    9da0:	f04f 0c01 	movne.w	ip, #1
    9da4:	f04f 0c00 	moveq.w	ip, #0
    9da8:	f1ba 0f00 	cmp.w	sl, #0
    9dac:	bf08      	it	eq
    9dae:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    9db2:	f1bc 0f00 	cmp.w	ip, #0
    9db6:	bf08      	it	eq
    9db8:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    9dbc:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    9dc0:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    9dc4:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    9dc8:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    9dcc:	2801      	cmp	r0, #1
    9dce:	d005      	beq.n	9ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9dd0:	f1ba 0f00 	cmp.w	sl, #0
    9dd4:	bf08      	it	eq
    9dd6:	f1bc 0f00 	cmpeq.w	ip, #0
    9dda:	d003      	beq.n	9de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    9ddc:	f04f 0000 	mov.w	r0, #0
    9de0:	f000 ffe0 	bl	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    9de4:	68e0      	ldr	r0, [r4, #12]
    9de6:	f006 fd35 	bl	10854 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9dea:	b130      	cbz	r0, 9dfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2da>
    9dec:	68e1      	ldr	r1, [r4, #12]
    9dee:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    9df2:	8808      	ldrh	r0, [r1, #0]
    9df4:	3128      	adds	r1, #40	; 0x28
    9df6:	f006 fcb0 	bl	1075a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9dfa:	68e0      	ldr	r0, [r4, #12]
    9dfc:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    9e00:	68e1      	ldr	r1, [r4, #12]
    9e02:	f101 0078 	add.w	r0, r1, #120	; 0x78
    9e06:	f8b1 2106 	ldrh.w	r2, [r1, #262]	; 0x106
    9e0a:	f7fc f969 	bl	60e0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    9e0e:	68e0      	ldr	r0, [r4, #12]
    9e10:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
    9e14:	2900      	cmp	r1, #0
    9e16:	bf18      	it	ne
    9e18:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    9e1c:	f1b8 0f00 	cmp.w	r8, #0
    9e20:	bf17      	itett	ne
    9e22:	f890 0110 	ldrbne.w	r0, [r0, #272]	; 0x110
    9e26:	f880 5110 	strbeq.w	r5, [r0, #272]	; 0x110
    9e2a:	2800      	cmpne	r0, #0
    9e2c:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e30:	480f      	ldr	r0, [pc, #60]	; (9e70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x350>)
    9e32:	9000      	str	r0, [sp, #0]
    9e34:	4b0f      	ldr	r3, [pc, #60]	; (9e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x354>)
    9e36:	4a10      	ldr	r2, [pc, #64]	; (9e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>)
    9e38:	4631      	mov	r1, r6
    9e3a:	4648      	mov	r0, r9
    9e3c:	f7fa fe9a 	bl	4b74 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    9e40:	69e1      	ldr	r1, [r4, #28]
    9e42:	2900      	cmp	r1, #0
    9e44:	bf1c      	itt	ne
    9e46:	7860      	ldrbne	r0, [r4, #1]
    9e48:	f003 fa0c 	blne	d264 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>
    9e4c:	68e0      	ldr	r0, [r4, #12]
    9e4e:	2301      	movs	r3, #1
    9e50:	2105      	movs	r1, #5
    9e52:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e56:	3078      	adds	r0, #120	; 0x78
    9e58:	f006 f803 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e5c:	2800      	cmp	r0, #0
    9e5e:	bf08      	it	eq
    9e60:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e64:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e68:	f7fa be7e 	b.w	4b68 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9e6c:	20000140 	.word	0x20000140
    9e70:	0000a4fd 	.word	0x0000a4fd
    9e74:	00009ea9 	.word	0x00009ea9
    9e78:	0000acf1 	.word	0x0000acf1

00009e7c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    9e7c:	4802      	ldr	r0, [pc, #8]	; (9e88 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI+0xc>)
    9e7e:	2100      	movs	r1, #0
    9e80:	6181      	str	r1, [r0, #24]
    9e82:	61c1      	str	r1, [r0, #28]
    9e84:	4608      	mov	r0, r1
    9e86:	4770      	bx	lr
    9e88:	20000140 	.word	0x20000140

00009e8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    9e8c:	4805      	ldr	r0, [pc, #20]	; (9ea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18>)
    9e8e:	68c0      	ldr	r0, [r0, #12]
    9e90:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    9e94:	b118      	cbz	r0, 9e9e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12>
    9e96:	2100      	movs	r1, #0
    9e98:	4608      	mov	r0, r1
    9e9a:	f000 bb2f 	b.w	a4fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x670>
    9e9e:	f7fb b81f 	b.w	4ee0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    9ea2:	0000      	.short	0x0000
    9ea4:	20000140 	.word	0x20000140
    9ea8:	490d      	ldr	r1, [pc, #52]	; (9ee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x54>)
    9eaa:	4602      	mov	r2, r0
    9eac:	78c8      	ldrb	r0, [r1, #3]
    9eae:	790b      	ldrb	r3, [r1, #4]
    9eb0:	4318      	orrs	r0, r3
    9eb2:	d113      	bne.n	9edc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    9eb4:	4608      	mov	r0, r1
    9eb6:	68c0      	ldr	r0, [r0, #12]
    9eb8:	b14a      	cbz	r2, 9ece <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x42>
    9eba:	7989      	ldrb	r1, [r1, #6]
    9ebc:	f011 0f08 	tst.w	r1, #8
    9ec0:	d003      	beq.n	9eca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3e>
    9ec2:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9ec6:	2808      	cmp	r0, #8
    9ec8:	d008      	beq.n	9edc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    9eca:	2001      	movs	r0, #1
    9ecc:	4770      	bx	lr
    9ece:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    9ed2:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    9ed4:	428a      	cmp	r2, r1
    9ed6:	d801      	bhi.n	9edc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    9ed8:	f7fe be98 	b.w	8c0c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    9edc:	2000      	movs	r0, #0
    9ede:	4770      	bx	lr
    9ee0:	20000140 	.word	0x20000140
    9ee4:	b570      	push	{r4, r5, r6, lr}
    9ee6:	4cf8      	ldr	r4, [pc, #992]	; (a2c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x43c>)
    9ee8:	68e0      	ldr	r0, [r4, #12]
    9eea:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    9eee:	29fe      	cmp	r1, #254	; 0xfe
    9ef0:	bf06      	itte	eq
    9ef2:	78e1      	ldrbeq	r1, [r4, #3]
    9ef4:	2900      	cmpeq	r1, #0
    9ef6:	bd70      	popne	{r4, r5, r6, pc}
    9ef8:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    9efc:	f04f 0301 	mov.w	r3, #1
    9f00:	4619      	mov	r1, r3
    9f02:	f100 0078 	add.w	r0, r0, #120	; 0x78
    9f06:	f005 ffac 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f0a:	2800      	cmp	r0, #0
    9f0c:	bf18      	it	ne
    9f0e:	bd70      	popne	{r4, r5, r6, pc}
    9f10:	68e0      	ldr	r0, [r4, #12]
    9f12:	2500      	movs	r5, #0
    9f14:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    9f18:	b159      	cbz	r1, 9f32 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6>
    9f1a:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    9f1e:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    9f22:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    9f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f2a:	2100      	movs	r1, #0
    9f2c:	2002      	movs	r0, #2
    9f2e:	f000 bec3 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9f32:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f36:	2301      	movs	r3, #1
    9f38:	2104      	movs	r1, #4
    9f3a:	3078      	adds	r0, #120	; 0x78
    9f3c:	f005 ff91 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f40:	0006      	movs	r6, r0
    9f42:	68e0      	ldr	r0, [r4, #12]
    9f44:	d00b      	beq.n	9f5e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd2>
    9f46:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9f4a:	2910      	cmp	r1, #16
    9f4c:	d07d      	beq.n	a04a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1be>
    9f4e:	2914      	cmp	r1, #20
    9f50:	d07c      	beq.n	a04c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0>
    9f52:	2915      	cmp	r1, #21
    9f54:	d07b      	beq.n	a04e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c2>
    9f56:	291b      	cmp	r1, #27
    9f58:	d07a      	beq.n	a050 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c4>
    9f5a:	f000 b8f1 	b.w	a140 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2b4>
    9f5e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9f62:	f011 0f01 	tst.w	r1, #1
    9f66:	d005      	beq.n	9f74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe8>
    9f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f6c:	2101      	movs	r1, #1
    9f6e:	2009      	movs	r0, #9
    9f70:	f000 bea2 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9f74:	f011 0f02 	tst.w	r1, #2
    9f78:	d00b      	beq.n	9f92 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x106>
    9f7a:	2101      	movs	r1, #1
    9f7c:	200c      	movs	r0, #12
    9f7e:	f000 fe9b 	bl	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9f82:	68e0      	ldr	r0, [r4, #12]
    9f84:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    9f88:	f041 0101 	orr.w	r1, r1, #1
    9f8c:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    9f90:	bd70      	pop	{r4, r5, r6, pc}
    9f92:	f011 0f04 	tst.w	r1, #4
    9f96:	d005      	beq.n	9fa4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x118>
    9f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f9c:	2101      	movs	r1, #1
    9f9e:	2013      	movs	r0, #19
    9fa0:	f000 be8a 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9fa4:	f011 0f08 	tst.w	r1, #8
    9fa8:	d009      	beq.n	9fbe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x132>
    9faa:	f890 10f1 	ldrb.w	r1, [r0, #241]	; 0xf1
    9fae:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    9fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9fb6:	2101      	movs	r1, #1
    9fb8:	2007      	movs	r0, #7
    9fba:	f000 be7d 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9fbe:	f011 0f30 	tst.w	r1, #48	; 0x30
    9fc2:	d07d      	beq.n	a0c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    9fc4:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    9fc8:	2900      	cmp	r1, #0
    9fca:	d179      	bne.n	a0c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    9fcc:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9fd0:	b1c9      	cbz	r1, a006 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17a>
    9fd2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9fd6:	2924      	cmp	r1, #36	; 0x24
    9fd8:	bf1b      	ittet	ne
    9fda:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    9fde:	2924      	cmpne	r1, #36	; 0x24
    9fe0:	2301      	moveq	r3, #1
    9fe2:	2300      	movne	r3, #0
    9fe4:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    9fe8:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    9fec:	f006 fbdd 	bl	107aa <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9ff0:	68e0      	ldr	r0, [r4, #12]
    9ff2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9ff6:	f021 0120 	bic.w	r1, r1, #32
    9ffa:	f041 0110 	orr.w	r1, r1, #16
    9ffe:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a002:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a006:	68e0      	ldr	r0, [r4, #12]
    a008:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a00c:	f011 0f10 	tst.w	r1, #16
    a010:	d056      	beq.n	a0c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    a012:	f006 fc1f 	bl	10854 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a016:	68e1      	ldr	r1, [r4, #12]
    a018:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    a01c:	2801      	cmp	r0, #1
    a01e:	bf04      	itt	eq
    a020:	2002      	moveq	r0, #2
    a022:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    a026:	d008      	beq.n	a03a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ae>
    a028:	8808      	ldrh	r0, [r1, #0]
    a02a:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a02e:	3128      	adds	r1, #40	; 0x28
    a030:	f006 fb93 	bl	1075a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a034:	7960      	ldrb	r0, [r4, #5]
    a036:	f7f9 fb97 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a03a:	68e0      	ldr	r0, [r4, #12]
    a03c:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    a040:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    a044:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    a048:	e003      	b.n	a052 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c6>
    a04a:	e00a      	b.n	a062 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d6>
    a04c:	e00f      	b.n	a06e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e2>
    a04e:	e02b      	b.n	a0a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x21c>
    a050:	e060      	b.n	a114 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x288>
    a052:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a05a:	2101      	movs	r1, #1
    a05c:	2015      	movs	r0, #21
    a05e:	f000 be2b 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a066:	2101      	movs	r1, #1
    a068:	200b      	movs	r0, #11
    a06a:	f000 be25 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a06e:	f7fa fb81 	bl	4774 <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY>
    a072:	280c      	cmp	r0, #12
    a074:	bf38      	it	cc
    a076:	bd70      	popcc	{r4, r5, r6, pc}
    a078:	2108      	movs	r1, #8
    a07a:	68e0      	ldr	r0, [r4, #12]
    a07c:	f500 7092 	add.w	r0, r0, #292	; 0x124
    a080:	f7fa fb7e 	bl	4780 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a084:	b158      	cbz	r0, a09e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x212>
    a086:	68e0      	ldr	r0, [r4, #12]
    a088:	2104      	movs	r1, #4
    a08a:	30ec      	adds	r0, #236	; 0xec
    a08c:	f7fa fb78 	bl	4780 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a090:	b128      	cbz	r0, a09e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x212>
    a092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a096:	2101      	movs	r1, #1
    a098:	2004      	movs	r0, #4
    a09a:	f000 be0d 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a09e:	f240 719c 	movw	r1, #1948	; 0x79c
    a0a2:	2031      	movs	r0, #49	; 0x31
    a0a4:	f7f9 fd6c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0a8:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    a0ac:	2901      	cmp	r1, #1
    a0ae:	d00d      	beq.n	a0cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x240>
    a0b0:	2902      	cmp	r1, #2
    a0b2:	bf18      	it	ne
    a0b4:	bd70      	popne	{r4, r5, r6, pc}
    a0b6:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a0ba:	b1e9      	cbz	r1, a0f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26c>
    a0bc:	2106      	movs	r1, #6
    a0be:	e000      	b.n	a0c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x236>
    a0c0:	e02e      	b.n	a120 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x294>
    a0c2:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a0c6:	2101      	movs	r1, #1
    a0c8:	2002      	movs	r0, #2
    a0ca:	e01d      	b.n	a108 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x27c>
    a0cc:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    a0d0:	2900      	cmp	r1, #0
    a0d2:	bf18      	it	ne
    a0d4:	bd70      	popne	{r4, r5, r6, pc}
    a0d6:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
    a0da:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    a0de:	2200      	movs	r2, #0
    a0e0:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
    a0e4:	f7fb ffba 	bl	605c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a0e8:	2101      	movs	r1, #1
    a0ea:	2005      	movs	r0, #5
    a0ec:	f000 fde4 	bl	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a0f0:	68e0      	ldr	r0, [r4, #12]
    a0f2:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a0f6:	bd70      	pop	{r4, r5, r6, pc}
    a0f8:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a0fc:	f010 0f04 	tst.w	r0, #4
    a100:	bf14      	ite	ne
    a102:	2011      	movne	r0, #17
    a104:	200d      	moveq	r0, #13
    a106:	2101      	movs	r1, #1
    a108:	f000 fdd6 	bl	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a10c:	68e0      	ldr	r0, [r4, #12]
    a10e:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a112:	bd70      	pop	{r4, r5, r6, pc}
    a114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a118:	2101      	movs	r1, #1
    a11a:	2006      	movs	r0, #6
    a11c:	f000 bdcc 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a120:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a124:	2921      	cmp	r1, #33	; 0x21
    a126:	d10b      	bne.n	a140 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2b4>
    a128:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a12c:	2902      	cmp	r1, #2
    a12e:	d01d      	beq.n	a16c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2e0>
    a130:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a134:	2901      	cmp	r1, #1
    a136:	bf04      	itt	eq
    a138:	f890 01bf 	ldrbeq.w	r0, [r0, #447]	; 0x1bf
    a13c:	2800      	cmpeq	r0, #0
    a13e:	d015      	beq.n	a16c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2e0>
    a140:	68e0      	ldr	r0, [r4, #12]
    a142:	f04f 0301 	mov.w	r3, #1
    a146:	f04f 0100 	mov.w	r1, #0
    a14a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a14e:	f100 0078 	add.w	r0, r0, #120	; 0x78
    a152:	f005 fe86 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a156:	b1c8      	cbz	r0, a18c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a158:	68e0      	ldr	r0, [r4, #12]
    a15a:	2301      	movs	r3, #1
    a15c:	2104      	movs	r1, #4
    a15e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a162:	3078      	adds	r0, #120	; 0x78
    a164:	f005 fe7d 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a168:	b130      	cbz	r0, a178 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2ec>
    a16a:	e00f      	b.n	a18c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a16c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a170:	2101      	movs	r1, #1
    a172:	2017      	movs	r0, #23
    a174:	f000 bda0 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a178:	68e0      	ldr	r0, [r4, #12]
    a17a:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
    a17e:	b128      	cbz	r0, a18c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a184:	2100      	movs	r1, #0
    a186:	2012      	movs	r0, #18
    a188:	f000 bd96 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a18c:	68e0      	ldr	r0, [r4, #12]
    a18e:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a192:	2a0a      	cmp	r2, #10
    a194:	d015      	beq.n	a1c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x336>
    a196:	2e00      	cmp	r6, #0
    a198:	bf18      	it	ne
    a19a:	bd70      	popne	{r4, r5, r6, pc}
    a19c:	2301      	movs	r3, #1
    a19e:	2100      	movs	r1, #0
    a1a0:	3078      	adds	r0, #120	; 0x78
    a1a2:	f005 fe5e 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1a6:	2800      	cmp	r0, #0
    a1a8:	d07e      	beq.n	a2a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41c>
    a1aa:	68e0      	ldr	r0, [r4, #12]
    a1ac:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
    a1b0:	b189      	cbz	r1, a1d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x34a>
    a1b2:	2100      	movs	r1, #0
    a1b4:	200e      	movs	r0, #14
    a1b6:	f000 fd7f 	bl	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a1ba:	68e0      	ldr	r0, [r4, #12]
    a1bc:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
    a1c0:	bd70      	pop	{r4, r5, r6, pc}
    a1c2:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    a1c6:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a1ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a1ce:	2100      	movs	r1, #0
    a1d0:	2007      	movs	r0, #7
    a1d2:	f000 bd71 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a1d6:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a1da:	b121      	cbz	r1, a1e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x35a>
    a1dc:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a1e0:	f011 0f03 	tst.w	r1, #3
    a1e4:	d00e      	beq.n	a204 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x378>
    a1e6:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a1ea:	b111      	cbz	r1, a1f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x366>
    a1ec:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    a1f0:	b1c1      	cbz	r1, a224 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x398>
    a1f2:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a1f6:	2901      	cmp	r1, #1
    a1f8:	bf04      	itt	eq
    a1fa:	f890 11bf 	ldrbeq.w	r1, [r0, #447]	; 0x1bf
    a1fe:	2900      	cmpeq	r1, #0
    a200:	d17c      	bne.n	a2fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a202:	e02f      	b.n	a264 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3d8>
    a204:	f04f 0100 	mov.w	r1, #0
    a208:	f04f 000c 	mov.w	r0, #12
    a20c:	f000 fd54 	bl	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a210:	68e0      	ldr	r0, [r4, #12]
    a212:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a216:	f041 0101 	orr.w	r1, r1, #1
    a21a:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a21e:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    a222:	bd70      	pop	{r4, r5, r6, pc}
    a224:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a228:	2924      	cmp	r1, #36	; 0x24
    a22a:	bf1d      	ittte	ne
    a22c:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    a230:	2924      	cmpne	r1, #36	; 0x24
    a232:	2300      	movne	r3, #0
    a234:	2301      	moveq	r3, #1
    a236:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    a23a:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    a23e:	f006 fab4 	bl	107aa <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a242:	68e0      	ldr	r0, [r4, #12]
    a244:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a248:	2100      	movs	r1, #0
    a24a:	2014      	movs	r0, #20
    a24c:	f000 fd34 	bl	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a250:	68e0      	ldr	r0, [r4, #12]
    a252:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    a256:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    a25a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    a25e:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a262:	bd70      	pop	{r4, r5, r6, pc}
    a264:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a268:	2301      	movs	r3, #1
    a26a:	210b      	movs	r1, #11
    a26c:	3078      	adds	r0, #120	; 0x78
    a26e:	f005 fdf8 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a272:	b9c8      	cbnz	r0, a2a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41c>
    a274:	68e0      	ldr	r0, [r4, #12]
    a276:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    a27a:	2901      	cmp	r1, #1
    a27c:	bf18      	it	ne
    a27e:	2902      	cmpne	r1, #2
    a280:	d006      	beq.n	a290 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x404>
    a282:	bf00      	nop
    a284:	f240 218f 	movw	r1, #655	; 0x28f
    a288:	f04f 0006 	mov.w	r0, #6
    a28c:	f7f9 fc78 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a290:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    a294:	2a01      	cmp	r2, #1
    a296:	bf18      	it	ne
    a298:	2a02      	cmpne	r2, #2
    a29a:	d1f3      	bne.n	a284 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3f8>
    a29c:	f890 31c0 	ldrb.w	r3, [r0, #448]	; 0x1c0
    a2a0:	2901      	cmp	r1, #1
    a2a2:	d006      	beq.n	a2b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x426>
    a2a4:	2902      	cmp	r1, #2
    a2a6:	e000      	b.n	a2aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41e>
    a2a8:	e028      	b.n	a2fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a2aa:	bf08      	it	eq
    a2ac:	2b02      	cmpeq	r3, #2
    a2ae:	d002      	beq.n	a2b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x42a>
    a2b0:	e00e      	b.n	a2d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a2b2:	2b01      	cmp	r3, #1
    a2b4:	d10c      	bne.n	a2d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a2b6:	f890 11c1 	ldrb.w	r1, [r0, #449]	; 0x1c1
    a2ba:	2a01      	cmp	r2, #1
    a2bc:	d006      	beq.n	a2cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x440>
    a2be:	2a02      	cmp	r2, #2
    a2c0:	bf08      	it	eq
    a2c2:	2902      	cmpeq	r1, #2
    a2c4:	d00d      	beq.n	a2e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x456>
    a2c6:	e003      	b.n	a2d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a2c8:	20000140 	.word	0x20000140
    a2cc:	2901      	cmp	r1, #1
    a2ce:	d008      	beq.n	a2e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x456>
    a2d0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a2d4:	2301      	movs	r3, #1
    a2d6:	2103      	movs	r1, #3
    a2d8:	3078      	adds	r0, #120	; 0x78
    a2da:	f005 fdc2 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2de:	b968      	cbnz	r0, a2fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a2e0:	e003      	b.n	a2ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x45e>
    a2e2:	2000      	movs	r0, #0
    a2e4:	f000 fd5e 	bl	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    a2e8:	e008      	b.n	a2fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a2ea:	68e0      	ldr	r0, [r4, #12]
    a2ec:	2301      	movs	r3, #1
    a2ee:	2102      	movs	r1, #2
    a2f0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a2f4:	3078      	adds	r0, #120	; 0x78
    a2f6:	f005 fdb4 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2fa:	b1b0      	cbz	r0, a32a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x49e>
    a2fc:	68e0      	ldr	r0, [r4, #12]
    a2fe:	2301      	movs	r3, #1
    a300:	2100      	movs	r1, #0
    a302:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a306:	3078      	adds	r0, #120	; 0x78
    a308:	f005 fdab 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a30c:	2800      	cmp	r0, #0
    a30e:	bf08      	it	eq
    a310:	bd70      	popeq	{r4, r5, r6, pc}
    a312:	68e0      	ldr	r0, [r4, #12]
    a314:	f890 019c 	ldrb.w	r0, [r0, #412]	; 0x19c
    a318:	2800      	cmp	r0, #0
    a31a:	bf08      	it	eq
    a31c:	bd70      	popeq	{r4, r5, r6, pc}
    a31e:	2100      	movs	r1, #0
    a320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a324:	20ff      	movs	r0, #255	; 0xff
    a326:	f000 bcc7 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a32e:	2100      	movs	r1, #0
    a330:	2016      	movs	r0, #22
    a332:	f000 bcc1 	b.w	acb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a336:	0000      	movs	r0, r0
    a338:	b570      	push	{r4, r5, r6, lr}
    a33a:	b084      	sub	sp, #16
    a33c:	4605      	mov	r5, r0
    a33e:	4668      	mov	r0, sp
    a340:	f7fa fb08 	bl	4954 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    a344:	b318      	cbz	r0, a38e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x502>
    a346:	2222      	movs	r2, #34	; 0x22
    a348:	2100      	movs	r1, #0
    a34a:	9800      	ldr	r0, [sp, #0]
    a34c:	f004 fb6a 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a350:	2103      	movs	r1, #3
    a352:	9800      	ldr	r0, [sp, #0]
    a354:	f006 f8ac 	bl	104b0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    a358:	9800      	ldr	r0, [sp, #0]
    a35a:	7801      	ldrb	r1, [r0, #0]
    a35c:	f021 0110 	bic.w	r1, r1, #16
    a360:	7001      	strb	r1, [r0, #0]
    a362:	4629      	mov	r1, r5
    a364:	f7fc f9a8 	bl	66b8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    a368:	2200      	movs	r2, #0
    a36a:	4c63      	ldr	r4, [pc, #396]	; (a4f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x66c>)
    a36c:	f644 162f 	movw	r6, #18735	; 0x492f
    a370:	2d0e      	cmp	r5, #14
    a372:	d06e      	beq.n	a452 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c6>
    a374:	dc10      	bgt.n	a398 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50c>
    a376:	f1a5 0002 	sub.w	r0, r5, #2
    a37a:	280c      	cmp	r0, #12
    a37c:	d21e      	bcs.n	a3bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x530>
    a37e:	e8df f000 	tbb	[pc, r0]
    a382:	1d22      	.short	0x1d22
    a384:	22b0b048 	.word	0x22b0b048
    a388:	b01d551d 	.word	0xb01d551d
    a38c:	3b27      	.short	0x3b27
    a38e:	f640 1164 	movw	r1, #2404	; 0x964
    a392:	2031      	movs	r0, #49	; 0x31
    a394:	f7f9 fbf4 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a398:	2d15      	cmp	r5, #21
    a39a:	d05b      	beq.n	a454 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c8>
    a39c:	dc08      	bgt.n	a3b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x524>
    a39e:	2d11      	cmp	r5, #17
    a3a0:	d021      	beq.n	a3e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x55a>
    a3a2:	2d12      	cmp	r5, #18
    a3a4:	bf18      	it	ne
    a3a6:	2d13      	cmpne	r5, #19
    a3a8:	d03f      	beq.n	a42a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x59e>
    a3aa:	2d14      	cmp	r5, #20
    a3ac:	d052      	beq.n	a454 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c8>
    a3ae:	e005      	b.n	a3bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x530>
    a3b0:	2d16      	cmp	r5, #22
    a3b2:	d025      	beq.n	a400 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x574>
    a3b4:	2d17      	cmp	r5, #23
    a3b6:	d066      	beq.n	a486 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5fa>
    a3b8:	2dff      	cmp	r5, #255	; 0xff
    a3ba:	d076      	beq.n	a4aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61e>
    a3bc:	f640 11d6 	movw	r1, #2518	; 0x9d6
    a3c0:	2031      	movs	r0, #49	; 0x31
    a3c2:	f7f9 fbdd 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3c6:	68e1      	ldr	r1, [r4, #12]
    a3c8:	9800      	ldr	r0, [sp, #0]
    a3ca:	f891 10f6 	ldrb.w	r1, [r1, #246]	; 0xf6
    a3ce:	e015      	b.n	a3fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x570>
    a3d0:	9800      	ldr	r0, [sp, #0]
    a3d2:	210b      	movs	r1, #11
    a3d4:	7101      	strb	r1, [r0, #4]
    a3d6:	2159      	movs	r1, #89	; 0x59
    a3d8:	7141      	strb	r1, [r0, #5]
    a3da:	7182      	strb	r2, [r0, #6]
    a3dc:	2137      	movs	r1, #55	; 0x37
    a3de:	71c1      	strb	r1, [r0, #7]
    a3e0:	2111      	movs	r1, #17
    a3e2:	7201      	strb	r1, [r0, #8]
    a3e4:	e07d      	b.n	a4e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a3e6:	2103      	movs	r1, #3
    a3e8:	9800      	ldr	r0, [sp, #0]
    a3ea:	f006 f83d 	bl	10468 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    a3ee:	2106      	movs	r1, #6
    a3f0:	9800      	ldr	r0, [sp, #0]
    a3f2:	f006 f83b 	bl	1046c <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    a3f6:	e074      	b.n	a4e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a3f8:	9800      	ldr	r0, [sp, #0]
    a3fa:	2106      	movs	r1, #6
    a3fc:	7101      	strb	r1, [r0, #4]
    a3fe:	e070      	b.n	a4e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a400:	68e1      	ldr	r1, [r4, #12]
    a402:	9800      	ldr	r0, [sp, #0]
    a404:	f891 21c0 	ldrb.w	r2, [r1, #448]	; 0x1c0
    a408:	7102      	strb	r2, [r0, #4]
    a40a:	f891 11c1 	ldrb.w	r1, [r1, #449]	; 0x1c1
    a40e:	7141      	strb	r1, [r0, #5]
    a410:	e067      	b.n	a4e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a412:	68e0      	ldr	r0, [r4, #12]
    a414:	f500 7192 	add.w	r1, r0, #292	; 0x124
    a418:	9800      	ldr	r0, [sp, #0]
    a41a:	f006 f83a 	bl	10492 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    a41e:	68e0      	ldr	r0, [r4, #12]
    a420:	f100 01ec 	add.w	r1, r0, #236	; 0xec
    a424:	9800      	ldr	r0, [sp, #0]
    a426:	f006 f831 	bl	1048c <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    a42a:	e05a      	b.n	a4e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a42c:	9202      	str	r2, [sp, #8]
    a42e:	9203      	str	r2, [sp, #12]
    a430:	f002 fcf2 	bl	ce18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a434:	68e1      	ldr	r1, [r4, #12]
    a436:	4030      	ands	r0, r6
    a438:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    a43c:	4001      	ands	r1, r0
    a43e:	f88d 1008 	strb.w	r1, [sp, #8]
    a442:	0a00      	lsrs	r0, r0, #8
    a444:	f88d 0009 	strb.w	r0, [sp, #9]
    a448:	a902      	add	r1, sp, #8
    a44a:	9800      	ldr	r0, [sp, #0]
    a44c:	f006 f82b 	bl	104a6 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    a450:	e047      	b.n	a4e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a452:	e02b      	b.n	a4ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x620>
    a454:	68e0      	ldr	r0, [r4, #12]
    a456:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    a45a:	9800      	ldr	r0, [sp, #0]
    a45c:	f006 f830 	bl	104c0 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    a460:	68e0      	ldr	r0, [r4, #12]
    a462:	f8b0 10f8 	ldrh.w	r1, [r0, #248]	; 0xf8
    a466:	9800      	ldr	r0, [sp, #0]
    a468:	f006 f82e 	bl	104c8 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    a46c:	68e0      	ldr	r0, [r4, #12]
    a46e:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    a472:	9800      	ldr	r0, [sp, #0]
    a474:	f006 f82c 	bl	104d0 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    a478:	68e0      	ldr	r0, [r4, #12]
    a47a:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
    a47e:	9800      	ldr	r0, [sp, #0]
    a480:	f006 f82a 	bl	104d8 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    a484:	e02d      	b.n	a4e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a486:	68e0      	ldr	r0, [r4, #12]
    a488:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a48c:	2901      	cmp	r1, #1
    a48e:	9900      	ldr	r1, [sp, #0]
    a490:	bf14      	ite	ne
    a492:	f890 2062 	ldrbne.w	r2, [r0, #98]	; 0x62
    a496:	f890 21c0 	ldrbeq.w	r2, [r0, #448]	; 0x1c0
    a49a:	710a      	strb	r2, [r1, #4]
    a49c:	bf14      	ite	ne
    a49e:	f890 0063 	ldrbne.w	r0, [r0, #99]	; 0x63
    a4a2:	f890 01c1 	ldrbeq.w	r0, [r0, #449]	; 0x1c1
    a4a6:	7148      	strb	r0, [r1, #5]
    a4a8:	e01b      	b.n	a4e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a4aa:	e012      	b.n	a4d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x646>
    a4ac:	9202      	str	r2, [sp, #8]
    a4ae:	9203      	str	r2, [sp, #12]
    a4b0:	f002 fcb2 	bl	ce18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a4b4:	68e1      	ldr	r1, [r4, #12]
    a4b6:	4030      	ands	r0, r6
    a4b8:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    a4bc:	4001      	ands	r1, r0
    a4be:	f88d 1008 	strb.w	r1, [sp, #8]
    a4c2:	0a00      	lsrs	r0, r0, #8
    a4c4:	f88d 0009 	strb.w	r0, [sp, #9]
    a4c8:	a902      	add	r1, sp, #8
    a4ca:	9800      	ldr	r0, [sp, #0]
    a4cc:	f005 ffe6 	bl	1049c <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    a4d0:	e007      	b.n	a4e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a4d2:	68e0      	ldr	r0, [r4, #12]
    a4d4:	f890 219f 	ldrb.w	r2, [r0, #415]	; 0x19f
    a4d8:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
    a4dc:	9800      	ldr	r0, [sp, #0]
    a4de:	f005 ffc7 	bl	10470 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    a4e2:	f7fa fa0f 	bl	4904 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    a4e6:	2800      	cmp	r0, #0
    a4e8:	bf1c      	itt	ne
    a4ea:	b004      	addne	sp, #16
    a4ec:	bd70      	popne	{r4, r5, r6, pc}
    a4ee:	f640 11da 	movw	r1, #2522	; 0x9da
    a4f2:	2031      	movs	r0, #49	; 0x31
    a4f4:	f7f9 fb44 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4f8:	20000140 	.word	0x20000140
    a4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a500:	4cff      	ldr	r4, [pc, #1020]	; (a900 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa74>)
    a502:	4682      	mov	sl, r0
    a504:	b087      	sub	sp, #28
    a506:	68e0      	ldr	r0, [r4, #12]
    a508:	460d      	mov	r5, r1
    a50a:	8800      	ldrh	r0, [r0, #0]
    a50c:	f7f9 ff06 	bl	431c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    a510:	9005      	str	r0, [sp, #20]
    a512:	b178      	cbz	r0, a534 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6a8>
    a514:	78e0      	ldrb	r0, [r4, #3]
    a516:	4328      	orrs	r0, r5
    a518:	70e0      	strb	r0, [r4, #3]
    a51a:	88e0      	ldrh	r0, [r4, #6]
    a51c:	f04f 0500 	mov.w	r5, #0
    a520:	f410 7f80 	tst.w	r0, #256	; 0x100
    a524:	68e0      	ldr	r0, [r4, #12]
    a526:	bf1c      	itt	ne
    a528:	f8a0 50a6 	strhne.w	r5, [r0, #166]	; 0xa6
    a52c:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    a530:	d005      	beq.n	a53e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6b2>
    a532:	e009      	b.n	a548 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6bc>
    a534:	f640 516c 	movw	r1, #3436	; 0xd6c
    a538:	2031      	movs	r0, #49	; 0x31
    a53a:	f7f9 fb21 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a53e:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    a542:	1c49      	adds	r1, r1, #1
    a544:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    a548:	68e0      	ldr	r0, [r4, #12]
    a54a:	2701      	movs	r7, #1
    a54c:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a550:	b939      	cbnz	r1, a562 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6d6>
    a552:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a556:	2301      	movs	r3, #1
    a558:	2106      	movs	r1, #6
    a55a:	3078      	adds	r0, #120	; 0x78
    a55c:	f005 fc81 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a560:	b340      	cbz	r0, a5b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    a562:	88e0      	ldrh	r0, [r4, #6]
    a564:	f410 6f00 	tst.w	r0, #2048	; 0x800
    a568:	d007      	beq.n	a57a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6ee>
    a56a:	68e0      	ldr	r0, [r4, #12]
    a56c:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a570:	2900      	cmp	r1, #0
    a572:	bf18      	it	ne
    a574:	f8c0 5098 	strne.w	r5, [r0, #152]	; 0x98
    a578:	d11c      	bne.n	a5b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    a57a:	68e0      	ldr	r0, [r4, #12]
    a57c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    a580:	1c49      	adds	r1, r1, #1
    a582:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    a586:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    a58a:	428a      	cmp	r2, r1
    a58c:	bf2c      	ite	cs
    a58e:	1a53      	subcs	r3, r2, r1
    a590:	2300      	movcc	r3, #0
    a592:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    a596:	f10c 0c05 	add.w	ip, ip, #5
    a59a:	4563      	cmp	r3, ip
    a59c:	bf98      	it	ls
    a59e:	f880 70a4 	strbls.w	r7, [r0, #164]	; 0xa4
    a5a2:	4291      	cmp	r1, r2
    a5a4:	d306      	bcc.n	a5b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    a5a6:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    a5aa:	f880 720a 	strb.w	r7, [r0, #522]	; 0x20a
    a5ae:	7960      	ldrb	r0, [r4, #5]
    a5b0:	f7f9 f8da 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a5b4:	88e0      	ldrh	r0, [r4, #6]
    a5b6:	f04f 0602 	mov.w	r6, #2
    a5ba:	f410 7f40 	tst.w	r0, #768	; 0x300
    a5be:	d011      	beq.n	a5e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    a5c0:	68e0      	ldr	r0, [r4, #12]
    a5c2:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a5c6:	b111      	cbz	r1, a5ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x742>
    a5c8:	2903      	cmp	r1, #3
    a5ca:	d006      	beq.n	a5da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x74e>
    a5cc:	e00a      	b.n	a5e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    a5ce:	f880 7088 	strb.w	r7, [r0, #136]	; 0x88
    a5d2:	2101      	movs	r1, #1
    a5d4:	f7fe fb46 	bl	8c64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a5d8:	e004      	b.n	a5e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    a5da:	f880 6088 	strb.w	r6, [r0, #136]	; 0x88
    a5de:	2101      	movs	r1, #1
    a5e0:	f7fe fb40 	bl	8c64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a5e4:	68e0      	ldr	r0, [r4, #12]
    a5e6:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a5ea:	2901      	cmp	r1, #1
    a5ec:	d105      	bne.n	a5fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x76e>
    a5ee:	88e1      	ldrh	r1, [r4, #6]
    a5f0:	f411 6f80 	tst.w	r1, #1024	; 0x400
    a5f4:	bf18      	it	ne
    a5f6:	f880 6088 	strbne.w	r6, [r0, #136]	; 0x88
    a5fa:	f04f 0808 	mov.w	r8, #8
    a5fe:	f1ba 0f00 	cmp.w	sl, #0
    a602:	f040 8295 	bne.w	ab30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    a606:	88e1      	ldrh	r1, [r4, #6]
    a608:	f011 0f40 	tst.w	r1, #64	; 0x40
    a60c:	bf18      	it	ne
    a60e:	f8a0 512c 	strhne.w	r5, [r0, #300]	; 0x12c
    a612:	d104      	bne.n	a61e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x792>
    a614:	f8b0 212c 	ldrh.w	r2, [r0, #300]	; 0x12c
    a618:	1c52      	adds	r2, r2, #1
    a61a:	f8a0 212c 	strh.w	r2, [r0, #300]	; 0x12c
    a61e:	78e2      	ldrb	r2, [r4, #3]
    a620:	2a00      	cmp	r2, #0
    a622:	d178      	bne.n	a716 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x88a>
    a624:	f011 0f08 	tst.w	r1, #8
    a628:	f04f 0b20 	mov.w	fp, #32
    a62c:	d045      	beq.n	a6ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x82e>
    a62e:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    a632:	29fe      	cmp	r1, #254	; 0xfe
    a634:	d00d      	beq.n	a652 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7c6>
    a636:	21fe      	movs	r1, #254	; 0xfe
    a638:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    a63c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a640:	2919      	cmp	r1, #25
    a642:	d00b      	beq.n	a65c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7d0>
    a644:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    a648:	291f      	cmp	r1, #31
    a64a:	d019      	beq.n	a680 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7f4>
    a64c:	2927      	cmp	r1, #39	; 0x27
    a64e:	d026      	beq.n	a69e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x812>
    a650:	e02b      	b.n	a6aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81e>
    a652:	f240 7144 	movw	r1, #1860	; 0x744
    a656:	2031      	movs	r0, #49	; 0x31
    a658:	f7f9 fa92 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a65c:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
    a660:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    a664:	1e49      	subs	r1, r1, #1
    a666:	b249      	sxtb	r1, r1
    a668:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    a66c:	2900      	cmp	r1, #0
    a66e:	bfa8      	it	ge
    a670:	f880 5085 	strbge.w	r5, [r0, #133]	; 0x85
    a674:	dae6      	bge.n	a644 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b8>
    a676:	f44f 71c8 	mov.w	r1, #400	; 0x190
    a67a:	2031      	movs	r0, #49	; 0x31
    a67c:	f7f9 fa80 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a680:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a684:	f005 fc59 	bl	ff3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a688:	2800      	cmp	r0, #0
    a68a:	bf1d      	ittte	ne
    a68c:	2026      	movne	r0, #38	; 0x26
    a68e:	68e1      	ldrne	r1, [r4, #12]
    a690:	f881 0084 	strbne.w	r0, [r1, #132]	; 0x84
    a694:	68e0      	ldreq	r0, [r4, #12]
    a696:	bf08      	it	eq
    a698:	f880 b084 	strbeq.w	fp, [r0, #132]	; 0x84
    a69c:	e005      	b.n	a6aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81e>
    a69e:	f880 719d 	strb.w	r7, [r0, #413]	; 0x19d
    a6a2:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    a6a6:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    a6aa:	68e0      	ldr	r0, [r4, #12]
    a6ac:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a6b0:	2908      	cmp	r1, #8
    a6b2:	bf04      	itt	eq
    a6b4:	7026      	strbeq	r6, [r4, #0]
    a6b6:	f880 60f4 	strbeq.w	r6, [r0, #244]	; 0xf4
    a6ba:	2000      	movs	r0, #0
    a6bc:	79a1      	ldrb	r1, [r4, #6]
    a6be:	f011 0f01 	tst.w	r1, #1
    a6c2:	d060      	beq.n	a786 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fa>
    a6c4:	6960      	ldr	r0, [r4, #20]
    a6c6:	2301      	movs	r3, #1
    a6c8:	2105      	movs	r1, #5
    a6ca:	f890 9003 	ldrb.w	r9, [r0, #3]
    a6ce:	68e0      	ldr	r0, [r4, #12]
    a6d0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a6d4:	3078      	adds	r0, #120	; 0x78
    a6d6:	f005 fbc4 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6da:	b160      	cbz	r0, a6f6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x86a>
    a6dc:	f1a9 0002 	sub.w	r0, r9, #2
    a6e0:	280a      	cmp	r0, #10
    a6e2:	d206      	bcs.n	a6f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x866>
    a6e4:	e8df f000 	tbb	[pc, r0]
    a6e8:	05050707 	.word	0x05050707
    a6ec:	05050707 	.word	0x05050707
    a6f0:	0707      	.short	0x0707
    a6f2:	4646      	mov	r6, r8
    a6f4:	e048      	b.n	a788 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    a6f6:	6960      	ldr	r0, [r4, #20]
    a6f8:	f7fb ffb0 	bl	665c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    a6fc:	b160      	cbz	r0, a718 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x88c>
    a6fe:	6960      	ldr	r0, [r4, #20]
    a700:	f890 9003 	ldrb.w	r9, [r0, #3]
    a704:	f1b9 0f00 	cmp.w	r9, #0
    a708:	bf1c      	itt	ne
    a70a:	f1b9 0f01 	cmpne.w	r9, #1
    a70e:	f1b9 0f16 	cmpne.w	r9, #22
    a712:	d005      	beq.n	a720 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x894>
    a714:	e01a      	b.n	a74c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    a716:	e069      	b.n	a7ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    a718:	f000 fc8e 	bl	b038 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    a71c:	4606      	mov	r6, r0
    a71e:	e033      	b.n	a788 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    a720:	68e0      	ldr	r0, [r4, #12]
    a722:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    a726:	f005 fc08 	bl	ff3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a72a:	b178      	cbz	r0, a74c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    a72c:	68e1      	ldr	r1, [r4, #12]
    a72e:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    a732:	281f      	cmp	r0, #31
    a734:	d00a      	beq.n	a74c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    a736:	2820      	cmp	r0, #32
    a738:	bf04      	itt	eq
    a73a:	2026      	moveq	r0, #38	; 0x26
    a73c:	f881 0084 	strbeq.w	r0, [r1, #132]	; 0x84
    a740:	d004      	beq.n	a74c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    a742:	f1b9 0f16 	cmp.w	r9, #22
    a746:	bf08      	it	eq
    a748:	465e      	moveq	r6, fp
    a74a:	e01d      	b.n	a788 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    a74c:	f1b9 0f19 	cmp.w	r9, #25
    a750:	d205      	bcs.n	a75e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8d2>
    a752:	486c      	ldr	r0, [pc, #432]	; (a904 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa78>)
    a754:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
    a758:	b108      	cbz	r0, a75e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8d2>
    a75a:	4780      	blx	r0
    a75c:	e00b      	b.n	a776 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ea>
    a75e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    a762:	d106      	bne.n	a772 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8e6>
    a764:	69a0      	ldr	r0, [r4, #24]
    a766:	b120      	cbz	r0, a772 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8e6>
    a768:	68e0      	ldr	r0, [r4, #12]
    a76a:	f880 719e 	strb.w	r7, [r0, #414]	; 0x19e
    a76e:	2000      	movs	r0, #0
    a770:	e001      	b.n	a776 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ea>
    a772:	f000 fc61 	bl	b038 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    a776:	68e1      	ldr	r1, [r4, #12]
    a778:	e9d1 2334 	ldrd	r2, r3, [r1, #208]	; 0xd0
    a77c:	1c52      	adds	r2, r2, #1
    a77e:	f143 0300 	adc.w	r3, r3, #0
    a782:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    a786:	4606      	mov	r6, r0
    a788:	70e6      	strb	r6, [r4, #3]
    a78a:	bb7e      	cbnz	r6, a7ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    a78c:	88e0      	ldrh	r0, [r4, #6]
    a78e:	f010 0f04 	tst.w	r0, #4
    a792:	d005      	beq.n	a7a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x914>
    a794:	68e1      	ldr	r1, [r4, #12]
    a796:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    a79a:	2907      	cmp	r1, #7
    a79c:	bf08      	it	eq
    a79e:	7027      	strbeq	r7, [r4, #0]
    a7a0:	f010 0f02 	tst.w	r0, #2
    a7a4:	d016      	beq.n	a7d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x948>
    a7a6:	6920      	ldr	r0, [r4, #16]
    a7a8:	78c1      	ldrb	r1, [r0, #3]
    a7aa:	2919      	cmp	r1, #25
    a7ac:	d205      	bcs.n	a7ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x92e>
    a7ae:	4856      	ldr	r0, [pc, #344]	; (a908 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa7c>)
    a7b0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    a7b4:	b108      	cbz	r0, a7ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x92e>
    a7b6:	4780      	blx	r0
    a7b8:	e00c      	b.n	a7d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x948>
    a7ba:	29ff      	cmp	r1, #255	; 0xff
    a7bc:	d004      	beq.n	a7c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x93c>
    a7be:	f240 713a 	movw	r1, #1850	; 0x73a
    a7c2:	2031      	movs	r0, #49	; 0x31
    a7c4:	f7f9 f9dc 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7c8:	68e0      	ldr	r0, [r4, #12]
    a7ca:	2127      	movs	r1, #39	; 0x27
    a7cc:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    a7d0:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    a7d4:	79a0      	ldrb	r0, [r4, #6]
    a7d6:	f010 0f10 	tst.w	r0, #16
    a7da:	d007      	beq.n	a7ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    a7dc:	68e0      	ldr	r0, [r4, #12]
    a7de:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a7e2:	290b      	cmp	r1, #11
    a7e4:	bf04      	itt	eq
    a7e6:	210c      	moveq	r1, #12
    a7e8:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    a7ec:	7920      	ldrb	r0, [r4, #4]
    a7ee:	f010 0f08 	tst.w	r0, #8
    a7f2:	d011      	beq.n	a818 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    a7f4:	68e0      	ldr	r0, [r4, #12]
    a7f6:	2301      	movs	r3, #1
    a7f8:	2105      	movs	r1, #5
    a7fa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a7fe:	3078      	adds	r0, #120	; 0x78
    a800:	f005 fb2f 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a804:	b128      	cbz	r0, a812 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x986>
    a806:	f884 8003 	strb.w	r8, [r4, #3]
    a80a:	68e0      	ldr	r0, [r4, #12]
    a80c:	f880 51d4 	strb.w	r5, [r0, #468]	; 0x1d4
    a810:	e002      	b.n	a818 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    a812:	2000      	movs	r0, #0
    a814:	f7fa fac6 	bl	4da4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    a818:	69a0      	ldr	r0, [r4, #24]
    a81a:	b3e8      	cbz	r0, a898 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa0c>
    a81c:	9500      	str	r5, [sp, #0]
    a81e:	9501      	str	r5, [sp, #4]
    a820:	9502      	str	r5, [sp, #8]
    a822:	9503      	str	r5, [sp, #12]
    a824:	9504      	str	r5, [sp, #16]
    a826:	68e0      	ldr	r0, [r4, #12]
    a828:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    a82c:	f007 fada 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a830:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a834:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    a838:	fbb0 f6f1 	udiv	r6, r0, r1
    a83c:	68e0      	ldr	r0, [r4, #12]
    a83e:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    a842:	f007 fac1 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    a846:	4430      	add	r0, r6
    a848:	f8ad 0006 	strh.w	r0, [sp, #6]
    a84c:	68e0      	ldr	r0, [r4, #12]
    a84e:	8801      	ldrh	r1, [r0, #0]
    a850:	f8ad 1000 	strh.w	r1, [sp]
    a854:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    a858:	f8ad 1004 	strh.w	r1, [sp, #4]
    a85c:	6840      	ldr	r0, [r0, #4]
    a85e:	f005 fad9 	bl	fe14 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    a862:	f8ad 0002 	strh.w	r0, [sp, #2]
    a866:	68e0      	ldr	r0, [r4, #12]
    a868:	f890 019e 	ldrb.w	r0, [r0, #414]	; 0x19e
    a86c:	b130      	cbz	r0, a87c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f0>
    a86e:	6960      	ldr	r0, [r4, #20]
    a870:	1cc1      	adds	r1, r0, #3
    a872:	9103      	str	r1, [sp, #12]
    a874:	f005 fdad 	bl	103d2 <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>
    a878:	f88d 0010 	strb.w	r0, [sp, #16]
    a87c:	68e0      	ldr	r0, [r4, #12]
    a87e:	f890 019d 	ldrb.w	r0, [r0, #413]	; 0x19d
    a882:	f88d 0008 	strb.w	r0, [sp, #8]
    a886:	69a1      	ldr	r1, [r4, #24]
    a888:	4668      	mov	r0, sp
    a88a:	4788      	blx	r1
    a88c:	68e0      	ldr	r0, [r4, #12]
    a88e:	f880 519e 	strb.w	r5, [r0, #414]	; 0x19e
    a892:	f880 519d 	strb.w	r5, [r0, #413]	; 0x19d
    a896:	e000      	b.n	a89a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa0e>
    a898:	e021      	b.n	a8de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a89a:	9903      	ldr	r1, [sp, #12]
    a89c:	b1f9      	cbz	r1, a8de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a89e:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    a8a2:	b9e1      	cbnz	r1, a8de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8a4:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    a8a8:	2927      	cmp	r1, #39	; 0x27
    a8aa:	d018      	beq.n	a8de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8ac:	f89d 1010 	ldrb.w	r1, [sp, #16]
    a8b0:	9a03      	ldr	r2, [sp, #12]
    a8b2:	b1a1      	cbz	r1, a8de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8b4:	7813      	ldrb	r3, [r2, #0]
    a8b6:	2bff      	cmp	r3, #255	; 0xff
    a8b8:	d006      	beq.n	a8c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa3c>
    a8ba:	2b07      	cmp	r3, #7
    a8bc:	bf02      	ittt	eq
    a8be:	2902      	cmpeq	r1, #2
    a8c0:	7851      	ldrbeq	r1, [r2, #1]
    a8c2:	29ff      	cmpeq	r1, #255	; 0xff
    a8c4:	d002      	beq.n	a8cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa40>
    a8c6:	e00a      	b.n	a8de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8c8:	291b      	cmp	r1, #27
    a8ca:	d808      	bhi.n	a8de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8cc:	f880 719c 	strb.w	r7, [r0, #412]	; 0x19c
    a8d0:	9903      	ldr	r1, [sp, #12]
    a8d2:	f8c0 11a0 	str.w	r1, [r0, #416]	; 0x1a0
    a8d6:	f89d 1010 	ldrb.w	r1, [sp, #16]
    a8da:	f880 119f 	strb.w	r1, [r0, #415]	; 0x19f
    a8de:	f7ff fb01 	bl	9ee4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
    a8e2:	f7fa f8ff 	bl	4ae4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    a8e6:	b138      	cbz	r0, a8f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6c>
    a8e8:	68e0      	ldr	r0, [r4, #12]
    a8ea:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    a8ee:	2900      	cmp	r1, #0
    a8f0:	bf08      	it	eq
    a8f2:	f8a0 5108 	strheq.w	r5, [r0, #264]	; 0x108
    a8f6:	d00c      	beq.n	a912 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa86>
    a8f8:	68e0      	ldr	r0, [r4, #12]
    a8fa:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    a8fe:	e005      	b.n	a90c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa80>
    a900:	20000140 	.word	0x20000140
    a904:	20000160 	.word	0x20000160
    a908:	200001c4 	.word	0x200001c4
    a90c:	1c49      	adds	r1, r1, #1
    a90e:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    a912:	f7fa f8e1 	bl	4ad8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    a916:	b140      	cbz	r0, a92a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa9e>
    a918:	68e1      	ldr	r1, [r4, #12]
    a91a:	f891 0118 	ldrb.w	r0, [r1, #280]	; 0x118
    a91e:	2802      	cmp	r0, #2
    a920:	bf9c      	itt	ls
    a922:	1c40      	addls	r0, r0, #1
    a924:	f881 0118 	strbls.w	r0, [r1, #280]	; 0x118
    a928:	d804      	bhi.n	a934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaa8>
    a92a:	68e0      	ldr	r0, [r4, #12]
    a92c:	f890 0118 	ldrb.w	r0, [r0, #280]	; 0x118
    a930:	2802      	cmp	r0, #2
    a932:	d906      	bls.n	a942 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xab6>
    a934:	68e0      	ldr	r0, [r4, #12]
    a936:	f8a0 5108 	strh.w	r5, [r0, #264]	; 0x108
    a93a:	f8a0 510a 	strh.w	r5, [r0, #266]	; 0x10a
    a93e:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
    a942:	68e0      	ldr	r0, [r4, #12]
    a944:	2301      	movs	r3, #1
    a946:	2100      	movs	r1, #0
    a948:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a94c:	3078      	adds	r0, #120	; 0x78
    a94e:	f005 fa88 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a952:	b920      	cbnz	r0, a95e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad2>
    a954:	68e0      	ldr	r0, [r4, #12]
    a956:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a95a:	280c      	cmp	r0, #12
    a95c:	d168      	bne.n	aa30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    a95e:	68e0      	ldr	r0, [r4, #12]
    a960:	2301      	movs	r3, #1
    a962:	2100      	movs	r1, #0
    a964:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a968:	3078      	adds	r0, #120	; 0x78
    a96a:	f005 fa7a 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a96e:	b3e0      	cbz	r0, a9ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    a970:	68e0      	ldr	r0, [r4, #12]
    a972:	2301      	movs	r3, #1
    a974:	2100      	movs	r1, #0
    a976:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    a97a:	3078      	adds	r0, #120	; 0x78
    a97c:	f005 fa71 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a980:	b398      	cbz	r0, a9ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    a982:	68e0      	ldr	r0, [r4, #12]
    a984:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a988:	2902      	cmp	r1, #2
    a98a:	bf04      	itt	eq
    a98c:	f890 0118 	ldrbeq.w	r0, [r0, #280]	; 0x118
    a990:	2800      	cmpeq	r0, #0
    a992:	d14d      	bne.n	aa30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    a994:	9805      	ldr	r0, [sp, #20]
    a996:	f004 fd88 	bl	f4aa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    a99a:	b330      	cbz	r0, a9ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    a99c:	68e1      	ldr	r1, [r4, #12]
    a99e:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
    a9a2:	28fe      	cmp	r0, #254	; 0xfe
    a9a4:	d144      	bne.n	aa30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    a9a6:	f8b1 0102 	ldrh.w	r0, [r1, #258]	; 0x102
    a9aa:	2801      	cmp	r0, #1
    a9ac:	d940      	bls.n	aa30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    a9ae:	f881 710d 	strb.w	r7, [r1, #269]	; 0x10d
    a9b2:	f8b1 00a8 	ldrh.w	r0, [r1, #168]	; 0xa8
    a9b6:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    a9ba:	1e83      	subs	r3, r0, #2
    a9bc:	429a      	cmp	r2, r3
    a9be:	bfaf      	iteee	ge
    a9c0:	2001      	movge	r0, #1
    a9c2:	1a80      	sublt	r0, r0, r2
    a9c4:	1e40      	sublt	r0, r0, #1
    a9c6:	b280      	uxthlt	r0, r0
    a9c8:	f8b1 2108 	ldrh.w	r2, [r1, #264]	; 0x108
    a9cc:	8923      	ldrh	r3, [r4, #8]
    a9ce:	429a      	cmp	r2, r3
    a9d0:	bf2f      	iteee	cs
    a9d2:	2201      	movcs	r2, #1
    a9d4:	1a9a      	subcc	r2, r3, r2
    a9d6:	1c52      	addcc	r2, r2, #1
    a9d8:	b292      	uxthcc	r2, r2
    a9da:	4290      	cmp	r0, r2
    a9dc:	bf88      	it	hi
    a9de:	4610      	movhi	r0, r2
    a9e0:	2801      	cmp	r0, #1
    a9e2:	bf08      	it	eq
    a9e4:	f881 510d 	strbeq.w	r5, [r1, #269]	; 0x10d
    a9e8:	e000      	b.n	a9ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb60>
    a9ea:	e021      	b.n	aa30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    a9ec:	f891 2073 	ldrb.w	r2, [r1, #115]	; 0x73
    a9f0:	b96a      	cbnz	r2, aa0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    a9f2:	6eca      	ldr	r2, [r1, #108]	; 0x6c
    a9f4:	b15a      	cbz	r2, aa0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    a9f6:	f8b1 20a2 	ldrh.w	r2, [r1, #162]	; 0xa2
    a9fa:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    a9fe:	1ad2      	subs	r2, r2, r3
    aa00:	b212      	sxth	r2, r2
    aa02:	2a00      	cmp	r2, #0
    aa04:	dd03      	ble.n	aa0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    aa06:	4282      	cmp	r2, r0
    aa08:	bfd8      	it	le
    aa0a:	4610      	movle	r0, r2
    aa0c:	b280      	uxth	r0, r0
    aa0e:	f891 2181 	ldrb.w	r2, [r1, #385]	; 0x181
    aa12:	b18a      	cbz	r2, aa38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbac>
    aa14:	f8b1 210a 	ldrh.w	r2, [r1, #266]	; 0x10a
    aa18:	f8b1 1182 	ldrh.w	r1, [r1, #386]	; 0x182
    aa1c:	428a      	cmp	r2, r1
    aa1e:	bf2f      	iteee	cs
    aa20:	2101      	movcs	r1, #1
    aa22:	1a89      	subcc	r1, r1, r2
    aa24:	1c49      	addcc	r1, r1, #1
    aa26:	b289      	uxthcc	r1, r1
    aa28:	4288      	cmp	r0, r1
    aa2a:	bf88      	it	hi
    aa2c:	4608      	movhi	r0, r1
    aa2e:	e003      	b.n	aa38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbac>
    aa30:	68e1      	ldr	r1, [r4, #12]
    aa32:	2001      	movs	r0, #1
    aa34:	f881 510d 	strb.w	r5, [r1, #269]	; 0x10d
    aa38:	78a1      	ldrb	r1, [r4, #2]
    aa3a:	2900      	cmp	r1, #0
    aa3c:	bf18      	it	ne
    aa3e:	2801      	cmpne	r0, #1
    aa40:	bf9c      	itt	ls
    aa42:	68e1      	ldrls	r1, [r4, #12]
    aa44:	f881 5110 	strbls.w	r5, [r1, #272]	; 0x110
    aa48:	d903      	bls.n	aa52 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbc6>
    aa4a:	68e0      	ldr	r0, [r4, #12]
    aa4c:	f880 7110 	strb.w	r7, [r0, #272]	; 0x110
    aa50:	2001      	movs	r0, #1
    aa52:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    aa56:	f8bc 1078 	ldrh.w	r1, [ip, #120]	; 0x78
    aa5a:	4408      	add	r0, r1
    aa5c:	b280      	uxth	r0, r0
    aa5e:	f8ac 0104 	strh.w	r0, [ip, #260]	; 0x104
    aa62:	f89c 2088 	ldrb.w	r2, [ip, #136]	; 0x88
    aa66:	2a00      	cmp	r2, #0
    aa68:	bf18      	it	ne
    aa6a:	2a01      	cmpne	r2, #1
    aa6c:	d009      	beq.n	aa82 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbf6>
    aa6e:	2a02      	cmp	r2, #2
    aa70:	bf18      	it	ne
    aa72:	2a03      	cmpne	r2, #3
    aa74:	d008      	beq.n	aa88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbfc>
    aa76:	f640 2158 	movw	r1, #2648	; 0xa58
    aa7a:	f04f 0031 	mov.w	r0, #49	; 0x31
    aa7e:	f7f9 f87f 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa82:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    aa86:	e053      	b.n	ab30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    aa88:	f89c 2087 	ldrb.w	r2, [ip, #135]	; 0x87
    aa8c:	2a08      	cmp	r2, #8
    aa8e:	d022      	beq.n	aad6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc4a>
    aa90:	f8bc 00a6 	ldrh.w	r0, [ip, #166]	; 0xa6
    aa94:	f8bc 10a8 	ldrh.w	r1, [ip, #168]	; 0xa8
    aa98:	2600      	movs	r6, #0
    aa9a:	1c82      	adds	r2, r0, #2
    aa9c:	4291      	cmp	r1, r2
    aa9e:	d306      	bcc.n	aaae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc22>
    aaa0:	1a08      	subs	r0, r1, r0
    aaa2:	1e80      	subs	r0, r0, #2
    aaa4:	0406      	lsls	r6, r0, #16
    aaa6:	0c36      	lsrs	r6, r6, #16
    aaa8:	bf1c      	itt	ne
    aaaa:	1e70      	subne	r0, r6, #1
    aaac:	b286      	uxthne	r6, r0
    aaae:	f89c 00a4 	ldrb.w	r0, [ip, #164]	; 0xa4
    aab2:	b158      	cbz	r0, aacc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc40>
    aab4:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    aab8:	2301      	movs	r3, #1
    aaba:	2109      	movs	r1, #9
    aabc:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    aac0:	f005 f9cf 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aac4:	2800      	cmp	r0, #0
    aac6:	bf08      	it	eq
    aac8:	2600      	moveq	r6, #0
    aaca:	d02b      	beq.n	ab24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc98>
    aacc:	68e0      	ldr	r0, [r4, #12]
    aace:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    aad2:	b999      	cbnz	r1, aafc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc70>
    aad4:	e00a      	b.n	aaec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc60>
    aad6:	f8bc 20a6 	ldrh.w	r2, [ip, #166]	; 0xa6
    aada:	2a03      	cmp	r2, #3
    aadc:	d3d1      	bcc.n	aa82 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbf6>
    aade:	f8bc 00a8 	ldrh.w	r0, [ip, #168]	; 0xa8
    aae2:	4408      	add	r0, r1
    aae4:	1c40      	adds	r0, r0, #1
    aae6:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    aaea:	e021      	b.n	ab30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    aaec:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aaf0:	2301      	movs	r3, #1
    aaf2:	2106      	movs	r1, #6
    aaf4:	3078      	adds	r0, #120	; 0x78
    aaf6:	f005 f9b4 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aafa:	b178      	cbz	r0, ab1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc90>
    aafc:	68e1      	ldr	r1, [r4, #12]
    aafe:	2000      	movs	r0, #0
    ab00:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
    ab04:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    ab08:	1c8b      	adds	r3, r1, #2
    ab0a:	429a      	cmp	r2, r3
    ab0c:	d303      	bcc.n	ab16 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc8a>
    ab0e:	1a50      	subs	r0, r2, r1
    ab10:	1e80      	subs	r0, r0, #2
    ab12:	bf18      	it	ne
    ab14:	1e40      	subne	r0, r0, #1
    ab16:	42b0      	cmp	r0, r6
    ab18:	bf38      	it	cc
    ab1a:	b286      	uxthcc	r6, r0
    ab1c:	2e00      	cmp	r6, #0
    ab1e:	bf1c      	itt	ne
    ab20:	1e70      	subne	r0, r6, #1
    ab22:	b286      	uxthne	r6, r0
    ab24:	68e0      	ldr	r0, [r4, #12]
    ab26:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
    ab2a:	4431      	add	r1, r6
    ab2c:	f8a0 1100 	strh.w	r1, [r0, #256]	; 0x100
    ab30:	79a0      	ldrb	r0, [r4, #6]
    ab32:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ab36:	2800      	cmp	r0, #0
    ab38:	68e0      	ldr	r0, [r4, #12]
    ab3a:	bf18      	it	ne
    ab3c:	f8a0 511a 	strhne.w	r5, [r0, #282]	; 0x11a
    ab40:	d106      	bne.n	ab50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcc4>
    ab42:	f8b0 111a 	ldrh.w	r1, [r0, #282]	; 0x11a
    ab46:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    ab4a:	4411      	add	r1, r2
    ab4c:	f8a0 111a 	strh.w	r1, [r0, #282]	; 0x11a
    ab50:	68e0      	ldr	r0, [r4, #12]
    ab52:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    ab56:	b939      	cbnz	r1, ab68 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcdc>
    ab58:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    ab5c:	2301      	movs	r3, #1
    ab5e:	4619      	mov	r1, r3
    ab60:	3078      	adds	r0, #120	; 0x78
    ab62:	f005 f97e 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab66:	b138      	cbz	r0, ab78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcec>
    ab68:	68e0      	ldr	r0, [r4, #12]
    ab6a:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    ab6e:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    ab72:	4411      	add	r1, r2
    ab74:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    ab78:	68e0      	ldr	r0, [r4, #12]
    ab7a:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    ab7e:	b132      	cbz	r2, ab8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd02>
    ab80:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    ab84:	f8b0 3106 	ldrh.w	r3, [r0, #262]	; 0x106
    ab88:	4419      	add	r1, r3
    ab8a:	f8a0 10ac 	strh.w	r1, [r0, #172]	; 0xac
    ab8e:	f990 30b4 	ldrsb.w	r3, [r0, #180]	; 0xb4
    ab92:	2b00      	cmp	r3, #0
    ab94:	dd06      	ble.n	aba4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd18>
    ab96:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    ab9a:	f8b0 c106 	ldrh.w	ip, [r0, #262]	; 0x106
    ab9e:	4461      	add	r1, ip
    aba0:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    aba4:	f04f 0c3d 	mov.w	ip, #61	; 0x3d
    aba8:	f1ba 0f00 	cmp.w	sl, #0
    abac:	bf18      	it	ne
    abae:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    abb2:	d14c      	bne.n	ac4e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc2>
    abb4:	7821      	ldrb	r1, [r4, #0]
    abb6:	2902      	cmp	r1, #2
    abb8:	d011      	beq.n	abde <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd52>
    abba:	2901      	cmp	r1, #1
    abbc:	bf08      	it	eq
    abbe:	f890 118a 	ldrbeq.w	r1, [r0, #394]	; 0x18a
    abc2:	d042      	beq.n	ac4a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbe>
    abc4:	78e1      	ldrb	r1, [r4, #3]
    abc6:	b339      	cbz	r1, ac18 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd8c>
    abc8:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    abcc:	f011 0f14 	tst.w	r1, #20
    abd0:	bf18      	it	ne
    abd2:	211e      	movne	r1, #30
    abd4:	d009      	beq.n	abea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd5e>
    abd6:	bf00      	nop
    abd8:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    abdc:	e052      	b.n	ac84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    abde:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
    abe2:	2906      	cmp	r1, #6
    abe4:	bf18      	it	ne
    abe6:	2116      	movne	r1, #22
    abe8:	e02f      	b.n	ac4a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbe>
    abea:	f011 0f08 	tst.w	r1, #8
    abee:	bf18      	it	ne
    abf0:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    abf4:	d146      	bne.n	ac84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    abf6:	f011 0f20 	tst.w	r1, #32
    abfa:	bf18      	it	ne
    abfc:	2123      	movne	r1, #35	; 0x23
    abfe:	d1eb      	bne.n	abd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4c>
    ac00:	f011 0f03 	tst.w	r1, #3
    ac04:	bf1c      	itt	ne
    ac06:	212a      	movne	r1, #42	; 0x2a
    ac08:	f880 1095 	strbne.w	r1, [r0, #149]	; 0x95
    ac0c:	d13a      	bne.n	ac84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    ac0e:	f640 41ab 	movw	r1, #3243	; 0xcab
    ac12:	2031      	movs	r0, #49	; 0x31
    ac14:	f7f8 ffb4 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac18:	b12a      	cbz	r2, ac26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd9a>
    ac1a:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    ac1e:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    ac22:	4291      	cmp	r1, r2
    ac24:	d210      	bcs.n	ac48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbc>
    ac26:	2b00      	cmp	r3, #0
    ac28:	dd05      	ble.n	ac36 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdaa>
    ac2a:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    ac2e:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    ac32:	4291      	cmp	r1, r2
    ac34:	d208      	bcs.n	ac48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbc>
    ac36:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    ac3a:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    ac3e:	428a      	cmp	r2, r1
    ac40:	d308      	bcc.n	ac54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc8>
    ac42:	f890 2188 	ldrb.w	r2, [r0, #392]	; 0x188
    ac46:	b12a      	cbz	r2, ac54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc8>
    ac48:	2122      	movs	r1, #34	; 0x22
    ac4a:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    ac4e:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    ac52:	e017      	b.n	ac84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    ac54:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    ac58:	b13a      	cbz	r2, ac6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdde>
    ac5a:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    ac5e:	428a      	cmp	r2, r1
    ac60:	bf28      	it	cs
    ac62:	f880 8095 	strbcs.w	r8, [r0, #149]	; 0x95
    ac66:	d2f2      	bcs.n	ac4e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc2>
    ac68:	e009      	b.n	ac7e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf2>
    ac6a:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    ac6e:	2906      	cmp	r1, #6
    ac70:	d305      	bcc.n	ac7e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf2>
    ac72:	213e      	movs	r1, #62	; 0x3e
    ac74:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    ac78:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    ac7c:	e002      	b.n	ac84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    ac7e:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    ac82:	b171      	cbz	r1, aca2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe16>
    ac84:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    ac88:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    ac8c:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    ac90:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    ac94:	2900      	cmp	r1, #0
    ac96:	bf14      	ite	ne
    ac98:	2102      	movne	r1, #2
    ac9a:	2103      	moveq	r1, #3
    ac9c:	f7fd ffe2 	bl	8c64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    aca0:	e002      	b.n	aca8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe1c>
    aca2:	2100      	movs	r1, #0
    aca4:	f7fd ffde 	bl	8c64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    aca8:	68e0      	ldr	r0, [r4, #12]
    acaa:	f880 510e 	strb.w	r5, [r0, #270]	; 0x10e
    acae:	b007      	add	sp, #28
    acb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acb4:	f7f9 be10 	b.w	48d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    acb8:	4a0c      	ldr	r2, [pc, #48]	; (acec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe60>)
    acba:	b510      	push	{r4, lr}
    acbc:	68d2      	ldr	r2, [r2, #12]
    acbe:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    acc2:	2bfe      	cmp	r3, #254	; 0xfe
    acc4:	d004      	beq.n	acd0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe44>
    acc6:	f640 11ed 	movw	r1, #2541	; 0x9ed
    acca:	2031      	movs	r0, #49	; 0x31
    accc:	f7f8 ff58 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acd0:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    acd4:	2000      	movs	r0, #0
    acd6:	2900      	cmp	r1, #0
    acd8:	bf1c      	itt	ne
    acda:	f8a2 00b2 	strhne.w	r0, [r2, #178]	; 0xb2
    acde:	bd10      	popne	{r4, pc}
    ace0:	f8a2 00ac 	strh.w	r0, [r2, #172]	; 0xac
    ace4:	2001      	movs	r0, #1
    ace6:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    acea:	bd10      	pop	{r4, pc}
    acec:	20000140 	.word	0x20000140
    acf0:	b570      	push	{r4, r5, r6, lr}
    acf2:	4a2b      	ldr	r2, [pc, #172]	; (ada0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf14>)
    acf4:	4603      	mov	r3, r0
    acf6:	88d0      	ldrh	r0, [r2, #6]
    acf8:	4318      	orrs	r0, r3
    acfa:	80d0      	strh	r0, [r2, #6]
    acfc:	4610      	mov	r0, r2
    acfe:	2b40      	cmp	r3, #64	; 0x40
    ad00:	68c0      	ldr	r0, [r0, #12]
    ad02:	d011      	beq.n	ad28 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe9c>
    ad04:	f013 0f02 	tst.w	r3, #2
    ad08:	f04f 0400 	mov.w	r4, #0
    ad0c:	f04f 0c01 	mov.w	ip, #1
    ad10:	f003 0501 	and.w	r5, r3, #1
    ad14:	d00d      	beq.n	ad32 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xea6>
    ad16:	2d00      	cmp	r5, #0
    ad18:	bf08      	it	eq
    ad1a:	6111      	streq	r1, [r2, #16]
    ad1c:	d026      	beq.n	ad6c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xee0>
    ad1e:	f640 41fe 	movw	r1, #3326	; 0xcfe
    ad22:	2031      	movs	r0, #49	; 0x31
    ad24:	f7f8 ff2c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ad2c:	2104      	movs	r1, #4
    ad2e:	f7fd bf99 	b.w	8c64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    ad32:	b1b5      	cbz	r5, ad62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    ad34:	6151      	str	r1, [r2, #20]
    ad36:	78c9      	ldrb	r1, [r1, #3]
    ad38:	2906      	cmp	r1, #6
    ad3a:	d009      	beq.n	ad50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xec4>
    ad3c:	290b      	cmp	r1, #11
    ad3e:	bf01      	itttt	eq
    ad40:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    ad44:	2911      	cmpeq	r1, #17
    ad46:	f880 4089 	strbeq.w	r4, [r0, #137]	; 0x89
    ad4a:	f880 c0b6 	strbeq.w	ip, [r0, #182]	; 0xb6
    ad4e:	e008      	b.n	ad62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    ad50:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ad54:	2917      	cmp	r1, #23
    ad56:	d104      	bne.n	ad62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    ad58:	2100      	movs	r1, #0
    ad5a:	e9c0 1132 	strd	r1, r1, [r0, #200]	; 0xc8
    ad5e:	f880 c089 	strb.w	ip, [r0, #137]	; 0x89
    ad62:	f013 0f02 	tst.w	r3, #2
    ad66:	bf18      	it	ne
    ad68:	6911      	ldrne	r1, [r2, #16]
    ad6a:	d013      	beq.n	ad94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    ad6c:	78c9      	ldrb	r1, [r1, #3]
    ad6e:	2905      	cmp	r1, #5
    ad70:	d007      	beq.n	ad82 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef6>
    ad72:	290b      	cmp	r1, #11
    ad74:	bf02      	ittt	eq
    ad76:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    ad7a:	2910      	cmpeq	r1, #16
    ad7c:	f880 408a 	strbeq.w	r4, [r0, #138]	; 0x8a
    ad80:	e008      	b.n	ad94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    ad82:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ad86:	2915      	cmp	r1, #21
    ad88:	d104      	bne.n	ad94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    ad8a:	2100      	movs	r1, #0
    ad8c:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    ad90:	f880 c08a 	strb.w	ip, [r0, #138]	; 0x8a
    ad94:	f013 0f20 	tst.w	r3, #32
    ad98:	bf1c      	itt	ne
    ad9a:	2008      	movne	r0, #8
    ad9c:	7110      	strbne	r0, [r2, #4]
    ad9e:	bd70      	pop	{r4, r5, r6, pc}
    ada0:	20000140 	.word	0x20000140
    ada4:	4a15      	ldr	r2, [pc, #84]	; (adfc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf70>)
    ada6:	b510      	push	{r4, lr}
    ada8:	68d1      	ldr	r1, [r2, #12]
    adaa:	880b      	ldrh	r3, [r1, #0]
    adac:	f8a1 3216 	strh.w	r3, [r1, #534]	; 0x216
    adb0:	f881 0214 	strb.w	r0, [r1, #532]	; 0x214
    adb4:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    adb8:	2801      	cmp	r0, #1
    adba:	bf18      	it	ne
    adbc:	2802      	cmpne	r0, #2
    adbe:	d005      	beq.n	adcc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf40>
    adc0:	f240 218f 	movw	r1, #655	; 0x28f
    adc4:	f04f 0006 	mov.w	r0, #6
    adc8:	f7f8 feda 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adcc:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    add0:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    add4:	2801      	cmp	r0, #1
    add6:	bf18      	it	ne
    add8:	2802      	cmpne	r0, #2
    adda:	d1f1      	bne.n	adc0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf34>
    addc:	f881 0219 	strb.w	r0, [r1, #537]	; 0x219
    ade0:	f04f 0001 	mov.w	r0, #1
    ade4:	f881 0212 	strb.w	r0, [r1, #530]	; 0x212
    ade8:	f04f 0000 	mov.w	r0, #0
    adec:	f881 01be 	strb.w	r0, [r1, #446]	; 0x1be
    adf0:	7950      	ldrb	r0, [r2, #5]
    adf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    adf6:	f7f8 bcb7 	b.w	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    adfa:	0000      	.short	0x0000
    adfc:	20000140 	.word	0x20000140
    ae00:	b510      	push	{r4, lr}
    ae02:	4c17      	ldr	r4, [pc, #92]	; (ae60 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd4>)
    ae04:	2301      	movs	r3, #1
    ae06:	2100      	movs	r1, #0
    ae08:	68e0      	ldr	r0, [r4, #12]
    ae0a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae0e:	3078      	adds	r0, #120	; 0x78
    ae10:	f005 f827 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae14:	2800      	cmp	r0, #0
    ae16:	bf04      	itt	eq
    ae18:	2001      	moveq	r0, #1
    ae1a:	bd10      	popeq	{r4, pc}
    ae1c:	6960      	ldr	r0, [r4, #20]
    ae1e:	f005 fab4 	bl	1038a <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    ae22:	68e1      	ldr	r1, [r4, #12]
    ae24:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    ae28:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    ae2c:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    ae30:	1a80      	subs	r0, r0, r2
    ae32:	b200      	sxth	r0, r0
    ae34:	2201      	movs	r2, #1
    ae36:	4283      	cmp	r3, r0
    ae38:	bfa8      	it	ge
    ae3a:	2800      	cmpge	r0, #0
    ae3c:	dd09      	ble.n	ae52 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfc6>
    ae3e:	f501 71d3 	add.w	r1, r1, #422	; 0x1a6
    ae42:	6960      	ldr	r0, [r4, #20]
    ae44:	f005 fa9c 	bl	10380 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    ae48:	68e1      	ldr	r1, [r4, #12]
    ae4a:	200b      	movs	r0, #11
    ae4c:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ae50:	e004      	b.n	ae5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd0>
    ae52:	2028      	movs	r0, #40	; 0x28
    ae54:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    ae58:	f881 2094 	strb.w	r2, [r1, #148]	; 0x94
    ae5c:	2000      	movs	r0, #0
    ae5e:	bd10      	pop	{r4, pc}
    ae60:	20000140 	.word	0x20000140
    ae64:	b570      	push	{r4, r5, r6, lr}
    ae66:	4c2d      	ldr	r4, [pc, #180]	; (af1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1090>)
    ae68:	2301      	movs	r3, #1
    ae6a:	2100      	movs	r1, #0
    ae6c:	68e0      	ldr	r0, [r4, #12]
    ae6e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae72:	3078      	adds	r0, #120	; 0x78
    ae74:	f004 fff5 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae78:	2800      	cmp	r0, #0
    ae7a:	bf04      	itt	eq
    ae7c:	2001      	moveq	r0, #1
    ae7e:	bd70      	popeq	{r4, r5, r6, pc}
    ae80:	68e0      	ldr	r0, [r4, #12]
    ae82:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ae86:	6960      	ldr	r0, [r4, #20]
    ae88:	f005 fa4f 	bl	1032a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    ae8c:	2800      	cmp	r0, #0
    ae8e:	d039      	beq.n	af04 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1078>
    ae90:	6960      	ldr	r0, [r4, #20]
    ae92:	68e1      	ldr	r1, [r4, #12]
    ae94:	f647 7cfe 	movw	ip, #32766	; 0x7ffe
    ae98:	f8b0 200d 	ldrh.w	r2, [r0, #13]
    ae9c:	f8a1 21a4 	strh.w	r2, [r1, #420]	; 0x1a4
    aea0:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    aea4:	1ad2      	subs	r2, r2, r3
    aea6:	b212      	sxth	r2, r2
    aea8:	2301      	movs	r3, #1
    aeaa:	4594      	cmp	ip, r2
    aeac:	bfa8      	it	ge
    aeae:	2a00      	cmpge	r2, #0
    aeb0:	dd2c      	ble.n	af0c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
    aeb2:	f005 fa6d 	bl	10390 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    aeb6:	f004 ffa1 	bl	fdfc <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    aeba:	4605      	mov	r5, r0
    aebc:	68e0      	ldr	r0, [r4, #12]
    aebe:	4629      	mov	r1, r5
    aec0:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    aec4:	6960      	ldr	r0, [r4, #20]
    aec6:	7900      	ldrb	r0, [r0, #4]
    aec8:	f005 f9e6 	bl	10298 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    aecc:	68e1      	ldr	r1, [r4, #12]
    aece:	f8a1 01a6 	strh.w	r0, [r1, #422]	; 0x1a6
    aed2:	6960      	ldr	r0, [r4, #20]
    aed4:	4629      	mov	r1, r5
    aed6:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    aeda:	f005 f9d4 	bl	10286 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    aede:	68e1      	ldr	r1, [r4, #12]
    aee0:	f8c1 01a8 	str.w	r0, [r1, #424]	; 0x1a8
    aee4:	6960      	ldr	r0, [r4, #20]
    aee6:	f005 fa56 	bl	10396 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    aeea:	68e1      	ldr	r1, [r4, #12]
    aeec:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    aef0:	6960      	ldr	r0, [r4, #20]
    aef2:	f005 fa53 	bl	1039c <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    aef6:	68e1      	ldr	r1, [r4, #12]
    aef8:	f8a1 01b2 	strh.w	r0, [r1, #434]	; 0x1b2
    aefc:	200d      	movs	r0, #13
    aefe:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af02:	e008      	b.n	af16 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x108a>
    af04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    af08:	f000 b896 	b.w	b038 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    af0c:	2028      	movs	r0, #40	; 0x28
    af0e:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    af12:	f881 3094 	strb.w	r3, [r1, #148]	; 0x94
    af16:	2000      	movs	r0, #0
    af18:	bd70      	pop	{r4, r5, r6, pc}
    af1a:	0000      	.short	0x0000
    af1c:	20000140 	.word	0x20000140
    af20:	b510      	push	{r4, lr}
    af22:	4c29      	ldr	r4, [pc, #164]	; (afc8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x113c>)
    af24:	2301      	movs	r3, #1
    af26:	2100      	movs	r1, #0
    af28:	68e0      	ldr	r0, [r4, #12]
    af2a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af2e:	3078      	adds	r0, #120	; 0x78
    af30:	f004 ff97 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af34:	b970      	cbnz	r0, af54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c8>
    af36:	68e0      	ldr	r0, [r4, #12]
    af38:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af3c:	2a12      	cmp	r2, #18
    af3e:	d009      	beq.n	af54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c8>
    af40:	2301      	movs	r3, #1
    af42:	2105      	movs	r1, #5
    af44:	3078      	adds	r0, #120	; 0x78
    af46:	f004 ff8c 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af4a:	2800      	cmp	r0, #0
    af4c:	bf0c      	ite	eq
    af4e:	2001      	moveq	r0, #1
    af50:	2008      	movne	r0, #8
    af52:	bd10      	pop	{r4, pc}
    af54:	68e0      	ldr	r0, [r4, #12]
    af56:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    af5a:	b939      	cbnz	r1, af6c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e0>
    af5c:	2100      	movs	r1, #0
    af5e:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    af62:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    af66:	1c49      	adds	r1, r1, #1
    af68:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    af6c:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    af70:	6960      	ldr	r0, [r4, #20]
    af72:	f005 fa22 	bl	103ba <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    af76:	68e0      	ldr	r0, [r4, #12]
    af78:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    af7c:	6960      	ldr	r0, [r4, #20]
    af7e:	f005 fa13 	bl	103a8 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    af82:	68e0      	ldr	r0, [r4, #12]
    af84:	f890 11dc 	ldrb.w	r1, [r0, #476]	; 0x1dc
    af88:	b121      	cbz	r1, af94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1108>
    af8a:	f44f 7127 	mov.w	r1, #668	; 0x29c
    af8e:	2031      	movs	r0, #49	; 0x31
    af90:	f7f8 fdf6 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af94:	8801      	ldrh	r1, [r0, #0]
    af96:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    af9a:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    af9e:	6960      	ldr	r0, [r4, #20]
    afa0:	f005 fa06 	bl	103b0 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    afa4:	68e0      	ldr	r0, [r4, #12]
    afa6:	f500 71f4 	add.w	r1, r0, #488	; 0x1e8
    afaa:	6960      	ldr	r0, [r4, #20]
    afac:	f005 f9f9 	bl	103a2 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    afb0:	68e0      	ldr	r0, [r4, #12]
    afb2:	2101      	movs	r1, #1
    afb4:	f880 11dc 	strb.w	r1, [r0, #476]	; 0x1dc
    afb8:	2114      	movs	r1, #20
    afba:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    afbe:	7960      	ldrb	r0, [r4, #5]
    afc0:	f7f8 fbd2 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    afc4:	2000      	movs	r0, #0
    afc6:	bd10      	pop	{r4, pc}
    afc8:	20000140 	.word	0x20000140
    afcc:	b510      	push	{r4, lr}
    afce:	4c19      	ldr	r4, [pc, #100]	; (b034 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11a8>)
    afd0:	b082      	sub	sp, #8
    afd2:	68e0      	ldr	r0, [r4, #12]
    afd4:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    afd8:	f010 0f01 	tst.w	r0, #1
    afdc:	bf1e      	ittt	ne
    afde:	2001      	movne	r0, #1
    afe0:	b002      	addne	sp, #8
    afe2:	bd10      	popne	{r4, pc}
    afe4:	4669      	mov	r1, sp
    afe6:	6960      	ldr	r0, [r4, #20]
    afe8:	f005 f9ee 	bl	103c8 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    afec:	f001 ff14 	bl	ce18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    aff0:	f644 112f 	movw	r1, #18735	; 0x492f
    aff4:	4001      	ands	r1, r0
    aff6:	f89d 0000 	ldrb.w	r0, [sp]
    affa:	ea00 0201 	and.w	r2, r0, r1
    affe:	68e0      	ldr	r0, [r4, #12]
    b000:	f880 20be 	strb.w	r2, [r0, #190]	; 0xbe
    b004:	f89d 2001 	ldrb.w	r2, [sp, #1]
    b008:	ea02 2111 	and.w	r1, r2, r1, lsr #8
    b00c:	f880 10bf 	strb.w	r1, [r0, #191]	; 0xbf
    b010:	2100      	movs	r1, #0
    b012:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b016:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b01a:	1c49      	adds	r1, r1, #1
    b01c:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b020:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b024:	f041 0101 	orr.w	r1, r1, #1
    b028:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b02c:	b002      	add	sp, #8
    b02e:	2000      	movs	r0, #0
    b030:	bd10      	pop	{r4, pc}
    b032:	0000      	.short	0x0000
    b034:	20000140 	.word	0x20000140
    b038:	4a0d      	ldr	r2, [pc, #52]	; (b070 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11e4>)
    b03a:	68d0      	ldr	r0, [r2, #12]
    b03c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b040:	f011 0f08 	tst.w	r1, #8
    b044:	bf1c      	itt	ne
    b046:	2001      	movne	r0, #1
    b048:	4770      	bxne	lr
    b04a:	f041 0108 	orr.w	r1, r1, #8
    b04e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b052:	6951      	ldr	r1, [r2, #20]
    b054:	78c9      	ldrb	r1, [r1, #3]
    b056:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    b05a:	2100      	movs	r1, #0
    b05c:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b060:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b064:	1c49      	adds	r1, r1, #1
    b066:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b06a:	2000      	movs	r0, #0
    b06c:	4770      	bx	lr
    b06e:	0000      	.short	0x0000
    b070:	20000140 	.word	0x20000140
    b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b076:	4c34      	ldr	r4, [pc, #208]	; (b148 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>)
    b078:	68e0      	ldr	r0, [r4, #12]
    b07a:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    b07e:	f010 0f30 	tst.w	r0, #48	; 0x30
    b082:	bf1c      	itt	ne
    b084:	2001      	movne	r0, #1
    b086:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    b088:	6960      	ldr	r0, [r4, #20]
    b08a:	f005 f9ba 	bl	10402 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    b08e:	2800      	cmp	r0, #0
    b090:	d030      	beq.n	b0f4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1268>
    b092:	6960      	ldr	r0, [r4, #20]
    b094:	f005 f9a7 	bl	103e6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    b098:	4605      	mov	r5, r0
    b09a:	6960      	ldr	r0, [r4, #20]
    b09c:	f005 f9a7 	bl	103ee <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    b0a0:	4606      	mov	r6, r0
    b0a2:	6960      	ldr	r0, [r4, #20]
    b0a4:	f005 f99d 	bl	103e2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    b0a8:	4607      	mov	r7, r0
    b0aa:	6960      	ldr	r0, [r4, #20]
    b0ac:	f005 f99d 	bl	103ea <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    b0b0:	4601      	mov	r1, r0
    b0b2:	9500      	str	r5, [sp, #0]
    b0b4:	68e0      	ldr	r0, [r4, #12]
    b0b6:	4633      	mov	r3, r6
    b0b8:	463a      	mov	r2, r7
    b0ba:	3028      	adds	r0, #40	; 0x28
    b0bc:	f005 fc85 	bl	109ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    b0c0:	79a0      	ldrb	r0, [r4, #6]
    b0c2:	f010 0f02 	tst.w	r0, #2
    b0c6:	d003      	beq.n	b0d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1244>
    b0c8:	6920      	ldr	r0, [r4, #16]
    b0ca:	78c0      	ldrb	r0, [r0, #3]
    b0cc:	2814      	cmp	r0, #20
    b0ce:	d015      	beq.n	b0fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1270>
    b0d0:	68e1      	ldr	r1, [r4, #12]
    b0d2:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    b0d6:	281c      	cmp	r0, #28
    b0d8:	d010      	beq.n	b0fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1270>
    b0da:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b0de:	2801      	cmp	r0, #1
    b0e0:	d010      	beq.n	b104 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1278>
    b0e2:	f891 01b5 	ldrb.w	r0, [r1, #437]	; 0x1b5
    b0e6:	2800      	cmp	r0, #0
    b0e8:	bf04      	itt	eq
    b0ea:	f891 01b4 	ldrbeq.w	r0, [r1, #436]	; 0x1b4
    b0ee:	2800      	cmpeq	r0, #0
    b0f0:	d010      	beq.n	b114 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1288>
    b0f2:	e007      	b.n	b104 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1278>
    b0f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b0f8:	f7ff bf9e 	b.w	b038 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b0fc:	68e1      	ldr	r1, [r4, #12]
    b0fe:	2001      	movs	r0, #1
    b100:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    b104:	68e0      	ldr	r0, [r4, #12]
    b106:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b10a:	f041 0110 	orr.w	r1, r1, #16
    b10e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b112:	e00e      	b.n	b132 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12a6>
    b114:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    b118:	f501 72fc 	add.w	r2, r1, #504	; 0x1f8
    b11c:	f040 0020 	orr.w	r0, r0, #32
    b120:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    b124:	f831 0b28 	ldrh.w	r0, [r1], #40
    b128:	f005 fc57 	bl	109da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    b12c:	7960      	ldrb	r0, [r4, #5]
    b12e:	f7f8 fb1b 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b132:	68e0      	ldr	r0, [r4, #12]
    b134:	2100      	movs	r1, #0
    b136:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b13a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b13e:	1c49      	adds	r1, r1, #1
    b140:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b144:	2000      	movs	r0, #0
    b146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b148:	20000140 	.word	0x20000140
    b14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b14e:	4c22      	ldr	r4, [pc, #136]	; (b1d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x134c>)
    b150:	2301      	movs	r3, #1
    b152:	210a      	movs	r1, #10
    b154:	68e0      	ldr	r0, [r4, #12]
    b156:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b15a:	3078      	adds	r0, #120	; 0x78
    b15c:	f004 fe81 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b160:	2800      	cmp	r0, #0
    b162:	bf04      	itt	eq
    b164:	2001      	moveq	r0, #1
    b166:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    b168:	6960      	ldr	r0, [r4, #20]
    b16a:	f005 f94a 	bl	10402 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    b16e:	b1c8      	cbz	r0, b1a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1318>
    b170:	6960      	ldr	r0, [r4, #20]
    b172:	f005 f938 	bl	103e6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    b176:	4605      	mov	r5, r0
    b178:	6960      	ldr	r0, [r4, #20]
    b17a:	f005 f938 	bl	103ee <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    b17e:	4606      	mov	r6, r0
    b180:	6960      	ldr	r0, [r4, #20]
    b182:	f005 f92e 	bl	103e2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    b186:	4607      	mov	r7, r0
    b188:	6960      	ldr	r0, [r4, #20]
    b18a:	f005 f92e 	bl	103ea <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    b18e:	4601      	mov	r1, r0
    b190:	9500      	str	r5, [sp, #0]
    b192:	68e0      	ldr	r0, [r4, #12]
    b194:	4633      	mov	r3, r6
    b196:	463a      	mov	r2, r7
    b198:	3028      	adds	r0, #40	; 0x28
    b19a:	f005 fc16 	bl	109ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    b19e:	68e0      	ldr	r0, [r4, #12]
    b1a0:	f005 fb58 	bl	10854 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    b1a4:	68e1      	ldr	r1, [r4, #12]
    b1a6:	2000      	movs	r0, #0
    b1a8:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b1ac:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b1b0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b1b4:	2801      	cmp	r0, #1
    b1b6:	bf04      	itt	eq
    b1b8:	2002      	moveq	r0, #2
    b1ba:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    b1be:	d008      	beq.n	b1d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1346>
    b1c0:	8808      	ldrh	r0, [r1, #0]
    b1c2:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    b1c6:	3128      	adds	r1, #40	; 0x28
    b1c8:	f005 fac7 	bl	1075a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    b1cc:	7960      	ldrb	r0, [r4, #5]
    b1ce:	f7f8 facb 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b1d2:	2000      	movs	r0, #0
    b1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1d6:	0000      	.short	0x0000
    b1d8:	20000140 	.word	0x20000140
    b1dc:	480b      	ldr	r0, [pc, #44]	; (b20c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1380>)
    b1de:	68c0      	ldr	r0, [r0, #12]
    b1e0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b1e4:	f011 0f04 	tst.w	r1, #4
    b1e8:	bf1c      	itt	ne
    b1ea:	2001      	movne	r0, #1
    b1ec:	4770      	bxne	lr
    b1ee:	2200      	movs	r2, #0
    b1f0:	f8a0 20b2 	strh.w	r2, [r0, #178]	; 0xb2
    b1f4:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    b1f8:	f041 0104 	orr.w	r1, r1, #4
    b1fc:	1c52      	adds	r2, r2, #1
    b1fe:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    b202:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b206:	2000      	movs	r0, #0
    b208:	4770      	bx	lr
    b20a:	0000      	.short	0x0000
    b20c:	20000140 	.word	0x20000140
    b210:	b510      	push	{r4, lr}
    b212:	4c0a      	ldr	r4, [pc, #40]	; (b23c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13b0>)
    b214:	2301      	movs	r3, #1
    b216:	2109      	movs	r1, #9
    b218:	68e0      	ldr	r0, [r4, #12]
    b21a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b21e:	3078      	adds	r0, #120	; 0x78
    b220:	f004 fe1f 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b224:	2800      	cmp	r0, #0
    b226:	bf08      	it	eq
    b228:	bd10      	popeq	{r4, pc}
    b22a:	2000      	movs	r0, #0
    b22c:	68e1      	ldr	r1, [r4, #12]
    b22e:	f881 00a4 	strb.w	r0, [r1, #164]	; 0xa4
    b232:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b236:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b23a:	bd10      	pop	{r4, pc}
    b23c:	20000140 	.word	0x20000140
    b240:	b510      	push	{r4, lr}
    b242:	4c12      	ldr	r4, [pc, #72]	; (b28c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1400>)
    b244:	2301      	movs	r3, #1
    b246:	2100      	movs	r1, #0
    b248:	68e0      	ldr	r0, [r4, #12]
    b24a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b24e:	3078      	adds	r0, #120	; 0x78
    b250:	f004 fe07 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b254:	b168      	cbz	r0, b272 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13e6>
    b256:	68e0      	ldr	r0, [r4, #12]
    b258:	2100      	movs	r1, #0
    b25a:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b25e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b262:	1c49      	adds	r1, r1, #1
    b264:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b268:	2110      	movs	r1, #16
    b26a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b26e:	2000      	movs	r0, #0
    b270:	bd10      	pop	{r4, pc}
    b272:	68e0      	ldr	r0, [r4, #12]
    b274:	2301      	movs	r3, #1
    b276:	2105      	movs	r1, #5
    b278:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b27c:	3078      	adds	r0, #120	; 0x78
    b27e:	f004 fdf0 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b282:	2800      	cmp	r0, #0
    b284:	bf14      	ite	ne
    b286:	2008      	movne	r0, #8
    b288:	2001      	moveq	r0, #1
    b28a:	bd10      	pop	{r4, pc}
    b28c:	20000140 	.word	0x20000140
    b290:	4806      	ldr	r0, [pc, #24]	; (b2ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1420>)
    b292:	68c0      	ldr	r0, [r0, #12]
    b294:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b298:	2911      	cmp	r1, #17
    b29a:	bf1c      	itt	ne
    b29c:	2002      	movne	r0, #2
    b29e:	4770      	bxne	lr
    b2a0:	2112      	movs	r1, #18
    b2a2:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b2a6:	2000      	movs	r0, #0
    b2a8:	4770      	bx	lr
    b2aa:	0000      	.short	0x0000
    b2ac:	20000140 	.word	0x20000140
    b2b0:	b570      	push	{r4, r5, r6, lr}
    b2b2:	4c36      	ldr	r4, [pc, #216]	; (b38c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1500>)
    b2b4:	2301      	movs	r3, #1
    b2b6:	210b      	movs	r1, #11
    b2b8:	68e0      	ldr	r0, [r4, #12]
    b2ba:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b2be:	3078      	adds	r0, #120	; 0x78
    b2c0:	f004 fdcf 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b2c4:	bb58      	cbnz	r0, b31e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1492>
    b2c6:	68e0      	ldr	r0, [r4, #12]
    b2c8:	2301      	movs	r3, #1
    b2ca:	2100      	movs	r1, #0
    b2cc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b2d0:	3078      	adds	r0, #120	; 0x78
    b2d2:	f004 fdc6 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b2d6:	2800      	cmp	r0, #0
    b2d8:	bf04      	itt	eq
    b2da:	2001      	moveq	r0, #1
    b2dc:	bd70      	popeq	{r4, r5, r6, pc}
    b2de:	68e0      	ldr	r0, [r4, #12]
    b2e0:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    b2e4:	2824      	cmp	r0, #36	; 0x24
    b2e6:	d01a      	beq.n	b31e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1492>
    b2e8:	6960      	ldr	r0, [r4, #20]
    b2ea:	f005 f8a5 	bl	10438 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    b2ee:	b1c0      	cbz	r0, b322 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1496>
    b2f0:	68e0      	ldr	r0, [r4, #12]
    b2f2:	2500      	movs	r5, #0
    b2f4:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b2f8:	f041 0104 	orr.w	r1, r1, #4
    b2fc:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b300:	6961      	ldr	r1, [r4, #20]
    b302:	794a      	ldrb	r2, [r1, #5]
    b304:	f002 0207 	and.w	r2, r2, #7
    b308:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    b30c:	7909      	ldrb	r1, [r1, #4]
    b30e:	f001 0107 	and.w	r1, r1, #7
    b312:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    b316:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
    b31a:	b133      	cbz	r3, b32a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x149e>
    b31c:	e029      	b.n	b372 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b31e:	2020      	movs	r0, #32
    b320:	bd70      	pop	{r4, r5, r6, pc}
    b322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b326:	f7ff be87 	b.w	b038 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b32a:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
    b32e:	2b01      	cmp	r3, #1
    b330:	d01f      	beq.n	b372 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b332:	f890 6067 	ldrb.w	r6, [r0, #103]	; 0x67
    b336:	f100 0366 	add.w	r3, r0, #102	; 0x66
    b33a:	f04f 0c01 	mov.w	ip, #1
    b33e:	428e      	cmp	r6, r1
    b340:	bf01      	itttt	eq
    b342:	7819      	ldrbeq	r1, [r3, #0]
    b344:	4291      	cmpeq	r1, r2
    b346:	2102      	moveq	r1, #2
    b348:	f880 11be 	strbeq.w	r1, [r0, #446]	; 0x1be
    b34c:	d011      	beq.n	b372 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b34e:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
    b352:	f880 c20c 	strb.w	ip, [r0, #524]	; 0x20c
    b356:	8802      	ldrh	r2, [r0, #0]
    b358:	f8a0 220e 	strh.w	r2, [r0, #526]	; 0x20e
    b35c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    b360:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    b364:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    b368:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    b36c:	7960      	ldrb	r0, [r4, #5]
    b36e:	f7f8 f9fb 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b372:	68e0      	ldr	r0, [r4, #12]
    b374:	2121      	movs	r1, #33	; 0x21
    b376:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b37a:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    b37e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b382:	1c49      	adds	r1, r1, #1
    b384:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b388:	2000      	movs	r0, #0
    b38a:	bd70      	pop	{r4, r5, r6, pc}
    b38c:	20000140 	.word	0x20000140
    b390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b394:	4c82      	ldr	r4, [pc, #520]	; (b5a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1714>)
    b396:	68e0      	ldr	r0, [r4, #12]
    b398:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    b39c:	2920      	cmp	r1, #32
    b39e:	bf0c      	ite	eq
    b3a0:	2501      	moveq	r5, #1
    b3a2:	2500      	movne	r5, #0
    b3a4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b3a8:	2922      	cmp	r1, #34	; 0x22
    b3aa:	bf08      	it	eq
    b3ac:	f100 0685 	addeq.w	r6, r0, #133	; 0x85
    b3b0:	d006      	beq.n	b3c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1534>
    b3b2:	2d00      	cmp	r5, #0
    b3b4:	bf12      	itee	ne
    b3b6:	f100 0684 	addne.w	r6, r0, #132	; 0x84
    b3ba:	2002      	moveq	r0, #2
    b3bc:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3c0:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b3c4:	f041 0104 	orr.w	r1, r1, #4
    b3c8:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b3cc:	6960      	ldr	r0, [r4, #20]
    b3ce:	f7fb f955 	bl	667c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    b3d2:	f04f 0a01 	mov.w	sl, #1
    b3d6:	f04f 0800 	mov.w	r8, #0
    b3da:	2800      	cmp	r0, #0
    b3dc:	d052      	beq.n	b484 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b3de:	6967      	ldr	r7, [r4, #20]
    b3e0:	4638      	mov	r0, r7
    b3e2:	f004 fffc 	bl	103de <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    b3e6:	4681      	mov	r9, r0
    b3e8:	4638      	mov	r0, r7
    b3ea:	f005 f804 	bl	103f6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    b3ee:	4607      	mov	r7, r0
    b3f0:	f004 fdeb 	bl	ffca <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    b3f4:	b1e8      	cbz	r0, b432 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b3f6:	68e2      	ldr	r2, [r4, #12]
    b3f8:	f892 1066 	ldrb.w	r1, [r2, #102]	; 0x66
    b3fc:	4281      	cmp	r1, r0
    b3fe:	d018      	beq.n	b432 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b400:	f892 31be 	ldrb.w	r3, [r2, #446]	; 0x1be
    b404:	2b01      	cmp	r3, #1
    b406:	d028      	beq.n	b45a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15ce>
    b408:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
    b40c:	423b      	tst	r3, r7
    b40e:	d039      	beq.n	b484 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b410:	2d00      	cmp	r5, #0
    b412:	bf04      	itt	eq
    b414:	f892 205f 	ldrbeq.w	r2, [r2, #95]	; 0x5f
    b418:	423a      	tsteq	r2, r7
    b41a:	d10a      	bne.n	b432 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b41c:	b311      	cbz	r1, b464 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15d8>
    b41e:	2904      	cmp	r1, #4
    b420:	bf18      	it	ne
    b422:	2804      	cmpne	r0, #4
    b424:	d023      	beq.n	b46e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15e2>
    b426:	2908      	cmp	r1, #8
    b428:	bf18      	it	ne
    b42a:	2808      	cmpne	r0, #8
    b42c:	d022      	beq.n	b474 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15e8>
    b42e:	4281      	cmp	r1, r0
    b430:	d828      	bhi.n	b484 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b432:	4648      	mov	r0, r9
    b434:	f004 fdc9 	bl	ffca <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    b438:	0001      	movs	r1, r0
    b43a:	d040      	beq.n	b4be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b43c:	68e0      	ldr	r0, [r4, #12]
    b43e:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    b442:	428a      	cmp	r2, r1
    b444:	d03b      	beq.n	b4be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b446:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b44a:	2901      	cmp	r1, #1
    b44c:	d015      	beq.n	b47a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15ee>
    b44e:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    b452:	ea10 0f09 	tst.w	r0, r9
    b456:	d015      	beq.n	b484 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b458:	e031      	b.n	b4be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b45a:	f892 31c0 	ldrb.w	r3, [r2, #448]	; 0x1c0
    b45e:	423b      	tst	r3, r7
    b460:	d1d6      	bne.n	b410 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1584>
    b462:	e00f      	b.n	b484 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b464:	f240 1181 	movw	r1, #385	; 0x181
    b468:	2006      	movs	r0, #6
    b46a:	f7f8 fb89 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b46e:	4281      	cmp	r1, r0
    b470:	d308      	bcc.n	b484 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b472:	e7de      	b.n	b432 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b474:	4281      	cmp	r1, r0
    b476:	d305      	bcc.n	b484 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b478:	e7db      	b.n	b432 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b47a:	f890 01c1 	ldrb.w	r0, [r0, #449]	; 0x1c1
    b47e:	ea10 0f09 	tst.w	r0, r9
    b482:	d11c      	bne.n	b4be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b484:	68e0      	ldr	r0, [r4, #12]
    b486:	2700      	movs	r7, #0
    b488:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b48c:	2901      	cmp	r1, #1
    b48e:	bf0a      	itet	eq
    b490:	201e      	moveq	r0, #30
    b492:	f880 81be 	strbne.w	r8, [r0, #446]	; 0x1be
    b496:	f7ff fc85 	bleq	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b49a:	b38d      	cbz	r5, b500 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1674>
    b49c:	6960      	ldr	r0, [r4, #20]
    b49e:	78c1      	ldrb	r1, [r0, #3]
    b4a0:	68e0      	ldr	r0, [r4, #12]
    b4a2:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    b4a6:	fa0a f101 	lsl.w	r1, sl, r1
    b4aa:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
    b4ae:	d028      	beq.n	b502 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1676>
    b4b0:	210a      	movs	r1, #10
    b4b2:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    b4b6:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
    b4ba:	b338      	cbz	r0, b50c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1680>
    b4bc:	e039      	b.n	b532 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16a6>
    b4be:	466a      	mov	r2, sp
    b4c0:	6961      	ldr	r1, [r4, #20]
    b4c2:	68e0      	ldr	r0, [r4, #12]
    b4c4:	f004 fe64 	bl	10190 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    b4c8:	b3b0      	cbz	r0, b538 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ac>
    b4ca:	6960      	ldr	r0, [r4, #20]
    b4cc:	f004 ff91 	bl	103f2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    b4d0:	68e1      	ldr	r1, [r4, #12]
    b4d2:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    b4d6:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    b4da:	1a80      	subs	r0, r0, r2
    b4dc:	b200      	sxth	r0, r0
    b4de:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    b4e2:	4282      	cmp	r2, r0
    b4e4:	bfa8      	it	ge
    b4e6:	2800      	cmpge	r0, #0
    b4e8:	dd3d      	ble.n	b566 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16da>
    b4ea:	f89d 0000 	ldrb.w	r0, [sp]
    b4ee:	f881 01a6 	strb.w	r0, [r1, #422]	; 0x1a6
    b4f2:	f89d 0001 	ldrb.w	r0, [sp, #1]
    b4f6:	f881 01a7 	strb.w	r0, [r1, #423]	; 0x1a7
    b4fa:	2024      	movs	r0, #36	; 0x24
    b4fc:	7030      	strb	r0, [r6, #0]
    b4fe:	e037      	b.n	b570 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16e4>
    b500:	e009      	b.n	b516 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x168a>
    b502:	f240 31c7 	movw	r1, #967	; 0x3c7
    b506:	2031      	movs	r0, #49	; 0x31
    b508:	f7f8 fb3a 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b50c:	f240 31cf 	movw	r1, #975	; 0x3cf
    b510:	2031      	movs	r0, #49	; 0x31
    b512:	f7f8 fb35 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b516:	f886 8000 	strb.w	r8, [r6]
    b51a:	68e1      	ldr	r1, [r4, #12]
    b51c:	f891 00b4 	ldrb.w	r0, [r1, #180]	; 0xb4
    b520:	1e40      	subs	r0, r0, #1
    b522:	b240      	sxtb	r0, r0
    b524:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    b528:	2800      	cmp	r0, #0
    b52a:	db31      	blt.n	b590 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1704>
    b52c:	f7ff fd84 	bl	b038 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b530:	4607      	mov	r7, r0
    b532:	4638      	mov	r0, r7
    b534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b538:	e7ff      	b.n	b53a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ae>
    b53a:	68e0      	ldr	r0, [r4, #12]
    b53c:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b540:	2901      	cmp	r1, #1
    b542:	bf18      	it	ne
    b544:	f880 81be 	strbne.w	r8, [r0, #446]	; 0x1be
    b548:	d007      	beq.n	b55a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ce>
    b54a:	68e0      	ldr	r0, [r4, #12]
    b54c:	f100 0185 	add.w	r1, r0, #133	; 0x85
    b550:	428e      	cmp	r6, r1
    b552:	bf08      	it	eq
    b554:	f880 8085 	strbeq.w	r8, [r0, #133]	; 0x85
    b558:	e00a      	b.n	b570 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16e4>
    b55a:	2000      	movs	r0, #0
    b55c:	f7ff fc22 	bl	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b560:	f886 8000 	strb.w	r8, [r6]
    b564:	e7f1      	b.n	b54a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16be>
    b566:	2028      	movs	r0, #40	; 0x28
    b568:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    b56c:	f881 a094 	strb.w	sl, [r1, #148]	; 0x94
    b570:	68e0      	ldr	r0, [r4, #12]
    b572:	f100 0185 	add.w	r1, r0, #133	; 0x85
    b576:	428e      	cmp	r6, r1
    b578:	bf18      	it	ne
    b57a:	f880 80b0 	strbne.w	r8, [r0, #176]	; 0xb0
    b57e:	d10c      	bne.n	b59a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x170e>
    b580:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b584:	1e49      	subs	r1, r1, #1
    b586:	b249      	sxtb	r1, r1
    b588:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b58c:	2900      	cmp	r1, #0
    b58e:	da04      	bge.n	b59a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x170e>
    b590:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b594:	2031      	movs	r0, #49	; 0x31
    b596:	f7f8 faf3 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b59a:	2000      	movs	r0, #0
    b59c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5a0:	20000140 	.word	0x20000140
    b5a4:	b510      	push	{r4, lr}
    b5a6:	4c18      	ldr	r4, [pc, #96]	; (b608 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x177c>)
    b5a8:	68e0      	ldr	r0, [r4, #12]
    b5aa:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b5ae:	f041 0104 	orr.w	r1, r1, #4
    b5b2:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b5b6:	6960      	ldr	r0, [r4, #20]
    b5b8:	f004 ff52 	bl	10460 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    b5bc:	2816      	cmp	r0, #22
    b5be:	d10a      	bne.n	b5d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x174a>
    b5c0:	6960      	ldr	r0, [r4, #20]
    b5c2:	f004 ff4f 	bl	10464 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    b5c6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    b5ca:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    b5ce:	2920      	cmp	r1, #32
    b5d0:	d003      	beq.n	b5da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x174e>
    b5d2:	2926      	cmp	r1, #38	; 0x26
    b5d4:	d004      	beq.n	b5e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1754>
    b5d6:	2000      	movs	r0, #0
    b5d8:	bd10      	pop	{r4, pc}
    b5da:	f7ff fbe3 	bl	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b5de:	e00c      	b.n	b5fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x176e>
    b5e0:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    b5e4:	2301      	movs	r3, #1
    b5e6:	210b      	movs	r1, #11
    b5e8:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    b5ec:	f004 fc39 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b5f0:	2800      	cmp	r0, #0
    b5f2:	bf04      	itt	eq
    b5f4:	202a      	moveq	r0, #42	; 0x2a
    b5f6:	f7ff fbd5 	bleq	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b5fa:	2000      	movs	r0, #0
    b5fc:	68e1      	ldr	r1, [r4, #12]
    b5fe:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b602:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b606:	bd10      	pop	{r4, pc}
    b608:	20000140 	.word	0x20000140
    b60c:	b510      	push	{r4, lr}
    b60e:	4c12      	ldr	r4, [pc, #72]	; (b658 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17cc>)
    b610:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    b614:	6960      	ldr	r0, [r4, #20]
    b616:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    b61a:	7900      	ldrb	r0, [r0, #4]
    b61c:	2920      	cmp	r1, #32
    b61e:	d017      	beq.n	b650 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c4>
    b620:	2926      	cmp	r1, #38	; 0x26
    b622:	bf1c      	itt	ne
    b624:	2000      	movne	r0, #0
    b626:	bd10      	popne	{r4, pc}
    b628:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    b62c:	2301      	movs	r3, #1
    b62e:	210b      	movs	r1, #11
    b630:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    b634:	f004 fc15 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b638:	2800      	cmp	r0, #0
    b63a:	bf04      	itt	eq
    b63c:	202a      	moveq	r0, #42	; 0x2a
    b63e:	f7ff fbb1 	bleq	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b642:	2000      	movs	r0, #0
    b644:	68e1      	ldr	r1, [r4, #12]
    b646:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b64a:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b64e:	bd10      	pop	{r4, pc}
    b650:	f7ff fba8 	bl	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b654:	e7f5      	b.n	b642 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17b6>
    b656:	0000      	.short	0x0000
    b658:	20000140 	.word	0x20000140
    b65c:	480d      	ldr	r0, [pc, #52]	; (b694 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1808>)
    b65e:	b510      	push	{r4, lr}
    b660:	68c0      	ldr	r0, [r0, #12]
    b662:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b666:	2917      	cmp	r1, #23
    b668:	bf1c      	itt	ne
    b66a:	2002      	movne	r0, #2
    b66c:	bd10      	popne	{r4, pc}
    b66e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b672:	1e49      	subs	r1, r1, #1
    b674:	b249      	sxtb	r1, r1
    b676:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b67a:	2900      	cmp	r1, #0
    b67c:	da04      	bge.n	b688 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17fc>
    b67e:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b682:	2031      	movs	r0, #49	; 0x31
    b684:	f7f8 fa7c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b688:	211b      	movs	r1, #27
    b68a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b68e:	2000      	movs	r0, #0
    b690:	bd10      	pop	{r4, pc}
    b692:	0000      	.short	0x0000
    b694:	20000140 	.word	0x20000140
    b698:	b510      	push	{r4, lr}
    b69a:	4c0c      	ldr	r4, [pc, #48]	; (b6cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1840>)
    b69c:	2301      	movs	r3, #1
    b69e:	4619      	mov	r1, r3
    b6a0:	68e0      	ldr	r0, [r4, #12]
    b6a2:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    b6a6:	3078      	adds	r0, #120	; 0x78
    b6a8:	f004 fbdb 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b6ac:	2800      	cmp	r0, #0
    b6ae:	bf1c      	itt	ne
    b6b0:	2000      	movne	r0, #0
    b6b2:	bd10      	popne	{r4, pc}
    b6b4:	6960      	ldr	r0, [r4, #20]
    b6b6:	f004 fea0 	bl	103fa <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    b6ba:	68e1      	ldr	r1, [r4, #12]
    b6bc:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    b6c0:	2007      	movs	r0, #7
    b6c2:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    b6c6:	2000      	movs	r0, #0
    b6c8:	bd10      	pop	{r4, pc}
    b6ca:	0000      	.short	0x0000
    b6cc:	20000140 	.word	0x20000140
    b6d0:	b570      	push	{r4, r5, r6, lr}
    b6d2:	4c4c      	ldr	r4, [pc, #304]	; (b804 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1978>)
    b6d4:	2600      	movs	r6, #0
    b6d6:	4621      	mov	r1, r4
    b6d8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    b6dc:	6949      	ldr	r1, [r1, #20]
    b6de:	2001      	movs	r0, #1
    b6e0:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    b6e4:	7909      	ldrb	r1, [r1, #4]
    b6e6:	4635      	mov	r5, r6
    b6e8:	2a0e      	cmp	r2, #14
    b6ea:	bf08      	it	eq
    b6ec:	2912      	cmpeq	r1, #18
    b6ee:	d01d      	beq.n	b72c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18a0>
    b6f0:	2a1c      	cmp	r2, #28
    b6f2:	bf08      	it	eq
    b6f4:	2914      	cmpeq	r1, #20
    b6f6:	d029      	beq.n	b74c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18c0>
    b6f8:	2a04      	cmp	r2, #4
    b6fa:	bf08      	it	eq
    b6fc:	290e      	cmpeq	r1, #14
    b6fe:	d043      	beq.n	b788 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18fc>
    b700:	2a20      	cmp	r2, #32
    b702:	bf08      	it	eq
    b704:	2916      	cmpeq	r1, #22
    b706:	d050      	beq.n	b7aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x191e>
    b708:	2a26      	cmp	r2, #38	; 0x26
    b70a:	bf08      	it	eq
    b70c:	2916      	cmpeq	r1, #22
    b70e:	d04c      	beq.n	b7aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x191e>
    b710:	2917      	cmp	r1, #23
    b712:	bf04      	itt	eq
    b714:	f89c 2085 	ldrbeq.w	r2, [ip, #133]	; 0x85
    b718:	2a22      	cmpeq	r2, #34	; 0x22
    b71a:	d059      	beq.n	b7d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1944>
    b71c:	69a2      	ldr	r2, [r4, #24]
    b71e:	2a00      	cmp	r2, #0
    b720:	d054      	beq.n	b7cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b722:	29ff      	cmp	r1, #255	; 0xff
    b724:	bf08      	it	eq
    b726:	f88c 019e 	strbeq.w	r0, [ip, #414]	; 0x19e
    b72a:	e04f      	b.n	b7cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b72c:	2301      	movs	r3, #1
    b72e:	2109      	movs	r1, #9
    b730:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    b734:	f004 fb95 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b738:	2800      	cmp	r0, #0
    b73a:	d047      	beq.n	b7cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b73c:	68e0      	ldr	r0, [r4, #12]
    b73e:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    b742:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    b746:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    b74a:	e03f      	b.n	b7cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b74c:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    b750:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    b754:	f89c 10be 	ldrb.w	r1, [ip, #190]	; 0xbe
    b758:	f021 0120 	bic.w	r1, r1, #32
    b75c:	f88c 10be 	strb.w	r1, [ip, #190]	; 0xbe
    b760:	f89c 005c 	ldrb.w	r0, [ip, #92]	; 0x5c
    b764:	2801      	cmp	r0, #1
    b766:	bf04      	itt	eq
    b768:	2002      	moveq	r0, #2
    b76a:	f88c 005c 	strbeq.w	r0, [ip, #92]	; 0x5c
    b76e:	d02d      	beq.n	b7cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b770:	f8bc 0000 	ldrh.w	r0, [ip]
    b774:	f50c 72f5 	add.w	r2, ip, #490	; 0x1ea
    b778:	f10c 0128 	add.w	r1, ip, #40	; 0x28
    b77c:	f004 ffed 	bl	1075a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    b780:	7960      	ldrb	r0, [r4, #5]
    b782:	f7f7 fff1 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b786:	e021      	b.n	b7cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b788:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    b78c:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    b790:	f8bc 1000 	ldrh.w	r1, [ip]
    b794:	f8ac 121e 	strh.w	r1, [ip, #542]	; 0x21e
    b798:	211a      	movs	r1, #26
    b79a:	f88c 121c 	strb.w	r1, [ip, #540]	; 0x21c
    b79e:	f88c 021a 	strb.w	r0, [ip, #538]	; 0x21a
    b7a2:	7960      	ldrb	r0, [r4, #5]
    b7a4:	f7f7 ffe0 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b7a8:	e010      	b.n	b7cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b7aa:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    b7ae:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    b7b2:	f89c 0085 	ldrb.w	r0, [ip, #133]	; 0x85
    b7b6:	2821      	cmp	r0, #33	; 0x21
    b7b8:	d008      	beq.n	b7cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b7ba:	f89c 00bf 	ldrb.w	r0, [ip, #191]	; 0xbf
    b7be:	f020 0009 	bic.w	r0, r0, #9
    b7c2:	f88c 00bf 	strb.w	r0, [ip, #191]	; 0xbf
    b7c6:	201a      	movs	r0, #26
    b7c8:	f7ff faec 	bl	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b7cc:	4630      	mov	r0, r6
    b7ce:	bd70      	pop	{r4, r5, r6, pc}
    b7d0:	f88c 5085 	strb.w	r5, [ip, #133]	; 0x85
    b7d4:	f89c 00b4 	ldrb.w	r0, [ip, #180]	; 0xb4
    b7d8:	1e40      	subs	r0, r0, #1
    b7da:	b240      	sxtb	r0, r0
    b7dc:	f88c 00b4 	strb.w	r0, [ip, #180]	; 0xb4
    b7e0:	2800      	cmp	r0, #0
    b7e2:	da04      	bge.n	b7ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1962>
    b7e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b7e8:	2031      	movs	r0, #49	; 0x31
    b7ea:	f7f8 f9c9 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7ee:	f89c 01be 	ldrb.w	r0, [ip, #446]	; 0x1be
    b7f2:	2801      	cmp	r0, #1
    b7f4:	bf04      	itt	eq
    b7f6:	2000      	moveq	r0, #0
    b7f8:	f7ff fad4 	bleq	ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b7fc:	68e0      	ldr	r0, [r4, #12]
    b7fe:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    b802:	e7e3      	b.n	b7cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b804:	20000140 	.word	0x20000140
    b808:	b570      	push	{r4, r5, r6, lr}
    b80a:	4c33      	ldr	r4, [pc, #204]	; (b8d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a4c>)
    b80c:	68e0      	ldr	r0, [r4, #12]
    b80e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b812:	f011 0f02 	tst.w	r1, #2
    b816:	d00a      	beq.n	b82e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19a2>
    b818:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b81c:	2301      	movs	r3, #1
    b81e:	2108      	movs	r1, #8
    b820:	3078      	adds	r0, #120	; 0x78
    b822:	f004 fb1e 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b826:	2800      	cmp	r0, #0
    b828:	bf04      	itt	eq
    b82a:	2001      	moveq	r0, #1
    b82c:	bd70      	popeq	{r4, r5, r6, pc}
    b82e:	68e0      	ldr	r0, [r4, #12]
    b830:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    b834:	f010 0f02 	tst.w	r0, #2
    b838:	d114      	bne.n	b864 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19d8>
    b83a:	6960      	ldr	r0, [r4, #20]
    b83c:	f004 fddf 	bl	103fe <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    b840:	68e1      	ldr	r1, [r4, #12]
    b842:	f881 00b9 	strb.w	r0, [r1, #185]	; 0xb9
    b846:	6960      	ldr	r0, [r4, #20]
    b848:	f8b0 2005 	ldrh.w	r2, [r0, #5]
    b84c:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    b850:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    b854:	f8a1 00bc 	strh.w	r0, [r1, #188]	; 0xbc
    b858:	f891 00b8 	ldrb.w	r0, [r1, #184]	; 0xb8
    b85c:	f040 0002 	orr.w	r0, r0, #2
    b860:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    b864:	68e0      	ldr	r0, [r4, #12]
    b866:	f04f 0500 	mov.w	r5, #0
    b86a:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    b86e:	f011 0f01 	tst.w	r1, #1
    b872:	d114      	bne.n	b89e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a12>
    b874:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b878:	f011 0f02 	tst.w	r1, #2
    b87c:	d004      	beq.n	b888 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19fc>
    b87e:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    b882:	2031      	movs	r0, #49	; 0x31
    b884:	f7f8 f97c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b888:	f041 0102 	orr.w	r1, r1, #2
    b88c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b890:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    b894:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b898:	1c49      	adds	r1, r1, #1
    b89a:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b89e:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    b8a2:	2906      	cmp	r1, #6
    b8a4:	d106      	bne.n	b8b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a28>
    b8a6:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    b8aa:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    b8ae:	7960      	ldrb	r0, [r4, #5]
    b8b0:	f7f7 ff5a 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b8b4:	68e0      	ldr	r0, [r4, #12]
    b8b6:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    b8ba:	b159      	cbz	r1, b8d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a48>
    b8bc:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    b8c0:	7960      	ldrb	r0, [r4, #5]
    b8c2:	f7f7 ff51 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b8c6:	68e0      	ldr	r0, [r4, #12]
    b8c8:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    b8cc:	2900      	cmp	r1, #0
    b8ce:	bf08      	it	eq
    b8d0:	f880 50b0 	strbeq.w	r5, [r0, #176]	; 0xb0
    b8d4:	2000      	movs	r0, #0
    b8d6:	bd70      	pop	{r4, r5, r6, pc}
    b8d8:	20000140 	.word	0x20000140
    b8dc:	4809      	ldr	r0, [pc, #36]	; (b904 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a78>)
    b8de:	b510      	push	{r4, lr}
    b8e0:	68c0      	ldr	r0, [r0, #12]
    b8e2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b8e6:	2914      	cmp	r1, #20
    b8e8:	d004      	beq.n	b8f4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a68>
    b8ea:	f240 6187 	movw	r1, #1671	; 0x687
    b8ee:	2031      	movs	r0, #49	; 0x31
    b8f0:	f7f8 f946 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8f4:	2101      	movs	r1, #1
    b8f6:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    b8fa:	2115      	movs	r1, #21
    b8fc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b900:	bd10      	pop	{r4, pc}
    b902:	0000      	.short	0x0000
    b904:	20000140 	.word	0x20000140
    b908:	480f      	ldr	r0, [pc, #60]	; (b948 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1abc>)
    b90a:	b510      	push	{r4, lr}
    b90c:	68c0      	ldr	r0, [r0, #12]
    b90e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b912:	f011 0f01 	tst.w	r1, #1
    b916:	d011      	beq.n	b93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ab0>
    b918:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    b91c:	1e52      	subs	r2, r2, #1
    b91e:	b252      	sxtb	r2, r2
    b920:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    b924:	2a00      	cmp	r2, #0
    b926:	bfa2      	ittt	ge
    b928:	f021 0101 	bicge.w	r1, r1, #1
    b92c:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    b930:	bd10      	popge	{r4, pc}
    b932:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b936:	2031      	movs	r0, #49	; 0x31
    b938:	f7f8 f922 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b93c:	f44f 61ce 	mov.w	r1, #1648	; 0x670
    b940:	2031      	movs	r0, #49	; 0x31
    b942:	f7f8 f91d 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b946:	0000      	.short	0x0000
    b948:	20000140 	.word	0x20000140
    b94c:	b510      	push	{r4, lr}
    b94e:	4c0a      	ldr	r4, [pc, #40]	; (b978 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aec>)
    b950:	2301      	movs	r3, #1
    b952:	2100      	movs	r1, #0
    b954:	68e0      	ldr	r0, [r4, #12]
    b956:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b95a:	3078      	adds	r0, #120	; 0x78
    b95c:	f004 fa81 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b960:	b120      	cbz	r0, b96c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ae0>
    b962:	68e1      	ldr	r1, [r4, #12]
    b964:	201c      	movs	r0, #28
    b966:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b96a:	bd10      	pop	{r4, pc}
    b96c:	f240 61f5 	movw	r1, #1781	; 0x6f5
    b970:	2031      	movs	r0, #49	; 0x31
    b972:	f7f8 f905 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b976:	0000      	.short	0x0000
    b978:	20000140 	.word	0x20000140
    b97c:	480f      	ldr	r0, [pc, #60]	; (b9bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b30>)
    b97e:	b510      	push	{r4, lr}
    b980:	68c0      	ldr	r0, [r0, #12]
    b982:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b986:	f001 0230 	and.w	r2, r1, #48	; 0x30
    b98a:	2a10      	cmp	r2, #16
    b98c:	d004      	beq.n	b998 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0c>
    b98e:	f240 61fc 	movw	r1, #1788	; 0x6fc
    b992:	2031      	movs	r0, #49	; 0x31
    b994:	f7f8 f8f4 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b998:	f021 0110 	bic.w	r1, r1, #16
    b99c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b9a0:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b9a4:	1e49      	subs	r1, r1, #1
    b9a6:	b249      	sxtb	r1, r1
    b9a8:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b9ac:	2900      	cmp	r1, #0
    b9ae:	bfa8      	it	ge
    b9b0:	bd10      	popge	{r4, pc}
    b9b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b9b6:	2031      	movs	r0, #49	; 0x31
    b9b8:	f7f8 f8e2 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9bc:	20000140 	.word	0x20000140
    b9c0:	b510      	push	{r4, lr}
    b9c2:	4c0a      	ldr	r4, [pc, #40]	; (b9ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b60>)
    b9c4:	2301      	movs	r3, #1
    b9c6:	2100      	movs	r1, #0
    b9c8:	68e0      	ldr	r0, [r4, #12]
    b9ca:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b9ce:	3078      	adds	r0, #120	; 0x78
    b9d0:	f004 fa47 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b9d4:	b120      	cbz	r0, b9e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b54>
    b9d6:	68e1      	ldr	r1, [r4, #12]
    b9d8:	200e      	movs	r0, #14
    b9da:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b9de:	bd10      	pop	{r4, pc}
    b9e0:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    b9e4:	2031      	movs	r0, #49	; 0x31
    b9e6:	f7f8 f8cb 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9ea:	0000      	.short	0x0000
    b9ec:	20000140 	.word	0x20000140
    b9f0:	480b      	ldr	r0, [pc, #44]	; (ba20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b94>)
    b9f2:	68c0      	ldr	r0, [r0, #12]
    b9f4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b9f8:	f021 0104 	bic.w	r1, r1, #4
    b9fc:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ba00:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    ba04:	1e49      	subs	r1, r1, #1
    ba06:	b249      	sxtb	r1, r1
    ba08:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    ba0c:	2900      	cmp	r1, #0
    ba0e:	bfa8      	it	ge
    ba10:	4770      	bxge	lr
    ba12:	b510      	push	{r4, lr}
    ba14:	f44f 71c8 	mov.w	r1, #400	; 0x190
    ba18:	2031      	movs	r0, #49	; 0x31
    ba1a:	f7f8 f8b1 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba1e:	0000      	.short	0x0000
    ba20:	20000140 	.word	0x20000140
    ba24:	4809      	ldr	r0, [pc, #36]	; (ba4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bc0>)
    ba26:	b510      	push	{r4, lr}
    ba28:	68c0      	ldr	r0, [r0, #12]
    ba2a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ba2e:	2910      	cmp	r1, #16
    ba30:	d004      	beq.n	ba3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bb0>
    ba32:	f240 617f 	movw	r1, #1663	; 0x67f
    ba36:	2031      	movs	r0, #49	; 0x31
    ba38:	f7f8 f8a2 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba3c:	2101      	movs	r1, #1
    ba3e:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    ba42:	2111      	movs	r1, #17
    ba44:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ba48:	bd10      	pop	{r4, pc}
    ba4a:	0000      	.short	0x0000
    ba4c:	20000140 	.word	0x20000140
    ba50:	b510      	push	{r4, lr}
    ba52:	4c0a      	ldr	r4, [pc, #40]	; (ba7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bf0>)
    ba54:	2301      	movs	r3, #1
    ba56:	2100      	movs	r1, #0
    ba58:	68e0      	ldr	r0, [r4, #12]
    ba5a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    ba5e:	3078      	adds	r0, #120	; 0x78
    ba60:	f004 f9ff 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ba64:	b120      	cbz	r0, ba70 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1be4>
    ba66:	68e1      	ldr	r1, [r4, #12]
    ba68:	201f      	movs	r0, #31
    ba6a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    ba6e:	bd10      	pop	{r4, pc}
    ba70:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    ba74:	2031      	movs	r0, #49	; 0x31
    ba76:	f7f8 f883 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba7a:	0000      	.short	0x0000
    ba7c:	20000140 	.word	0x20000140
    ba80:	4808      	ldr	r0, [pc, #32]	; (baa4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c18>)
    ba82:	b510      	push	{r4, lr}
    ba84:	68c0      	ldr	r0, [r0, #12]
    ba86:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ba8a:	2921      	cmp	r1, #33	; 0x21
    ba8c:	bf11      	iteee	ne
    ba8e:	2900      	cmpne	r1, #0
    ba90:	2122      	moveq	r1, #34	; 0x22
    ba92:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    ba96:	bd10      	popeq	{r4, pc}
    ba98:	f240 710f 	movw	r1, #1807	; 0x70f
    ba9c:	f04f 0031 	mov.w	r0, #49	; 0x31
    baa0:	f7f8 f86e 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    baa4:	20000140 	.word	0x20000140
    baa8:	4807      	ldr	r0, [pc, #28]	; (bac8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c3c>)
    baaa:	b510      	push	{r4, lr}
    baac:	68c0      	ldr	r0, [r0, #12]
    baae:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bab2:	2915      	cmp	r1, #21
    bab4:	bf02      	ittt	eq
    bab6:	2119      	moveq	r1, #25
    bab8:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    babc:	bd10      	popeq	{r4, pc}
    babe:	f240 6194 	movw	r1, #1684	; 0x694
    bac2:	2031      	movs	r0, #49	; 0x31
    bac4:	f7f8 f85c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bac8:	20000140 	.word	0x20000140
    bacc:	4807      	ldr	r0, [pc, #28]	; (baec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c60>)
    bace:	b510      	push	{r4, lr}
    bad0:	68c0      	ldr	r0, [r0, #12]
    bad2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bad6:	2915      	cmp	r1, #21
    bad8:	bf02      	ittt	eq
    bada:	2117      	moveq	r1, #23
    badc:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bae0:	bd10      	popeq	{r4, pc}
    bae2:	f240 618e 	movw	r1, #1678	; 0x68e
    bae6:	2031      	movs	r0, #49	; 0x31
    bae8:	f7f8 f84a 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    baec:	20000140 	.word	0x20000140
    baf0:	b570      	push	{r4, r5, r6, lr}
    baf2:	4d1c      	ldr	r5, [pc, #112]	; (bb64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cd8>)
    baf4:	68e8      	ldr	r0, [r5, #12]
    baf6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bafa:	291b      	cmp	r1, #27
    bafc:	d004      	beq.n	bb08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c7c>
    bafe:	f240 61ae 	movw	r1, #1710	; 0x6ae
    bb02:	2031      	movs	r0, #49	; 0x31
    bb04:	f7f8 f83c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb08:	2400      	movs	r4, #0
    bb0a:	f880 40b5 	strb.w	r4, [r0, #181]	; 0xb5
    bb0e:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    bb12:	b121      	cbz	r1, bb1e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c92>
    bb14:	f240 61b2 	movw	r1, #1714	; 0x6b2
    bb18:	2031      	movs	r0, #49	; 0x31
    bb1a:	f7f8 f831 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb1e:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    bb22:	b141      	cbz	r1, bb36 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1caa>
    bb24:	f880 40b6 	strb.w	r4, [r0, #182]	; 0xb6
    bb28:	8801      	ldrh	r1, [r0, #0]
    bb2a:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    bb2e:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    bb32:	210e      	movs	r1, #14
    bb34:	e008      	b.n	bb48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    bb36:	8801      	ldrh	r1, [r0, #0]
    bb38:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    bb3c:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    bb40:	2101      	movs	r1, #1
    bb42:	f880 11da 	strb.w	r1, [r0, #474]	; 0x1da
    bb46:	210d      	movs	r1, #13
    bb48:	f880 11d4 	strb.w	r1, [r0, #468]	; 0x1d4
    bb4c:	8800      	ldrh	r0, [r0, #0]
    bb4e:	f7f8 fbcf 	bl	42f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    bb52:	f003 feeb 	bl	f92c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    bb56:	7968      	ldrb	r0, [r5, #5]
    bb58:	f7f7 fe06 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bb5c:	68e8      	ldr	r0, [r5, #12]
    bb5e:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    bb62:	bd70      	pop	{r4, r5, r6, pc}
    bb64:	20000140 	.word	0x20000140
    bb68:	b510      	push	{r4, lr}
    bb6a:	4c08      	ldr	r4, [pc, #32]	; (bb8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d00>)
    bb6c:	2301      	movs	r3, #1
    bb6e:	4619      	mov	r1, r3
    bb70:	68e0      	ldr	r0, [r4, #12]
    bb72:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    bb76:	3078      	adds	r0, #120	; 0x78
    bb78:	f004 f973 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bb7c:	2800      	cmp	r0, #0
    bb7e:	bf18      	it	ne
    bb80:	bd10      	popne	{r4, pc}
    bb82:	2008      	movs	r0, #8
    bb84:	68e1      	ldr	r1, [r4, #12]
    bb86:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    bb8a:	bd10      	pop	{r4, pc}
    bb8c:	20000140 	.word	0x20000140
    bb90:	481b      	ldr	r0, [pc, #108]	; (bc00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d74>)
    bb92:	b510      	push	{r4, lr}
    bb94:	6901      	ldr	r1, [r0, #16]
    bb96:	68c0      	ldr	r0, [r0, #12]
    bb98:	2200      	movs	r2, #0
    bb9a:	7909      	ldrb	r1, [r1, #4]
    bb9c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    bba0:	2b0a      	cmp	r3, #10
    bba2:	bf01      	itttt	eq
    bba4:	f890 30f2 	ldrbeq.w	r3, [r0, #242]	; 0xf2
    bba8:	428b      	cmpeq	r3, r1
    bbaa:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    bbae:	f880 20b0 	strbeq.w	r2, [r0, #176]	; 0xb0
    bbb2:	bf08      	it	eq
    bbb4:	bd10      	popeq	{r4, pc}
    bbb6:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    bbba:	f013 0f08 	tst.w	r3, #8
    bbbe:	d012      	beq.n	bbe6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d5a>
    bbc0:	f023 0108 	bic.w	r1, r3, #8
    bbc4:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    bbc8:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    bbcc:	f1a1 0101 	sub.w	r1, r1, #1
    bbd0:	b249      	sxtb	r1, r1
    bbd2:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bbd6:	2900      	cmp	r1, #0
    bbd8:	bfa8      	it	ge
    bbda:	bd10      	popge	{r4, pc}
    bbdc:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bbe0:	2031      	movs	r0, #49	; 0x31
    bbe2:	f7f7 ffcd 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbe6:	29ff      	cmp	r1, #255	; 0xff
    bbe8:	d004      	beq.n	bbf4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d68>
    bbea:	f240 616a 	movw	r1, #1642	; 0x66a
    bbee:	2031      	movs	r0, #49	; 0x31
    bbf0:	f7f7 ffc6 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbf4:	2127      	movs	r1, #39	; 0x27
    bbf6:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    bbfa:	f880 219c 	strb.w	r2, [r0, #412]	; 0x19c
    bbfe:	bd10      	pop	{r4, pc}
    bc00:	20000140 	.word	0x20000140
    bc04:	b510      	push	{r4, lr}
    bc06:	4c1b      	ldr	r4, [pc, #108]	; (bc74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1de8>)
    bc08:	68e0      	ldr	r0, [r4, #12]
    bc0a:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    bc0e:	f011 0f02 	tst.w	r1, #2
    bc12:	d01d      	beq.n	bc50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dc4>
    bc14:	2100      	movs	r1, #0
    bc16:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    bc1a:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    bc1e:	68e0      	ldr	r0, [r4, #12]
    bc20:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bc24:	f011 0f02 	tst.w	r1, #2
    bc28:	bf08      	it	eq
    bc2a:	bd10      	popeq	{r4, pc}
    bc2c:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    bc30:	1e52      	subs	r2, r2, #1
    bc32:	b252      	sxtb	r2, r2
    bc34:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    bc38:	2a00      	cmp	r2, #0
    bc3a:	bfa2      	ittt	ge
    bc3c:	f021 0102 	bicge.w	r1, r1, #2
    bc40:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    bc44:	bd10      	popge	{r4, pc}
    bc46:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bc4a:	2031      	movs	r0, #49	; 0x31
    bc4c:	f7f7 ff98 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc50:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bc54:	2301      	movs	r3, #1
    bc56:	2100      	movs	r1, #0
    bc58:	3078      	adds	r0, #120	; 0x78
    bc5a:	f004 f902 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bc5e:	b120      	cbz	r0, bc6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dde>
    bc60:	68e1      	ldr	r1, [r4, #12]
    bc62:	2006      	movs	r0, #6
    bc64:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bc68:	e7d9      	b.n	bc1e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d92>
    bc6a:	f240 61d4 	movw	r1, #1748	; 0x6d4
    bc6e:	2031      	movs	r0, #49	; 0x31
    bc70:	f7f7 ff86 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc74:	20000140 	.word	0x20000140

0000bc78 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    bc78:	4804      	ldr	r0, [pc, #16]	; (bc8c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x14>)
    bc7a:	6840      	ldr	r0, [r0, #4]
    bc7c:	7801      	ldrb	r1, [r0, #0]
    bc7e:	2900      	cmp	r1, #0
    bc80:	bf14      	ite	ne
    bc82:	8880      	ldrhne	r0, [r0, #4]
    bc84:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    bc88:	4770      	bx	lr
    bc8a:	0000      	.short	0x0000
    bc8c:	20000228 	.word	0x20000228

0000bc90 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>:
    bc90:	4902      	ldr	r1, [pc, #8]	; (bc9c <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY+0xc>)
    bc92:	6849      	ldr	r1, [r1, #4]
    bc94:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    bc98:	4770      	bx	lr
    bc9a:	0000      	.short	0x0000
    bc9c:	20000228 	.word	0x20000228

0000bca0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    bca0:	4802      	ldr	r0, [pc, #8]	; (bcac <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    bca2:	6840      	ldr	r0, [r0, #4]
    bca4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    bca8:	4770      	bx	lr
    bcaa:	0000      	.short	0x0000
    bcac:	20000228 	.word	0x20000228

0000bcb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    bcb0:	480c      	ldr	r0, [pc, #48]	; (bce4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    bcb2:	6841      	ldr	r1, [r0, #4]
    bcb4:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    bcb8:	2803      	cmp	r0, #3
    bcba:	d004      	beq.n	bcc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    bcbc:	2801      	cmp	r0, #1
    bcbe:	bf18      	it	ne
    bcc0:	2802      	cmpne	r0, #2
    bcc2:	d007      	beq.n	bcd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    bcc4:	e004      	b.n	bcd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    bcc6:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    bcca:	2801      	cmp	r0, #1
    bccc:	bf08      	it	eq
    bcce:	4770      	bxeq	lr
    bcd0:	2000      	movs	r0, #0
    bcd2:	4770      	bx	lr
    bcd4:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    bcd8:	2801      	cmp	r0, #1
    bcda:	bf14      	ite	ne
    bcdc:	2803      	cmpne	r0, #3
    bcde:	2001      	moveq	r0, #1
    bce0:	d1f6      	bne.n	bcd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    bce2:	4770      	bx	lr
    bce4:	20000228 	.word	0x20000228

0000bce8 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>:
    bce8:	4806      	ldr	r0, [pc, #24]	; (bd04 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA+0x1c>)
    bcea:	7800      	ldrb	r0, [r0, #0]
    bcec:	2800      	cmp	r0, #0
    bcee:	bf1c      	itt	ne
    bcf0:	2000      	movne	r0, #0
    bcf2:	4770      	bxne	lr
    bcf4:	b510      	push	{r4, lr}
    bcf6:	2000      	movs	r0, #0
    bcf8:	f003 ff4a 	bl	fb90 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    bcfc:	f080 0001 	eor.w	r0, r0, #1
    bd00:	bd10      	pop	{r4, pc}
    bd02:	0000      	.short	0x0000
    bd04:	200014fc 	.word	0x200014fc

0000bd08 <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA>:
    bd08:	4901      	ldr	r1, [pc, #4]	; (bd10 <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA+0x8>)
    bd0a:	6048      	str	r0, [r1, #4]
    bd0c:	4770      	bx	lr
    bd0e:	0000      	.short	0x0000
    bd10:	200014e0 	.word	0x200014e0

0000bd14 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    bd14:	4901      	ldr	r1, [pc, #4]	; (bd1c <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    bd16:	7048      	strb	r0, [r1, #1]
    bd18:	4770      	bx	lr
    bd1a:	0000      	.short	0x0000
    bd1c:	200014e0 	.word	0x200014e0

0000bd20 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    bd20:	4905      	ldr	r1, [pc, #20]	; (bd38 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x18>)
    bd22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bd26:	fbb1 f1f2 	udiv	r1, r1, r2
    bd2a:	b510      	push	{r4, lr}
    bd2c:	f201 11df 	addw	r1, r1, #479	; 0x1df
    bd30:	f004 fe40 	bl	109b4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    bd34:	b280      	uxth	r0, r0
    bd36:	bd10      	pop	{r4, pc}
    bd38:	00012105 	.word	0x00012105

0000bd3c <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    bd3c:	4801      	ldr	r0, [pc, #4]	; (bd44 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    bd3e:	7800      	ldrb	r0, [r0, #0]
    bd40:	4770      	bx	lr
    bd42:	0000      	.short	0x0000
    bd44:	200014fc 	.word	0x200014fc

0000bd48 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>:
    bd48:	4a01      	ldr	r2, [pc, #4]	; (bd50 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ+0x8>)
    bd4a:	e9c2 0105 	strd	r0, r1, [r2, #20]
    bd4e:	4770      	bx	lr
    bd50:	20000238 	.word	0x20000238

0000bd54 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    bd54:	4806      	ldr	r0, [pc, #24]	; (bd70 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    bd56:	4905      	ldr	r1, [pc, #20]	; (bd6c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    bd58:	6501      	str	r1, [r0, #80]	; 0x50
    bd5a:	4906      	ldr	r1, [pc, #24]	; (bd74 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    bd5c:	6541      	str	r1, [r0, #84]	; 0x54
    bd5e:	4807      	ldr	r0, [pc, #28]	; (bd7c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    bd60:	4905      	ldr	r1, [pc, #20]	; (bd78 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    bd62:	6501      	str	r1, [r0, #80]	; 0x50
    bd64:	4906      	ldr	r1, [pc, #24]	; (bd80 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    bd66:	6541      	str	r1, [r0, #84]	; 0x54
    bd68:	4770      	bx	lr
    bd6a:	0000      	.short	0x0000
    bd6c:	0000be89 	.word	0x0000be89
    bd70:	20000254 	.word	0x20000254
    bd74:	0000bf49 	.word	0x0000bf49
    bd78:	0000c18d 	.word	0x0000c18d
    bd7c:	200002b8 	.word	0x200002b8
    bd80:	0000c1bd 	.word	0x0000c1bd

0000bd84 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    bd84:	4806      	ldr	r0, [pc, #24]	; (bda0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    bd86:	4905      	ldr	r1, [pc, #20]	; (bd9c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    bd88:	6581      	str	r1, [r0, #88]	; 0x58
    bd8a:	4906      	ldr	r1, [pc, #24]	; (bda4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    bd8c:	65c1      	str	r1, [r0, #92]	; 0x5c
    bd8e:	4807      	ldr	r0, [pc, #28]	; (bdac <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    bd90:	4905      	ldr	r1, [pc, #20]	; (bda8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    bd92:	6581      	str	r1, [r0, #88]	; 0x58
    bd94:	4906      	ldr	r1, [pc, #24]	; (bdb0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    bd96:	6601      	str	r1, [r0, #96]	; 0x60
    bd98:	4770      	bx	lr
    bd9a:	0000      	.short	0x0000
    bd9c:	0000bfd9 	.word	0x0000bfd9
    bda0:	20000254 	.word	0x20000254
    bda4:	0000c0ed 	.word	0x0000c0ed
    bda8:	0000c1ed 	.word	0x0000c1ed
    bdac:	200002b8 	.word	0x200002b8
    bdb0:	0000c21d 	.word	0x0000c21d
    bdb4:	4a15      	ldr	r2, [pc, #84]	; (be0c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x88>)
    bdb6:	b510      	push	{r4, lr}
    bdb8:	6891      	ldr	r1, [r2, #8]
    bdba:	880b      	ldrh	r3, [r1, #0]
    bdbc:	f8a1 3178 	strh.w	r3, [r1, #376]	; 0x178
    bdc0:	f881 0176 	strb.w	r0, [r1, #374]	; 0x176
    bdc4:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    bdc8:	2801      	cmp	r0, #1
    bdca:	bf18      	it	ne
    bdcc:	2802      	cmpne	r0, #2
    bdce:	d005      	beq.n	bddc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x58>
    bdd0:	f240 218f 	movw	r1, #655	; 0x28f
    bdd4:	f04f 0006 	mov.w	r0, #6
    bdd8:	f7f7 fed2 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bddc:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    bde0:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    bde4:	2801      	cmp	r0, #1
    bde6:	bf18      	it	ne
    bde8:	2802      	cmpne	r0, #2
    bdea:	d1f1      	bne.n	bdd0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4c>
    bdec:	f881 017b 	strb.w	r0, [r1, #379]	; 0x17b
    bdf0:	f04f 0001 	mov.w	r0, #1
    bdf4:	f881 0174 	strb.w	r0, [r1, #372]	; 0x174
    bdf8:	f04f 0000 	mov.w	r0, #0
    bdfc:	f881 0142 	strb.w	r0, [r1, #322]	; 0x142
    be00:	78d0      	ldrb	r0, [r2, #3]
    be02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    be06:	f7f7 bcaf 	b.w	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    be0a:	0000      	.short	0x0000
    be0c:	20000238 	.word	0x20000238
    be10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be14:	4c1b      	ldr	r4, [pc, #108]	; (be84 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x100>)
    be16:	2600      	movs	r6, #0
    be18:	2703      	movs	r7, #3
    be1a:	f8d4 c008 	ldr.w	ip, [r4, #8]
    be1e:	2501      	movs	r5, #1
    be20:	b1a0      	cbz	r0, be4c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xc8>
    be22:	6920      	ldr	r0, [r4, #16]
    be24:	78c0      	ldrb	r0, [r0, #3]
    be26:	f88c 00f2 	strb.w	r0, [ip, #242]	; 0xf2
    be2a:	fa05 f000 	lsl.w	r0, r5, r0
    be2e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    be32:	d006      	beq.n	be42 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xbe>
    be34:	f88c 7084 	strb.w	r7, [ip, #132]	; 0x84
    be38:	f8ac 60ac 	strh.w	r6, [ip, #172]	; 0xac
    be3c:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    be40:	e01c      	b.n	be7c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xf8>
    be42:	f240 5159 	movw	r1, #1369	; 0x559
    be46:	2036      	movs	r0, #54	; 0x36
    be48:	f7f7 fe9a 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be4c:	2300      	movs	r3, #0
    be4e:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    be52:	4619      	mov	r1, r3
    be54:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    be58:	f004 f803 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    be5c:	2800      	cmp	r0, #0
    be5e:	bf04      	itt	eq
    be60:	2001      	moveq	r0, #1
    be62:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    be66:	6920      	ldr	r0, [r4, #16]
    be68:	78c1      	ldrb	r1, [r0, #3]
    be6a:	68a0      	ldr	r0, [r4, #8]
    be6c:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    be70:	f880 7085 	strb.w	r7, [r0, #133]	; 0x85
    be74:	f8a0 60b2 	strh.w	r6, [r0, #178]	; 0xb2
    be78:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    be7c:	2000      	movs	r0, #0
    be7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be82:	0000      	.short	0x0000
    be84:	20000238 	.word	0x20000238
    be88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be8a:	4c2e      	ldr	r4, [pc, #184]	; (bf44 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c0>)
    be8c:	2300      	movs	r3, #0
    be8e:	4619      	mov	r1, r3
    be90:	68a0      	ldr	r0, [r4, #8]
    be92:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    be96:	3078      	adds	r0, #120	; 0x78
    be98:	f003 ffe3 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    be9c:	2800      	cmp	r0, #0
    be9e:	bf04      	itt	eq
    bea0:	2001      	moveq	r0, #1
    bea2:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    bea4:	6920      	ldr	r0, [r4, #16]
    bea6:	f004 faac 	bl	10402 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    beaa:	2800      	cmp	r0, #0
    beac:	d02f      	beq.n	bf0e <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18a>
    beae:	6920      	ldr	r0, [r4, #16]
    beb0:	f004 fa99 	bl	103e6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    beb4:	4605      	mov	r5, r0
    beb6:	6920      	ldr	r0, [r4, #16]
    beb8:	f004 fa99 	bl	103ee <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    bebc:	4606      	mov	r6, r0
    bebe:	6920      	ldr	r0, [r4, #16]
    bec0:	f004 fa8f 	bl	103e2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    bec4:	4607      	mov	r7, r0
    bec6:	6920      	ldr	r0, [r4, #16]
    bec8:	f004 fa8f 	bl	103ea <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    becc:	4601      	mov	r1, r0
    bece:	9500      	str	r5, [sp, #0]
    bed0:	68a0      	ldr	r0, [r4, #8]
    bed2:	4633      	mov	r3, r6
    bed4:	463a      	mov	r2, r7
    bed6:	3028      	adds	r0, #40	; 0x28
    bed8:	f004 fd77 	bl	109ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    bedc:	68a1      	ldr	r1, [r4, #8]
    bede:	2501      	movs	r5, #1
    bee0:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    bee4:	281c      	cmp	r0, #28
    bee6:	bf16      	itet	ne
    bee8:	f891 005c 	ldrbne.w	r0, [r1, #92]	; 0x5c
    beec:	f881 505c 	strbeq.w	r5, [r1, #92]	; 0x5c
    bef0:	2801      	cmpne	r0, #1
    bef2:	d007      	beq.n	bf04 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x180>
    bef4:	f891 0139 	ldrb.w	r0, [r1, #313]	; 0x139
    bef8:	2800      	cmp	r0, #0
    befa:	bf04      	itt	eq
    befc:	f891 0138 	ldrbeq.w	r0, [r1, #312]	; 0x138
    bf00:	2800      	cmpeq	r0, #0
    bf02:	d00a      	beq.n	bf1a <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x196>
    bf04:	f04f 001e 	mov.w	r0, #30
    bf08:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    bf0c:	e011      	b.n	bf32 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1ae>
    bf0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bf12:	f04f 0000 	mov.w	r0, #0
    bf16:	f7ff bf7b 	b.w	be10 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    bf1a:	201d      	movs	r0, #29
    bf1c:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    bf20:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    bf24:	f831 0b28 	ldrh.w	r0, [r1], #40
    bf28:	f004 fd57 	bl	109da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    bf2c:	78e0      	ldrb	r0, [r4, #3]
    bf2e:	f7f7 fc1b 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bf32:	68a0      	ldr	r0, [r4, #8]
    bf34:	2100      	movs	r1, #0
    bf36:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    bf3a:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    bf3e:	4608      	mov	r0, r1
    bf40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf42:	0000      	.short	0x0000
    bf44:	20000238 	.word	0x20000238
    bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf4a:	4c22      	ldr	r4, [pc, #136]	; (bfd4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x250>)
    bf4c:	2300      	movs	r3, #0
    bf4e:	210a      	movs	r1, #10
    bf50:	68a0      	ldr	r0, [r4, #8]
    bf52:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bf56:	3078      	adds	r0, #120	; 0x78
    bf58:	f003 ff83 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bf5c:	2800      	cmp	r0, #0
    bf5e:	bf04      	itt	eq
    bf60:	2001      	moveq	r0, #1
    bf62:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    bf64:	6920      	ldr	r0, [r4, #16]
    bf66:	f004 fa4c 	bl	10402 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    bf6a:	b1c8      	cbz	r0, bfa0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x21c>
    bf6c:	6920      	ldr	r0, [r4, #16]
    bf6e:	f004 fa3a 	bl	103e6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    bf72:	4605      	mov	r5, r0
    bf74:	6920      	ldr	r0, [r4, #16]
    bf76:	f004 fa3a 	bl	103ee <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    bf7a:	4606      	mov	r6, r0
    bf7c:	6920      	ldr	r0, [r4, #16]
    bf7e:	f004 fa30 	bl	103e2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    bf82:	4607      	mov	r7, r0
    bf84:	6920      	ldr	r0, [r4, #16]
    bf86:	f004 fa30 	bl	103ea <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    bf8a:	4601      	mov	r1, r0
    bf8c:	9500      	str	r5, [sp, #0]
    bf8e:	68a0      	ldr	r0, [r4, #8]
    bf90:	4633      	mov	r3, r6
    bf92:	463a      	mov	r2, r7
    bf94:	3028      	adds	r0, #40	; 0x28
    bf96:	f004 fd18 	bl	109ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    bf9a:	68a0      	ldr	r0, [r4, #8]
    bf9c:	f004 fc5a 	bl	10854 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    bfa0:	68a1      	ldr	r1, [r4, #8]
    bfa2:	2000      	movs	r0, #0
    bfa4:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    bfa8:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bfac:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    bfb0:	2801      	cmp	r0, #1
    bfb2:	bf04      	itt	eq
    bfb4:	2002      	moveq	r0, #2
    bfb6:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    bfba:	d008      	beq.n	bfce <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24a>
    bfbc:	8808      	ldrh	r0, [r1, #0]
    bfbe:	f501 72aa 	add.w	r2, r1, #340	; 0x154
    bfc2:	3128      	adds	r1, #40	; 0x28
    bfc4:	f004 fbc9 	bl	1075a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    bfc8:	78e0      	ldrb	r0, [r4, #3]
    bfca:	f7f7 fbcd 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bfce:	2000      	movs	r0, #0
    bfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfd2:	0000      	.short	0x0000
    bfd4:	20000238 	.word	0x20000238
    bfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfda:	4c43      	ldr	r4, [pc, #268]	; (c0e8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x364>)
    bfdc:	2500      	movs	r5, #0
    bfde:	b087      	sub	sp, #28
    bfe0:	68a0      	ldr	r0, [r4, #8]
    bfe2:	462b      	mov	r3, r5
    bfe4:	4629      	mov	r1, r5
    bfe6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    bfea:	3078      	adds	r0, #120	; 0x78
    bfec:	f003 ff39 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bff0:	2800      	cmp	r0, #0
    bff2:	bf02      	ittt	eq
    bff4:	2001      	moveq	r0, #1
    bff6:	b007      	addeq	sp, #28
    bff8:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    bffa:	68a0      	ldr	r0, [r4, #8]
    bffc:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c000:	2823      	cmp	r0, #35	; 0x23
    c002:	bf11      	iteee	ne
    c004:	2824      	cmpne	r0, #36	; 0x24
    c006:	2020      	moveq	r0, #32
    c008:	b007      	addeq	sp, #28
    c00a:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    c00c:	4668      	mov	r0, sp
    c00e:	f7f8 fc8d 	bl	492c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    c012:	2800      	cmp	r0, #0
    c014:	bf08      	it	eq
    c016:	2100      	moveq	r1, #0
    c018:	d004      	beq.n	c024 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2a0>
    c01a:	9800      	ldr	r0, [sp, #0]
    c01c:	a901      	add	r1, sp, #4
    c01e:	78c0      	ldrb	r0, [r0, #3]
    c020:	f88d 0004 	strb.w	r0, [sp, #4]
    c024:	68a0      	ldr	r0, [r4, #8]
    c026:	ab04      	add	r3, sp, #16
    c028:	2216      	movs	r2, #22
    c02a:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c02e:	f003 ffee 	bl	1000e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    c032:	2700      	movs	r7, #0
    c034:	2601      	movs	r6, #1
    c036:	b188      	cbz	r0, c05c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2d8>
    c038:	68a0      	ldr	r0, [r4, #8]
    c03a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    c03e:	2116      	movs	r1, #22
    c040:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    c044:	f880 1121 	strb.w	r1, [r0, #289]	; 0x121
    c048:	2119      	movs	r1, #25
    c04a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c04e:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    c052:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    c056:	b007      	add	sp, #28
    c058:	2000      	movs	r0, #0
    c05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c05c:	6920      	ldr	r0, [r4, #16]
    c05e:	f004 f9eb 	bl	10438 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    c062:	b178      	cbz	r0, c084 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x300>
    c064:	6922      	ldr	r2, [r4, #16]
    c066:	68a1      	ldr	r1, [r4, #8]
    c068:	7910      	ldrb	r0, [r2, #4]
    c06a:	f000 0007 	and.w	r0, r0, #7
    c06e:	f881 005e 	strb.w	r0, [r1, #94]	; 0x5e
    c072:	7952      	ldrb	r2, [r2, #5]
    c074:	f002 0307 	and.w	r3, r2, #7
    c078:	f881 305f 	strb.w	r3, [r1, #95]	; 0x5f
    c07c:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    c080:	b12a      	cbz	r2, c08e <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30a>
    c082:	e026      	b.n	c0d2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c084:	2000      	movs	r0, #0
    c086:	f7ff fec3 	bl	be10 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    c08a:	4605      	mov	r5, r0
    c08c:	e029      	b.n	c0e2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x35e>
    c08e:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    c092:	2a01      	cmp	r2, #1
    c094:	d01d      	beq.n	c0d2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c096:	f891 c067 	ldrb.w	ip, [r1, #103]	; 0x67
    c09a:	f101 0266 	add.w	r2, r1, #102	; 0x66
    c09e:	4584      	cmp	ip, r0
    c0a0:	bf01      	itttt	eq
    c0a2:	7810      	ldrbeq	r0, [r2, #0]
    c0a4:	4298      	cmpeq	r0, r3
    c0a6:	2002      	moveq	r0, #2
    c0a8:	f881 0142 	strbeq.w	r0, [r1, #322]	; 0x142
    c0ac:	d011      	beq.n	c0d2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c0ae:	880a      	ldrh	r2, [r1, #0]
    c0b0:	f8a1 2170 	strh.w	r2, [r1, #368]	; 0x170
    c0b4:	f891 205e 	ldrb.w	r2, [r1, #94]	; 0x5e
    c0b8:	f501 70a6 	add.w	r0, r1, #332	; 0x14c
    c0bc:	f881 2172 	strb.w	r2, [r1, #370]	; 0x172
    c0c0:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    c0c4:	f880 1027 	strb.w	r1, [r0, #39]	; 0x27
    c0c8:	f880 6022 	strb.w	r6, [r0, #34]	; 0x22
    c0cc:	78e0      	ldrb	r0, [r4, #3]
    c0ce:	f7f7 fb4b 	bl	3768 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c0d2:	68a0      	ldr	r0, [r4, #8]
    c0d4:	2121      	movs	r1, #33	; 0x21
    c0d6:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c0da:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    c0de:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    c0e2:	b007      	add	sp, #28
    c0e4:	4628      	mov	r0, r5
    c0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0e8:	20000238 	.word	0x20000238
    c0ec:	b538      	push	{r3, r4, r5, lr}
    c0ee:	4c26      	ldr	r4, [pc, #152]	; (c188 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x404>)
    c0f0:	68a0      	ldr	r0, [r4, #8]
    c0f2:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c0f6:	281f      	cmp	r0, #31
    c0f8:	bf1c      	itt	ne
    c0fa:	2001      	movne	r0, #1
    c0fc:	bd38      	popne	{r3, r4, r5, pc}
    c0fe:	6920      	ldr	r0, [r4, #16]
    c100:	f004 f9a4 	bl	1044c <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    c104:	2800      	cmp	r0, #0
    c106:	d036      	beq.n	c176 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x3f2>
    c108:	6920      	ldr	r0, [r4, #16]
    c10a:	68a2      	ldr	r2, [r4, #8]
    c10c:	7901      	ldrb	r1, [r0, #4]
    c10e:	7940      	ldrb	r0, [r0, #5]
    c110:	f001 0107 	and.w	r1, r1, #7
    c114:	f361 0507 	bfi	r5, r1, #0, #8
    c118:	4629      	mov	r1, r5
    c11a:	f000 0007 	and.w	r0, r0, #7
    c11e:	f360 210f 	bfi	r1, r0, #8, #8
    c122:	2001      	movs	r0, #1
    c124:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    c128:	2500      	movs	r5, #0
    c12a:	f8a2 50ac 	strh.w	r5, [r2, #172]	; 0xac
    c12e:	2023      	movs	r0, #35	; 0x23
    c130:	f882 0084 	strb.w	r0, [r2, #132]	; 0x84
    c134:	f8d2 0144 	ldr.w	r0, [r2, #324]	; 0x144
    c138:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
    c13c:	f8ad 2000 	strh.w	r2, [sp]
    c140:	f003 ff81 	bl	10046 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    c144:	f89d 2000 	ldrb.w	r2, [sp]
    c148:	b2c1      	uxtb	r1, r0
    c14a:	428a      	cmp	r2, r1
    c14c:	bf07      	ittee	eq
    c14e:	68a1      	ldreq	r1, [r4, #8]
    c150:	f881 5126 	strbeq.w	r5, [r1, #294]	; 0x126
    c154:	68a2      	ldrne	r2, [r4, #8]
    c156:	f882 1126 	strbne.w	r1, [r2, #294]	; 0x126
    c15a:	f89d 1001 	ldrb.w	r1, [sp, #1]
    c15e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c162:	4281      	cmp	r1, r0
    c164:	bf19      	ittee	ne
    c166:	68a1      	ldrne	r1, [r4, #8]
    c168:	f881 0127 	strbne.w	r0, [r1, #295]	; 0x127
    c16c:	68a0      	ldreq	r0, [r4, #8]
    c16e:	f880 5127 	strbeq.w	r5, [r0, #295]	; 0x127
    c172:	2000      	movs	r0, #0
    c174:	bd38      	pop	{r3, r4, r5, pc}
    c176:	2001      	movs	r0, #1
    c178:	f7ff fe4a 	bl	be10 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    c17c:	4604      	mov	r4, r0
    c17e:	201e      	movs	r0, #30
    c180:	f7ff fe18 	bl	bdb4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c184:	4620      	mov	r0, r4
    c186:	bd38      	pop	{r3, r4, r5, pc}
    c188:	20000238 	.word	0x20000238
    c18c:	b510      	push	{r4, lr}
    c18e:	4c0a      	ldr	r4, [pc, #40]	; (c1b8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x434>)
    c190:	2300      	movs	r3, #0
    c192:	4619      	mov	r1, r3
    c194:	68a0      	ldr	r0, [r4, #8]
    c196:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c19a:	3078      	adds	r0, #120	; 0x78
    c19c:	f003 fe61 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c1a0:	b120      	cbz	r0, c1ac <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x428>
    c1a2:	68a1      	ldr	r1, [r4, #8]
    c1a4:	201c      	movs	r0, #28
    c1a6:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c1aa:	bd10      	pop	{r4, pc}
    c1ac:	f240 6162 	movw	r1, #1634	; 0x662
    c1b0:	2036      	movs	r0, #54	; 0x36
    c1b2:	f7f7 fce5 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1b6:	0000      	.short	0x0000
    c1b8:	20000238 	.word	0x20000238
    c1bc:	b510      	push	{r4, lr}
    c1be:	4c0a      	ldr	r4, [pc, #40]	; (c1e8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x464>)
    c1c0:	2300      	movs	r3, #0
    c1c2:	4619      	mov	r1, r3
    c1c4:	68a0      	ldr	r0, [r4, #8]
    c1c6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c1ca:	3078      	adds	r0, #120	; 0x78
    c1cc:	f003 fe49 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c1d0:	b120      	cbz	r0, c1dc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x458>
    c1d2:	68a1      	ldr	r1, [r4, #8]
    c1d4:	2000      	movs	r0, #0
    c1d6:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    c1da:	bd10      	pop	{r4, pc}
    c1dc:	f240 6169 	movw	r1, #1641	; 0x669
    c1e0:	2036      	movs	r0, #54	; 0x36
    c1e2:	f7f7 fccd 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1e6:	0000      	.short	0x0000
    c1e8:	20000238 	.word	0x20000238
    c1ec:	b510      	push	{r4, lr}
    c1ee:	4c0a      	ldr	r4, [pc, #40]	; (c218 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x494>)
    c1f0:	2300      	movs	r3, #0
    c1f2:	4619      	mov	r1, r3
    c1f4:	68a0      	ldr	r0, [r4, #8]
    c1f6:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c1fa:	3078      	adds	r0, #120	; 0x78
    c1fc:	f003 fe31 	bl	fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c200:	b120      	cbz	r0, c20c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x488>
    c202:	68a1      	ldr	r1, [r4, #8]
    c204:	201f      	movs	r0, #31
    c206:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c20a:	bd10      	pop	{r4, pc}
    c20c:	f240 6172 	movw	r1, #1650	; 0x672
    c210:	2036      	movs	r0, #54	; 0x36
    c212:	f7f7 fcb5 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c216:	0000      	.short	0x0000
    c218:	20000238 	.word	0x20000238
    c21c:	b570      	push	{r4, r5, r6, lr}
    c21e:	4c1f      	ldr	r4, [pc, #124]	; (c29c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x518>)
    c220:	68a0      	ldr	r0, [r4, #8]
    c222:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    c226:	2900      	cmp	r1, #0
    c228:	bf05      	ittet	eq
    c22a:	f890 1127 	ldrbeq.w	r1, [r0, #295]	; 0x127
    c22e:	2900      	cmpeq	r1, #0
    c230:	2100      	movne	r1, #0
    c232:	2101      	moveq	r1, #1
    c234:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    c238:	f04f 0224 	mov.w	r2, #36	; 0x24
    c23c:	f04f 0500 	mov.w	r5, #0
    c240:	2b21      	cmp	r3, #33	; 0x21
    c242:	d008      	beq.n	c256 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4d2>
    c244:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    c248:	2b23      	cmp	r3, #35	; 0x23
    c24a:	d019      	beq.n	c280 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4fc>
    c24c:	f240 619e 	movw	r1, #1694	; 0x69e
    c250:	2036      	movs	r0, #54	; 0x36
    c252:	f7f7 fc95 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c256:	2900      	cmp	r1, #0
    c258:	bf08      	it	eq
    c25a:	f880 2085 	strbeq.w	r2, [r0, #133]	; 0x85
    c25e:	d00b      	beq.n	c278 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4f4>
    c260:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    c264:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    c268:	2801      	cmp	r0, #1
    c26a:	bf04      	itt	eq
    c26c:	2000      	moveq	r0, #0
    c26e:	f7ff fda1 	bleq	bdb4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c272:	68a0      	ldr	r0, [r4, #8]
    c274:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
    c278:	68a0      	ldr	r0, [r4, #8]
    c27a:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c27e:	bd70      	pop	{r4, r5, r6, pc}
    c280:	2900      	cmp	r1, #0
    c282:	bf08      	it	eq
    c284:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    c288:	d004      	beq.n	c294 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x510>
    c28a:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    c28e:	2000      	movs	r0, #0
    c290:	f7ff fd90 	bl	bdb4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c294:	68a0      	ldr	r0, [r4, #8]
    c296:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    c29a:	bd70      	pop	{r4, r5, r6, pc}
    c29c:	20000238 	.word	0x20000238

0000c2a0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    c2a0:	b510      	push	{r4, lr}
    c2a2:	4905      	ldr	r1, [pc, #20]	; (c2b8 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q+0x18>)
    c2a4:	4604      	mov	r4, r0
    c2a6:	2001      	movs	r0, #1
    c2a8:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c2ac:	f7fb f8f8 	bl	74a0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    c2b0:	7020      	strb	r0, [r4, #0]
    c2b2:	2000      	movs	r0, #0
    c2b4:	bd10      	pop	{r4, pc}
    c2b6:	0000      	.short	0x0000
    c2b8:	200010d4 	.word	0x200010d4

0000c2bc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    c2bc:	4904      	ldr	r1, [pc, #16]	; (c2d0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x14>)
    c2be:	f8b1 2242 	ldrh.w	r2, [r1, #578]	; 0x242
    c2c2:	8002      	strh	r2, [r0, #0]
    c2c4:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
    c2c8:	7081      	strb	r1, [r0, #2]
    c2ca:	2000      	movs	r0, #0
    c2cc:	4770      	bx	lr
    c2ce:	0000      	.short	0x0000
    c2d0:	200010d4 	.word	0x200010d4

0000c2d4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    c2d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c2d8:	460d      	mov	r5, r1
    c2da:	4606      	mov	r6, r0
    c2dc:	f000 fd9c 	bl	ce18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c2e0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    c2e4:	b1e0      	cbz	r0, c320 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    c2e6:	8830      	ldrh	r0, [r6, #0]
    c2e8:	4669      	mov	r1, sp
    c2ea:	f003 fd6f 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c2ee:	2800      	cmp	r0, #0
    c2f0:	d114      	bne.n	c31c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    c2f2:	f8dd 4004 	ldr.w	r4, [sp, #4]
    c2f6:	2700      	movs	r7, #0
    c2f8:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    c2fc:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    c300:	f005 fa61 	bl	117c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    c304:	70a8      	strb	r0, [r5, #2]
    c306:	7860      	ldrb	r0, [r4, #1]
    c308:	f005 fa5d 	bl	117c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    c30c:	70e8      	strb	r0, [r5, #3]
    c30e:	78a0      	ldrb	r0, [r4, #2]
    c310:	3c66      	subs	r4, #102	; 0x66
    c312:	2800      	cmp	r0, #0
    c314:	d1f0      	bne.n	c2f8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    c316:	8830      	ldrh	r0, [r6, #0]
    c318:	8028      	strh	r0, [r5, #0]
    c31a:	2000      	movs	r0, #0
    c31c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c320:	2001      	movs	r0, #1
    c322:	e7fb      	b.n	c31c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

0000c324 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    c324:	b51c      	push	{r2, r3, r4, lr}
    c326:	8800      	ldrh	r0, [r0, #0]
    c328:	4669      	mov	r1, sp
    c32a:	f003 fd4f 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c32e:	2800      	cmp	r0, #0
    c330:	d10f      	bne.n	c352 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    c332:	f89d 0000 	ldrb.w	r0, [sp]
    c336:	2401      	movs	r4, #1
    c338:	b160      	cbz	r0, c354 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    c33a:	4811      	ldr	r0, [pc, #68]	; (c380 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x5c>)
    c33c:	7800      	ldrb	r0, [r0, #0]
    c33e:	b1e8      	cbz	r0, c37c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x58>
    c340:	9801      	ldr	r0, [sp, #4]
    c342:	f005 fbbe 	bl	11ac2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x366>
    c346:	b190      	cbz	r0, c36e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    c348:	9801      	ldr	r0, [sp, #4]
    c34a:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
    c34e:	b180      	cbz	r0, c372 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4e>
    c350:	203a      	movs	r0, #58	; 0x3a
    c352:	bd1c      	pop	{r2, r3, r4, pc}
    c354:	9801      	ldr	r0, [sp, #4]
    c356:	f005 fba8 	bl	11aaa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
    c35a:	b140      	cbz	r0, c36e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    c35c:	9801      	ldr	r0, [sp, #4]
    c35e:	f890 0149 	ldrb.w	r0, [r0, #329]	; 0x149
    c362:	2800      	cmp	r0, #0
    c364:	d1f4      	bne.n	c350 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    c366:	9801      	ldr	r0, [sp, #4]
    c368:	f880 4149 	strb.w	r4, [r0, #329]	; 0x149
    c36c:	e004      	b.n	c378 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x54>
    c36e:	2002      	movs	r0, #2
    c370:	bd1c      	pop	{r2, r3, r4, pc}
    c372:	9801      	ldr	r0, [sp, #4]
    c374:	f880 41c5 	strb.w	r4, [r0, #453]	; 0x1c5
    c378:	2000      	movs	r0, #0
    c37a:	bd1c      	pop	{r2, r3, r4, pc}
    c37c:	2011      	movs	r0, #17
    c37e:	bd1c      	pop	{r2, r3, r4, pc}
    c380:	2000031c 	.word	0x2000031c

0000c384 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    c384:	b510      	push	{r4, lr}
    c386:	4604      	mov	r4, r0
    c388:	f005 fb82 	bl	11a90 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    c38c:	b130      	cbz	r0, c39c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    c38e:	4804      	ldr	r0, [pc, #16]	; (c3a0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    c390:	8941      	ldrh	r1, [r0, #10]
    c392:	8021      	strh	r1, [r4, #0]
    c394:	8980      	ldrh	r0, [r0, #12]
    c396:	8060      	strh	r0, [r4, #2]
    c398:	2000      	movs	r0, #0
    c39a:	bd10      	pop	{r4, pc}
    c39c:	2001      	movs	r0, #1
    c39e:	bd10      	pop	{r4, pc}
    c3a0:	2000159a 	.word	0x2000159a

0000c3a4 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    c3a4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    c3a6:	4915      	ldr	r1, [pc, #84]	; (c3fc <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>)
    c3a8:	4605      	mov	r5, r0
    c3aa:	2001      	movs	r0, #1
    c3ac:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c3b0:	4813      	ldr	r0, [pc, #76]	; (c400 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x5c>)
    c3b2:	f1a0 0422 	sub.w	r4, r0, #34	; 0x22
    c3b6:	6020      	str	r0, [r4, #0]
    c3b8:	301f      	adds	r0, #31
    c3ba:	60a0      	str	r0, [r4, #8]
    c3bc:	f000 fc38 	bl	cc30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    c3c0:	f894 0020 	ldrb.w	r0, [r4, #32]
    c3c4:	7829      	ldrb	r1, [r5, #0]
    c3c6:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    c3ca:	221f      	movs	r2, #31
    c3cc:	1c68      	adds	r0, r5, #1
    c3ce:	f005 fa0a 	bl	117e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8a>
    c3d2:	b120      	cbz	r0, c3de <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x3a>
    c3d4:	f241 31f1 	movw	r1, #5105	; 0x13f1
    c3d8:	2039      	movs	r0, #57	; 0x39
    c3da:	f7f7 fbd1 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3de:	f894 0020 	ldrb.w	r0, [r4, #32]
    c3e2:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    c3e6:	9001      	str	r0, [sp, #4]
    c3e8:	7828      	ldrb	r0, [r5, #0]
    c3ea:	f8ad 0002 	strh.w	r0, [sp, #2]
    c3ee:	2000      	movs	r0, #0
    c3f0:	f88d 0000 	strb.w	r0, [sp]
    c3f4:	4668      	mov	r0, sp
    c3f6:	f000 f923 	bl	c640 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    c3fa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    c3fc:	200010d4 	.word	0x200010d4
    c400:	200015ce 	.word	0x200015ce

0000c404 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    c404:	b51c      	push	{r2, r3, r4, lr}
    c406:	4a0d      	ldr	r2, [pc, #52]	; (c43c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x38>)
    c408:	2101      	movs	r1, #1
    c40a:	2400      	movs	r4, #0
    c40c:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    c410:	7800      	ldrb	r0, [r0, #0]
    c412:	f88d 0000 	strb.w	r0, [sp]
    c416:	f88d 1001 	strb.w	r1, [sp, #1]
    c41a:	f88d 4002 	strb.w	r4, [sp, #2]
    c41e:	f7fb f81f 	bl	7460 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    c422:	b118      	cbz	r0, c42c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x28>
    c424:	2080      	movs	r0, #128	; 0x80
    c426:	f8ad 0003 	strh.w	r0, [sp, #3]
    c42a:	e001      	b.n	c430 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2c>
    c42c:	f8ad 4003 	strh.w	r4, [sp, #3]
    c430:	f88d 4005 	strb.w	r4, [sp, #5]
    c434:	4668      	mov	r0, sp
    c436:	f000 fb1b 	bl	ca70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    c43a:	bd1c      	pop	{r2, r3, r4, pc}
    c43c:	200010d4 	.word	0x200010d4

0000c440 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    c440:	b510      	push	{r4, lr}
    c442:	4a39      	ldr	r2, [pc, #228]	; (c528 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe8>)
    c444:	b08a      	sub	sp, #40	; 0x28
    c446:	2101      	movs	r1, #1
    c448:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    c44c:	8841      	ldrh	r1, [r0, #2]
    c44e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    c452:	d902      	bls.n	c45a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    c454:	2012      	movs	r0, #18
    c456:	b00a      	add	sp, #40	; 0x28
    c458:	bd10      	pop	{r4, pc}
    c45a:	2400      	movs	r4, #0
    c45c:	f88d 4004 	strb.w	r4, [sp, #4]
    c460:	7902      	ldrb	r2, [r0, #4]
    c462:	9400      	str	r4, [sp, #0]
    c464:	f89d 1000 	ldrb.w	r1, [sp]
    c468:	2a05      	cmp	r2, #5
    c46a:	f041 0110 	orr.w	r1, r1, #16
    c46e:	f88d 1000 	strb.w	r1, [sp]
    c472:	d253      	bcs.n	c51c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xdc>
    c474:	e8df f002 	tbb	[pc, r2]
    c478:	11050803 	.word	0x11050803
    c47c:	000b      	.short	0x000b
    c47e:	f041 0101 	orr.w	r1, r1, #1
    c482:	f041 0102 	orr.w	r1, r1, #2
    c486:	e006      	b.n	c496 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    c488:	f041 0109 	orr.w	r1, r1, #9
    c48c:	e001      	b.n	c492 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    c48e:	f041 0101 	orr.w	r1, r1, #1
    c492:	f041 0104 	orr.w	r1, r1, #4
    c496:	f88d 1000 	strb.w	r1, [sp]
    c49a:	f8bd 1000 	ldrh.w	r1, [sp]
    c49e:	9100      	str	r1, [sp, #0]
    c4a0:	f8bd 1000 	ldrh.w	r1, [sp]
    c4a4:	f8ad 1005 	strh.w	r1, [sp, #5]
    c4a8:	8802      	ldrh	r2, [r0, #0]
    c4aa:	f8dd 1006 	ldr.w	r1, [sp, #6]
    c4ae:	f362 211f 	bfi	r1, r2, #8, #24
    c4b2:	f8cd 1006 	str.w	r1, [sp, #6]
    c4b6:	8842      	ldrh	r2, [r0, #2]
    c4b8:	f8dd 1009 	ldr.w	r1, [sp, #9]
    c4bc:	f362 211f 	bfi	r1, r2, #8, #24
    c4c0:	f8cd 1009 	str.w	r1, [sp, #9]
    c4c4:	7b41      	ldrb	r1, [r0, #13]
    c4c6:	f88d 100d 	strb.w	r1, [sp, #13]
    c4ca:	7941      	ldrb	r1, [r0, #5]
    c4cc:	f88d 100e 	strb.w	r1, [sp, #14]
    c4d0:	7981      	ldrb	r1, [r0, #6]
    c4d2:	f88d 100f 	strb.w	r1, [sp, #15]
    c4d6:	f8d0 1007 	ldr.w	r1, [r0, #7]
    c4da:	9104      	str	r1, [sp, #16]
    c4dc:	f8b0 100b 	ldrh.w	r1, [r0, #11]
    c4e0:	f8ad 1014 	strh.w	r1, [sp, #20]
    c4e4:	7b80      	ldrb	r0, [r0, #14]
    c4e6:	f88d 0016 	strb.w	r0, [sp, #22]
    c4ea:	207f      	movs	r0, #127	; 0x7f
    c4ec:	f88d 0017 	strb.w	r0, [sp, #23]
    c4f0:	2001      	movs	r0, #1
    c4f2:	f88d 0018 	strb.w	r0, [sp, #24]
    c4f6:	f88d 4019 	strb.w	r4, [sp, #25]
    c4fa:	f88d 001a 	strb.w	r0, [sp, #26]
    c4fe:	f88d 401b 	strb.w	r4, [sp, #27]
    c502:	f7fb f815 	bl	7530 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    c506:	f88d 001c 	strb.w	r0, [sp, #28]
    c50a:	f88d 401d 	strb.w	r4, [sp, #29]
    c50e:	f88d 401e 	strb.w	r4, [sp, #30]
    c512:	a908      	add	r1, sp, #32
    c514:	a801      	add	r0, sp, #4
    c516:	f004 ff93 	bl	11440 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    c51a:	e79c      	b.n	c456 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    c51c:	f241 0147 	movw	r1, #4167	; 0x1047
    c520:	2039      	movs	r0, #57	; 0x39
    c522:	f7f7 fb2d 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c526:	0000      	.short	0x0000
    c528:	200010d4 	.word	0x200010d4

0000c52c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    c52c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c52e:	4604      	mov	r4, r0
    c530:	f000 fc72 	bl	ce18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c534:	f3c0 2000 	ubfx	r0, r0, #8, #1
    c538:	b318      	cbz	r0, c582 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x56>
    c53a:	2000      	movs	r0, #0
    c53c:	f88d 0004 	strb.w	r0, [sp, #4]
    c540:	f88d 0008 	strb.w	r0, [sp, #8]
    c544:	a802      	add	r0, sp, #8
    c546:	9000      	str	r0, [sp, #0]
    c548:	78a2      	ldrb	r2, [r4, #2]
    c54a:	7861      	ldrb	r1, [r4, #1]
    c54c:	7820      	ldrb	r0, [r4, #0]
    c54e:	ab01      	add	r3, sp, #4
    c550:	f005 fb65 	bl	11c1e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4c2>
    c554:	2800      	cmp	r0, #0
    c556:	d113      	bne.n	c580 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    c558:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c55c:	f005 fa11 	bl	11982 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
    c560:	b188      	cbz	r0, c586 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5a>
    c562:	f89d 0008 	ldrb.w	r0, [sp, #8]
    c566:	f005 fa0c 	bl	11982 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
    c56a:	b160      	cbz	r0, c586 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5a>
    c56c:	4807      	ldr	r0, [pc, #28]	; (c58c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x60>)
    c56e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    c572:	f880 1252 	strb.w	r1, [r0, #594]	; 0x252
    c576:	f89d 1008 	ldrb.w	r1, [sp, #8]
    c57a:	f880 1253 	strb.w	r1, [r0, #595]	; 0x253
    c57e:	2000      	movs	r0, #0
    c580:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c582:	2001      	movs	r0, #1
    c584:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c586:	2011      	movs	r0, #17
    c588:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c58a:	0000      	.short	0x0000
    c58c:	200010d4 	.word	0x200010d4

0000c590 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    c590:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    c592:	4916      	ldr	r1, [pc, #88]	; (c5ec <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x5c>)
    c594:	4605      	mov	r5, r0
    c596:	2001      	movs	r0, #1
    c598:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c59c:	4814      	ldr	r0, [pc, #80]	; (c5f0 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x60>)
    c59e:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
    c5a2:	6120      	str	r0, [r4, #16]
    c5a4:	301f      	adds	r0, #31
    c5a6:	61a0      	str	r0, [r4, #24]
    c5a8:	f000 fb52 	bl	cc50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    c5ac:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c5b0:	7829      	ldrb	r1, [r5, #0]
    c5b2:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    c5b6:	221f      	movs	r2, #31
    c5b8:	1c68      	adds	r0, r5, #1
    c5ba:	3310      	adds	r3, #16
    c5bc:	f005 f913 	bl	117e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8a>
    c5c0:	b120      	cbz	r0, c5cc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x3c>
    c5c2:	f241 2174 	movw	r1, #4724	; 0x1274
    c5c6:	2039      	movs	r0, #57	; 0x39
    c5c8:	f7f7 fada 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5cc:	2000      	movs	r0, #0
    c5ce:	f88d 0000 	strb.w	r0, [sp]
    c5d2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c5d6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    c5da:	6900      	ldr	r0, [r0, #16]
    c5dc:	9001      	str	r0, [sp, #4]
    c5de:	7828      	ldrb	r0, [r5, #0]
    c5e0:	f8ad 0002 	strh.w	r0, [sp, #2]
    c5e4:	4668      	mov	r0, sp
    c5e6:	f000 f857 	bl	c698 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    c5ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    c5ec:	200010d4 	.word	0x200010d4
    c5f0:	2000160c 	.word	0x2000160c

0000c5f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    c5f4:	7801      	ldrb	r1, [r0, #0]
    c5f6:	b181      	cbz	r1, c61a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c5f8:	7841      	ldrb	r1, [r0, #1]
    c5fa:	b171      	cbz	r1, c61a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c5fc:	8841      	ldrh	r1, [r0, #2]
    c5fe:	291b      	cmp	r1, #27
    c600:	d30b      	bcc.n	c61a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c602:	8881      	ldrh	r1, [r0, #4]
    c604:	291b      	cmp	r1, #27
    c606:	d308      	bcc.n	c61a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c608:	4905      	ldr	r1, [pc, #20]	; (c620 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x2c>)
    c60a:	6802      	ldr	r2, [r0, #0]
    c60c:	f8c1 2240 	str.w	r2, [r1, #576]	; 0x240
    c610:	8880      	ldrh	r0, [r0, #4]
    c612:	f8a1 0244 	strh.w	r0, [r1, #580]	; 0x244
    c616:	2000      	movs	r0, #0
    c618:	4770      	bx	lr
    c61a:	2012      	movs	r0, #18
    c61c:	4770      	bx	lr
    c61e:	0000      	.short	0x0000
    c620:	200010d4 	.word	0x200010d4

0000c624 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    c624:	6800      	ldr	r0, [r0, #0]
    c626:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    c62a:	d304      	bcc.n	c636 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    c62c:	4903      	ldr	r1, [pc, #12]	; (c63c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    c62e:	f8c1 0248 	str.w	r0, [r1, #584]	; 0x248
    c632:	2000      	movs	r0, #0
    c634:	4770      	bx	lr
    c636:	2012      	movs	r0, #18
    c638:	4770      	bx	lr
    c63a:	0000      	.short	0x0000
    c63c:	200010d4 	.word	0x200010d4

0000c640 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    c640:	b570      	push	{r4, r5, r6, lr}
    c642:	4d14      	ldr	r5, [pc, #80]	; (c694 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>)
    c644:	4604      	mov	r4, r0
    c646:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c64a:	b920      	cbnz	r0, c656 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    c64c:	8860      	ldrh	r0, [r4, #2]
    c64e:	b110      	cbz	r0, c656 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    c650:	f7fa feda 	bl	7408 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
    c654:	b198      	cbz	r0, c67e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x3e>
    c656:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    c65a:	8861      	ldrh	r1, [r4, #2]
    c65c:	7820      	ldrb	r0, [r4, #0]
    c65e:	f005 f8d7 	bl	11810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb4>
    c662:	2800      	cmp	r0, #0
    c664:	d10c      	bne.n	c680 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x40>
    c666:	f7fa fcd9 	bl	701c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    c66a:	4601      	mov	r1, r0
    c66c:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c670:	2800      	cmp	r0, #0
    c672:	8860      	ldrh	r0, [r4, #2]
    c674:	d005      	beq.n	c682 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    c676:	4288      	cmp	r0, r1
    c678:	d907      	bls.n	c68a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    c67a:	4608      	mov	r0, r1
    c67c:	e005      	b.n	c68a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    c67e:	2012      	movs	r0, #18
    c680:	bd70      	pop	{r4, r5, r6, pc}
    c682:	4288      	cmp	r0, r1
    c684:	d901      	bls.n	c68a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    c686:	2007      	movs	r0, #7
    c688:	bd70      	pop	{r4, r5, r6, pc}
    c68a:	6861      	ldr	r1, [r4, #4]
    c68c:	f7fa ff62 	bl	7554 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    c690:	2000      	movs	r0, #0
    c692:	bd70      	pop	{r4, r5, r6, pc}
    c694:	200010d4 	.word	0x200010d4

0000c698 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    c698:	b570      	push	{r4, r5, r6, lr}
    c69a:	4d11      	ldr	r5, [pc, #68]	; (c6e0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x48>)
    c69c:	4604      	mov	r4, r0
    c69e:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c6a2:	b920      	cbnz	r0, c6ae <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    c6a4:	8860      	ldrh	r0, [r4, #2]
    c6a6:	b110      	cbz	r0, c6ae <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    c6a8:	f7fa feea 	bl	7480 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    c6ac:	b178      	cbz	r0, c6ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x36>
    c6ae:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    c6b2:	8861      	ldrh	r1, [r4, #2]
    c6b4:	7820      	ldrb	r0, [r4, #0]
    c6b6:	f005 f8ab 	bl	11810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb4>
    c6ba:	2800      	cmp	r0, #0
    c6bc:	d108      	bne.n	c6d0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x38>
    c6be:	8866      	ldrh	r6, [r4, #2]
    c6c0:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c6c4:	b130      	cbz	r0, c6d4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    c6c6:	f7fa fedb 	bl	7480 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    c6ca:	b110      	cbz	r0, c6d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3a>
    c6cc:	e002      	b.n	c6d4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    c6ce:	2012      	movs	r0, #18
    c6d0:	bd70      	pop	{r4, r5, r6, pc}
    c6d2:	2600      	movs	r6, #0
    c6d4:	4630      	mov	r0, r6
    c6d6:	6861      	ldr	r1, [r4, #4]
    c6d8:	f7fa ff4a 	bl	7570 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    c6dc:	2000      	movs	r0, #0
    c6de:	bd70      	pop	{r4, r5, r6, pc}
    c6e0:	200010d4 	.word	0x200010d4

0000c6e4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    c6e4:	b510      	push	{r4, lr}
    c6e6:	4604      	mov	r4, r0
    c6e8:	7800      	ldrb	r0, [r0, #0]
    c6ea:	07c0      	lsls	r0, r0, #31
    c6ec:	d004      	beq.n	c6f8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    c6ee:	f001 f8a1 	bl	d834 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>
    c6f2:	b108      	cbz	r0, c6f8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    c6f4:	200c      	movs	r0, #12
    c6f6:	bd10      	pop	{r4, pc}
    c6f8:	7820      	ldrb	r0, [r4, #0]
    c6fa:	4903      	ldr	r1, [pc, #12]	; (c708 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x24>)
    c6fc:	f000 0001 	and.w	r0, r0, #1
    c700:	7388      	strb	r0, [r1, #14]
    c702:	2000      	movs	r0, #0
    c704:	bd10      	pop	{r4, pc}
    c706:	0000      	.short	0x0000
    c708:	2000159a 	.word	0x2000159a

0000c70c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    c70c:	4a03      	ldr	r2, [pc, #12]	; (c71c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    c70e:	e9d2 1200 	ldrd	r1, r2, [r2]
    c712:	6001      	str	r1, [r0, #0]
    c714:	6042      	str	r2, [r0, #4]
    c716:	2000      	movs	r0, #0
    c718:	4770      	bx	lr
    c71a:	0000      	.short	0x0000
    c71c:	0000cca8 	.word	0x0000cca8

0000c720 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    c720:	b510      	push	{r4, lr}
    c722:	2005      	movs	r0, #5
    c724:	f000 fb66 	bl	cdf4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    c728:	f7ff fb14 	bl	bd54 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    c72c:	f7fd f954 	bl	99d8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    c730:	4902      	ldr	r1, [pc, #8]	; (c73c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x1c>)
    c732:	4801      	ldr	r0, [pc, #4]	; (c738 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    c734:	6048      	str	r0, [r1, #4]
    c736:	bd10      	pop	{r4, pc}
    c738:	0000c8a1 	.word	0x0000c8a1
    c73c:	2000031c 	.word	0x2000031c

0000c740 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    c740:	4901      	ldr	r1, [pc, #4]	; (c748 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    c742:	7048      	strb	r0, [r1, #1]
    c744:	f000 b802 	b.w	c74c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    c748:	2000031c 	.word	0x2000031c

0000c74c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    c74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c750:	f7f8 f988 	bl	4a64 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    c754:	f7f9 f8d2 	bl	58fc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    c758:	4c22      	ldr	r4, [pc, #136]	; (c7e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>)
    c75a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    c75e:	2500      	movs	r5, #0
    c760:	f8a4 724e 	strh.w	r7, [r4, #590]	; 0x24e
    c764:	f8a4 7250 	strh.w	r7, [r4, #592]	; 0x250
    c768:	f884 5258 	strb.w	r5, [r4, #600]	; 0x258
    c76c:	f8a4 525a 	strh.w	r5, [r4, #602]	; 0x25a
    c770:	f884 523e 	strb.w	r5, [r4, #574]	; 0x23e
    c774:	f204 243e 	addw	r4, r4, #574	; 0x23e
    c778:	f000 fa5a 	bl	cc30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    c77c:	f000 fa68 	bl	cc50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    c780:	a019      	add	r0, pc, #100	; (adr r0, c7e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>)
    c782:	7665      	strb	r5, [r4, #25]
    c784:	4e1a      	ldr	r6, [pc, #104]	; (c7f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>)
    c786:	6801      	ldr	r1, [r0, #0]
    c788:	7900      	ldrb	r0, [r0, #4]
    c78a:	f1a6 023e 	sub.w	r2, r6, #62	; 0x3e
    c78e:	7035      	strb	r5, [r6, #0]
    c790:	f842 1f3f 	str.w	r1, [r2, #63]!
    c794:	1c71      	adds	r1, r6, #1
    c796:	7110      	strb	r0, [r2, #4]
    c798:	4630      	mov	r0, r6
    c79a:	f7ff fad5 	bl	bd48 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>
    c79e:	201b      	movs	r0, #27
    c7a0:	80f0      	strh	r0, [r6, #6]
    c7a2:	f44f 71a4 	mov.w	r1, #328	; 0x148
    c7a6:	8131      	strh	r1, [r6, #8]
    c7a8:	8170      	strh	r0, [r6, #10]
    c7aa:	81b1      	strh	r1, [r6, #12]
    c7ac:	7525      	strb	r5, [r4, #20]
    c7ae:	7565      	strb	r5, [r4, #21]
    c7b0:	73f5      	strb	r5, [r6, #15]
    c7b2:	2103      	movs	r1, #3
    c7b4:	70a1      	strb	r1, [r4, #2]
    c7b6:	70e1      	strb	r1, [r4, #3]
    c7b8:	80a0      	strh	r0, [r4, #4]
    c7ba:	80e0      	strh	r0, [r4, #6]
    c7bc:	f640 60a6 	movw	r0, #3750	; 0xea6
    c7c0:	f8c4 000a 	str.w	r0, [r4, #10]
    c7c4:	f1a6 003e 	sub.w	r0, r6, #62	; 0x3e
    c7c8:	73b5      	strb	r5, [r6, #14]
    c7ca:	7005      	strb	r5, [r0, #0]
    c7cc:	8047      	strh	r7, [r0, #2]
    c7ce:	4809      	ldr	r0, [pc, #36]	; (c7f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>)
    c7d0:	7005      	strb	r5, [r0, #0]
    c7d2:	f1a6 000e 	sub.w	r0, r6, #14
    c7d6:	7005      	strb	r5, [r0, #0]
    c7d8:	8047      	strh	r7, [r0, #2]
    c7da:	7625      	strb	r5, [r4, #24]
    c7dc:	73a5      	strb	r5, [r4, #14]
    c7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7e2:	0000      	.short	0x0000
    c7e4:	200010d4 	.word	0x200010d4
    c7e8:	ffffffff 	.word	0xffffffff
    c7ec:	0000001f 	.word	0x0000001f
    c7f0:	2000159a 	.word	0x2000159a
    c7f4:	20000324 	.word	0x20000324

0000c7f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    c7f8:	b570      	push	{r4, r5, r6, lr}
    c7fa:	b150      	cbz	r0, c812 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a>
    c7fc:	4d16      	ldr	r5, [pc, #88]	; (c858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x60>)
    c7fe:	2400      	movs	r4, #0
    c800:	7829      	ldrb	r1, [r5, #0]
    c802:	b159      	cbz	r1, c81c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    c804:	7044      	strb	r4, [r0, #1]
    c806:	2103      	movs	r1, #3
    c808:	7001      	strb	r1, [r0, #0]
    c80a:	2101      	movs	r1, #1
    c80c:	7101      	strb	r1, [r0, #4]
    c80e:	702c      	strb	r4, [r5, #0]
    c810:	e01c      	b.n	c84c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    c812:	f241 6190 	movw	r1, #5776	; 0x1690
    c816:	2039      	movs	r0, #57	; 0x39
    c818:	f7f7 f9b2 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c81c:	78ab      	ldrb	r3, [r5, #2]
    c81e:	2105      	movs	r1, #5
    c820:	f44f 728e 	mov.w	r2, #284	; 0x11c
    c824:	b13b      	cbz	r3, c836 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    c826:	7044      	strb	r4, [r0, #1]
    c828:	f800 1b04 	strb.w	r1, [r0], #4
    c82c:	1d29      	adds	r1, r5, #4
    c82e:	f7f7 f81d 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c832:	70ac      	strb	r4, [r5, #2]
    c834:	e00a      	b.n	c84c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    c836:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c83a:	b14b      	cbz	r3, c850 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    c83c:	7044      	strb	r4, [r0, #1]
    c83e:	f800 1b04 	strb.w	r1, [r0], #4
    c842:	4906      	ldr	r1, [pc, #24]	; (c85c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x64>)
    c844:	f7f7 f812 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c848:	f885 4120 	strb.w	r4, [r5, #288]	; 0x120
    c84c:	2001      	movs	r0, #1
    c84e:	bd70      	pop	{r4, r5, r6, pc}
    c850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c854:	f7f9 bf44 	b.w	66e0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    c858:	200010d4 	.word	0x200010d4
    c85c:	200011f6 	.word	0x200011f6
    c860:	b570      	push	{r4, r5, r6, lr}
    c862:	4604      	mov	r4, r0
    c864:	480d      	ldr	r0, [pc, #52]	; (c89c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    c866:	f890 5257 	ldrb.w	r5, [r0, #599]	; 0x257
    c86a:	f7fc f8fb 	bl	8a64 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    c86e:	b148      	cbz	r0, c884 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    c870:	b11d      	cbz	r5, c87a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x82>
    c872:	f7fa fe05 	bl	7480 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    c876:	b110      	cbz	r0, c87e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x86>
    c878:	e00b      	b.n	c892 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    c87a:	b154      	cbz	r4, c892 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    c87c:	e002      	b.n	c884 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    c87e:	f7fa fddd 	bl	743c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    c882:	b930      	cbnz	r0, c892 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    c884:	f005 f929 	bl	11ada <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    c888:	b128      	cbz	r0, c896 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    c88a:	f7ff fa09 	bl	bca0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    c88e:	2801      	cmp	r0, #1
    c890:	d001      	beq.n	c896 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    c892:	2000      	movs	r0, #0
    c894:	bd70      	pop	{r4, r5, r6, pc}
    c896:	2001      	movs	r0, #1
    c898:	bd70      	pop	{r4, r5, r6, pc}
    c89a:	0000      	.short	0x0000
    c89c:	200010d4 	.word	0x200010d4
    c8a0:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8a4:	4692      	mov	sl, r2
    c8a6:	460f      	mov	r7, r1
    c8a8:	4681      	mov	r9, r0
    c8aa:	f005 f8f1 	bl	11a90 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    c8ae:	2800      	cmp	r0, #0
    c8b0:	d063      	beq.n	c97a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    c8b2:	4933      	ldr	r1, [pc, #204]	; (c980 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    c8b4:	f8b9 2050 	ldrh.w	r2, [r9, #80]	; 0x50
    c8b8:	f8b9 604e 	ldrh.w	r6, [r9, #78]	; 0x4e
    c8bc:	88c8      	ldrh	r0, [r1, #6]
    c8be:	4290      	cmp	r0, r2
    c8c0:	d300      	bcc.n	c8c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    c8c2:	4610      	mov	r0, r2
    c8c4:	4680      	mov	r8, r0
    c8c6:	8948      	ldrh	r0, [r1, #10]
    c8c8:	42b0      	cmp	r0, r6
    c8ca:	d200      	bcs.n	c8ce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
    c8cc:	4606      	mov	r6, r0
    c8ce:	890c      	ldrh	r4, [r1, #8]
    c8d0:	f640 0048 	movw	r0, #2120	; 0x848
    c8d4:	4284      	cmp	r4, r0
    c8d6:	d300      	bcc.n	c8da <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe2>
    c8d8:	4604      	mov	r4, r0
    c8da:	898d      	ldrh	r5, [r1, #12]
    c8dc:	4285      	cmp	r5, r0
    c8de:	d300      	bcc.n	c8e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    c8e0:	4605      	mov	r5, r0
    c8e2:	4284      	cmp	r4, r0
    c8e4:	d300      	bcc.n	c8e8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    c8e6:	4604      	mov	r4, r0
    c8e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    c8ec:	2e1b      	cmp	r6, #27
    c8ee:	d001      	beq.n	c8f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    c8f0:	428d      	cmp	r5, r1
    c8f2:	d104      	bne.n	c8fe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x106>
    c8f4:	f1b8 0f1b 	cmp.w	r8, #27
    c8f8:	d03f      	beq.n	c97a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    c8fa:	428c      	cmp	r4, r1
    c8fc:	d03d      	beq.n	c97a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    c8fe:	466a      	mov	r2, sp
    c900:	4651      	mov	r1, sl
    c902:	4648      	mov	r0, r9
    c904:	f005 f860 	bl	119c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
    c908:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    c90c:	4641      	mov	r1, r8
    c90e:	4540      	cmp	r0, r8
    c910:	d900      	bls.n	c914 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11c>
    c912:	4608      	mov	r0, r1
    c914:	80f8      	strh	r0, [r7, #6]
    c916:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    c91a:	42a1      	cmp	r1, r4
    c91c:	d800      	bhi.n	c920 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    c91e:	460c      	mov	r4, r1
    c920:	813c      	strh	r4, [r7, #8]
    c922:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    c926:	42b1      	cmp	r1, r6
    c928:	d800      	bhi.n	c92c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    c92a:	460e      	mov	r6, r1
    c92c:	807e      	strh	r6, [r7, #2]
    c92e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c932:	42a9      	cmp	r1, r5
    c934:	d900      	bls.n	c938 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>
    c936:	4629      	mov	r1, r5
    c938:	80b9      	strh	r1, [r7, #4]
    c93a:	2201      	movs	r2, #1
    c93c:	703a      	strb	r2, [r7, #0]
    c93e:	381b      	subs	r0, #27
    c940:	28e0      	cmp	r0, #224	; 0xe0
    c942:	d902      	bls.n	c94a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x152>
    c944:	f640 4138 	movw	r1, #3128	; 0xc38
    c948:	e014      	b.n	c974 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    c94a:	3e1b      	subs	r6, #27
    c94c:	2ee0      	cmp	r6, #224	; 0xe0
    c94e:	d902      	bls.n	c956 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    c950:	f640 413a 	movw	r1, #3130	; 0xc3a
    c954:	e00e      	b.n	c974 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    c956:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    c95a:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    c95e:	4284      	cmp	r4, r0
    c960:	d902      	bls.n	c968 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    c962:	f640 413c 	movw	r1, #3132	; 0xc3c
    c966:	e005      	b.n	c974 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    c968:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    c96c:	4281      	cmp	r1, r0
    c96e:	d904      	bls.n	c97a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    c970:	f640 413e 	movw	r1, #3134	; 0xc3e
    c974:	2039      	movs	r0, #57	; 0x39
    c976:	f7f7 f903 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c97a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c97e:	0000      	.short	0x0000
    c980:	2000159a 	.word	0x2000159a
    c984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c988:	461d      	mov	r5, r3
    c98a:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    c98e:	f1a1 0c06 	sub.w	ip, r1, #6
    c992:	f640 437a 	movw	r3, #3194	; 0xc7a
    c996:	9e08      	ldr	r6, [sp, #32]
    c998:	459c      	cmp	ip, r3
    c99a:	d805      	bhi.n	c9a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>
    c99c:	f1a2 0c06 	sub.w	ip, r2, #6
    c9a0:	459c      	cmp	ip, r3
    c9a2:	d801      	bhi.n	c9a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>
    c9a4:	2301      	movs	r3, #1
    c9a6:	e000      	b.n	c9aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    c9a8:	2300      	movs	r3, #0
    c9aa:	b120      	cbz	r0, c9b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1be>
    c9ac:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    c9b0:	b168      	cbz	r0, c9ce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d6>
    c9b2:	b96b      	cbnz	r3, c9d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d8>
    c9b4:	e002      	b.n	c9bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    c9b6:	4815      	ldr	r0, [pc, #84]	; (ca0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>)
    c9b8:	7b80      	ldrb	r0, [r0, #14]
    c9ba:	e7f9      	b.n	c9b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    c9bc:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    c9c0:	2806      	cmp	r0, #6
    c9c2:	d821      	bhi.n	ca08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9c4:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    c9c8:	2806      	cmp	r0, #6
    c9ca:	d901      	bls.n	c9d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d8>
    c9cc:	e01c      	b.n	ca08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9ce:	b1db      	cbz	r3, ca08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9d0:	4291      	cmp	r1, r2
    c9d2:	d819      	bhi.n	ca08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9d4:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    c9d8:	d216      	bcs.n	ca08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9da:	f1a4 000a 	sub.w	r0, r4, #10
    c9de:	f640 4176 	movw	r1, #3190	; 0xc76
    c9e2:	4288      	cmp	r0, r1
    c9e4:	d810      	bhi.n	ca08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9e6:	4610      	mov	r0, r2
    c9e8:	f003 fa08 	bl	fdfc <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    c9ec:	1c6d      	adds	r5, r5, #1
    c9ee:	4368      	muls	r0, r5
    c9f0:	f240 2171 	movw	r1, #625	; 0x271
    c9f4:	0040      	lsls	r0, r0, #1
    c9f6:	434c      	muls	r4, r1
    c9f8:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    c9fc:	d204      	bcs.n	ca08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9fe:	42b7      	cmp	r7, r6
    ca00:	d802      	bhi.n	ca08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ca02:	2001      	movs	r0, #1
    ca04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca08:	2000      	movs	r0, #0
    ca0a:	e7fb      	b.n	ca04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x20c>
    ca0c:	2000159a 	.word	0x2000159a
    ca10:	b530      	push	{r4, r5, lr}
    ca12:	b087      	sub	sp, #28
    ca14:	4605      	mov	r5, r0
    ca16:	2000      	movs	r0, #0
    ca18:	9005      	str	r0, [sp, #20]
    ca1a:	9001      	str	r0, [sp, #4]
    ca1c:	9002      	str	r0, [sp, #8]
    ca1e:	8808      	ldrh	r0, [r1, #0]
    ca20:	f8ad 0004 	strh.w	r0, [sp, #4]
    ca24:	4811      	ldr	r0, [pc, #68]	; (ca6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x274>)
    ca26:	460c      	mov	r4, r1
    ca28:	ab03      	add	r3, sp, #12
    ca2a:	f890 1252 	ldrb.w	r1, [r0, #594]	; 0x252
    ca2e:	f88d 1006 	strb.w	r1, [sp, #6]
    ca32:	f890 0253 	ldrb.w	r0, [r0, #595]	; 0x253
    ca36:	f88d 0007 	strb.w	r0, [sp, #7]
    ca3a:	a804      	add	r0, sp, #16
    ca3c:	9000      	str	r0, [sp, #0]
    ca3e:	aa01      	add	r2, sp, #4
    ca40:	4621      	mov	r1, r4
    ca42:	4628      	mov	r0, r5
    ca44:	f005 f804 	bl	11a50 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f4>
    ca48:	0005      	movs	r5, r0
    ca4a:	d10c      	bne.n	ca66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26e>
    ca4c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ca50:	f88d 0014 	strb.w	r0, [sp, #20]
    ca54:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ca58:	f88d 0015 	strb.w	r0, [sp, #21]
    ca5c:	a905      	add	r1, sp, #20
    ca5e:	4620      	mov	r0, r4
    ca60:	f003 faaf 	bl	ffc2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ca64:	4628      	mov	r0, r5
    ca66:	b007      	add	sp, #28
    ca68:	bd30      	pop	{r4, r5, pc}
    ca6a:	0000      	.short	0x0000
    ca6c:	200010d4 	.word	0x200010d4

0000ca70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    ca70:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ca74:	4604      	mov	r4, r0
    ca76:	7840      	ldrb	r0, [r0, #1]
    ca78:	2542      	movs	r5, #66	; 0x42
    ca7a:	2801      	cmp	r0, #1
    ca7c:	d808      	bhi.n	ca90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    ca7e:	78a0      	ldrb	r0, [r4, #2]
    ca80:	f7fa fd14 	bl	74ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ca84:	b120      	cbz	r0, ca90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    ca86:	7820      	ldrb	r0, [r4, #0]
    ca88:	2512      	movs	r5, #18
    ca8a:	2801      	cmp	r0, #1
    ca8c:	d003      	beq.n	ca96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    ca8e:	b1a0      	cbz	r0, caba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4a>
    ca90:	4628      	mov	r0, r5
    ca92:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ca96:	f7fa fce3 	bl	7460 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ca9a:	b128      	cbz	r0, caa8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    ca9c:	f8b4 0003 	ldrh.w	r0, [r4, #3]
    caa0:	2800      	cmp	r0, #0
    caa2:	d0f5      	beq.n	ca90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    caa4:	2880      	cmp	r0, #128	; 0x80
    caa6:	d8f3      	bhi.n	ca90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    caa8:	7860      	ldrb	r0, [r4, #1]
    caaa:	2800      	cmp	r0, #0
    caac:	d0f0      	beq.n	ca90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    caae:	f7fa fc99 	bl	73e4 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    cab2:	b148      	cbz	r0, cac8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cab4:	7820      	ldrb	r0, [r4, #0]
    cab6:	2801      	cmp	r0, #1
    cab8:	d008      	beq.n	cacc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    caba:	f7fb ffcd 	bl	8a58 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    cabe:	4604      	mov	r4, r0
    cac0:	f7fb ffa4 	bl	8a0c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    cac4:	2800      	cmp	r0, #0
    cac6:	d079      	beq.n	cbbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14c>
    cac8:	200c      	movs	r0, #12
    caca:	e7e2      	b.n	ca92 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cacc:	4d55      	ldr	r5, [pc, #340]	; (cc24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b4>)
    cace:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cad2:	f7fa f9ad 	bl	6e30 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    cad6:	b910      	cbnz	r0, cade <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x6e>
    cad8:	f7fa fca8 	bl	742c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    cadc:	b3f0      	cbz	r0, cb5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    cade:	f7fb ffc1 	bl	8a64 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    cae2:	2800      	cmp	r0, #0
    cae4:	d1f0      	bne.n	cac8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cae6:	f7fa fa8d 	bl	7004 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    caea:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    caee:	39ff      	subs	r1, #255	; 0xff
    caf0:	d1ea      	bne.n	cac8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    caf2:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    caf6:	f7fa f9c5 	bl	6e84 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    cafa:	f8b4 6003 	ldrh.w	r6, [r4, #3]
    cafe:	f242 7010 	movw	r0, #10000	; 0x2710
    cb02:	4346      	muls	r6, r0
    cb04:	7960      	ldrb	r0, [r4, #5]
    cb06:	f7fa fb73 	bl	71f0 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    cb0a:	f7fa fc97 	bl	743c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    cb0e:	b138      	cbz	r0, cb20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb0>
    cb10:	f7fa fca6 	bl	7460 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    cb14:	4f44      	ldr	r7, [pc, #272]	; (cc28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    cb16:	b170      	cbz	r0, cb36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    cb18:	f7fa fcaa 	bl	7470 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    cb1c:	b148      	cbz	r0, cb32 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    cb1e:	e00a      	b.n	cb36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    cb20:	4631      	mov	r1, r6
    cb22:	2000      	movs	r0, #0
    cb24:	f7fb feda 	bl	88dc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    cb28:	2800      	cmp	r0, #0
    cb2a:	d0b2      	beq.n	ca92 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cb2c:	f241 313c 	movw	r1, #4924	; 0x133c
    cb30:	e073      	b.n	cc1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cb32:	7bb8      	ldrb	r0, [r7, #14]
    cb34:	b190      	cbz	r0, cb5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    cb36:	2200      	movs	r2, #0
    cb38:	2101      	movs	r1, #1
    cb3a:	a801      	add	r0, sp, #4
    cb3c:	f7f7 f99e 	bl	3e7c <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>
    cb40:	0004      	movs	r4, r0
    cb42:	d03c      	beq.n	cbbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    cb44:	2100      	movs	r1, #0
    cb46:	f7f9 fbbb 	bl	62c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    cb4a:	4620      	mov	r0, r4
    cb4c:	f7fa fcfc 	bl	7548 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    cb50:	f004 ff9e 	bl	11a90 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    cb54:	b148      	cbz	r0, cb6a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    cb56:	f104 0028 	add.w	r0, r4, #40	; 0x28
    cb5a:	e000      	b.n	cb5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xee>
    cb5c:	e016      	b.n	cb8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x11c>
    cb5e:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    cb62:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    cb66:	84c1      	strh	r1, [r0, #38]	; 0x26
    cb68:	8502      	strh	r2, [r0, #40]	; 0x28
    cb6a:	7bb8      	ldrb	r0, [r7, #14]
    cb6c:	b100      	cbz	r0, cb70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>
    cb6e:	2001      	movs	r0, #1
    cb70:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
    cb74:	f8d5 0248 	ldr.w	r0, [r5, #584]	; 0x248
    cb78:	62a0      	str	r0, [r4, #40]	; 0x28
    cb7a:	4620      	mov	r0, r4
    cb7c:	f003 ffff 	bl	10b7e <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>
    cb80:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    cb84:	b120      	cbz	r0, cb90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x120>
    cb86:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    cb8a:	e003      	b.n	cb94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x124>
    cb8c:	2012      	movs	r0, #18
    cb8e:	e780      	b.n	ca92 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cb90:	f641 574c 	movw	r7, #7500	; 0x1d4c
    cb94:	f7fa fc6c 	bl	7470 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    cb98:	b908      	cbnz	r0, cb9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    cb9a:	f7fa fccf 	bl	753c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    cb9e:	4621      	mov	r1, r4
    cba0:	2001      	movs	r0, #1
    cba2:	6067      	str	r7, [r4, #4]
    cba4:	f7ff ff34 	bl	ca10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x218>
    cba8:	b158      	cbz	r0, cbc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x152>
    cbaa:	2101      	movs	r1, #1
    cbac:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    cbb0:	f7f7 fa12 	bl	3fd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    cbb4:	b118      	cbz	r0, cbbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    cbb6:	f241 318a 	movw	r1, #5002	; 0x138a
    cbba:	e02e      	b.n	cc1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cbbc:	e022      	b.n	cc04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>
    cbbe:	2009      	movs	r0, #9
    cbc0:	e767      	b.n	ca92 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cbc2:	f895 0241 	ldrb.w	r0, [r5, #577]	; 0x241
    cbc6:	9000      	str	r0, [sp, #0]
    cbc8:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
    cbcc:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    cbd0:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    cbd4:	8820      	ldrh	r0, [r4, #0]
    cbd6:	f7f7 fac5 	bl	4164 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    cbda:	b110      	cbz	r0, cbe2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x172>
    cbdc:	f241 3195 	movw	r1, #5013	; 0x1395
    cbe0:	e01b      	b.n	cc1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cbe2:	4631      	mov	r1, r6
    cbe4:	4620      	mov	r0, r4
    cbe6:	f7fb fe79 	bl	88dc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    cbea:	b110      	cbz	r0, cbf2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x182>
    cbec:	f241 3197 	movw	r1, #5015	; 0x1397
    cbf0:	e013      	b.n	cc1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cbf2:	480e      	ldr	r0, [pc, #56]	; (cc2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    cbf4:	6843      	ldr	r3, [r0, #4]
    cbf6:	b19b      	cbz	r3, cc20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    cbf8:	2200      	movs	r2, #0
    cbfa:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    cbfe:	4620      	mov	r0, r4
    cc00:	4798      	blx	r3
    cc02:	e00d      	b.n	cc20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    cc04:	b164      	cbz	r4, cc20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    cc06:	8820      	ldrh	r0, [r4, #0]
    cc08:	f7f7 fe40 	bl	488c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    cc0c:	8820      	ldrh	r0, [r4, #0]
    cc0e:	2101      	movs	r1, #1
    cc10:	f7f7 f9e2 	bl	3fd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    cc14:	b120      	cbz	r0, cc20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    cc16:	f241 31af 	movw	r1, #5039	; 0x13af
    cc1a:	2039      	movs	r0, #57	; 0x39
    cc1c:	f7f6 ffb0 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc20:	2000      	movs	r0, #0
    cc22:	e736      	b.n	ca92 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cc24:	200010d4 	.word	0x200010d4
    cc28:	2000159a 	.word	0x2000159a
    cc2c:	2000031c 	.word	0x2000031c
    cc30:	4806      	ldr	r0, [pc, #24]	; (cc4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>)
    cc32:	2100      	movs	r1, #0
    cc34:	f890 2020 	ldrb.w	r2, [r0, #32]
    cc38:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    cc3c:	8091      	strh	r1, [r2, #4]
    cc3e:	f810 1f20 	ldrb.w	r1, [r0, #32]!
    cc42:	1c49      	adds	r1, r1, #1
    cc44:	f001 0101 	and.w	r1, r1, #1
    cc48:	7001      	strb	r1, [r0, #0]
    cc4a:	4770      	bx	lr
    cc4c:	200015ac 	.word	0x200015ac
    cc50:	4806      	ldr	r0, [pc, #24]	; (cc6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>)
    cc52:	2100      	movs	r1, #0
    cc54:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    cc58:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    cc5c:	8291      	strh	r1, [r2, #20]
    cc5e:	f810 1f21 	ldrb.w	r1, [r0, #33]!
    cc62:	1c49      	adds	r1, r1, #1
    cc64:	f001 0101 	and.w	r1, r1, #1
    cc68:	7001      	strb	r1, [r0, #0]
    cc6a:	4770      	bx	lr
    cc6c:	200015ac 	.word	0x200015ac
    cc70:	b510      	push	{r4, lr}
    cc72:	4604      	mov	r4, r0
    cc74:	88c1      	ldrh	r1, [r0, #6]
    cc76:	8880      	ldrh	r0, [r0, #4]
    cc78:	f004 fe98 	bl	119ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
    cc7c:	2800      	cmp	r0, #0
    cc7e:	d10f      	bne.n	cca0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    cc80:	8861      	ldrh	r1, [r4, #2]
    cc82:	8820      	ldrh	r0, [r4, #0]
    cc84:	f004 fe92 	bl	119ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
    cc88:	2800      	cmp	r0, #0
    cc8a:	d109      	bne.n	cca0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    cc8c:	4805      	ldr	r0, [pc, #20]	; (cca4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>)
    cc8e:	88a1      	ldrh	r1, [r4, #4]
    cc90:	8141      	strh	r1, [r0, #10]
    cc92:	8821      	ldrh	r1, [r4, #0]
    cc94:	80c1      	strh	r1, [r0, #6]
    cc96:	88e1      	ldrh	r1, [r4, #6]
    cc98:	8181      	strh	r1, [r0, #12]
    cc9a:	8861      	ldrh	r1, [r4, #2]
    cc9c:	8101      	strh	r1, [r0, #8]
    cc9e:	2000      	movs	r0, #0
    cca0:	bd10      	pop	{r4, pc}
    cca2:	0000      	.short	0x0000
    cca4:	2000159a 	.word	0x2000159a
    cca8:	0b11370b 	.word	0x0b11370b
    ccac:	11370059 	.word	0x11370059

0000ccb0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    ccb0:	b510      	push	{r4, lr}
    ccb2:	4a06      	ldr	r2, [pc, #24]	; (cccc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    ccb4:	4604      	mov	r4, r0
    ccb6:	7010      	strb	r0, [r2, #0]
    ccb8:	6051      	str	r1, [r2, #4]
    ccba:	6890      	ldr	r0, [r2, #8]
    ccbc:	f005 f852 	bl	11d64 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    ccc0:	4620      	mov	r0, r4
    ccc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ccc6:	f7ff bd3b 	b.w	c740 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    ccca:	0000      	.short	0x0000
    cccc:	2000032c 	.word	0x2000032c

0000ccd0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    ccd0:	b510      	push	{r4, lr}
    ccd2:	4c07      	ldr	r4, [pc, #28]	; (ccf0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    ccd4:	68e0      	ldr	r0, [r4, #12]
    ccd6:	f005 f845 	bl	11d64 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    ccda:	6920      	ldr	r0, [r4, #16]
    ccdc:	f005 f842 	bl	11d64 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    cce0:	f7f7 fec0 	bl	4a64 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    cce4:	f7f8 fe0a 	bl	58fc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    cce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ccec:	f7ff bd2e 	b.w	c74c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    ccf0:	2000032c 	.word	0x2000032c

0000ccf4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    ccf4:	b500      	push	{lr}
    ccf6:	4905      	ldr	r1, [pc, #20]	; (cd0c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    ccf8:	4805      	ldr	r0, [pc, #20]	; (cd10 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ccfa:	f004 ffe7 	bl	11ccc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ccfe:	4804      	ldr	r0, [pc, #16]	; (cd10 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    cd00:	4904      	ldr	r1, [pc, #16]	; (cd14 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    cd02:	1d00      	adds	r0, r0, #4
    cd04:	f85d eb04 	ldr.w	lr, [sp], #4
    cd08:	f004 bfe0 	b.w	11ccc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cd0c:	20000340 	.word	0x20000340
    cd10:	20000334 	.word	0x20000334
    cd14:	20000348 	.word	0x20000348

0000cd18 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    cd18:	b500      	push	{lr}
    cd1a:	4908      	ldr	r1, [pc, #32]	; (cd3c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    cd1c:	4808      	ldr	r0, [pc, #32]	; (cd40 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    cd1e:	f004 ffd5 	bl	11ccc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cd22:	4807      	ldr	r0, [pc, #28]	; (cd40 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    cd24:	4907      	ldr	r1, [pc, #28]	; (cd44 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    cd26:	1d00      	adds	r0, r0, #4
    cd28:	f004 ffd0 	bl	11ccc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cd2c:	4804      	ldr	r0, [pc, #16]	; (cd40 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    cd2e:	4906      	ldr	r1, [pc, #24]	; (cd48 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    cd30:	3008      	adds	r0, #8
    cd32:	f85d eb04 	ldr.w	lr, [sp], #4
    cd36:	f004 bfc9 	b.w	11ccc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cd3a:	0000      	.short	0x0000
    cd3c:	20000378 	.word	0x20000378
    cd40:	20000334 	.word	0x20000334
    cd44:	20000380 	.word	0x20000380
    cd48:	20000370 	.word	0x20000370

0000cd4c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    cd4c:	4801      	ldr	r0, [pc, #4]	; (cd54 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    cd4e:	7840      	ldrb	r0, [r0, #1]
    cd50:	4770      	bx	lr
    cd52:	0000      	.short	0x0000
    cd54:	2000032c 	.word	0x2000032c
    cd58:	4807      	ldr	r0, [pc, #28]	; (cd78 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    cd5a:	b510      	push	{r4, lr}
    cd5c:	7800      	ldrb	r0, [r0, #0]
    cd5e:	f7fb fe89 	bl	8a74 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    cd62:	4806      	ldr	r0, [pc, #24]	; (cd7c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    cd64:	f7fa fb00 	bl	7368 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    cd68:	4906      	ldr	r1, [pc, #24]	; (cd84 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    cd6a:	4805      	ldr	r0, [pc, #20]	; (cd80 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    cd6c:	6008      	str	r0, [r1, #0]
    cd6e:	4907      	ldr	r1, [pc, #28]	; (cd8c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x40>)
    cd70:	4805      	ldr	r0, [pc, #20]	; (cd88 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    cd72:	6008      	str	r0, [r1, #0]
    cd74:	bd10      	pop	{r4, pc}
    cd76:	0000      	.short	0x0000
    cd78:	2000032c 	.word	0x2000032c
    cd7c:	20001b3c 	.word	0x20001b3c
    cd80:	00007051 	.word	0x00007051
    cd84:	20000350 	.word	0x20000350
    cd88:	00006829 	.word	0x00006829
    cd8c:	20000354 	.word	0x20000354
    cd90:	b510      	push	{r4, lr}
    cd92:	f7f7 fdfb 	bl	498c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    cd96:	4806      	ldr	r0, [pc, #24]	; (cdb0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x64>)
    cd98:	4904      	ldr	r1, [pc, #16]	; (cdac <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x60>)
    cd9a:	7800      	ldrb	r0, [r0, #0]
    cd9c:	f7f7 fece 	bl	4b3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    cda0:	f004 ffb4 	bl	11d0c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x40>
    cda4:	4904      	ldr	r1, [pc, #16]	; (cdb8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x6c>)
    cda6:	4803      	ldr	r0, [pc, #12]	; (cdb4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x68>)
    cda8:	6008      	str	r0, [r1, #0]
    cdaa:	bd10      	pop	{r4, pc}
    cdac:	20001b3c 	.word	0x20001b3c
    cdb0:	2000032c 	.word	0x2000032c
    cdb4:	00004af1 	.word	0x00004af1
    cdb8:	2000036c 	.word	0x2000036c
    cdbc:	b510      	push	{r4, lr}
    cdbe:	4c08      	ldr	r4, [pc, #32]	; (cde0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    cdc0:	2001      	movs	r0, #1
    cdc2:	7060      	strb	r0, [r4, #1]
    cdc4:	f7fa fbf6 	bl	75b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    cdc8:	7820      	ldrb	r0, [r4, #0]
    cdca:	f7fc fe1d 	bl	9a08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    cdce:	f7ff ffdf 	bl	cd90 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>
    cdd2:	4905      	ldr	r1, [pc, #20]	; (cde8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    cdd4:	4803      	ldr	r0, [pc, #12]	; (cde4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    cdd6:	6008      	str	r0, [r1, #0]
    cdd8:	4905      	ldr	r1, [pc, #20]	; (cdf0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa4>)
    cdda:	4804      	ldr	r0, [pc, #16]	; (cdec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa0>)
    cddc:	6008      	str	r0, [r1, #0]
    cdde:	bd10      	pop	{r4, pc}
    cde0:	2000032c 	.word	0x2000032c
    cde4:	00010cab 	.word	0x00010cab
    cde8:	20000368 	.word	0x20000368
    cdec:	00006889 	.word	0x00006889
    cdf0:	2000035c 	.word	0x2000035c

0000cdf4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    cdf4:	4a07      	ldr	r2, [pc, #28]	; (ce14 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x20>)
    cdf6:	b510      	push	{r4, lr}
    cdf8:	6811      	ldr	r1, [r2, #0]
    cdfa:	fa21 f300 	lsr.w	r3, r1, r0
    cdfe:	07db      	lsls	r3, r3, #31
    ce00:	d003      	beq.n	ce0a <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x16>
    ce02:	211f      	movs	r1, #31
    ce04:	2002      	movs	r0, #2
    ce06:	f7f6 febb 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce0a:	2301      	movs	r3, #1
    ce0c:	4083      	lsls	r3, r0
    ce0e:	430b      	orrs	r3, r1
    ce10:	6013      	str	r3, [r2, #0]
    ce12:	bd10      	pop	{r4, pc}
    ce14:	20000388 	.word	0x20000388

0000ce18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    ce18:	4801      	ldr	r0, [pc, #4]	; (ce20 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    ce1a:	6800      	ldr	r0, [r0, #0]
    ce1c:	4770      	bx	lr
    ce1e:	0000      	.short	0x0000
    ce20:	20000388 	.word	0x20000388

0000ce24 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>:
    ce24:	00c1      	lsls	r1, r0, #3
    ce26:	4802      	ldr	r0, [pc, #8]	; (ce30 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI+0xc>)
    ce28:	6800      	ldr	r0, [r0, #0]
    ce2a:	40c8      	lsrs	r0, r1
    ce2c:	b2c0      	uxtb	r0, r0
    ce2e:	4770      	bx	lr
    ce30:	20000388 	.word	0x20000388

0000ce34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    ce34:	4803      	ldr	r0, [pc, #12]	; (ce44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    ce36:	8800      	ldrh	r0, [r0, #0]
    ce38:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ce3c:	0040      	lsls	r0, r0, #1
    ce3e:	1c40      	adds	r0, r0, #1
    ce40:	4770      	bx	lr
    ce42:	0000      	.short	0x0000
    ce44:	20000388 	.word	0x20000388

0000ce48 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    ce48:	b570      	push	{r4, r5, r6, lr}
    ce4a:	4605      	mov	r5, r0
    ce4c:	4616      	mov	r6, r2
    ce4e:	460c      	mov	r4, r1
    ce50:	2002      	movs	r0, #2
    ce52:	f000 f9b9 	bl	d1c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ce56:	4905      	ldr	r1, [pc, #20]	; (ce6c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    ce58:	2001      	movs	r0, #1
    ce5a:	7008      	strb	r0, [r1, #0]
    ce5c:	4904      	ldr	r1, [pc, #16]	; (ce70 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    ce5e:	1ef0      	subs	r0, r6, #3
    ce60:	6008      	str	r0, [r1, #0]
    ce62:	4804      	ldr	r0, [pc, #16]	; (ce74 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ce64:	6005      	str	r5, [r0, #0]
    ce66:	1f00      	subs	r0, r0, #4
    ce68:	6004      	str	r4, [r0, #0]
    ce6a:	bd70      	pop	{r4, r5, r6, pc}
    ce6c:	200003bf 	.word	0x200003bf
    ce70:	4000f510 	.word	0x4000f510
    ce74:	4000f508 	.word	0x4000f508

0000ce78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    ce78:	4811      	ldr	r0, [pc, #68]	; (cec0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    ce7a:	7801      	ldrb	r1, [r0, #0]
    ce7c:	b1d9      	cbz	r1, ceb6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3e>
    ce7e:	4a11      	ldr	r2, [pc, #68]	; (cec4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    ce80:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    ce84:	6011      	str	r1, [r2, #0]
    ce86:	4910      	ldr	r1, [pc, #64]	; (cec8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    ce88:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    ce8c:	2200      	movs	r2, #0
    ce8e:	2b00      	cmp	r3, #0
    ce90:	bf1c      	itt	ne
    ce92:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    ce96:	2b00      	cmpne	r3, #0
    ce98:	d002      	beq.n	cea0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    ce9a:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    ce9e:	b119      	cbz	r1, cea8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x30>
    cea0:	7042      	strb	r2, [r0, #1]
    cea2:	f04f 0110 	mov.w	r1, #16
    cea6:	e004      	b.n	ceb2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    cea8:	f04f 0101 	mov.w	r1, #1
    ceac:	7041      	strb	r1, [r0, #1]
    ceae:	4907      	ldr	r1, [pc, #28]	; (cecc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x54>)
    ceb0:	6809      	ldr	r1, [r1, #0]
    ceb2:	7081      	strb	r1, [r0, #2]
    ceb4:	7002      	strb	r2, [r0, #0]
    ceb6:	f04f 0000 	mov.w	r0, #0
    ceba:	f000 b985 	b.w	d1c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    cebe:	0000      	.short	0x0000
    cec0:	200003bf 	.word	0x200003bf
    cec4:	4001f508 	.word	0x4001f508
    cec8:	4000f000 	.word	0x4000f000
    cecc:	4000f400 	.word	0x4000f400

0000ced0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    ced0:	b510      	push	{r4, lr}
    ced2:	2002      	movs	r0, #2
    ced4:	f000 f978 	bl	d1c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ced8:	4907      	ldr	r1, [pc, #28]	; (cef8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    ceda:	2001      	movs	r0, #1
    cedc:	7008      	strb	r0, [r1, #0]
    cede:	4907      	ldr	r1, [pc, #28]	; (cefc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    cee0:	2000      	movs	r0, #0
    cee2:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    cee6:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    ceea:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    ceee:	4904      	ldr	r1, [pc, #16]	; (cf00 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    cef0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    cef4:	6008      	str	r0, [r1, #0]
    cef6:	bd10      	pop	{r4, pc}
    cef8:	200003bf 	.word	0x200003bf
    cefc:	4000f000 	.word	0x4000f000
    cf00:	4001f504 	.word	0x4001f504

0000cf04 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    cf04:	4803      	ldr	r0, [pc, #12]	; (cf14 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    cf06:	2100      	movs	r1, #0
    cf08:	7001      	strb	r1, [r0, #0]
    cf0a:	7041      	strb	r1, [r0, #1]
    cf0c:	2110      	movs	r1, #16
    cf0e:	7081      	strb	r1, [r0, #2]
    cf10:	4770      	bx	lr
    cf12:	0000      	.short	0x0000
    cf14:	200003bf 	.word	0x200003bf

0000cf18 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    cf18:	480c      	ldr	r0, [pc, #48]	; (cf4c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    cf1a:	7801      	ldrb	r1, [r0, #0]
    cf1c:	2900      	cmp	r1, #0
    cf1e:	bf04      	itt	eq
    cf20:	7880      	ldrbeq	r0, [r0, #2]
    cf22:	4770      	bxeq	lr
    cf24:	480a      	ldr	r0, [pc, #40]	; (cf50 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    cf26:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    cf2a:	2900      	cmp	r1, #0
    cf2c:	bf1c      	itt	ne
    cf2e:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    cf32:	2900      	cmpne	r1, #0
    cf34:	d002      	beq.n	cf3c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    cf36:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    cf3a:	b110      	cbz	r0, cf42 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    cf3c:	f04f 0010 	mov.w	r0, #16
    cf40:	4770      	bx	lr
    cf42:	4804      	ldr	r0, [pc, #16]	; (cf54 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    cf44:	6800      	ldr	r0, [r0, #0]
    cf46:	b2c0      	uxtb	r0, r0
    cf48:	4770      	bx	lr
    cf4a:	0000      	.short	0x0000
    cf4c:	200003bf 	.word	0x200003bf
    cf50:	4000f000 	.word	0x4000f000
    cf54:	4000f400 	.word	0x4000f400

0000cf58 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    cf58:	480e      	ldr	r0, [pc, #56]	; (cf94 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3c>)
    cf5a:	7801      	ldrb	r1, [r0, #0]
    cf5c:	2900      	cmp	r1, #0
    cf5e:	bf04      	itt	eq
    cf60:	7840      	ldrbeq	r0, [r0, #1]
    cf62:	4770      	bxeq	lr
    cf64:	480c      	ldr	r0, [pc, #48]	; (cf98 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x40>)
    cf66:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    cf6a:	2900      	cmp	r1, #0
    cf6c:	bf04      	itt	eq
    cf6e:	2002      	moveq	r0, #2
    cf70:	4770      	bxeq	lr
    cf72:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    cf76:	2900      	cmp	r1, #0
    cf78:	bf1c      	itt	ne
    cf7a:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    cf7e:	2900      	cmpne	r1, #0
    cf80:	d005      	beq.n	cf8e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x36>
    cf82:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    cf86:	2800      	cmp	r0, #0
    cf88:	bf04      	itt	eq
    cf8a:	2001      	moveq	r0, #1
    cf8c:	4770      	bxeq	lr
    cf8e:	2000      	movs	r0, #0
    cf90:	4770      	bx	lr
    cf92:	0000      	.short	0x0000
    cf94:	200003bf 	.word	0x200003bf
    cf98:	4000f000 	.word	0x4000f000

0000cf9c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    cf9c:	4813      	ldr	r0, [pc, #76]	; (cfec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x50>)
    cf9e:	b510      	push	{r4, lr}
    cfa0:	7802      	ldrb	r2, [r0, #0]
    cfa2:	4b13      	ldr	r3, [pc, #76]	; (cff0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x54>)
    cfa4:	7840      	ldrb	r0, [r0, #1]
    cfa6:	21c8      	movs	r1, #200	; 0xc8
    cfa8:	1e49      	subs	r1, r1, #1
    cfaa:	b2c9      	uxtb	r1, r1
    cfac:	b182      	cbz	r2, cfd0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x34>
    cfae:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    cfb2:	f1bc 0f00 	cmp.w	ip, #0
    cfb6:	d011      	beq.n	cfdc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    cfb8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    cfbc:	2800      	cmp	r0, #0
    cfbe:	bf1c      	itt	ne
    cfc0:	f8d3 0104 	ldrne.w	r0, [r3, #260]	; 0x104
    cfc4:	2800      	cmpne	r0, #0
    cfc6:	d007      	beq.n	cfd8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    cfc8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    cfcc:	b160      	cbz	r0, cfe8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    cfce:	e003      	b.n	cfd8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    cfd0:	2802      	cmp	r0, #2
    cfd2:	d003      	beq.n	cfdc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    cfd4:	2801      	cmp	r0, #1
    cfd6:	d007      	beq.n	cfe8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    cfd8:	2000      	movs	r0, #0
    cfda:	bd10      	pop	{r4, pc}
    cfdc:	2900      	cmp	r1, #0
    cfde:	d1e3      	bne.n	cfa8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    cfe0:	218e      	movs	r1, #142	; 0x8e
    cfe2:	203b      	movs	r0, #59	; 0x3b
    cfe4:	f7f6 fdcc 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfe8:	2001      	movs	r0, #1
    cfea:	bd10      	pop	{r4, pc}
    cfec:	200003bf 	.word	0x200003bf
    cff0:	4000f000 	.word	0x4000f000

0000cff4 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    cff4:	b570      	push	{r4, r5, r6, lr}
    cff6:	4606      	mov	r6, r0
    cff8:	4614      	mov	r4, r2
    cffa:	460d      	mov	r5, r1
    cffc:	2001      	movs	r0, #1
    cffe:	f000 f8e3 	bl	d1c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d002:	4803      	ldr	r0, [pc, #12]	; (d010 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    d004:	6006      	str	r6, [r0, #0]
    d006:	1d00      	adds	r0, r0, #4
    d008:	6004      	str	r4, [r0, #0]
    d00a:	1d00      	adds	r0, r0, #4
    d00c:	6005      	str	r5, [r0, #0]
    d00e:	bd70      	pop	{r4, r5, r6, pc}
    d010:	4000f508 	.word	0x4000f508

0000d014 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    d014:	480a      	ldr	r0, [pc, #40]	; (d040 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    d016:	7801      	ldrb	r1, [r0, #0]
    d018:	b179      	cbz	r1, d03a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x26>
    d01a:	4a0a      	ldr	r2, [pc, #40]	; (d044 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    d01c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    d020:	6011      	str	r1, [r2, #0]
    d022:	4909      	ldr	r1, [pc, #36]	; (d048 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    d024:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    d028:	2100      	movs	r1, #0
    d02a:	2a00      	cmp	r2, #0
    d02c:	bf08      	it	eq
    d02e:	7041      	strbeq	r1, [r0, #1]
    d030:	d002      	beq.n	d038 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    d032:	4a06      	ldr	r2, [pc, #24]	; (d04c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    d034:	6812      	ldr	r2, [r2, #0]
    d036:	7042      	strb	r2, [r0, #1]
    d038:	7001      	strb	r1, [r0, #0]
    d03a:	2000      	movs	r0, #0
    d03c:	f000 b8c4 	b.w	d1c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d040:	200003c2 	.word	0x200003c2
    d044:	4001f508 	.word	0x4001f508
    d048:	4000f000 	.word	0x4000f000
    d04c:	4000f400 	.word	0x4000f400

0000d050 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    d050:	b570      	push	{r4, r5, r6, lr}
    d052:	4604      	mov	r4, r0
    d054:	4817      	ldr	r0, [pc, #92]	; (d0b4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    d056:	460e      	mov	r6, r1
    d058:	2501      	movs	r5, #1
    d05a:	7005      	strb	r5, [r0, #0]
    d05c:	4916      	ldr	r1, [pc, #88]	; (d0b8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    d05e:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    d062:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    d066:	6008      	str	r0, [r1, #0]
    d068:	f001 fc8c 	bl	e984 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d06c:	b928      	cbnz	r0, d07a <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2a>
    d06e:	4813      	ldr	r0, [pc, #76]	; (d0bc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    d070:	6801      	ldr	r1, [r0, #0]
    d072:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    d076:	4331      	orrs	r1, r6
    d078:	6001      	str	r1, [r0, #0]
    d07a:	4911      	ldr	r1, [pc, #68]	; (d0c0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x70>)
    d07c:	2000      	movs	r0, #0
    d07e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    d082:	4b10      	ldr	r3, [pc, #64]	; (d0c4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x74>)
    d084:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    d088:	601a      	str	r2, [r3, #0]
    d08a:	2c00      	cmp	r4, #0
    d08c:	bf02      	ittt	eq
    d08e:	f8c1 5200 	streq.w	r5, [r1, #512]	; 0x200
    d092:	600d      	streq	r5, [r1, #0]
    d094:	bd70      	popeq	{r4, r5, r6, pc}
    d096:	2c01      	cmp	r4, #1
    d098:	d003      	beq.n	d0a2 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    d09a:	2174      	movs	r1, #116	; 0x74
    d09c:	203c      	movs	r0, #60	; 0x3c
    d09e:	f7f6 fd6f 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0a2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    d0a6:	600d      	str	r5, [r1, #0]
    d0a8:	4907      	ldr	r1, [pc, #28]	; (d0c8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x78>)
    d0aa:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    d0ae:	6008      	str	r0, [r1, #0]
    d0b0:	bd70      	pop	{r4, r5, r6, pc}
    d0b2:	0000      	.short	0x0000
    d0b4:	200003c2 	.word	0x200003c2
    d0b8:	4000f504 	.word	0x4000f504
    d0bc:	4000f518 	.word	0x4000f518
    d0c0:	4000f000 	.word	0x4000f000
    d0c4:	4001f508 	.word	0x4001f508
    d0c8:	4001f504 	.word	0x4001f504

0000d0cc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    d0cc:	4802      	ldr	r0, [pc, #8]	; (d0d8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    d0ce:	2100      	movs	r1, #0
    d0d0:	7001      	strb	r1, [r0, #0]
    d0d2:	7041      	strb	r1, [r0, #1]
    d0d4:	4770      	bx	lr
    d0d6:	0000      	.short	0x0000
    d0d8:	200003c2 	.word	0x200003c2

0000d0dc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    d0dc:	4807      	ldr	r0, [pc, #28]	; (d0fc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    d0de:	7801      	ldrb	r1, [r0, #0]
    d0e0:	2900      	cmp	r1, #0
    d0e2:	bf04      	itt	eq
    d0e4:	7840      	ldrbeq	r0, [r0, #1]
    d0e6:	4770      	bxeq	lr
    d0e8:	4805      	ldr	r0, [pc, #20]	; (d100 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    d0ea:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    d0ee:	2800      	cmp	r0, #0
    d0f0:	bf08      	it	eq
    d0f2:	4770      	bxeq	lr
    d0f4:	4803      	ldr	r0, [pc, #12]	; (d104 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x28>)
    d0f6:	6800      	ldr	r0, [r0, #0]
    d0f8:	b2c0      	uxtb	r0, r0
    d0fa:	4770      	bx	lr
    d0fc:	200003c2 	.word	0x200003c2
    d100:	4000f000 	.word	0x4000f000
    d104:	4000f400 	.word	0x4000f400

0000d108 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    d108:	4901      	ldr	r1, [pc, #4]	; (d110 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    d10a:	2001      	movs	r0, #1
    d10c:	6088      	str	r0, [r1, #8]
    d10e:	4770      	bx	lr
    d110:	4000f000 	.word	0x4000f000

0000d114 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    d114:	2800      	cmp	r0, #0
    d116:	bf08      	it	eq
    d118:	4770      	bxeq	lr
    d11a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d11e:	481b      	ldr	r0, [pc, #108]	; (d18c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>)
    d120:	7800      	ldrb	r0, [r0, #0]
    d122:	b1e0      	cbz	r0, d15e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4a>
    d124:	4c1a      	ldr	r4, [pc, #104]	; (d190 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    d126:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d12a:	2800      	cmp	r0, #0
    d12c:	bf18      	it	ne
    d12e:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d132:	f04f 0902 	mov.w	r9, #2
    d136:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    d13a:	4f16      	ldr	r7, [pc, #88]	; (d194 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    d13c:	6838      	ldr	r0, [r7, #0]
    d13e:	f3c0 1800 	ubfx	r8, r0, #4, #1
    d142:	6838      	ldr	r0, [r7, #0]
    d144:	f040 0010 	orr.w	r0, r0, #16
    d148:	6038      	str	r0, [r7, #0]
    d14a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d14e:	2800      	cmp	r0, #0
    d150:	bf04      	itt	eq
    d152:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
    d156:	f04f 26e0 	moveq.w	r6, #3758153728	; 0xe000e000
    d15a:	d10c      	bne.n	d176 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    d15c:	e003      	b.n	d166 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    d15e:	21d3      	movs	r1, #211	; 0xd3
    d160:	203c      	movs	r0, #60	; 0x3c
    d162:	f7f6 fd0d 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d166:	f8c6 5280 	str.w	r5, [r6, #640]	; 0x280
    d16a:	f7f6 fb4f 	bl	380c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    d16e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d172:	2800      	cmp	r0, #0
    d174:	d0f7      	beq.n	d166 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    d176:	f1b8 0f00 	cmp.w	r8, #0
    d17a:	d103      	bne.n	d184 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    d17c:	6838      	ldr	r0, [r7, #0]
    d17e:	f020 0010 	bic.w	r0, r0, #16
    d182:	6038      	str	r0, [r7, #0]
    d184:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    d188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d18c:	200003c2 	.word	0x200003c2
    d190:	4000f000 	.word	0x4000f000
    d194:	e000ed10 	.word	0xe000ed10

0000d198 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    d198:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    d19c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    d1a0:	2000      	movs	r0, #0
    d1a2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    d1a6:	f3bf 8f4f 	dsb	sy
    d1aa:	f3bf 8f6f 	isb	sy
    d1ae:	4904      	ldr	r1, [pc, #16]	; (d1c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x28>)
    d1b0:	6008      	str	r0, [r1, #0]
    d1b2:	6008      	str	r0, [r1, #0]
    d1b4:	4903      	ldr	r1, [pc, #12]	; (d1c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    d1b6:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    d1ba:	6008      	str	r0, [r1, #0]
    d1bc:	4770      	bx	lr
    d1be:	0000      	.short	0x0000
    d1c0:	4000f500 	.word	0x4000f500
    d1c4:	4001f508 	.word	0x4001f508

0000d1c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    d1c8:	4912      	ldr	r1, [pc, #72]	; (d214 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    d1ca:	b510      	push	{r4, lr}
    d1cc:	2200      	movs	r2, #0
    d1ce:	600a      	str	r2, [r1, #0]
    d1d0:	600a      	str	r2, [r1, #0]
    d1d2:	4b11      	ldr	r3, [pc, #68]	; (d218 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    d1d4:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
    d1d8:	601a      	str	r2, [r3, #0]
    d1da:	2800      	cmp	r0, #0
    d1dc:	bf08      	it	eq
    d1de:	bd10      	popeq	{r4, pc}
    d1e0:	4a0e      	ldr	r2, [pc, #56]	; (d21c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    d1e2:	4b0f      	ldr	r3, [pc, #60]	; (d220 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    d1e4:	f8df c03c 	ldr.w	ip, [pc, #60]	; d224 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x5c>
    d1e8:	2801      	cmp	r0, #1
    d1ea:	d005      	beq.n	d1f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    d1ec:	2802      	cmp	r0, #2
    d1ee:	d008      	beq.n	d202 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    d1f0:	217d      	movs	r1, #125	; 0x7d
    d1f2:	203d      	movs	r0, #61	; 0x3d
    d1f4:	f7f6 fcc4 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1f8:	2002      	movs	r0, #2
    d1fa:	6008      	str	r0, [r1, #0]
    d1fc:	601a      	str	r2, [r3, #0]
    d1fe:	0600      	lsls	r0, r0, #24
    d200:	e004      	b.n	d20c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    d202:	2003      	movs	r0, #3
    d204:	6008      	str	r0, [r1, #0]
    d206:	601a      	str	r2, [r3, #0]
    d208:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    d20c:	f8cc 0000 	str.w	r0, [ip]
    d210:	bd10      	pop	{r4, pc}
    d212:	0000      	.short	0x0000
    d214:	4000f500 	.word	0x4000f500
    d218:	4001f508 	.word	0x4001f508
    d21c:	20001c3e 	.word	0x20001c3e
    d220:	4000f514 	.word	0x4000f514
    d224:	4001f504 	.word	0x4001f504

0000d228 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    d228:	4805      	ldr	r0, [pc, #20]	; (d240 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    d22a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d22e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    d232:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d236:	4903      	ldr	r1, [pc, #12]	; (d244 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    d238:	2000      	movs	r0, #0
    d23a:	6008      	str	r0, [r1, #0]
    d23c:	4770      	bx	lr
    d23e:	0000      	.short	0x0000
    d240:	40001000 	.word	0x40001000
    d244:	40001560 	.word	0x40001560

0000d248 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    d248:	4904      	ldr	r1, [pc, #16]	; (d25c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    d24a:	6008      	str	r0, [r1, #0]
    d24c:	4804      	ldr	r0, [pc, #16]	; (d260 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    d24e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d252:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    d256:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d25a:	4770      	bx	lr
    d25c:	40001560 	.word	0x40001560
    d260:	40001000 	.word	0x40001000

0000d264 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>:
    d264:	00c2      	lsls	r2, r0, #3
    d266:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d26a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    d26e:	4b07      	ldr	r3, [pc, #28]	; (d28c <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x28>)
    d270:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    d274:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    d278:	2101      	movs	r1, #1
    d27a:	fa01 f000 	lsl.w	r0, r1, r0
    d27e:	4904      	ldr	r1, [pc, #16]	; (d290 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x2c>)
    d280:	6008      	str	r0, [r1, #0]
    d282:	4904      	ldr	r1, [pc, #16]	; (d294 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x30>)
    d284:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    d286:	4310      	orrs	r0, r2
    d288:	6388      	str	r0, [r1, #56]	; 0x38
    d28a:	4770      	bx	lr
    d28c:	40001104 	.word	0x40001104
    d290:	4001f504 	.word	0x4001f504
    d294:	200017e0 	.word	0x200017e0

0000d298 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    d298:	4801      	ldr	r0, [pc, #4]	; (d2a0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    d29a:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    d29e:	4770      	bx	lr
    d2a0:	200017e0 	.word	0x200017e0

0000d2a4 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    d2a4:	4a01      	ldr	r2, [pc, #4]	; (d2ac <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    d2a6:	7051      	strb	r1, [r2, #1]
    d2a8:	7010      	strb	r0, [r2, #0]
    d2aa:	4770      	bx	lr
    d2ac:	200017e0 	.word	0x200017e0

0000d2b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    d2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d2b4:	f7f6 fb1a 	bl	38ec <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    d2b8:	f7f6 fb7c 	bl	39b4 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    d2bc:	4b30      	ldr	r3, [pc, #192]	; (d380 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd0>)
    d2be:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    d2c2:	2610      	movs	r6, #16
    d2c4:	f3c1 1500 	ubfx	r5, r1, #4, #1
    d2c8:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
    d2cc:	2102      	movs	r1, #2
    d2ce:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    d2d2:	4a2c      	ldr	r2, [pc, #176]	; (d384 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd4>)
    d2d4:	4f2d      	ldr	r7, [pc, #180]	; (d38c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xdc>)
    d2d6:	f04f 0c00 	mov.w	ip, #0
    d2da:	f882 c03c 	strb.w	ip, [r2, #60]	; 0x3c
    d2de:	492a      	ldr	r1, [pc, #168]	; (d388 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd8>)
    d2e0:	6039      	str	r1, [r7, #0]
    d2e2:	7ad1      	ldrb	r1, [r2, #11]
    d2e4:	2401      	movs	r4, #1
    d2e6:	2901      	cmp	r1, #1
    d2e8:	d002      	beq.n	d2f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x40>
    d2ea:	2902      	cmp	r1, #2
    d2ec:	d003      	beq.n	d2f6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    d2ee:	e017      	b.n	d320 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d2f0:	7e11      	ldrb	r1, [r2, #24]
    d2f2:	b911      	cbnz	r1, d2fa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4a>
    d2f4:	e014      	b.n	d320 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d2f6:	7e51      	ldrb	r1, [r2, #25]
    d2f8:	b191      	cbz	r1, d320 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d2fa:	7f91      	ldrb	r1, [r2, #30]
    d2fc:	f892 801f 	ldrb.w	r8, [r2, #31]
    d300:	fa04 f101 	lsl.w	r1, r4, r1
    d304:	fa04 f808 	lsl.w	r8, r4, r8
    d308:	ea41 0108 	orr.w	r1, r1, r8
    d30c:	6039      	str	r1, [r7, #0]
    d30e:	f892 1020 	ldrb.w	r1, [r2, #32]
    d312:	0089      	lsls	r1, r1, #2
    d314:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    d318:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    d31c:	f8c1 c510 	str.w	ip, [r1, #1296]	; 0x510
    d320:	491b      	ldr	r1, [pc, #108]	; (d390 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xe0>)
    d322:	6809      	ldr	r1, [r1, #0]
    d324:	b1a9      	cbz	r1, d352 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xa2>
    d326:	21ff      	movs	r1, #255	; 0xff
    d328:	f88d 1000 	strb.w	r1, [sp]
    d32c:	f8c3 c110 	str.w	ip, [r3, #272]	; 0x110
    d330:	611c      	str	r4, [r3, #16]
    d332:	e004      	b.n	d33e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8e>
    d334:	f89d 1000 	ldrb.w	r1, [sp]
    d338:	1e49      	subs	r1, r1, #1
    d33a:	f88d 1000 	strb.w	r1, [sp]
    d33e:	f89d 1000 	ldrb.w	r1, [sp]
    d342:	b119      	cbz	r1, d34c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>
    d344:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    d348:	2900      	cmp	r1, #0
    d34a:	d0f3      	beq.n	d334 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    d34c:	f89d 1000 	ldrb.w	r1, [sp]
    d350:	b189      	cbz	r1, d376 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xc6>
    d352:	f8c3 c110 	str.w	ip, [r3, #272]	; 0x110
    d356:	f882 c009 	strb.w	ip, [r2, #9]
    d35a:	f882 c00a 	strb.w	ip, [r2, #10]
    d35e:	f882 c00b 	strb.w	ip, [r2, #11]
    d362:	7314      	strb	r4, [r2, #12]
    d364:	2d00      	cmp	r5, #0
    d366:	bf18      	it	ne
    d368:	f8c3 6304 	strne.w	r6, [r3, #772]	; 0x304
    d36c:	2800      	cmp	r0, #0
    d36e:	bf18      	it	ne
    d370:	611c      	strne	r4, [r3, #16]
    d372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d376:	f240 6183 	movw	r1, #1667	; 0x683
    d37a:	203e      	movs	r0, #62	; 0x3e
    d37c:	f7f6 fc00 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d380:	40001000 	.word	0x40001000
    d384:	200017e0 	.word	0x200017e0
    d388:	040e0000 	.word	0x040e0000
    d38c:	4001f508 	.word	0x4001f508
    d390:	40001550 	.word	0x40001550

0000d394 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d398:	f8df a290 	ldr.w	sl, [pc, #656]	; d62c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x298>
    d39c:	4607      	mov	r7, r0
    d39e:	b087      	sub	sp, #28
    d3a0:	48a1      	ldr	r0, [pc, #644]	; (d628 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    d3a2:	460d      	mov	r5, r1
    d3a4:	f8ca 0000 	str.w	r0, [sl]
    d3a8:	4ca1      	ldr	r4, [pc, #644]	; (d630 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x29c>)
    d3aa:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    d3ae:	f040 0002 	orr.w	r0, r0, #2
    d3b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    d3b6:	4608      	mov	r0, r1
    d3b8:	f001 f9a4 	bl	e704 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    d3bc:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    d3c0:	2925      	cmp	r1, #37	; 0x25
    d3c2:	bf08      	it	eq
    d3c4:	2002      	moveq	r0, #2
    d3c6:	d00f      	beq.n	d3e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d3c8:	2926      	cmp	r1, #38	; 0x26
    d3ca:	bf08      	it	eq
    d3cc:	201a      	moveq	r0, #26
    d3ce:	d00b      	beq.n	d3e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d3d0:	2927      	cmp	r1, #39	; 0x27
    d3d2:	bf08      	it	eq
    d3d4:	2050      	moveq	r0, #80	; 0x50
    d3d6:	d007      	beq.n	d3e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d3d8:	290a      	cmp	r1, #10
    d3da:	4608      	mov	r0, r1
    d3dc:	bf94      	ite	ls
    d3de:	2204      	movls	r2, #4
    d3e0:	2206      	movhi	r2, #6
    d3e2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d3e6:	b2c0      	uxtb	r0, r0
    d3e8:	4a92      	ldr	r2, [pc, #584]	; (d634 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a0>)
    d3ea:	6010      	str	r0, [r2, #0]
    d3ec:	4892      	ldr	r0, [pc, #584]	; (d638 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a4>)
    d3ee:	6001      	str	r1, [r0, #0]
    d3f0:	4e92      	ldr	r6, [pc, #584]	; (d63c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a8>)
    d3f2:	f04f 0800 	mov.w	r8, #0
    d3f6:	f04f 0b01 	mov.w	fp, #1
    d3fa:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    d3fe:	b117      	cbz	r7, d406 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x72>
    d400:	2f01      	cmp	r7, #1
    d402:	d04d      	beq.n	d4a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x10c>
    d404:	e094      	b.n	d530 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d406:	2d01      	cmp	r5, #1
    d408:	bf08      	it	eq
    d40a:	2000      	moveq	r0, #0
    d40c:	d00b      	beq.n	d426 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d40e:	2d02      	cmp	r5, #2
    d410:	bf08      	it	eq
    d412:	2001      	moveq	r0, #1
    d414:	d007      	beq.n	d426 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d416:	2d04      	cmp	r5, #4
    d418:	bf08      	it	eq
    d41a:	2003      	moveq	r0, #3
    d41c:	d003      	beq.n	d426 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d41e:	2d08      	cmp	r5, #8
    d420:	bf08      	it	eq
    d422:	2002      	moveq	r0, #2
    d424:	d150      	bne.n	d4c8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x134>
    d426:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    d42a:	ab05      	add	r3, sp, #20
    d42c:	f7f2 ffd0 	bl	3d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    d430:	2800      	cmp	r0, #0
    d432:	d154      	bne.n	d4de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
    d434:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    d438:	f001 f95e 	bl	e6f8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    d43c:	7a60      	ldrb	r0, [r4, #9]
    d43e:	2801      	cmp	r0, #1
    d440:	d105      	bne.n	d44e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xba>
    d442:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d446:	f040 0008 	orr.w	r0, r0, #8
    d44a:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d44e:	f001 fab5 	bl	e9bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d452:	b178      	cbz	r0, d474 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>
    d454:	497a      	ldr	r1, [pc, #488]	; (d640 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2ac>)
    d456:	680a      	ldr	r2, [r1, #0]
    d458:	0648      	lsls	r0, r1, #25
    d45a:	2d02      	cmp	r5, #2
    d45c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    d460:	bf0c      	ite	eq
    d462:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    d466:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    d46a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    d46e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    d472:	6008      	str	r0, [r1, #0]
    d474:	f884 b00b 	strb.w	fp, [r4, #11]
    d478:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d47a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    d47e:	63a0      	str	r0, [r4, #56]	; 0x38
    d480:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d484:	f8ca 0000 	str.w	r0, [sl]
    d488:	2d02      	cmp	r5, #2
    d48a:	bf0c      	ite	eq
    d48c:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    d490:	f640 0034 	movwne	r0, #2100	; 0x834
    d494:	f649 71ec 	movw	r1, #40940	; 0x9fec
    d498:	4408      	add	r0, r1
    d49a:	fbb0 f8f9 	udiv	r8, r0, r9
    d49e:	e047      	b.n	d530 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d4a0:	7aa0      	ldrb	r0, [r4, #10]
    d4a2:	2801      	cmp	r0, #1
    d4a4:	d124      	bne.n	d4f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    d4a6:	7b60      	ldrb	r0, [r4, #13]
    d4a8:	2801      	cmp	r0, #1
    d4aa:	bf08      	it	eq
    d4ac:	2000      	moveq	r0, #0
    d4ae:	d010      	beq.n	d4d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d4b0:	2802      	cmp	r0, #2
    d4b2:	bf08      	it	eq
    d4b4:	2001      	moveq	r0, #1
    d4b6:	d00c      	beq.n	d4d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d4b8:	2804      	cmp	r0, #4
    d4ba:	bf08      	it	eq
    d4bc:	2003      	moveq	r0, #3
    d4be:	d008      	beq.n	d4d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d4c0:	2808      	cmp	r0, #8
    d4c2:	bf08      	it	eq
    d4c4:	2002      	moveq	r0, #2
    d4c6:	d004      	beq.n	d4d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d4c8:	f240 31f3 	movw	r1, #1011	; 0x3f3
    d4cc:	2006      	movs	r0, #6
    d4ce:	f7f6 fb57 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4d2:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    d4d6:	ab05      	add	r3, sp, #20
    d4d8:	f7f2 ff7a 	bl	3d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    d4dc:	b120      	cbz	r0, d4e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    d4de:	f240 31d5 	movw	r1, #981	; 0x3d5
    d4e2:	203e      	movs	r0, #62	; 0x3e
    d4e4:	f7f6 fb4c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4e8:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    d4ec:	f001 f904 	bl	e6f8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    d4f0:	7a60      	ldrb	r0, [r4, #9]
    d4f2:	2801      	cmp	r0, #1
    d4f4:	d105      	bne.n	d502 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    d4f6:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d4fa:	f040 0004 	orr.w	r0, r0, #4
    d4fe:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d502:	2002      	movs	r0, #2
    d504:	72e0      	strb	r0, [r4, #11]
    d506:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d508:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    d50c:	63a0      	str	r0, [r4, #56]	; 0x38
    d50e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    d512:	f8ca 0000 	str.w	r0, [sl]
    d516:	f04f 0829 	mov.w	r8, #41	; 0x29
    d51a:	f001 fa4f 	bl	e9bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d51e:	b938      	cbnz	r0, d530 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d520:	f001 fa3c 	bl	e99c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    d524:	b920      	cbnz	r0, d530 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d526:	4847      	ldr	r0, [pc, #284]	; (d644 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b0>)
    d528:	6801      	ldr	r1, [r0, #0]
    d52a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    d52e:	6001      	str	r1, [r0, #0]
    d530:	7a60      	ldrb	r0, [r4, #9]
    d532:	2800      	cmp	r0, #0
    d534:	bf04      	itt	eq
    d536:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    d53a:	f040 0002 	orreq.w	r0, r0, #2
    d53e:	d006      	beq.n	d54e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1ba>
    d540:	2801      	cmp	r0, #1
    d542:	bf04      	itt	eq
    d544:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    d548:	f040 0004 	orreq.w	r0, r0, #4
    d54c:	d101      	bne.n	d552 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1be>
    d54e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    d552:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    d556:	f010 0f01 	tst.w	r0, #1
    d55a:	d027      	beq.n	d5ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    d55c:	f010 0f02 	tst.w	r0, #2
    d560:	d018      	beq.n	d594 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x200>
    d562:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d566:	f040 0001 	orr.w	r0, r0, #1
    d56a:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d56e:	4836      	ldr	r0, [pc, #216]	; (d648 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b4>)
    d570:	6801      	ldr	r1, [r0, #0]
    d572:	290b      	cmp	r1, #11
    d574:	bf1c      	itt	ne
    d576:	6801      	ldrne	r1, [r0, #0]
    d578:	290a      	cmpne	r1, #10
    d57a:	d005      	beq.n	d588 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1f4>
    d57c:	6801      	ldr	r1, [r0, #0]
    d57e:	2903      	cmp	r1, #3
    d580:	bf1c      	itt	ne
    d582:	6800      	ldrne	r0, [r0, #0]
    d584:	2802      	cmpne	r0, #2
    d586:	d111      	bne.n	d5ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    d588:	f240 414c 	movw	r1, #1100	; 0x44c
    d58c:	f04f 003e 	mov.w	r0, #62	; 0x3e
    d590:	f7f6 faf6 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d594:	f010 0f04 	tst.w	r0, #4
    d598:	d008      	beq.n	d5ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    d59a:	492d      	ldr	r1, [pc, #180]	; (d650 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2bc>)
    d59c:	482b      	ldr	r0, [pc, #172]	; (d64c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b8>)
    d59e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    d5a2:	482c      	ldr	r0, [pc, #176]	; (d654 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c0>)
    d5a4:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    d5a8:	2801      	cmp	r0, #1
    d5aa:	d031      	beq.n	d610 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x27c>
    d5ac:	f001 f8d2 	bl	e754 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    d5b0:	6800      	ldr	r0, [r0, #0]
    d5b2:	2801      	cmp	r0, #1
    d5b4:	d031      	beq.n	d61a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x286>
    d5b6:	2f01      	cmp	r7, #1
    d5b8:	bf08      	it	eq
    d5ba:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    d5be:	d008      	beq.n	d5d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x23e>
    d5c0:	2d02      	cmp	r5, #2
    d5c2:	bf0c      	ite	eq
    d5c4:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    d5c8:	f640 0034 	movwne	r0, #2100	; 0x834
    d5cc:	f24a 0150 	movw	r1, #41040	; 0xa050
    d5d0:	4408      	add	r0, r1
    d5d2:	fbb0 f0f9 	udiv	r0, r0, r9
    d5d6:	4920      	ldr	r1, [pc, #128]	; (d658 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c4>)
    d5d8:	6809      	ldr	r1, [r1, #0]
    d5da:	4a20      	ldr	r2, [pc, #128]	; (d65c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c8>)
    d5dc:	2f01      	cmp	r7, #1
    d5de:	f102 0314 	add.w	r3, r2, #20
    d5e2:	e893 1038 	ldmia.w	r3, {r3, r4, r5, ip}
    d5e6:	e88d 1038 	stmia.w	sp, {r3, r4, r5, ip}
    d5ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
    d5ec:	9204      	str	r2, [sp, #16]
    d5ee:	bf14      	ite	ne
    d5f0:	2201      	movne	r2, #1
    d5f2:	2200      	moveq	r2, #0
    d5f4:	f88d 2001 	strb.w	r2, [sp, #1]
    d5f8:	e9cd 1003 	strd	r1, r0, [sp, #12]
    d5fc:	4668      	mov	r0, sp
    d5fe:	f7f6 f9c3 	bl	3988 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    d602:	2000      	movs	r0, #0
    d604:	f000 ffe4 	bl	e5d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    d608:	b007      	add	sp, #28
    d60a:	4640      	mov	r0, r8
    d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d610:	f240 4153 	movw	r1, #1107	; 0x453
    d614:	203e      	movs	r0, #62	; 0x3e
    d616:	f7f6 fab3 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d61a:	f7ff fe49 	bl	d2b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    d61e:	b007      	add	sp, #28
    d620:	2000      	movs	r0, #0
    d622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d626:	0000      	.short	0x0000
    d628:	04040000 	.word	0x04040000
    d62c:	4001f504 	.word	0x4001f504
    d630:	200017e0 	.word	0x200017e0
    d634:	40001508 	.word	0x40001508
    d638:	40001554 	.word	0x40001554
    d63c:	40001000 	.word	0x40001000
    d640:	40001588 	.word	0x40001588
    d644:	40001568 	.word	0x40001568
    d648:	40001550 	.word	0x40001550
    d64c:	40001008 	.word	0x40001008
    d650:	4001f098 	.word	0x4001f098
    d654:	40008000 	.word	0x40008000
    d658:	40008540 	.word	0x40008540
    d65c:	0000e6a8 	.word	0x0000e6a8

0000d660 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    d660:	b410      	push	{r4}
    d662:	e890 101c 	ldmia.w	r0, {r2, r3, r4, ip}
    d666:	4903      	ldr	r1, [pc, #12]	; (d674 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x14>)
    d668:	e881 101c 	stmia.w	r1, {r2, r3, r4, ip}
    d66c:	6900      	ldr	r0, [r0, #16]
    d66e:	6108      	str	r0, [r1, #16]
    d670:	bc10      	pop	{r4}
    d672:	4770      	bx	lr
    d674:	200017cc 	.word	0x200017cc

0000d678 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    d678:	4914      	ldr	r1, [pc, #80]	; (d6cc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x54>)
    d67a:	b510      	push	{r4, lr}
    d67c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    d67e:	4282      	cmp	r2, r0
    d680:	d304      	bcc.n	d68c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
    d682:	f240 61ec 	movw	r1, #1772	; 0x6ec
    d686:	203e      	movs	r0, #62	; 0x3e
    d688:	f7f6 fa7a 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d68c:	2201      	movs	r2, #1
    d68e:	f8df c040 	ldr.w	ip, [pc, #64]	; d6d0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x58>
    d692:	740a      	strb	r2, [r1, #16]
    d694:	6148      	str	r0, [r1, #20]
    d696:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
    d69a:	4b0e      	ldr	r3, [pc, #56]	; (d6d4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
    d69c:	681c      	ldr	r4, [r3, #0]
    d69e:	1d64      	adds	r4, r4, #5
    d6a0:	4284      	cmp	r4, r0
    d6a2:	d306      	bcc.n	d6b2 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3a>
    d6a4:	480c      	ldr	r0, [pc, #48]	; (d6d8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>)
    d6a6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    d6aa:	2900      	cmp	r1, #0
    d6ac:	bf08      	it	eq
    d6ae:	6102      	streq	r2, [r0, #16]
    d6b0:	bd10      	pop	{r4, pc}
    d6b2:	2200      	movs	r2, #0
    d6b4:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
    d6b8:	6018      	str	r0, [r3, #0]
    d6ba:	6b88      	ldr	r0, [r1, #56]	; 0x38
    d6bc:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    d6c0:	6388      	str	r0, [r1, #56]	; 0x38
    d6c2:	4906      	ldr	r1, [pc, #24]	; (d6dc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
    d6c4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    d6c8:	6008      	str	r0, [r1, #0]
    d6ca:	bd10      	pop	{r4, pc}
    d6cc:	200017e0 	.word	0x200017e0
    d6d0:	40008000 	.word	0x40008000
    d6d4:	40008544 	.word	0x40008544
    d6d8:	40001000 	.word	0x40001000
    d6dc:	4001f504 	.word	0x4001f504

0000d6e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    d6e0:	b510      	push	{r4, lr}
    d6e2:	4c19      	ldr	r4, [pc, #100]	; (d748 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x68>)
    d6e4:	4603      	mov	r3, r0
    d6e6:	2002      	movs	r0, #2
    d6e8:	4918      	ldr	r1, [pc, #96]	; (d74c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x6c>)
    d6ea:	7420      	strb	r0, [r4, #16]
    d6ec:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    d6f0:	680a      	ldr	r2, [r1, #0]
    d6f2:	f002 020f 	and.w	r2, r2, #15
    d6f6:	2a03      	cmp	r2, #3
    d6f8:	bf08      	it	eq
    d6fa:	2201      	moveq	r2, #1
    d6fc:	d00b      	beq.n	d716 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x36>
    d6fe:	6809      	ldr	r1, [r1, #0]
    d700:	f001 010f 	and.w	r1, r1, #15
    d704:	2904      	cmp	r1, #4
    d706:	bf08      	it	eq
    d708:	2202      	moveq	r2, #2
    d70a:	d004      	beq.n	d716 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x36>
    d70c:	f240 11d7 	movw	r1, #471	; 0x1d7
    d710:	203e      	movs	r0, #62	; 0x3e
    d712:	f7f6 fa35 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d716:	490c      	ldr	r1, [pc, #48]	; (d748 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x68>)
    d718:	f894 c031 	ldrb.w	ip, [r4, #49]	; 0x31
    d71c:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
    d720:	f1bc 0f01 	cmp.w	ip, #1
    d724:	d00c      	beq.n	d740 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x60>
    d726:	f004 fb6d 	bl	11e04 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    d72a:	4909      	ldr	r1, [pc, #36]	; (d750 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x70>)
    d72c:	6160      	str	r0, [r4, #20]
    d72e:	2000      	movs	r0, #0
    d730:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    d734:	6961      	ldr	r1, [r4, #20]
    d736:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d738:	4408      	add	r0, r1
    d73a:	4906      	ldr	r1, [pc, #24]	; (d754 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x74>)
    d73c:	6008      	str	r0, [r1, #0]
    d73e:	bd10      	pop	{r4, pc}
    d740:	f004 fb7c 	bl	11e3c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    d744:	e7f1      	b.n	d72a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4a>
    d746:	0000      	.short	0x0000
    d748:	200017e0 	.word	0x200017e0
    d74c:	40001510 	.word	0x40001510
    d750:	40008000 	.word	0x40008000
    d754:	40008544 	.word	0x40008544

0000d758 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    d758:	4803      	ldr	r0, [pc, #12]	; (d768 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x10>)
    d75a:	6801      	ldr	r1, [r0, #0]
    d75c:	f021 0101 	bic.w	r1, r1, #1
    d760:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    d764:	6001      	str	r1, [r0, #0]
    d766:	4770      	bx	lr
    d768:	40001774 	.word	0x40001774

0000d76c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>:
    d76c:	b510      	push	{r4, lr}
    d76e:	2896      	cmp	r0, #150	; 0x96
    d770:	bf9e      	ittt	ls
    d772:	4904      	ldrls	r1, [pc, #16]	; (d784 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY+0x18>)
    d774:	f881 0023 	strbls.w	r0, [r1, #35]	; 0x23
    d778:	bd10      	popls	{r4, pc}
    d77a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    d77e:	203e      	movs	r0, #62	; 0x3e
    d780:	f7f6 f9fe 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d784:	200017e0 	.word	0x200017e0

0000d788 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d78c:	4822      	ldr	r0, [pc, #136]	; (d818 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x90>)
    d78e:	2400      	movs	r4, #0
    d790:	2101      	movs	r1, #1
    d792:	6144      	str	r4, [r0, #20]
    d794:	6184      	str	r4, [r0, #24]
    d796:	61c4      	str	r4, [r0, #28]
    d798:	6204      	str	r4, [r0, #32]
    d79a:	6244      	str	r4, [r0, #36]	; 0x24
    d79c:	6284      	str	r4, [r0, #40]	; 0x28
    d79e:	62c4      	str	r4, [r0, #44]	; 0x2c
    d7a0:	6304      	str	r4, [r0, #48]	; 0x30
    d7a2:	6344      	str	r4, [r0, #52]	; 0x34
    d7a4:	6384      	str	r4, [r0, #56]	; 0x38
    d7a6:	63c4      	str	r4, [r0, #60]	; 0x3c
    d7a8:	6404      	str	r4, [r0, #64]	; 0x40
    d7aa:	6444      	str	r4, [r0, #68]	; 0x44
    d7ac:	6484      	str	r4, [r0, #72]	; 0x48
    d7ae:	64c4      	str	r4, [r0, #76]	; 0x4c
    d7b0:	6504      	str	r4, [r0, #80]	; 0x50
    d7b2:	3014      	adds	r0, #20
    d7b4:	7244      	strb	r4, [r0, #9]
    d7b6:	7284      	strb	r4, [r0, #10]
    d7b8:	72c4      	strb	r4, [r0, #11]
    d7ba:	7301      	strb	r1, [r0, #12]
    d7bc:	f001 f8c4 	bl	e948 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d7c0:	4f16      	ldr	r7, [pc, #88]	; (d81c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x94>)
    d7c2:	4d17      	ldr	r5, [pc, #92]	; (d820 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x98>)
    d7c4:	4e17      	ldr	r6, [pc, #92]	; (d824 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x9c>)
    d7c6:	b928      	cbnz	r0, d7d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4c>
    d7c8:	f001 f8c8 	bl	e95c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    d7cc:	b910      	cbnz	r0, d7d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4c>
    d7ce:	f001 f8cf 	bl	e970 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    d7d2:	b140      	cbz	r0, d7e6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5e>
    d7d4:	2224      	movs	r2, #36	; 0x24
    d7d6:	21ff      	movs	r1, #255	; 0xff
    d7d8:	4638      	mov	r0, r7
    d7da:	f001 f923 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7de:	602c      	str	r4, [r5, #0]
    d7e0:	6034      	str	r4, [r6, #0]
    d7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7e6:	f001 f903 	bl	e9f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    d7ea:	b910      	cbnz	r0, d7f2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x6a>
    d7ec:	f001 f8f6 	bl	e9dc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    d7f0:	b140      	cbz	r0, d804 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x7c>
    d7f2:	2240      	movs	r2, #64	; 0x40
    d7f4:	21ff      	movs	r1, #255	; 0xff
    d7f6:	4638      	mov	r0, r7
    d7f8:	f001 f914 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7fc:	602c      	str	r4, [r5, #0]
    d7fe:	6034      	str	r4, [r6, #0]
    d800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d804:	2238      	movs	r2, #56	; 0x38
    d806:	21ff      	movs	r1, #255	; 0xff
    d808:	4638      	mov	r0, r7
    d80a:	f001 f90b 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d80e:	602c      	str	r4, [r5, #0]
    d810:	6034      	str	r4, [r6, #0]
    d812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d816:	0000      	.short	0x0000
    d818:	200017cc 	.word	0x200017cc
    d81c:	40000e00 	.word	0x40000e00
    d820:	40000e08 	.word	0x40000e08
    d824:	40000e10 	.word	0x40000e10

0000d828 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    d828:	4901      	ldr	r1, [pc, #4]	; (d830 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    d82a:	7008      	strb	r0, [r1, #0]
    d82c:	4770      	bx	lr
    d82e:	0000      	.short	0x0000
    d830:	2000038c 	.word	0x2000038c

0000d834 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>:
    d834:	4803      	ldr	r0, [pc, #12]	; (d844 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI+0x10>)
    d836:	7e01      	ldrb	r1, [r0, #24]
    d838:	2900      	cmp	r1, #0
    d83a:	bf06      	itte	eq
    d83c:	7e40      	ldrbeq	r0, [r0, #25]
    d83e:	2800      	cmpeq	r0, #0
    d840:	2001      	movne	r0, #1
    d842:	4770      	bx	lr
    d844:	200017e0 	.word	0x200017e0

0000d848 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    d848:	4801      	ldr	r0, [pc, #4]	; (d850 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    d84a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    d84c:	4770      	bx	lr
    d84e:	0000      	.short	0x0000
    d850:	200017e0 	.word	0x200017e0

0000d854 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    d854:	4801      	ldr	r0, [pc, #4]	; (d85c <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    d856:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    d85a:	4770      	bx	lr
    d85c:	200017e0 	.word	0x200017e0

0000d860 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    d860:	4915      	ldr	r1, [pc, #84]	; (d8b8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    d862:	b510      	push	{r4, lr}
    d864:	6b88      	ldr	r0, [r1, #56]	; 0x38
    d866:	4a15      	ldr	r2, [pc, #84]	; (d8bc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    d868:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    d86c:	6010      	str	r0, [r2, #0]
    d86e:	2000      	movs	r0, #0
    d870:	6388      	str	r0, [r1, #56]	; 0x38
    d872:	7408      	strb	r0, [r1, #16]
    d874:	62c8      	str	r0, [r1, #44]	; 0x2c
    d876:	6288      	str	r0, [r1, #40]	; 0x28
    d878:	4911      	ldr	r1, [pc, #68]	; (d8c0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    d87a:	6008      	str	r0, [r1, #0]
    d87c:	1d09      	adds	r1, r1, #4
    d87e:	6008      	str	r0, [r1, #0]
    d880:	1d09      	adds	r1, r1, #4
    d882:	6008      	str	r0, [r1, #0]
    d884:	1d09      	adds	r1, r1, #4
    d886:	6008      	str	r0, [r1, #0]
    d888:	490e      	ldr	r1, [pc, #56]	; (d8c4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    d88a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    d88e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    d892:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    d896:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    d89a:	f7ff fd09 	bl	d2b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    d89e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d8a2:	2002      	movs	r0, #2
    d8a4:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    d8a8:	f3bf 8f4f 	dsb	sy
    d8ac:	f3bf 8f6f 	isb	sy
    d8b0:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    d8b4:	bd10      	pop	{r4, pc}
    d8b6:	0000      	.short	0x0000
    d8b8:	200017e0 	.word	0x200017e0
    d8bc:	4001f508 	.word	0x4001f508
    d8c0:	40008540 	.word	0x40008540
    d8c4:	40008000 	.word	0x40008000

0000d8c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    d8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8cc:	2601      	movs	r6, #1
    d8ce:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
    d8d2:	2402      	movs	r4, #2
    d8d4:	f04f 0800 	mov.w	r8, #0
    d8d8:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
    d8dc:	f3bf 8f4f 	dsb	sy
    d8e0:	f3bf 8f6f 	isb	sy
    d8e4:	4833      	ldr	r0, [pc, #204]	; (d9b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    d8e6:	f8c0 8000 	str.w	r8, [r0]
    d8ea:	6006      	str	r6, [r0, #0]
    d8ec:	f001 f856 	bl	e99c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    d8f0:	4f31      	ldr	r7, [pc, #196]	; (d9b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    d8f2:	b118      	cbz	r0, d8fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    d8f4:	6838      	ldr	r0, [r7, #0]
    d8f6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    d8fa:	6038      	str	r0, [r7, #0]
    d8fc:	f001 f842 	bl	e984 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d900:	b138      	cbz	r0, d912 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    d902:	6838      	ldr	r0, [r7, #0]
    d904:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    d908:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    d90c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    d910:	6038      	str	r0, [r7, #0]
    d912:	f001 f853 	bl	e9bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d916:	b130      	cbz	r0, d926 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x5e>
    d918:	4828      	ldr	r0, [pc, #160]	; (d9bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    d91a:	6801      	ldr	r1, [r0, #0]
    d91c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    d920:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    d924:	6001      	str	r1, [r0, #0]
    d926:	4927      	ldr	r1, [pc, #156]	; (d9c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    d928:	4825      	ldr	r0, [pc, #148]	; (d9c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    d92a:	6008      	str	r0, [r1, #0]
    d92c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    d930:	6e00      	ldr	r0, [r0, #96]	; 0x60
    d932:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    d936:	d004      	beq.n	d942 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7a>
    d938:	4923      	ldr	r1, [pc, #140]	; (d9c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    d93a:	680a      	ldr	r2, [r1, #0]
    d93c:	f360 4217 	bfi	r2, r0, #16, #8
    d940:	600a      	str	r2, [r1, #0]
    d942:	4922      	ldr	r1, [pc, #136]	; (d9cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    d944:	f240 605b 	movw	r0, #1627	; 0x65b
    d948:	6008      	str	r0, [r1, #0]
    d94a:	1f09      	subs	r1, r1, #4
    d94c:	f240 1003 	movw	r0, #259	; 0x103
    d950:	6008      	str	r0, [r1, #0]
    d952:	1f08      	subs	r0, r1, #4
    d954:	6006      	str	r6, [r0, #0]
    d956:	491e      	ldr	r1, [pc, #120]	; (d9d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    d958:	2003      	movs	r0, #3
    d95a:	6008      	str	r0, [r1, #0]
    d95c:	491d      	ldr	r1, [pc, #116]	; (d9d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    d95e:	f240 1001 	movw	r0, #257	; 0x101
    d962:	6008      	str	r0, [r1, #0]
    d964:	491c      	ldr	r1, [pc, #112]	; (d9d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    d966:	f8c1 4200 	str.w	r4, [r1, #512]	; 0x200
    d96a:	4a1d      	ldr	r2, [pc, #116]	; (d9e0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
    d96c:	481b      	ldr	r0, [pc, #108]	; (d9dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    d96e:	6010      	str	r0, [r2, #0]
    d970:	481d      	ldr	r0, [pc, #116]	; (d9e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
    d972:	4a1c      	ldr	r2, [pc, #112]	; (d9e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
    d974:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    d978:	4a1c      	ldr	r2, [pc, #112]	; (d9ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
    d97a:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    d97e:	481c      	ldr	r0, [pc, #112]	; (d9f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x128>)
    d980:	f8a0 8044 	strh.w	r8, [r0, #68]	; 0x44
    d984:	3014      	adds	r0, #20
    d986:	2296      	movs	r2, #150	; 0x96
    d988:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
    d98c:	f880 803c 	strb.w	r8, [r0, #60]	; 0x3c
    d990:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
    d994:	f8c5 4280 	str.w	r4, [r5, #640]	; 0x280
    d998:	2010      	movs	r0, #16
    d99a:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
    d99e:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    d9a2:	4814      	ldr	r0, [pc, #80]	; (d9f4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x12c>)
    d9a4:	6840      	ldr	r0, [r0, #4]
    d9a6:	2800      	cmp	r0, #0
    d9a8:	bf08      	it	eq
    d9aa:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    d9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d9b2:	4700      	bx	r0
    d9b4:	40001ffc 	.word	0x40001ffc
    d9b8:	4000173c 	.word	0x4000173c
    d9bc:	40001740 	.word	0x40001740
    d9c0:	8900002c 	.word	0x8900002c
    d9c4:	40001778 	.word	0x40001778
    d9c8:	4000158c 	.word	0x4000158c
    d9cc:	40001538 	.word	0x40001538
    d9d0:	40001510 	.word	0x40001510
    d9d4:	40001650 	.word	0x40001650
    d9d8:	40001000 	.word	0x40001000
    d9dc:	040e0000 	.word	0x040e0000
    d9e0:	4001f508 	.word	0x4001f508
    d9e4:	4000110c 	.word	0x4000110c
    d9e8:	4001f090 	.word	0x4001f090
    d9ec:	40008040 	.word	0x40008040
    d9f0:	200017cc 	.word	0x200017cc
    d9f4:	2000038c 	.word	0x2000038c

0000d9f8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    d9f8:	4901      	ldr	r1, [pc, #4]	; (da00 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    d9fa:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
    d9fe:	4770      	bx	lr
    da00:	200017e0 	.word	0x200017e0

0000da04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    da04:	491e      	ldr	r1, [pc, #120]	; (da80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    da06:	b510      	push	{r4, lr}
    da08:	6008      	str	r0, [r1, #0]
    da0a:	491e      	ldr	r1, [pc, #120]	; (da84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    da0c:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
    da10:	f040 0001 	orr.w	r0, r0, #1
    da14:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
    da18:	f010 0f01 	tst.w	r0, #1
    da1c:	bf08      	it	eq
    da1e:	bd10      	popeq	{r4, pc}
    da20:	f010 0f02 	tst.w	r0, #2
    da24:	d019      	beq.n	da5a <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x56>
    da26:	4818      	ldr	r0, [pc, #96]	; (da88 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    da28:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    da2c:	f041 0101 	orr.w	r1, r1, #1
    da30:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    da34:	4815      	ldr	r0, [pc, #84]	; (da8c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    da36:	6801      	ldr	r1, [r0, #0]
    da38:	290b      	cmp	r1, #11
    da3a:	bf1c      	itt	ne
    da3c:	6801      	ldrne	r1, [r0, #0]
    da3e:	290a      	cmpne	r1, #10
    da40:	d005      	beq.n	da4e <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x4a>
    da42:	6801      	ldr	r1, [r0, #0]
    da44:	2903      	cmp	r1, #3
    da46:	bf1e      	ittt	ne
    da48:	6800      	ldrne	r0, [r0, #0]
    da4a:	2802      	cmpne	r0, #2
    da4c:	bd10      	popne	{r4, pc}
    da4e:	f240 414c 	movw	r1, #1100	; 0x44c
    da52:	f04f 003e 	mov.w	r0, #62	; 0x3e
    da56:	f7f6 f893 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da5a:	f010 0f04 	tst.w	r0, #4
    da5e:	bf08      	it	eq
    da60:	bd10      	popeq	{r4, pc}
    da62:	480b      	ldr	r0, [pc, #44]	; (da90 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    da64:	490b      	ldr	r1, [pc, #44]	; (da94 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x90>)
    da66:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    da6a:	480b      	ldr	r0, [pc, #44]	; (da98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x94>)
    da6c:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    da70:	2801      	cmp	r0, #1
    da72:	bf18      	it	ne
    da74:	bd10      	popne	{r4, pc}
    da76:	f240 4153 	movw	r1, #1107	; 0x453
    da7a:	203e      	movs	r0, #62	; 0x3e
    da7c:	f7f6 f880 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da80:	40001504 	.word	0x40001504
    da84:	200017e0 	.word	0x200017e0
    da88:	40001000 	.word	0x40001000
    da8c:	40001550 	.word	0x40001550
    da90:	40001008 	.word	0x40001008
    da94:	4001f098 	.word	0x4001f098
    da98:	40008000 	.word	0x40008000

0000da9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    da9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    daa0:	f8df 9298 	ldr.w	r9, [pc, #664]	; dd3c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a0>
    daa4:	4607      	mov	r7, r0
    daa6:	b087      	sub	sp, #28
    daa8:	48a3      	ldr	r0, [pc, #652]	; (dd38 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x29c>)
    daaa:	460d      	mov	r5, r1
    daac:	4616      	mov	r6, r2
    daae:	f8c9 0000 	str.w	r0, [r9]
    dab2:	4ca3      	ldr	r4, [pc, #652]	; (dd40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a4>)
    dab4:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    dab8:	42b0      	cmp	r0, r6
    daba:	bf1c      	itt	ne
    dabc:	4610      	movne	r0, r2
    dabe:	f000 fe21 	blne	e704 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    dac2:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    dac6:	2925      	cmp	r1, #37	; 0x25
    dac8:	bf08      	it	eq
    daca:	2002      	moveq	r0, #2
    dacc:	d00f      	beq.n	daee <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    dace:	2926      	cmp	r1, #38	; 0x26
    dad0:	bf08      	it	eq
    dad2:	201a      	moveq	r0, #26
    dad4:	d00b      	beq.n	daee <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    dad6:	2927      	cmp	r1, #39	; 0x27
    dad8:	bf08      	it	eq
    dada:	2050      	moveq	r0, #80	; 0x50
    dadc:	d007      	beq.n	daee <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    dade:	290a      	cmp	r1, #10
    dae0:	4608      	mov	r0, r1
    dae2:	bf94      	ite	ls
    dae4:	2204      	movls	r2, #4
    dae6:	2206      	movhi	r2, #6
    dae8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    daec:	b2c0      	uxtb	r0, r0
    daee:	4a95      	ldr	r2, [pc, #596]	; (dd44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a8>)
    daf0:	6010      	str	r0, [r2, #0]
    daf2:	4895      	ldr	r0, [pc, #596]	; (dd48 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2ac>)
    daf4:	6001      	str	r1, [r0, #0]
    daf6:	f8df b254 	ldr.w	fp, [pc, #596]	; dd4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b0>
    dafa:	f8df 8254 	ldr.w	r8, [pc, #596]	; dd50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b4>
    dafe:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    db02:	b137      	cbz	r7, db12 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x76>
    db04:	2f01      	cmp	r7, #1
    db06:	d06d      	beq.n	dbe4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x148>
    db08:	f240 6103 	movw	r1, #1539	; 0x603
    db0c:	203e      	movs	r0, #62	; 0x3e
    db0e:	f7f6 f837 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db12:	2e01      	cmp	r6, #1
    db14:	bf08      	it	eq
    db16:	2000      	moveq	r0, #0
    db18:	d00b      	beq.n	db32 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    db1a:	2e02      	cmp	r6, #2
    db1c:	bf08      	it	eq
    db1e:	2001      	moveq	r0, #1
    db20:	d007      	beq.n	db32 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    db22:	2e04      	cmp	r6, #4
    db24:	bf08      	it	eq
    db26:	2003      	moveq	r0, #3
    db28:	d003      	beq.n	db32 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    db2a:	2e08      	cmp	r6, #8
    db2c:	bf08      	it	eq
    db2e:	2002      	moveq	r0, #2
    db30:	d16c      	bne.n	dc0c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x170>
    db32:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    db36:	ab05      	add	r3, sp, #20
    db38:	f7f2 fc4a 	bl	3d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    db3c:	2800      	cmp	r0, #0
    db3e:	d170      	bne.n	dc22 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x186>
    db40:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    db44:	f000 fdd8 	bl	e6f8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    db48:	f000 ff38 	bl	e9bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    db4c:	b178      	cbz	r0, db6e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    db4e:	4a81      	ldr	r2, [pc, #516]	; (dd54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b8>)
    db50:	6811      	ldr	r1, [r2, #0]
    db52:	0650      	lsls	r0, r2, #25
    db54:	2e02      	cmp	r6, #2
    db56:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    db5a:	bf0c      	ite	eq
    db5c:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    db60:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    db64:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    db68:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    db6c:	6010      	str	r0, [r2, #0]
    db6e:	2e02      	cmp	r6, #2
    db70:	bf0c      	ite	eq
    db72:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    db76:	f640 0034 	movwne	r0, #2100	; 0x834
    db7a:	f649 51f8 	movw	r1, #40440	; 0x9df8
    db7e:	4401      	add	r1, r0
    db80:	7a60      	ldrb	r0, [r4, #9]
    db82:	2801      	cmp	r0, #1
    db84:	d004      	beq.n	db90 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>
    db86:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    db8a:	fbb1 f1fa 	udiv	r1, r1, sl
    db8e:	1a6d      	subs	r5, r5, r1
    db90:	2800      	cmp	r0, #0
    db92:	bf04      	itt	eq
    db94:	4658      	moveq	r0, fp
    db96:	f8c8 b514 	streq.w	fp, [r8, #1300]	; 0x514
    db9a:	2001      	movs	r0, #1
    db9c:	72e0      	strb	r0, [r4, #11]
    db9e:	486e      	ldr	r0, [pc, #440]	; (dd58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2bc>)
    dba0:	6005      	str	r5, [r0, #0]
    dba2:	486e      	ldr	r0, [pc, #440]	; (dd5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c0>)
    dba4:	f8c8 0510 	str.w	r0, [r8, #1296]	; 0x510
    dba8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    dbaa:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    dbae:	63a0      	str	r0, [r4, #56]	; 0x38
    dbb0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    dbb4:	f8c9 0000 	str.w	r0, [r9]
    dbb8:	2010      	movs	r0, #16
    dbba:	f8cb 0304 	str.w	r0, [fp, #772]	; 0x304
    dbbe:	03c0      	lsls	r0, r0, #15
    dbc0:	f8c9 0000 	str.w	r0, [r9]
    dbc4:	7a60      	ldrb	r0, [r4, #9]
    dbc6:	2800      	cmp	r0, #0
    dbc8:	bf04      	itt	eq
    dbca:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    dbce:	f040 0002 	orreq.w	r0, r0, #2
    dbd2:	d049      	beq.n	dc68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1cc>
    dbd4:	2801      	cmp	r0, #1
    dbd6:	bf04      	itt	eq
    dbd8:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    dbdc:	f040 0004 	orreq.w	r0, r0, #4
    dbe0:	d042      	beq.n	dc68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1cc>
    dbe2:	e043      	b.n	dc6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1d0>
    dbe4:	7aa0      	ldrb	r0, [r4, #10]
    dbe6:	2801      	cmp	r0, #1
    dbe8:	d124      	bne.n	dc34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x198>
    dbea:	7b60      	ldrb	r0, [r4, #13]
    dbec:	2801      	cmp	r0, #1
    dbee:	bf08      	it	eq
    dbf0:	2000      	moveq	r0, #0
    dbf2:	d010      	beq.n	dc16 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    dbf4:	2802      	cmp	r0, #2
    dbf6:	bf08      	it	eq
    dbf8:	2001      	moveq	r0, #1
    dbfa:	d00c      	beq.n	dc16 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    dbfc:	2804      	cmp	r0, #4
    dbfe:	bf08      	it	eq
    dc00:	2003      	moveq	r0, #3
    dc02:	d008      	beq.n	dc16 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    dc04:	2808      	cmp	r0, #8
    dc06:	bf08      	it	eq
    dc08:	2002      	moveq	r0, #2
    dc0a:	d004      	beq.n	dc16 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    dc0c:	f240 31f3 	movw	r1, #1011	; 0x3f3
    dc10:	2006      	movs	r0, #6
    dc12:	f7f5 ffb5 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc16:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    dc1a:	ab05      	add	r3, sp, #20
    dc1c:	f7f2 fbd8 	bl	3d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    dc20:	b120      	cbz	r0, dc2c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x190>
    dc22:	f240 31d5 	movw	r1, #981	; 0x3d5
    dc26:	203e      	movs	r0, #62	; 0x3e
    dc28:	f7f5 ffaa 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc2c:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    dc30:	f000 fd62 	bl	e6f8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    dc34:	f000 fec2 	bl	e9bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    dc38:	b938      	cbnz	r0, dc4a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ae>
    dc3a:	f000 feaf 	bl	e99c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    dc3e:	b920      	cbnz	r0, dc4a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ae>
    dc40:	4847      	ldr	r0, [pc, #284]	; (dd60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c4>)
    dc42:	6801      	ldr	r1, [r0, #0]
    dc44:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    dc48:	6001      	str	r1, [r0, #0]
    dc4a:	7a61      	ldrb	r1, [r4, #9]
    dc4c:	2901      	cmp	r1, #1
    dc4e:	d004      	beq.n	dc5a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1be>
    dc50:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
    dc54:	fbb0 f0fa 	udiv	r0, r0, sl
    dc58:	1a2d      	subs	r5, r5, r0
    dc5a:	4842      	ldr	r0, [pc, #264]	; (dd64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c8>)
    dc5c:	2900      	cmp	r1, #0
    dc5e:	bf08      	it	eq
    dc60:	f8c8 0514 	streq.w	r0, [r8, #1300]	; 0x514
    dc64:	2002      	movs	r0, #2
    dc66:	e799      	b.n	db9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x100>
    dc68:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    dc6c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    dc70:	493d      	ldr	r1, [pc, #244]	; (dd68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2cc>)
    dc72:	f010 0f01 	tst.w	r0, #1
    dc76:	d025      	beq.n	dcc4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    dc78:	f010 0f02 	tst.w	r0, #2
    dc7c:	d018      	beq.n	dcb0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x214>
    dc7e:	f8db 0200 	ldr.w	r0, [fp, #512]	; 0x200
    dc82:	f040 0001 	orr.w	r0, r0, #1
    dc86:	f8cb 0200 	str.w	r0, [fp, #512]	; 0x200
    dc8a:	4838      	ldr	r0, [pc, #224]	; (dd6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d0>)
    dc8c:	6802      	ldr	r2, [r0, #0]
    dc8e:	2a0b      	cmp	r2, #11
    dc90:	bf1c      	itt	ne
    dc92:	6802      	ldrne	r2, [r0, #0]
    dc94:	2a0a      	cmpne	r2, #10
    dc96:	d005      	beq.n	dca4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x208>
    dc98:	6802      	ldr	r2, [r0, #0]
    dc9a:	2a03      	cmp	r2, #3
    dc9c:	bf1c      	itt	ne
    dc9e:	6800      	ldrne	r0, [r0, #0]
    dca0:	2802      	cmpne	r0, #2
    dca2:	d10f      	bne.n	dcc4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    dca4:	f240 414c 	movw	r1, #1100	; 0x44c
    dca8:	f04f 003e 	mov.w	r0, #62	; 0x3e
    dcac:	f7f5 ff68 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcb0:	f010 0f04 	tst.w	r0, #4
    dcb4:	d006      	beq.n	dcc4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    dcb6:	482e      	ldr	r0, [pc, #184]	; (dd70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d4>)
    dcb8:	f8c8 0514 	str.w	r0, [r8, #1300]	; 0x514
    dcbc:	f8d1 0148 	ldr.w	r0, [r1, #328]	; 0x148
    dcc0:	2801      	cmp	r0, #1
    dcc2:	d00a      	beq.n	dcda <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x23e>
    dcc4:	2001      	movs	r0, #1
    dcc6:	64c8      	str	r0, [r1, #76]	; 0x4c
    dcc8:	482a      	ldr	r0, [pc, #168]	; (dd74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d8>)
    dcca:	6800      	ldr	r0, [r0, #0]
    dccc:	42a8      	cmp	r0, r5
    dcce:	d309      	bcc.n	dce4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x248>
    dcd0:	f240 6129 	movw	r1, #1577	; 0x629
    dcd4:	203e      	movs	r0, #62	; 0x3e
    dcd6:	f7f5 ff53 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcda:	f240 4153 	movw	r1, #1107	; 0x453
    dcde:	203e      	movs	r0, #62	; 0x3e
    dce0:	f7f5 ff4e 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dce4:	2f01      	cmp	r7, #1
    dce6:	bf08      	it	eq
    dce8:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    dcec:	d008      	beq.n	dd00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>
    dcee:	2e02      	cmp	r6, #2
    dcf0:	bf0c      	ite	eq
    dcf2:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    dcf6:	f640 0034 	movwne	r0, #2100	; 0x834
    dcfa:	f24a 0150 	movw	r1, #41040	; 0xa050
    dcfe:	4408      	add	r0, r1
    dd00:	491d      	ldr	r1, [pc, #116]	; (dd78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2dc>)
    dd02:	fbb0 f0fa 	udiv	r0, r0, sl
    dd06:	f101 0228 	add.w	r2, r1, #40	; 0x28
    dd0a:	2f01      	cmp	r7, #1
    dd0c:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    dd10:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    dd14:	6b89      	ldr	r1, [r1, #56]	; 0x38
    dd16:	9104      	str	r1, [sp, #16]
    dd18:	bf14      	ite	ne
    dd1a:	2101      	movne	r1, #1
    dd1c:	2100      	moveq	r1, #0
    dd1e:	f88d 1001 	strb.w	r1, [sp, #1]
    dd22:	e9cd 5003 	strd	r5, r0, [sp, #12]
    dd26:	4668      	mov	r0, sp
    dd28:	f7f5 fe2e 	bl	3988 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    dd2c:	4628      	mov	r0, r5
    dd2e:	f000 fc4f 	bl	e5d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    dd32:	b007      	add	sp, #28
    dd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd38:	04040000 	.word	0x04040000
    dd3c:	4001f504 	.word	0x4001f504
    dd40:	200017e0 	.word	0x200017e0
    dd44:	40001508 	.word	0x40001508
    dd48:	40001554 	.word	0x40001554
    dd4c:	40001000 	.word	0x40001000
    dd50:	4001f098 	.word	0x4001f098
    dd54:	40001588 	.word	0x40001588
    dd58:	40008548 	.word	0x40008548
    dd5c:	40008148 	.word	0x40008148
    dd60:	40001568 	.word	0x40001568
    dd64:	40001004 	.word	0x40001004
    dd68:	40008000 	.word	0x40008000
    dd6c:	40001550 	.word	0x40001550
    dd70:	40001008 	.word	0x40001008
    dd74:	4000854c 	.word	0x4000854c
    dd78:	0000e6a8 	.word	0x0000e6a8

0000dd7c <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>:
    dd7c:	b508      	push	{r3, lr}
    dd7e:	20ff      	movs	r0, #255	; 0xff
    dd80:	f88d 0000 	strb.w	r0, [sp]
    dd84:	480e      	ldr	r0, [pc, #56]	; (ddc0 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x44>)
    dd86:	2100      	movs	r1, #0
    dd88:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    dd8c:	2101      	movs	r1, #1
    dd8e:	6101      	str	r1, [r0, #16]
    dd90:	e005      	b.n	dd9e <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x22>
    dd92:	bf00      	nop
    dd94:	f89d 1000 	ldrb.w	r1, [sp]
    dd98:	1e49      	subs	r1, r1, #1
    dd9a:	f88d 1000 	strb.w	r1, [sp]
    dd9e:	f89d 1000 	ldrb.w	r1, [sp]
    dda2:	b119      	cbz	r1, ddac <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x30>
    dda4:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    dda8:	2900      	cmp	r1, #0
    ddaa:	d0f3      	beq.n	dd94 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x18>
    ddac:	f89d 0000 	ldrb.w	r0, [sp]
    ddb0:	2800      	cmp	r0, #0
    ddb2:	bf18      	it	ne
    ddb4:	bd08      	popne	{r3, pc}
    ddb6:	f240 6183 	movw	r1, #1667	; 0x683
    ddba:	203e      	movs	r0, #62	; 0x3e
    ddbc:	f7f5 fee0 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddc0:	40001000 	.word	0x40001000

0000ddc4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    ddc4:	b530      	push	{r4, r5, lr}
    ddc6:	b087      	sub	sp, #28
    ddc8:	460d      	mov	r5, r1
    ddca:	b16a      	cbz	r2, dde8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    ddcc:	4c4d      	ldr	r4, [pc, #308]	; (df04 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x140>)
    ddce:	f012 0f01 	tst.w	r2, #1
    ddd2:	7260      	strb	r0, [r4, #9]
    ddd4:	7363      	strb	r3, [r4, #13]
    ddd6:	bf18      	it	ne
    ddd8:	2a01      	cmpne	r2, #1
    ddda:	d00a      	beq.n	ddf2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x2e>
    dddc:	f240 71fa 	movw	r1, #2042	; 0x7fa
    dde0:	f04f 003e 	mov.w	r0, #62	; 0x3e
    dde4:	f7f5 fecc 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dde8:	f240 71f3 	movw	r1, #2035	; 0x7f3
    ddec:	203e      	movs	r0, #62	; 0x3e
    ddee:	f7f5 fec7 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddf2:	2d00      	cmp	r5, #0
    ddf4:	bf0c      	ite	eq
    ddf6:	2001      	moveq	r0, #1
    ddf8:	2002      	movne	r0, #2
    ddfa:	72a0      	strb	r0, [r4, #10]
    ddfc:	7322      	strb	r2, [r4, #12]
    ddfe:	2801      	cmp	r0, #1
    de00:	d006      	beq.n	de10 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4c>
    de02:	2802      	cmp	r0, #2
    de04:	d02d      	beq.n	de62 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    de06:	f44f 6101 	mov.w	r1, #2064	; 0x810
    de0a:	203e      	movs	r0, #62	; 0x3e
    de0c:	f7f5 feb8 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de10:	7ae0      	ldrb	r0, [r4, #11]
    de12:	2802      	cmp	r0, #2
    de14:	d125      	bne.n	de62 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    de16:	2b01      	cmp	r3, #1
    de18:	bf08      	it	eq
    de1a:	2000      	moveq	r0, #0
    de1c:	d010      	beq.n	de40 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    de1e:	2b02      	cmp	r3, #2
    de20:	bf08      	it	eq
    de22:	2001      	moveq	r0, #1
    de24:	d00c      	beq.n	de40 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    de26:	2b04      	cmp	r3, #4
    de28:	bf08      	it	eq
    de2a:	2003      	moveq	r0, #3
    de2c:	d008      	beq.n	de40 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    de2e:	2b08      	cmp	r3, #8
    de30:	bf08      	it	eq
    de32:	2002      	moveq	r0, #2
    de34:	d004      	beq.n	de40 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    de36:	f240 31f3 	movw	r1, #1011	; 0x3f3
    de3a:	2006      	movs	r0, #6
    de3c:	f7f5 fea0 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de40:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    de44:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    de48:	ab05      	add	r3, sp, #20
    de4a:	f7f2 fac1 	bl	3d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    de4e:	b120      	cbz	r0, de5a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x96>
    de50:	f240 31d5 	movw	r1, #981	; 0x3d5
    de54:	203e      	movs	r0, #62	; 0x3e
    de56:	f7f5 fe93 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de5a:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    de5e:	f000 fc4b 	bl	e6f8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    de62:	4829      	ldr	r0, [pc, #164]	; (df08 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x144>)
    de64:	6801      	ldr	r1, [r0, #0]
    de66:	f001 010f 	and.w	r1, r1, #15
    de6a:	2903      	cmp	r1, #3
    de6c:	bf08      	it	eq
    de6e:	2001      	moveq	r0, #1
    de70:	d00b      	beq.n	de8a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc6>
    de72:	6800      	ldr	r0, [r0, #0]
    de74:	f000 000f 	and.w	r0, r0, #15
    de78:	2804      	cmp	r0, #4
    de7a:	bf08      	it	eq
    de7c:	2002      	moveq	r0, #2
    de7e:	d004      	beq.n	de8a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc6>
    de80:	f240 11d7 	movw	r1, #471	; 0x1d7
    de84:	203e      	movs	r0, #62	; 0x3e
    de86:	f7f5 fe7b 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de8a:	7ae2      	ldrb	r2, [r4, #11]
    de8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    de90:	2a02      	cmp	r2, #2
    de92:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    de96:	d01f      	beq.n	ded8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x114>
    de98:	2802      	cmp	r0, #2
    de9a:	bf0c      	ite	eq
    de9c:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    dea0:	f240 50dc 	movwne	r0, #1500	; 0x5dc
    dea4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    dea8:	fbb0 f0f1 	udiv	r0, r0, r1
    deac:	4410      	add	r0, r2
    deae:	4917      	ldr	r1, [pc, #92]	; (df0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x148>)
    deb0:	2d01      	cmp	r5, #1
    deb2:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    deb6:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    deba:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    debe:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    dec0:	9104      	str	r1, [sp, #16]
    dec2:	bf14      	ite	ne
    dec4:	2101      	movne	r1, #1
    dec6:	2100      	moveq	r1, #0
    dec8:	f88d 1001 	strb.w	r1, [sp, #1]
    decc:	9001      	str	r0, [sp, #4]
    dece:	4668      	mov	r0, sp
    ded0:	f7f5 fd5a 	bl	3988 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    ded4:	b007      	add	sp, #28
    ded6:	bd30      	pop	{r4, r5, pc}
    ded8:	2801      	cmp	r0, #1
    deda:	bf08      	it	eq
    dedc:	f641 6014 	movweq	r0, #7700	; 0x1e14
    dee0:	d009      	beq.n	def6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x132>
    dee2:	2802      	cmp	r0, #2
    dee4:	bf08      	it	eq
    dee6:	f241 1030 	movweq	r0, #4400	; 0x1130
    deea:	d004      	beq.n	def6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x132>
    deec:	f640 2193 	movw	r1, #2707	; 0xa93
    def0:	203e      	movs	r0, #62	; 0x3e
    def2:	f7f5 fe45 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    def6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    defa:	fbb0 f0f1 	udiv	r0, r0, r1
    defe:	1a10      	subs	r0, r2, r0
    df00:	e7d5      	b.n	deae <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xea>
    df02:	0000      	.short	0x0000
    df04:	200017e0 	.word	0x200017e0
    df08:	40001510 	.word	0x40001510
    df0c:	0000e6a8 	.word	0x0000e6a8

0000df10 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>:
    df10:	4901      	ldr	r1, [pc, #4]	; (df18 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q+0x8>)
    df12:	7248      	strb	r0, [r1, #9]
    df14:	4770      	bx	lr
    df16:	0000      	.short	0x0000
    df18:	200017e0 	.word	0x200017e0

0000df1c <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>:
    df1c:	4804      	ldr	r0, [pc, #16]	; (df30 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA+0x14>)
    df1e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    df22:	f021 0110 	bic.w	r1, r1, #16
    df26:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    df2a:	2101      	movs	r1, #1
    df2c:	6181      	str	r1, [r0, #24]
    df2e:	4770      	bx	lr
    df30:	40001000 	.word	0x40001000

0000df34 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>:
    df34:	4805      	ldr	r0, [pc, #20]	; (df4c <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ+0x18>)
    df36:	2100      	movs	r1, #0
    df38:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    df3c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    df40:	f041 0110 	orr.w	r1, r1, #16
    df44:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    df48:	4770      	bx	lr
    df4a:	0000      	.short	0x0000
    df4c:	40001000 	.word	0x40001000

0000df50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    df50:	490b      	ldr	r1, [pc, #44]	; (df80 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    df52:	b081      	sub	sp, #4
    df54:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    df58:	2a01      	cmp	r2, #1
    df5a:	bf1e      	ittt	ne
    df5c:	2000      	movne	r0, #0
    df5e:	b001      	addne	sp, #4
    df60:	4770      	bxne	lr
    df62:	4a08      	ldr	r2, [pc, #32]	; (df84 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    df64:	6812      	ldr	r2, [r2, #0]
    df66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    df6a:	4252      	negs	r2, r2
    df6c:	7002      	strb	r2, [r0, #0]
    df6e:	2000      	movs	r0, #0
    df70:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    df74:	4804      	ldr	r0, [pc, #16]	; (df88 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x38>)
    df76:	6800      	ldr	r0, [r0, #0]
    df78:	9000      	str	r0, [sp, #0]
    df7a:	2001      	movs	r0, #1
    df7c:	b001      	add	sp, #4
    df7e:	4770      	bx	lr
    df80:	40001000 	.word	0x40001000
    df84:	40001548 	.word	0x40001548
    df88:	4000111c 	.word	0x4000111c

0000df8c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    df8c:	4a04      	ldr	r2, [pc, #16]	; (dfa0 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    df8e:	6803      	ldr	r3, [r0, #0]
    df90:	f8c2 3016 	str.w	r3, [r2, #22]
    df94:	8880      	ldrh	r0, [r0, #4]
    df96:	8350      	strh	r0, [r2, #26]
    df98:	f102 0014 	add.w	r0, r2, #20
    df9c:	7201      	strb	r1, [r0, #8]
    df9e:	4770      	bx	lr
    dfa0:	200017cc 	.word	0x200017cc

0000dfa4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    dfa4:	4a03      	ldr	r2, [pc, #12]	; (dfb4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    dfa6:	78c1      	ldrb	r1, [r0, #3]
    dfa8:	6011      	str	r1, [r2, #0]
    dfaa:	6800      	ldr	r0, [r0, #0]
    dfac:	4902      	ldr	r1, [pc, #8]	; (dfb8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    dfae:	0200      	lsls	r0, r0, #8
    dfb0:	6008      	str	r0, [r1, #0]
    dfb2:	4770      	bx	lr
    dfb4:	40001524 	.word	0x40001524
    dfb8:	4000151c 	.word	0x4000151c

0000dfbc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    dfbc:	6800      	ldr	r0, [r0, #0]
    dfbe:	4902      	ldr	r1, [pc, #8]	; (dfc8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    dfc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dfc4:	6008      	str	r0, [r1, #0]
    dfc6:	4770      	bx	lr
    dfc8:	4000153c 	.word	0x4000153c

0000dfcc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    dfcc:	b510      	push	{r4, lr}
    dfce:	2200      	movs	r2, #0
    dfd0:	2901      	cmp	r1, #1
    dfd2:	d009      	beq.n	dfe8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    dfd4:	2902      	cmp	r1, #2
    dfd6:	bf08      	it	eq
    dfd8:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    dfdc:	d004      	beq.n	dfe8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    dfde:	f44f 7109 	mov.w	r1, #548	; 0x224
    dfe2:	203e      	movs	r0, #62	; 0x3e
    dfe4:	f7f5 fdcc 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfe8:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    dfec:	4a0b      	ldr	r2, [pc, #44]	; (e01c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x50>)
    dfee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    dff2:	6011      	str	r1, [r2, #0]
    dff4:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    dff8:	1d11      	adds	r1, r2, #4
    dffa:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    dffe:	6008      	str	r0, [r1, #0]
    e000:	4807      	ldr	r0, [pc, #28]	; (e020 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x54>)
    e002:	6801      	ldr	r1, [r0, #0]
    e004:	2903      	cmp	r1, #3
    e006:	bf1e      	ittt	ne
    e008:	6800      	ldrne	r0, [r0, #0]
    e00a:	280b      	cmpne	r0, #11
    e00c:	bd10      	popne	{r4, pc}
    e00e:	f240 213e 	movw	r1, #574	; 0x23e
    e012:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e016:	f7f5 fdb3 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e01a:	0000      	.short	0x0000
    e01c:	40001514 	.word	0x40001514
    e020:	40001550 	.word	0x40001550

0000e024 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    e024:	b510      	push	{r4, lr}
    e026:	2200      	movs	r2, #0
    e028:	2901      	cmp	r1, #1
    e02a:	d009      	beq.n	e040 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x1c>
    e02c:	2902      	cmp	r1, #2
    e02e:	bf08      	it	eq
    e030:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    e034:	d004      	beq.n	e040 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x1c>
    e036:	f44f 7109 	mov.w	r1, #548	; 0x224
    e03a:	203e      	movs	r0, #62	; 0x3e
    e03c:	f7f5 fda0 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e040:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    e044:	4a05      	ldr	r2, [pc, #20]	; (e05c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x38>)
    e046:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e04a:	6011      	str	r1, [r2, #0]
    e04c:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    e050:	1d11      	adds	r1, r2, #4
    e052:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    e056:	6008      	str	r0, [r1, #0]
    e058:	bd10      	pop	{r4, pc}
    e05a:	0000      	.short	0x0000
    e05c:	40001514 	.word	0x40001514

0000e060 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    e060:	4901      	ldr	r1, [pc, #4]	; (e068 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    e062:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    e066:	4770      	bx	lr
    e068:	200017e0 	.word	0x200017e0

0000e06c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    e06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e070:	f8df 93f0 	ldr.w	r9, [pc, #1008]	; e464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    e074:	b083      	sub	sp, #12
    e076:	2701      	movs	r7, #1
    e078:	f8c9 704c 	str.w	r7, [r9, #76]	; 0x4c
    e07c:	f8d9 b14c 	ldr.w	fp, [r9, #332]	; 0x14c
    e080:	48f9      	ldr	r0, [pc, #996]	; (e468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>)
    e082:	f8d0 8000 	ldr.w	r8, [r0]
    e086:	4af9      	ldr	r2, [pc, #996]	; (e46c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    e088:	7811      	ldrb	r1, [r2, #0]
    e08a:	2904      	cmp	r1, #4
    e08c:	d304      	bcc.n	e098 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    e08e:	f640 1176 	movw	r1, #2422	; 0x976
    e092:	203e      	movs	r0, #62	; 0x3e
    e094:	f7f5 fd74 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e098:	4df5      	ldr	r5, [pc, #980]	; (e470 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    e09a:	4bf6      	ldr	r3, [pc, #984]	; (e474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e09c:	f04f 0c00 	mov.w	ip, #0
    e0a0:	7ae8      	ldrb	r0, [r5, #11]
    e0a2:	2801      	cmp	r0, #1
    e0a4:	d002      	beq.n	e0ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40>
    e0a6:	2802      	cmp	r0, #2
    e0a8:	d003      	beq.n	e0b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    e0aa:	e015      	b.n	e0d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e0ac:	7e2c      	ldrb	r4, [r5, #24]
    e0ae:	b914      	cbnz	r4, e0b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a>
    e0b0:	e012      	b.n	e0d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e0b2:	7e6c      	ldrb	r4, [r5, #25]
    e0b4:	b184      	cbz	r4, e0d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e0b6:	7fac      	ldrb	r4, [r5, #30]
    e0b8:	7fee      	ldrb	r6, [r5, #31]
    e0ba:	fa07 f404 	lsl.w	r4, r7, r4
    e0be:	fa07 f606 	lsl.w	r6, r7, r6
    e0c2:	4334      	orrs	r4, r6
    e0c4:	601c      	str	r4, [r3, #0]
    e0c6:	f895 4020 	ldrb.w	r4, [r5, #32]
    e0ca:	00a4      	lsls	r4, r4, #2
    e0cc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    e0d0:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
    e0d4:	f8c4 c510 	str.w	ip, [r4, #1296]	; 0x510
    e0d8:	4be6      	ldr	r3, [pc, #920]	; (e474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e0da:	6bac      	ldr	r4, [r5, #56]	; 0x38
    e0dc:	601c      	str	r4, [r3, #0]
    e0de:	4ce6      	ldr	r4, [pc, #920]	; (e478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e0e0:	2300      	movs	r3, #0
    e0e2:	63ab      	str	r3, [r5, #56]	; 0x38
    e0e4:	f8d4 c200 	ldr.w	ip, [r4, #512]	; 0x200
    e0e8:	f02c 0c0d 	bic.w	ip, ip, #13
    e0ec:	f8c4 c200 	str.w	ip, [r4, #512]	; 0x200
    e0f0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    e0f4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    e0f8:	2b00      	cmp	r3, #0
    e0fa:	bf08      	it	eq
    e0fc:	f8c9 7040 	streq.w	r7, [r9, #64]	; 0x40
    e100:	f04f 0a00 	mov.w	sl, #0
    e104:	7c2b      	ldrb	r3, [r5, #16]
    e106:	b12b      	cbz	r3, e114 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa8>
    e108:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
    e10c:	2b01      	cmp	r3, #1
    e10e:	bf08      	it	eq
    e110:	2601      	moveq	r6, #1
    e112:	d000      	beq.n	e116 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xaa>
    e114:	2600      	movs	r6, #0
    e116:	2801      	cmp	r0, #1
    e118:	d00a      	beq.n	e130 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc4>
    e11a:	2802      	cmp	r0, #2
    e11c:	d011      	beq.n	e142 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    e11e:	bf00      	nop
    e120:	f01a 0f0b 	tst.w	sl, #11
    e124:	d01d      	beq.n	e162 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    e126:	bf00      	nop
    e128:	f011 0f01 	tst.w	r1, #1
    e12c:	d022      	beq.n	e174 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    e12e:	e043      	b.n	e1b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    e130:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    e134:	2801      	cmp	r0, #1
    e136:	bf14      	ite	ne
    e138:	f04f 0a00 	movne.w	sl, #0
    e13c:	f04f 0a08 	moveq.w	sl, #8
    e140:	e7ee      	b.n	e120 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    e142:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    e146:	2801      	cmp	r0, #1
    e148:	bf14      	ite	ne
    e14a:	2000      	movne	r0, #0
    e14c:	2002      	moveq	r0, #2
    e14e:	4bcb      	ldr	r3, [pc, #812]	; (e47c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    e150:	681b      	ldr	r3, [r3, #0]
    e152:	2b01      	cmp	r3, #1
    e154:	bf14      	ite	ne
    e156:	2304      	movne	r3, #4
    e158:	2300      	moveq	r3, #0
    e15a:	4318      	orrs	r0, r3
    e15c:	ea40 0a06 	orr.w	sl, r0, r6
    e160:	e7de      	b.n	e120 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    e162:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    e166:	2801      	cmp	r0, #1
    e168:	bf14      	ite	ne
    e16a:	2000      	movne	r0, #0
    e16c:	2010      	moveq	r0, #16
    e16e:	ea40 0a0a 	orr.w	sl, r0, sl
    e172:	e7d9      	b.n	e128 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xbc>
    e174:	48c2      	ldr	r0, [pc, #776]	; (e480 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>)
    e176:	6801      	ldr	r1, [r0, #0]
    e178:	f011 0fff 	tst.w	r1, #255	; 0xff
    e17c:	d003      	beq.n	e186 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11a>
    e17e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    e182:	2901      	cmp	r1, #1
    e184:	d000      	beq.n	e188 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11c>
    e186:	2100      	movs	r1, #0
    e188:	f885 1032 	strb.w	r1, [r5, #50]	; 0x32
    e18c:	6800      	ldr	r0, [r0, #0]
    e18e:	f010 0fff 	tst.w	r0, #255	; 0xff
    e192:	d003      	beq.n	e19c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    e194:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    e198:	2801      	cmp	r0, #1
    e19a:	d000      	beq.n	e19e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x132>
    e19c:	2000      	movs	r0, #0
    e19e:	f885 0033 	strb.w	r0, [r5, #51]	; 0x33
    e1a2:	48b8      	ldr	r0, [pc, #736]	; (e484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    e1a4:	6800      	ldr	r0, [r0, #0]
    e1a6:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    e1aa:	f7fe fed5 	bl	cf58 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    e1ae:	2801      	cmp	r0, #1
    e1b0:	bf18      	it	ne
    e1b2:	2000      	movne	r0, #0
    e1b4:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    e1b8:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e1bc:	1e71      	subs	r1, r6, #1
    e1be:	4308      	orrs	r0, r1
    e1c0:	bf18      	it	ne
    e1c2:	2001      	movne	r0, #1
    e1c4:	f88d 0000 	strb.w	r0, [sp]
    e1c8:	48ab      	ldr	r0, [pc, #684]	; (e478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e1ca:	2600      	movs	r6, #0
    e1cc:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
    e1d0:	f8c0 610c 	str.w	r6, [r0, #268]	; 0x10c
    e1d4:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
    e1d8:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
    e1dc:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
    e1e0:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
    e1e4:	48a8      	ldr	r0, [pc, #672]	; (e488 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    e1e6:	6800      	ldr	r0, [r0, #0]
    e1e8:	9001      	str	r0, [sp, #4]
    e1ea:	4668      	mov	r0, sp
    e1ec:	f7f5 fbbe 	bl	396c <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
    e1f0:	2800      	cmp	r0, #0
    e1f2:	bf18      	it	ne
    e1f4:	2010      	movne	r0, #16
    e1f6:	ea40 040a 	orr.w	r4, r0, sl
    e1fa:	f8c9 6144 	str.w	r6, [r9, #324]	; 0x144
    e1fe:	f014 0f10 	tst.w	r4, #16
    e202:	d006      	beq.n	e212 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a6>
    e204:	f014 0f08 	tst.w	r4, #8
    e208:	bf02      	ittt	eq
    e20a:	7ae8      	ldrbeq	r0, [r5, #11]
    e20c:	2801      	cmpeq	r0, #1
    e20e:	f044 0420 	orreq.w	r4, r4, #32
    e212:	489e      	ldr	r0, [pc, #632]	; (e48c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    e214:	6800      	ldr	r0, [r0, #0]
    e216:	9001      	str	r0, [sp, #4]
    e218:	489d      	ldr	r0, [pc, #628]	; (e490 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    e21a:	6800      	ldr	r0, [r0, #0]
    e21c:	499d      	ldr	r1, [pc, #628]	; (e494 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    e21e:	62e8      	str	r0, [r5, #44]	; 0x2c
    e220:	680a      	ldr	r2, [r1, #0]
    e222:	f002 020f 	and.w	r2, r2, #15
    e226:	2a03      	cmp	r2, #3
    e228:	bf08      	it	eq
    e22a:	2101      	moveq	r1, #1
    e22c:	d00b      	beq.n	e246 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1da>
    e22e:	6809      	ldr	r1, [r1, #0]
    e230:	f001 010f 	and.w	r1, r1, #15
    e234:	2904      	cmp	r1, #4
    e236:	bf08      	it	eq
    e238:	2102      	moveq	r1, #2
    e23a:	d004      	beq.n	e246 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1da>
    e23c:	f240 11d7 	movw	r1, #471	; 0x1d7
    e240:	203e      	movs	r0, #62	; 0x3e
    e242:	f7f5 fc9d 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e246:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    e24a:	7ae9      	ldrb	r1, [r5, #11]
    e24c:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    e250:	62ae      	str	r6, [r5, #40]	; 0x28
    e252:	2902      	cmp	r1, #2
    e254:	d10c      	bne.n	e270 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x204>
    e256:	7869      	ldrb	r1, [r5, #1]
    e258:	b151      	cbz	r1, e270 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x204>
    e25a:	4a8f      	ldr	r2, [pc, #572]	; (e498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e25c:	6812      	ldr	r2, [r2, #0]
    e25e:	7812      	ldrb	r2, [r2, #0]
    e260:	4011      	ands	r1, r2
    e262:	782a      	ldrb	r2, [r5, #0]
    e264:	ea32 0101 	bics.w	r1, r2, r1
    e268:	bf08      	it	eq
    e26a:	f885 7024 	strbeq.w	r7, [r5, #36]	; 0x24
    e26e:	d001      	beq.n	e274 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    e270:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
    e274:	f8df a224 	ldr.w	sl, [pc, #548]	; e49c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>
    e278:	f014 0f02 	tst.w	r4, #2
    e27c:	bf1c      	itt	ne
    e27e:	f8da 1000 	ldrne.w	r1, [sl]
    e282:	62a9      	strne	r1, [r5, #40]	; 0x28
    e284:	f014 0f08 	tst.w	r4, #8
    e288:	bf1c      	itt	ne
    e28a:	f8da 1000 	ldrne.w	r1, [sl]
    e28e:	62a9      	strne	r1, [r5, #40]	; 0x28
    e290:	f8df 920c 	ldr.w	r9, [pc, #524]	; e4a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>
    e294:	f8d9 1010 	ldr.w	r1, [r9, #16]
    e298:	4788      	blx	r1
    e29a:	4874      	ldr	r0, [pc, #464]	; (e46c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    e29c:	7800      	ldrb	r0, [r0, #0]
    e29e:	f010 0f01 	tst.w	r0, #1
    e2a2:	d11e      	bne.n	e2e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x276>
    e2a4:	487c      	ldr	r0, [pc, #496]	; (e498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e2a6:	6801      	ldr	r1, [r0, #0]
    e2a8:	7809      	ldrb	r1, [r1, #0]
    e2aa:	f001 010f 	and.w	r1, r1, #15
    e2ae:	2907      	cmp	r1, #7
    e2b0:	bf28      	it	cs
    e2b2:	f885 6025 	strbcs.w	r6, [r5, #37]	; 0x25
    e2b6:	d214      	bcs.n	e2e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x276>
    e2b8:	4877      	ldr	r0, [pc, #476]	; (e498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e2ba:	6800      	ldr	r0, [r0, #0]
    e2bc:	2206      	movs	r2, #6
    e2be:	f100 0109 	add.w	r1, r0, #9
    e2c2:	1ca8      	adds	r0, r5, #2
    e2c4:	f000 fb9e 	bl	ea04 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    e2c8:	b940      	cbnz	r0, e2dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x270>
    e2ca:	4873      	ldr	r0, [pc, #460]	; (e498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e2cc:	7a29      	ldrb	r1, [r5, #8]
    e2ce:	6800      	ldr	r0, [r0, #0]
    e2d0:	7800      	ldrb	r0, [r0, #0]
    e2d2:	ebb1 1fd0 	cmp.w	r1, r0, lsr #7
    e2d6:	bf08      	it	eq
    e2d8:	2001      	moveq	r0, #1
    e2da:	d000      	beq.n	e2de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x272>
    e2dc:	2000      	movs	r0, #0
    e2de:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
    e2e2:	2000      	movs	r0, #0
    e2e4:	f8cd 8008 	str.w	r8, [sp, #8]
    e2e8:	9000      	str	r0, [sp, #0]
    e2ea:	7aa9      	ldrb	r1, [r5, #10]
    e2ec:	b149      	cbz	r1, e302 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x296>
    e2ee:	7b28      	ldrb	r0, [r5, #12]
    e2f0:	f010 0f02 	tst.w	r0, #2
    e2f4:	bf1c      	itt	ne
    e2f6:	f014 0f02 	tstne.w	r4, #2
    e2fa:	f014 0f04 	tstne.w	r4, #4
    e2fe:	d008      	beq.n	e312 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a6>
    e300:	e021      	b.n	e346 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e302:	495c      	ldr	r1, [pc, #368]	; (e474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e304:	4867      	ldr	r0, [pc, #412]	; (e4a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    e306:	6008      	str	r0, [r1, #0]
    e308:	726e      	strb	r6, [r5, #9]
    e30a:	72ae      	strb	r6, [r5, #10]
    e30c:	72ee      	strb	r6, [r5, #11]
    e30e:	732f      	strb	r7, [r5, #12]
    e310:	e068      	b.n	e3e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e312:	f010 0f10 	tst.w	r0, #16
    e316:	bf1c      	itt	ne
    e318:	f895 2033 	ldrbne.w	r2, [r5, #51]	; 0x33
    e31c:	2a00      	cmpne	r2, #0
    e31e:	d002      	beq.n	e326 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ba>
    e320:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    e324:	b17a      	cbz	r2, e346 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e326:	f010 0f08 	tst.w	r0, #8
    e32a:	bf1c      	itt	ne
    e32c:	f895 2024 	ldrbne.w	r2, [r5, #36]	; 0x24
    e330:	2a00      	cmpne	r2, #0
    e332:	d108      	bne.n	e346 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e334:	f010 0f04 	tst.w	r0, #4
    e338:	d002      	beq.n	e340 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    e33a:	f895 0025 	ldrb.w	r0, [r5, #37]	; 0x25
    e33e:	b110      	cbz	r0, e346 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e340:	f014 0f11 	tst.w	r4, #17
    e344:	d002      	beq.n	e34c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>
    e346:	f7fe ffb3 	bl	d2b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e34a:	e04b      	b.n	e3e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e34c:	2901      	cmp	r1, #1
    e34e:	bf14      	ite	ne
    e350:	f04f 0801 	movne.w	r8, #1
    e354:	f04f 0800 	moveq.w	r8, #0
    e358:	7a68      	ldrb	r0, [r5, #9]
    e35a:	2801      	cmp	r0, #1
    e35c:	bf18      	it	ne
    e35e:	2000      	movne	r0, #0
    e360:	9001      	str	r0, [sp, #4]
    e362:	726e      	strb	r6, [r5, #9]
    e364:	72ae      	strb	r6, [r5, #10]
    e366:	72ee      	strb	r6, [r5, #11]
    e368:	732f      	strb	r7, [r5, #12]
    e36a:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    e36e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    e372:	2100      	movs	r1, #0
    e374:	b1d2      	cbz	r2, e3ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x340>
    e376:	f1b8 0f00 	cmp.w	r8, #0
    e37a:	d01c      	beq.n	e3b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34a>
    e37c:	f1b8 0f00 	cmp.w	r8, #0
    e380:	d007      	beq.n	e392 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e382:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    e386:	2a01      	cmp	r2, #1
    e388:	d023      	beq.n	e3d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x366>
    e38a:	f003 fd7b 	bl	11e84 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    e38e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e390:	4401      	add	r1, r0
    e392:	9801      	ldr	r0, [sp, #4]
    e394:	b310      	cbz	r0, e3dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x370>
    e396:	9802      	ldr	r0, [sp, #8]
    e398:	303a      	adds	r0, #58	; 0x3a
    e39a:	4288      	cmp	r0, r1
    e39c:	bf98      	it	ls
    e39e:	726f      	strbls	r7, [r5, #9]
    e3a0:	d91c      	bls.n	e3dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x370>
    e3a2:	4835      	ldr	r0, [pc, #212]	; (e478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e3a4:	6107      	str	r7, [r0, #16]
    e3a6:	2001      	movs	r0, #1
    e3a8:	9000      	str	r0, [sp, #0]
    e3aa:	e01b      	b.n	e3e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e3ac:	f240 6146 	movw	r1, #1606	; 0x646
    e3b0:	203e      	movs	r0, #62	; 0x3e
    e3b2:	f7f5 fbe5 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3b6:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    e3ba:	2a01      	cmp	r2, #1
    e3bc:	d004      	beq.n	e3c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x35c>
    e3be:	f003 fd6f 	bl	11ea0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    e3c2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e3c4:	4401      	add	r1, r0
    e3c6:	e7e4      	b.n	e392 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e3c8:	f003 fd84 	bl	11ed4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    e3cc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e3ce:	4401      	add	r1, r0
    e3d0:	e7df      	b.n	e392 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e3d2:	f003 fd70 	bl	11eb6 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    e3d6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e3d8:	4401      	add	r1, r0
    e3da:	e7da      	b.n	e392 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e3dc:	7b6a      	ldrb	r2, [r5, #13]
    e3de:	4640      	mov	r0, r8
    e3e0:	f7ff fb5c 	bl	da9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    e3e4:	f014 0f01 	tst.w	r4, #1
    e3e8:	d003      	beq.n	e3f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x386>
    e3ea:	f8d9 0000 	ldr.w	r0, [r9]
    e3ee:	4780      	blx	r0
    e3f0:	e06f      	b.n	e4d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x466>
    e3f2:	f014 0f02 	tst.w	r4, #2
    e3f6:	d05b      	beq.n	e4b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>
    e3f8:	7e68      	ldrb	r0, [r5, #25]
    e3fa:	b110      	cbz	r0, e402 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x396>
    e3fc:	f1bb 0f00 	cmp.w	fp, #0
    e400:	d003      	beq.n	e40a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x39e>
    e402:	f014 0f04 	tst.w	r4, #4
    e406:	d126      	bne.n	e456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e408:	e004      	b.n	e414 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a8>
    e40a:	f44f 611d 	mov.w	r1, #2512	; 0x9d0
    e40e:	203e      	movs	r0, #62	; 0x3e
    e410:	f7f5 fbb6 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e414:	f000 fad2 	bl	e9bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e418:	b9e8      	cbnz	r0, e456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e41a:	f000 fabf 	bl	e99c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    e41e:	b9d0      	cbnz	r0, e456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e420:	4821      	ldr	r0, [pc, #132]	; (e4a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
    e422:	6800      	ldr	r0, [r0, #0]
    e424:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    e428:	f3c0 6200 	ubfx	r2, r0, #24, #1
    e42c:	f000 030f 	and.w	r3, r0, #15
    e430:	f3c0 1103 	ubfx	r1, r0, #4, #4
    e434:	f3c0 2003 	ubfx	r0, r0, #8, #4
    e438:	b16a      	cbz	r2, e456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e43a:	2b00      	cmp	r3, #0
    e43c:	bf1c      	itt	ne
    e43e:	2900      	cmpne	r1, #0
    e440:	2800      	cmpne	r0, #0
    e442:	d108      	bne.n	e456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e444:	4819      	ldr	r0, [pc, #100]	; (e4ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
    e446:	6800      	ldr	r0, [r0, #0]
    e448:	2800      	cmp	r0, #0
    e44a:	bf18      	it	ne
    e44c:	f1bc 0f03 	cmpne.w	ip, #3
    e450:	bf38      	it	cc
    e452:	f044 0404 	orrcc.w	r4, r4, #4
    e456:	ea27 0094 	bic.w	r0, r7, r4, lsr #2
    e45a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    e45e:	9900      	ldr	r1, [sp, #0]
    e460:	e036      	b.n	e4d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>
    e462:	0000      	.short	0x0000
    e464:	40008000 	.word	0x40008000
    e468:	4000854c 	.word	0x4000854c
    e46c:	2000038c 	.word	0x2000038c
    e470:	200017e0 	.word	0x200017e0
    e474:	4001f508 	.word	0x4001f508
    e478:	40001000 	.word	0x40001000
    e47c:	40001400 	.word	0x40001400
    e480:	40001640 	.word	0x40001640
    e484:	40001410 	.word	0x40001410
    e488:	40001118 	.word	0x40001118
    e48c:	40008144 	.word	0x40008144
    e490:	40008540 	.word	0x40008540
    e494:	40001510 	.word	0x40001510
    e498:	40001504 	.word	0x40001504
    e49c:	40008544 	.word	0x40008544
    e4a0:	200017cc 	.word	0x200017cc
    e4a4:	04040000 	.word	0x04040000
    e4a8:	40001450 	.word	0x40001450
    e4ac:	40001454 	.word	0x40001454
    e4b0:	f014 0f28 	tst.w	r4, #40	; 0x28
    e4b4:	d00d      	beq.n	e4d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x466>
    e4b6:	f014 0f20 	tst.w	r4, #32
    e4ba:	d104      	bne.n	e4c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45a>
    e4bc:	7e28      	ldrb	r0, [r5, #24]
    e4be:	b110      	cbz	r0, e4c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45a>
    e4c0:	f1bb 0f00 	cmp.w	fp, #0
    e4c4:	d00f      	beq.n	e4e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x47a>
    e4c6:	f8d9 2008 	ldr.w	r2, [r9, #8]
    e4ca:	ea27 1154 	bic.w	r1, r7, r4, lsr #5
    e4ce:	9800      	ldr	r0, [sp, #0]
    e4d0:	4790      	blx	r2
    e4d2:	f014 0f10 	tst.w	r4, #16
    e4d6:	bf1c      	itt	ne
    e4d8:	f8d9 000c 	ldrne.w	r0, [r9, #12]
    e4dc:	4780      	blxne	r0
    e4de:	7ae8      	ldrb	r0, [r5, #11]
    e4e0:	2802      	cmp	r0, #2
    e4e2:	d11d      	bne.n	e520 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    e4e4:	e004      	b.n	e4f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x484>
    e4e6:	f44f 6120 	mov.w	r1, #2560	; 0xa00
    e4ea:	203e      	movs	r0, #62	; 0x3e
    e4ec:	f7f5 fb48 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4f0:	7c28      	ldrb	r0, [r5, #16]
    e4f2:	b1a8      	cbz	r0, e520 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    e4f4:	2802      	cmp	r0, #2
    e4f6:	d006      	beq.n	e506 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x49a>
    e4f8:	2801      	cmp	r0, #1
    e4fa:	d025      	beq.n	e548 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4dc>
    e4fc:	f640 2124 	movw	r1, #2596	; 0xa24
    e500:	203e      	movs	r0, #62	; 0x3e
    e502:	f7f5 fb3d 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e506:	6969      	ldr	r1, [r5, #20]
    e508:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    e50a:	4408      	add	r0, r1
    e50c:	f8ca 0000 	str.w	r0, [sl]
    e510:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    e512:	4913      	ldr	r1, [pc, #76]	; (e560 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4f4>)
    e514:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    e518:	63a8      	str	r0, [r5, #56]	; 0x38
    e51a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    e51e:	6008      	str	r0, [r1, #0]
    e520:	f014 0f10 	tst.w	r4, #16
    e524:	bf04      	itt	eq
    e526:	b003      	addeq	sp, #12
    e528:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e52c:	480d      	ldr	r0, [pc, #52]	; (e564 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4f8>)
    e52e:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
    e532:	480d      	ldr	r0, [pc, #52]	; (e568 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4fc>)
    e534:	6800      	ldr	r0, [r0, #0]
    e536:	9000      	str	r0, [sp, #0]
    e538:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e53c:	2002      	movs	r0, #2
    e53e:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    e542:	b003      	add	sp, #12
    e544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e548:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e54a:	6968      	ldr	r0, [r5, #20]
    e54c:	4288      	cmp	r0, r1
    e54e:	bf88      	it	hi
    e550:	f8ca 0000 	strhi.w	r0, [sl]
    e554:	d8dc      	bhi.n	e510 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a4>
    e556:	f640 2125 	movw	r1, #2597	; 0xa25
    e55a:	203e      	movs	r0, #62	; 0x3e
    e55c:	f7f5 fb10 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e560:	4001f504 	.word	0x4001f504
    e564:	40001000 	.word	0x40001000
    e568:	40001110 	.word	0x40001110

0000e56c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    e56c:	0083      	lsls	r3, r0, #2
    e56e:	b510      	push	{r4, lr}
    e570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e578:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    e57c:	f8c3 c620 	str.w	ip, [r3, #1568]	; 0x620
    e580:	f891 c000 	ldrb.w	ip, [r1]
    e584:	f8d1 1001 	ldr.w	r1, [r1, #1]
    e588:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    e58c:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    e590:	f100 0108 	add.w	r1, r0, #8
    e594:	f04f 0c01 	mov.w	ip, #1
    e598:	fa0c f301 	lsl.w	r3, ip, r1
    e59c:	490b      	ldr	r1, [pc, #44]	; (e5cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x60>)
    e59e:	2a00      	cmp	r2, #0
    e5a0:	bf04      	itt	eq
    e5a2:	680a      	ldreq	r2, [r1, #0]
    e5a4:	439a      	biceq	r2, r3
    e5a6:	d009      	beq.n	e5bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    e5a8:	2a01      	cmp	r2, #1
    e5aa:	bf04      	itt	eq
    e5ac:	680a      	ldreq	r2, [r1, #0]
    e5ae:	431a      	orreq	r2, r3
    e5b0:	d004      	beq.n	e5bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    e5b2:	f240 31a6 	movw	r1, #934	; 0x3a6
    e5b6:	203e      	movs	r0, #62	; 0x3e
    e5b8:	f7f5 fae2 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5bc:	600a      	str	r2, [r1, #0]
    e5be:	680a      	ldr	r2, [r1, #0]
    e5c0:	fa0c f000 	lsl.w	r0, ip, r0
    e5c4:	4310      	orrs	r0, r2
    e5c6:	6008      	str	r0, [r1, #0]
    e5c8:	bd10      	pop	{r4, pc}
    e5ca:	0000      	.short	0x0000
    e5cc:	40001640 	.word	0x40001640
    e5d0:	492e      	ldr	r1, [pc, #184]	; (e68c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x120>)
    e5d2:	7aca      	ldrb	r2, [r1, #11]
    e5d4:	2a01      	cmp	r2, #1
    e5d6:	d04a      	beq.n	e66e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x102>
    e5d8:	2a02      	cmp	r2, #2
    e5da:	bf18      	it	ne
    e5dc:	4770      	bxne	lr
    e5de:	7e4b      	ldrb	r3, [r1, #25]
    e5e0:	2b00      	cmp	r3, #0
    e5e2:	bf08      	it	eq
    e5e4:	4770      	bxeq	lr
    e5e6:	2a01      	cmp	r2, #1
    e5e8:	d045      	beq.n	e676 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x10a>
    e5ea:	7ecb      	ldrb	r3, [r1, #27]
    e5ec:	7f4a      	ldrb	r2, [r1, #29]
    e5ee:	f113 0c00 	adds.w	ip, r3, #0
    e5f2:	bf18      	it	ne
    e5f4:	f04f 0c01 	movne.w	ip, #1
    e5f8:	2324      	movs	r3, #36	; 0x24
    e5fa:	4418      	add	r0, r3
    e5fc:	4b24      	ldr	r3, [pc, #144]	; (e690 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x124>)
    e5fe:	6018      	str	r0, [r3, #0]
    e600:	0210      	lsls	r0, r2, #8
    e602:	f08c 0201 	eor.w	r2, ip, #1
    e606:	ea40 5002 	orr.w	r0, r0, r2, lsl #20
    e60a:	f040 1203 	orr.w	r2, r0, #196611	; 0x30003
    e60e:	f891 0020 	ldrb.w	r0, [r1, #32]
    e612:	0083      	lsls	r3, r0, #2
    e614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e618:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    e61c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    e620:	4b1c      	ldr	r3, [pc, #112]	; (e694 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x128>)
    e622:	7f8a      	ldrb	r2, [r1, #30]
    e624:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    e628:	00d3      	lsls	r3, r2, #3
    e62a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e62e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    e632:	f8df c064 	ldr.w	ip, [pc, #100]	; e698 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    e636:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    e63a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    e63e:	7fc9      	ldrb	r1, [r1, #31]
    e640:	f8df c058 	ldr.w	ip, [pc, #88]	; e69c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x130>
    e644:	00cb      	lsls	r3, r1, #3
    e646:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e64a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    e64e:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    e652:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    e656:	2001      	movs	r0, #1
    e658:	fa00 f202 	lsl.w	r2, r0, r2
    e65c:	4088      	lsls	r0, r1
    e65e:	4910      	ldr	r1, [pc, #64]	; (e6a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x134>)
    e660:	4310      	orrs	r0, r2
    e662:	6008      	str	r0, [r1, #0]
    e664:	490f      	ldr	r1, [pc, #60]	; (e6a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>)
    e666:	2000      	movs	r0, #0
    e668:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    e66c:	4770      	bx	lr
    e66e:	7e0b      	ldrb	r3, [r1, #24]
    e670:	2b00      	cmp	r3, #0
    e672:	d1b8      	bne.n	e5e6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    e674:	4770      	bx	lr
    e676:	7e8b      	ldrb	r3, [r1, #26]
    e678:	7f0a      	ldrb	r2, [r1, #28]
    e67a:	2b00      	cmp	r3, #0
    e67c:	bf14      	ite	ne
    e67e:	f04f 0c01 	movne.w	ip, #1
    e682:	f04f 0c00 	moveq.w	ip, #0
    e686:	2311      	movs	r3, #17
    e688:	e7b7      	b.n	e5fa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x8e>
    e68a:	0000      	.short	0x0000
    e68c:	200017e0 	.word	0x200017e0
    e690:	4000854c 	.word	0x4000854c
    e694:	40006000 	.word	0x40006000
    e698:	4000814c 	.word	0x4000814c
    e69c:	40001110 	.word	0x40001110
    e6a0:	4001f504 	.word	0x4001f504
    e6a4:	40008000 	.word	0x40008000
    e6a8:	00000002 	.word	0x00000002
	...
    e6c0:	40008000 	.word	0x40008000
	...
    e6d4:	40008000 	.word	0x40008000
    e6d8:	00000002 	.word	0x00000002
	...
    e6e4:	00000001 	.word	0x00000001
	...

0000e6f8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    e6f8:	4901      	ldr	r1, [pc, #4]	; (e700 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    e6fa:	b2c0      	uxtb	r0, r0
    e6fc:	6008      	str	r0, [r1, #0]
    e6fe:	4770      	bx	lr
    e700:	4000150c 	.word	0x4000150c

0000e704 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    e704:	b510      	push	{r4, lr}
    e706:	4907      	ldr	r1, [pc, #28]	; (e724 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    e708:	2801      	cmp	r0, #1
    e70a:	bf08      	it	eq
    e70c:	2003      	moveq	r0, #3
    e70e:	d007      	beq.n	e720 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1c>
    e710:	2802      	cmp	r0, #2
    e712:	bf08      	it	eq
    e714:	2004      	moveq	r0, #4
    e716:	d003      	beq.n	e720 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1c>
    e718:	2158      	movs	r1, #88	; 0x58
    e71a:	203f      	movs	r0, #63	; 0x3f
    e71c:	f7f5 fa30 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e720:	6008      	str	r0, [r1, #0]
    e722:	bd10      	pop	{r4, pc}
    e724:	40001510 	.word	0x40001510

0000e728 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    e728:	4770      	bx	lr
    e72a:	2100      	movs	r1, #0
    e72c:	7081      	strb	r1, [r0, #2]
    e72e:	7001      	strb	r1, [r0, #0]
    e730:	7041      	strb	r1, [r0, #1]
    e732:	4770      	bx	lr

0000e734 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    e734:	b570      	push	{r4, r5, r6, lr}
    e736:	f7f1 fe65 	bl	404 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    e73a:	4605      	mov	r5, r0
    e73c:	2400      	movs	r4, #0
    e73e:	e006      	b.n	e74e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    e740:	4620      	mov	r0, r4
    e742:	f7f1 fe65 	bl	410 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    e746:	f7ff fff0 	bl	e72a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    e74a:	1c64      	adds	r4, r4, #1
    e74c:	b2e4      	uxtb	r4, r4
    e74e:	42ac      	cmp	r4, r5
    e750:	d3f6      	bcc.n	e740 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    e752:	bd70      	pop	{r4, r5, r6, pc}

0000e754 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    e754:	2000      	movs	r0, #0
    e756:	f7f4 bb9b 	b.w	2e90 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000e75a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    e75a:	b510      	push	{r4, lr}
    e75c:	f7f4 f890 	bl	2880 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    e760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e764:	f000 b800 	b.w	e768 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000e768 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    e768:	0a41      	lsrs	r1, r0, #9
    e76a:	f643 5209 	movw	r2, #15625	; 0x3d09
    e76e:	4351      	muls	r1, r2
    e770:	f3c0 0008 	ubfx	r0, r0, #0, #9
    e774:	fb10 f002 	smulbb	r0, r0, r2
    e778:	f500 7080 	add.w	r0, r0, #256	; 0x100
    e77c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    e780:	4770      	bx	lr

0000e782 <MPSL_IRQ_RADIO_Handler>:
    e782:	f7f2 be9f 	b.w	14c4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    e786:	2800      	cmp	r0, #0
    e788:	db09      	blt.n	e79e <MPSL_IRQ_RADIO_Handler+0x1c>
    e78a:	f000 021f 	and.w	r2, r0, #31
    e78e:	2101      	movs	r1, #1
    e790:	4091      	lsls	r1, r2
    e792:	0940      	lsrs	r0, r0, #5
    e794:	0080      	lsls	r0, r0, #2
    e796:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e79a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e79e:	4770      	bx	lr
    e7a0:	2800      	cmp	r0, #0
    e7a2:	db0d      	blt.n	e7c0 <MPSL_IRQ_RADIO_Handler+0x3e>
    e7a4:	f000 021f 	and.w	r2, r0, #31
    e7a8:	2101      	movs	r1, #1
    e7aa:	4091      	lsls	r1, r2
    e7ac:	0940      	lsrs	r0, r0, #5
    e7ae:	0080      	lsls	r0, r0, #2
    e7b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e7b4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e7b8:	f3bf 8f4f 	dsb	sy
    e7bc:	f3bf 8f6f 	isb	sy
    e7c0:	4770      	bx	lr

0000e7c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    e7c2:	b570      	push	{r4, r5, r6, lr}
    e7c4:	4602      	mov	r2, r0
    e7c6:	2000      	movs	r0, #0
    e7c8:	2900      	cmp	r1, #0
    e7ca:	d01d      	beq.n	e808 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    e7cc:	fba2 0101 	umull	r0, r1, r2, r1
    e7d0:	0a40      	lsrs	r0, r0, #9
    e7d2:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    e7d6:	0a49      	lsrs	r1, r1, #9
    e7d8:	1c40      	adds	r0, r0, #1
    e7da:	f141 0100 	adc.w	r1, r1, #0
    e7de:	f240 72a1 	movw	r2, #1953	; 0x7a1
    e7e2:	1883      	adds	r3, r0, r2
    e7e4:	f141 0100 	adc.w	r1, r1, #0
    e7e8:	1c5b      	adds	r3, r3, #1
    e7ea:	f141 0400 	adc.w	r4, r1, #0
    e7ee:	2100      	movs	r1, #0
    e7f0:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    e7f4:	41a1      	sbcs	r1, r4
    e7f6:	d203      	bcs.n	e800 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    e7f8:	216c      	movs	r1, #108	; 0x6c
    e7fa:	206d      	movs	r0, #109	; 0x6d
    e7fc:	f7f4 fee4 	bl	35c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e800:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    e804:	fbb0 f0f2 	udiv	r0, r0, r2
    e808:	bd70      	pop	{r4, r5, r6, pc}
    e80a:	5840      	ldr	r0, [r0, r1]
    e80c:	2800      	cmp	r0, #0
    e80e:	d000      	beq.n	e812 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    e810:	2001      	movs	r0, #1
    e812:	4770      	bx	lr
    e814:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    e818:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    e81c:	f002 0201 	and.w	r2, r2, #1
    e820:	03c0      	lsls	r0, r0, #15
    e822:	d503      	bpl.n	e82c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    e824:	428a      	cmp	r2, r1
    e826:	d101      	bne.n	e82c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    e828:	2001      	movs	r0, #1
    e82a:	4770      	bx	lr
    e82c:	2000      	movs	r0, #0
    e82e:	4770      	bx	lr

0000e830 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    e830:	b510      	push	{r4, lr}
    e832:	2101      	movs	r1, #1
    e834:	0788      	lsls	r0, r1, #30
    e836:	f7f4 fe85 	bl	3544 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    e83a:	2800      	cmp	r0, #0
    e83c:	d000      	beq.n	e840 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    e83e:	2001      	movs	r0, #1
    e840:	bd10      	pop	{r4, pc}

0000e842 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    e842:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    e846:	2101      	movs	r1, #1
    e848:	6001      	str	r1, [r0, #0]
    e84a:	4770      	bx	lr

0000e84c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    e84c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    e850:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    e854:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    e858:	f002 0203 	and.w	r2, r2, #3
    e85c:	03c9      	lsls	r1, r1, #15
    e85e:	d503      	bpl.n	e868 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    e860:	4282      	cmp	r2, r0
    e862:	d101      	bne.n	e868 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    e864:	2001      	movs	r0, #1
    e866:	4770      	bx	lr
    e868:	2000      	movs	r0, #0
    e86a:	4770      	bx	lr

0000e86c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    e86c:	b510      	push	{r4, lr}
    e86e:	2100      	movs	r1, #0
    e870:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    e874:	f7f4 fe66 	bl	3544 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    e878:	2800      	cmp	r0, #0
    e87a:	d000      	beq.n	e87e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    e87c:	2001      	movs	r0, #1
    e87e:	bd10      	pop	{r4, pc}
    e880:	2800      	cmp	r0, #0
    e882:	db09      	blt.n	e898 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    e884:	f000 021f 	and.w	r2, r0, #31
    e888:	2101      	movs	r1, #1
    e88a:	4091      	lsls	r1, r2
    e88c:	0940      	lsrs	r0, r0, #5
    e88e:	0080      	lsls	r0, r0, #2
    e890:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e894:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e898:	4770      	bx	lr
    e89a:	2800      	cmp	r0, #0
    e89c:	db0d      	blt.n	e8ba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    e89e:	f000 021f 	and.w	r2, r0, #31
    e8a2:	2101      	movs	r1, #1
    e8a4:	4091      	lsls	r1, r2
    e8a6:	0940      	lsrs	r0, r0, #5
    e8a8:	0080      	lsls	r0, r0, #2
    e8aa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e8ae:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e8b2:	f3bf 8f4f 	dsb	sy
    e8b6:	f3bf 8f6f 	isb	sy
    e8ba:	4770      	bx	lr
    e8bc:	00021000 	.word	0x00021000
    e8c0:	643300fa 	.word	0x643300fa
    e8c4:	efddbd95 	.word	0xefddbd95
    e8c8:	4fc80257 	.word	0x4fc80257
    e8cc:	5560481f 	.word	0x5560481f
    e8d0:	8787e478 	.word	0x8787e478
    e8d4:	dcb7      	.short	0xdcb7
    e8d6:	2800      	cmp	r0, #0
    e8d8:	db09      	blt.n	e8ee <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x82>
    e8da:	f000 021f 	and.w	r2, r0, #31
    e8de:	2101      	movs	r1, #1
    e8e0:	4091      	lsls	r1, r2
    e8e2:	0940      	lsrs	r0, r0, #5
    e8e4:	0080      	lsls	r0, r0, #2
    e8e6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e8ea:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e8ee:	4770      	bx	lr

0000e8f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    e8f0:	f3ef 8110 	mrs	r1, PRIMASK
    e8f4:	b672      	cpsid	i
    e8f6:	7802      	ldrb	r2, [r0, #0]
    e8f8:	2a01      	cmp	r2, #1
    e8fa:	d001      	beq.n	e900 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    e8fc:	2201      	movs	r2, #1
    e8fe:	e000      	b.n	e902 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    e900:	2200      	movs	r2, #0
    e902:	2301      	movs	r3, #1
    e904:	7003      	strb	r3, [r0, #0]
    e906:	b901      	cbnz	r1, e90a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    e908:	b662      	cpsie	i
    e90a:	b10a      	cbz	r2, e910 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    e90c:	2000      	movs	r0, #0
    e90e:	4770      	bx	lr
    e910:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e914:	4770      	bx	lr

0000e916 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    e916:	2100      	movs	r1, #0
    e918:	7001      	strb	r1, [r0, #0]
    e91a:	4608      	mov	r0, r1
    e91c:	4770      	bx	lr

0000e91e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    e91e:	f3ef 8110 	mrs	r1, PRIMASK
    e922:	b672      	cpsid	i
    e924:	2200      	movs	r2, #0
    e926:	7002      	strb	r2, [r0, #0]
    e928:	b901      	cbnz	r1, e92c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    e92a:	b662      	cpsie	i
    e92c:	2000      	movs	r0, #0
    e92e:	4770      	bx	lr

0000e930 <mpsl_low_priority_process>:
    e930:	f7f4 bf36 	b.w	37a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000e934 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    e934:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e938:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e93c:	280f      	cmp	r0, #15
    e93e:	d001      	beq.n	e944 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    e940:	2000      	movs	r0, #0
    e942:	4770      	bx	lr
    e944:	2001      	movs	r0, #1
    e946:	4770      	bx	lr

0000e948 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    e948:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e94c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e950:	280a      	cmp	r0, #10
    e952:	d001      	beq.n	e958 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    e954:	2000      	movs	r0, #0
    e956:	4770      	bx	lr
    e958:	2001      	movs	r0, #1
    e95a:	4770      	bx	lr

0000e95c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    e95c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e960:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e964:	280e      	cmp	r0, #14
    e966:	d001      	beq.n	e96c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    e968:	2000      	movs	r0, #0
    e96a:	4770      	bx	lr
    e96c:	2001      	movs	r0, #1
    e96e:	4770      	bx	lr

0000e970 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    e970:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e974:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e978:	2810      	cmp	r0, #16
    e97a:	d001      	beq.n	e980 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    e97c:	2000      	movs	r0, #0
    e97e:	4770      	bx	lr
    e980:	2001      	movs	r0, #1
    e982:	4770      	bx	lr

0000e984 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    e984:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e988:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e98c:	2806      	cmp	r0, #6
    e98e:	d003      	beq.n	e998 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    e990:	1c40      	adds	r0, r0, #1
    e992:	d001      	beq.n	e998 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    e994:	2000      	movs	r0, #0
    e996:	4770      	bx	lr
    e998:	2001      	movs	r0, #1
    e99a:	4770      	bx	lr

0000e99c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    e99c:	b500      	push	{lr}
    e99e:	f7ff fff1 	bl	e984 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    e9a2:	b148      	cbz	r0, e9b8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    e9a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e9a8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    e9ac:	2806      	cmp	r0, #6
    e9ae:	d303      	bcc.n	e9b8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    e9b0:	1c40      	adds	r0, r0, #1
    e9b2:	d001      	beq.n	e9b8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    e9b4:	2001      	movs	r0, #1
    e9b6:	bd00      	pop	{pc}
    e9b8:	2000      	movs	r0, #0
    e9ba:	bd00      	pop	{pc}

0000e9bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    e9bc:	b500      	push	{lr}
    e9be:	f7ff ffe1 	bl	e984 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    e9c2:	b138      	cbz	r0, e9d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    e9c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e9c8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    e9cc:	2806      	cmp	r0, #6
    e9ce:	d303      	bcc.n	e9d8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    e9d0:	1c40      	adds	r0, r0, #1
    e9d2:	d001      	beq.n	e9d8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    e9d4:	2000      	movs	r0, #0
    e9d6:	bd00      	pop	{pc}
    e9d8:	2001      	movs	r0, #1
    e9da:	bd00      	pop	{pc}

0000e9dc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    e9dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e9e0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e9e4:	280d      	cmp	r0, #13
    e9e6:	d001      	beq.n	e9ec <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    e9e8:	2000      	movs	r0, #0
    e9ea:	4770      	bx	lr
    e9ec:	2001      	movs	r0, #1
    e9ee:	4770      	bx	lr

0000e9f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    e9f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e9f4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e9f8:	2808      	cmp	r0, #8
    e9fa:	d001      	beq.n	ea00 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    e9fc:	2000      	movs	r0, #0
    e9fe:	4770      	bx	lr
    ea00:	2001      	movs	r0, #1
    ea02:	4770      	bx	lr

0000ea04 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    ea04:	b510      	push	{r4, lr}
    ea06:	b91a      	cbnz	r2, ea10 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0xc>
    ea08:	2000      	movs	r0, #0
    ea0a:	bd10      	pop	{r4, pc}
    ea0c:	1c40      	adds	r0, r0, #1
    ea0e:	1c49      	adds	r1, r1, #1
    ea10:	1e52      	subs	r2, r2, #1
    ea12:	d003      	beq.n	ea1c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x18>
    ea14:	7803      	ldrb	r3, [r0, #0]
    ea16:	780c      	ldrb	r4, [r1, #0]
    ea18:	42a3      	cmp	r3, r4
    ea1a:	d0f7      	beq.n	ea0c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    ea1c:	7800      	ldrb	r0, [r0, #0]
    ea1e:	7809      	ldrb	r1, [r1, #0]
    ea20:	1a40      	subs	r0, r0, r1
    ea22:	bd10      	pop	{r4, pc}

0000ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ea24:	b530      	push	{r4, r5, lr}
    ea26:	4603      	mov	r3, r0
    ea28:	b2cc      	uxtb	r4, r1
    ea2a:	e004      	b.n	ea36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12>
    ea2c:	2a00      	cmp	r2, #0
    ea2e:	d014      	beq.n	ea5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x36>
    ea30:	f803 4b01 	strb.w	r4, [r3], #1
    ea34:	1e52      	subs	r2, r2, #1
    ea36:	079d      	lsls	r5, r3, #30
    ea38:	d1f8      	bne.n	ea2c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x8>
    ea3a:	b2c9      	uxtb	r1, r1
    ea3c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ea40:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ea44:	e001      	b.n	ea4a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x26>
    ea46:	c302      	stmia	r3!, {r1}
    ea48:	1f12      	subs	r2, r2, #4
    ea4a:	2a04      	cmp	r2, #4
    ea4c:	d2fb      	bcs.n	ea46 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ea4e:	e002      	b.n	ea56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x32>
    ea50:	f803 4b01 	strb.w	r4, [r3], #1
    ea54:	1e52      	subs	r2, r2, #1
    ea56:	2a00      	cmp	r2, #0
    ea58:	d1fa      	bne.n	ea50 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x2c>
    ea5a:	bd30      	pop	{r4, r5, pc}
    ea5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea5e:	4604      	mov	r4, r0
    ea60:	f100 0003 	add.w	r0, r0, #3
    ea64:	f020 0003 	bic.w	r0, r0, #3
    ea68:	9000      	str	r0, [sp, #0]
    ea6a:	460e      	mov	r6, r1
    ea6c:	780b      	ldrb	r3, [r1, #0]
    ea6e:	7849      	ldrb	r1, [r1, #1]
    ea70:	0015      	movs	r5, r2
    ea72:	d000      	beq.n	ea76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16>
    ea74:	2000      	movs	r0, #0
    ea76:	2200      	movs	r2, #0
    ea78:	f7f5 fa44 	bl	3f04 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    ea7c:	9900      	ldr	r1, [sp, #0]
    ea7e:	462a      	mov	r2, r5
    ea80:	4408      	add	r0, r1
    ea82:	9000      	str	r0, [sp, #0]
    ea84:	4631      	mov	r1, r6
    ea86:	4668      	mov	r0, sp
    ea88:	f000 f807 	bl	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    ea8c:	9800      	ldr	r0, [sp, #0]
    ea8e:	1dc0      	adds	r0, r0, #7
    ea90:	f020 0007 	bic.w	r0, r0, #7
    ea94:	9000      	str	r0, [sp, #0]
    ea96:	1b00      	subs	r0, r0, r4
    ea98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ea9e:	4606      	mov	r6, r0
    eaa0:	460c      	mov	r4, r1
    eaa2:	7808      	ldrb	r0, [r1, #0]
    eaa4:	7849      	ldrb	r1, [r1, #1]
    eaa6:	2700      	movs	r7, #0
    eaa8:	4408      	add	r0, r1
    eaaa:	4691      	mov	r9, r2
    eaac:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    eab0:	463d      	mov	r5, r7
    eab2:	e00e      	b.n	ead2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x72>
    eab4:	7963      	ldrb	r3, [r4, #5]
    eab6:	2b03      	cmp	r3, #3
    eab8:	d200      	bcs.n	eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>
    eaba:	2303      	movs	r3, #3
    eabc:	7922      	ldrb	r2, [r4, #4]
    eabe:	2a03      	cmp	r2, #3
    eac0:	d200      	bcs.n	eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
    eac2:	2203      	movs	r2, #3
    eac4:	78e1      	ldrb	r1, [r4, #3]
    eac6:	78a0      	ldrb	r0, [r4, #2]
    eac8:	f001 f899 	bl	fbfe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    eacc:	1c6d      	adds	r5, r5, #1
    eace:	4407      	add	r7, r0
    ead0:	b2ed      	uxtb	r5, r5
    ead2:	4545      	cmp	r5, r8
    ead4:	d3ee      	bcc.n	eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>
    ead6:	6830      	ldr	r0, [r6, #0]
    ead8:	1cc0      	adds	r0, r0, #3
    eada:	f020 0003 	bic.w	r0, r0, #3
    eade:	6030      	str	r0, [r6, #0]
    eae0:	f1b9 0f00 	cmp.w	r9, #0
    eae4:	d000      	beq.n	eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>
    eae6:	2000      	movs	r0, #0
    eae8:	463a      	mov	r2, r7
    eaea:	4641      	mov	r1, r8
    eaec:	f7f5 fbb8 	bl	4260 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    eaf0:	6831      	ldr	r1, [r6, #0]
    eaf2:	4408      	add	r0, r1
    eaf4:	6030      	str	r0, [r6, #0]
    eaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000eafa <sdc_RNG_IRQHandler>:
    eafa:	f7f5 bd93 	b.w	4624 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>

0000eafe <sdc_support_adv>:
    eafe:	b510      	push	{r4, lr}
    eb00:	f7fe f8f8 	bl	ccf4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    eb04:	2000      	movs	r0, #0
    eb06:	bd10      	pop	{r4, pc}

0000eb08 <sdc_support_dle>:
    eb08:	b510      	push	{r4, lr}
    eb0a:	f7fd fe09 	bl	c720 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    eb0e:	2000      	movs	r0, #0
    eb10:	bd10      	pop	{r4, pc}

0000eb12 <sdc_support_le_2m_phy>:
    eb12:	b510      	push	{r4, lr}
    eb14:	f002 fe18 	bl	11748 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    eb18:	2000      	movs	r0, #0
    eb1a:	bd10      	pop	{r4, pc}

0000eb1c <sdc_support_slave>:
    eb1c:	b510      	push	{r4, lr}
    eb1e:	f7fe f8fb 	bl	cd18 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    eb22:	2000      	movs	r0, #0
    eb24:	bd10      	pop	{r4, pc}

0000eb26 <sdc_soc_rand_vector_get>:
    eb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb2a:	460c      	mov	r4, r1
    eb2c:	4605      	mov	r5, r0
    eb2e:	f001 f8e8 	bl	fd02 <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>
    eb32:	4607      	mov	r7, r0
    eb34:	e00c      	b.n	eb50 <sdc_soc_rand_vector_get+0x2a>
    eb36:	42bc      	cmp	r4, r7
    eb38:	d201      	bcs.n	eb3e <sdc_soc_rand_vector_get+0x18>
    eb3a:	4620      	mov	r0, r4
    eb3c:	e000      	b.n	eb40 <sdc_soc_rand_vector_get+0x1a>
    eb3e:	4638      	mov	r0, r7
    eb40:	b2c6      	uxtb	r6, r0
    eb42:	4631      	mov	r1, r6
    eb44:	4628      	mov	r0, r5
    eb46:	f7f5 fe31 	bl	47ac <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    eb4a:	1ba0      	subs	r0, r4, r6
    eb4c:	4435      	add	r5, r6
    eb4e:	b284      	uxth	r4, r0
    eb50:	2c00      	cmp	r4, #0
    eb52:	d1f0      	bne.n	eb36 <sdc_soc_rand_vector_get+0x10>
    eb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000eb58 <sdc_soc_rand_vector_poll>:
    eb58:	b570      	push	{r4, r5, r6, lr}
    eb5a:	460c      	mov	r4, r1
    eb5c:	4605      	mov	r5, r0
    eb5e:	f7f5 fe17 	bl	4790 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>
    eb62:	42a0      	cmp	r0, r4
    eb64:	d300      	bcc.n	eb68 <sdc_soc_rand_vector_poll+0x10>
    eb66:	4620      	mov	r0, r4
    eb68:	b2c4      	uxtb	r4, r0
    eb6a:	4621      	mov	r1, r4
    eb6c:	4628      	mov	r0, r5
    eb6e:	f7f5 fe15 	bl	479c <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    eb72:	2800      	cmp	r0, #0
    eb74:	d000      	beq.n	eb78 <sdc_soc_rand_vector_poll+0x20>
    eb76:	4620      	mov	r0, r4
    eb78:	bd70      	pop	{r4, r5, r6, pc}

0000eb7a <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    eb7a:	2000      	movs	r0, #0
    eb7c:	4770      	bx	lr

0000eb7e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    eb7e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eb80:	4604      	mov	r4, r0
    eb82:	1d01      	adds	r1, r0, #4
    eb84:	4668      	mov	r0, sp
    eb86:	f7f7 ff53 	bl	6a30 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    eb8a:	2800      	cmp	r0, #0
    eb8c:	d004      	beq.n	eb98 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    eb8e:	4669      	mov	r1, sp
    eb90:	4620      	mov	r0, r4
    eb92:	f000 f825 	bl	ebe0 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    eb96:	2001      	movs	r0, #1
    eb98:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eb9a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    eb9a:	b50e      	push	{r1, r2, r3, lr}
    eb9c:	4601      	mov	r1, r0
    eb9e:	4668      	mov	r0, sp
    eba0:	f000 f804 	bl	ebac <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    eba4:	4668      	mov	r0, sp
    eba6:	f7f7 fff7 	bl	6b98 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    ebaa:	bd0e      	pop	{r1, r2, r3, pc}

0000ebac <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    ebac:	880a      	ldrh	r2, [r1, #0]
    ebae:	f3c2 020b 	ubfx	r2, r2, #0, #12
    ebb2:	8002      	strh	r2, [r0, #0]
    ebb4:	884a      	ldrh	r2, [r1, #2]
    ebb6:	8042      	strh	r2, [r0, #2]
    ebb8:	784a      	ldrb	r2, [r1, #1]
    ebba:	0993      	lsrs	r3, r2, #6
    ebbc:	2200      	movs	r2, #0
    ebbe:	7142      	strb	r2, [r0, #5]
    ebc0:	784b      	ldrb	r3, [r1, #1]
    ebc2:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ebc6:	b11b      	cbz	r3, ebd0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ebc8:	2b01      	cmp	r3, #1
    ebca:	d005      	beq.n	ebd8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    ebcc:	2b02      	cmp	r3, #2
    ebce:	d005      	beq.n	ebdc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    ebd0:	7102      	strb	r2, [r0, #4]
    ebd2:	1d09      	adds	r1, r1, #4
    ebd4:	6081      	str	r1, [r0, #8]
    ebd6:	4770      	bx	lr
    ebd8:	2201      	movs	r2, #1
    ebda:	e7f9      	b.n	ebd0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ebdc:	2202      	movs	r2, #2
    ebde:	e7f7      	b.n	ebd0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ebe0 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ebe0:	b510      	push	{r4, lr}
    ebe2:	460c      	mov	r4, r1
    ebe4:	7809      	ldrb	r1, [r1, #0]
    ebe6:	7001      	strb	r1, [r0, #0]
    ebe8:	7841      	ldrb	r1, [r0, #1]
    ebea:	f021 010f 	bic.w	r1, r1, #15
    ebee:	7041      	strb	r1, [r0, #1]
    ebf0:	8822      	ldrh	r2, [r4, #0]
    ebf2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ebf6:	4311      	orrs	r1, r2
    ebf8:	7041      	strb	r1, [r0, #1]
    ebfa:	78a2      	ldrb	r2, [r4, #2]
    ebfc:	7082      	strb	r2, [r0, #2]
    ebfe:	8862      	ldrh	r2, [r4, #2]
    ec00:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    ec04:	0a12      	lsrs	r2, r2, #8
    ec06:	70c2      	strb	r2, [r0, #3]
    ec08:	7041      	strb	r1, [r0, #1]
    ec0a:	7922      	ldrb	r2, [r4, #4]
    ec0c:	f002 0203 	and.w	r2, r2, #3
    ec10:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ec14:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    ec18:	7041      	strb	r1, [r0, #1]
    ec1a:	7962      	ldrb	r2, [r4, #5]
    ec1c:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ec20:	7041      	strb	r1, [r0, #1]
    ec22:	68a1      	ldr	r1, [r4, #8]
    ec24:	1d02      	adds	r2, r0, #4
    ec26:	4291      	cmp	r1, r2
    ec28:	d006      	beq.n	ec38 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    ec2a:	8862      	ldrh	r2, [r4, #2]
    ec2c:	2afb      	cmp	r2, #251	; 0xfb
    ec2e:	d300      	bcc.n	ec32 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    ec30:	22fb      	movs	r2, #251	; 0xfb
    ec32:	1d00      	adds	r0, r0, #4
    ec34:	f7f4 fe1a 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ec38:	78a0      	ldrb	r0, [r4, #2]
    ec3a:	1d00      	adds	r0, r0, #4
    ec3c:	b2c0      	uxtb	r0, r0
    ec3e:	bd10      	pop	{r4, pc}

0000ec40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    ec40:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ec44:	4604      	mov	r4, r0
    ec46:	f891 c000 	ldrb.w	ip, [r1]
    ec4a:	2000      	movs	r0, #0
    ec4c:	260c      	movs	r6, #12
    ec4e:	223e      	movs	r2, #62	; 0x3e
    ec50:	2512      	movs	r5, #18
    ec52:	23ff      	movs	r3, #255	; 0xff
    ec54:	f04f 0b14 	mov.w	fp, #20
    ec58:	f04f 0e13 	mov.w	lr, #19
    ec5c:	f04f 0a05 	mov.w	sl, #5
    ec60:	f104 070d 	add.w	r7, r4, #13
    ec64:	f04f 0911 	mov.w	r9, #17
    ec68:	f1bc 0f20 	cmp.w	ip, #32
    ec6c:	d272      	bcs.n	ed54 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    ec6e:	e8df f00c 	tbb	[pc, ip]
    ec72:	1071      	.short	0x1071
    ec74:	fc2e2927 	.word	0xfc2e2927
    ec78:	c0aea46d 	.word	0xc0aea46d
    ec7c:	f9fafbda 	.word	0xf9fafbda
    ec80:	71f6f7f8 	.word	0x71f6f7f8
    ec84:	f5725071 	.word	0xf5725071
    ec88:	f1f2f3f4 	.word	0xf1f2f3f4
    ec8c:	edeeeff0 	.word	0xedeeeff0
    ec90:	ec71      	.short	0xec71
    ec92:	7026      	strb	r6, [r4, #0]
    ec94:	7908      	ldrb	r0, [r1, #4]
    ec96:	70a0      	strb	r0, [r4, #2]
    ec98:	7948      	ldrb	r0, [r1, #5]
    ec9a:	70e0      	strb	r0, [r4, #3]
    ec9c:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    eca0:	0a00      	lsrs	r0, r0, #8
    eca2:	7120      	strb	r0, [r4, #4]
    eca4:	79c8      	ldrb	r0, [r1, #7]
    eca6:	7160      	strb	r0, [r4, #5]
    eca8:	7a08      	ldrb	r0, [r1, #8]
    ecaa:	71a0      	strb	r0, [r4, #6]
    ecac:	8908      	ldrh	r0, [r1, #8]
    ecae:	0a00      	lsrs	r0, r0, #8
    ecb0:	71e0      	strb	r0, [r4, #7]
    ecb2:	7a88      	ldrb	r0, [r1, #10]
    ecb4:	7220      	strb	r0, [r4, #8]
    ecb6:	8948      	ldrh	r0, [r1, #10]
    ecb8:	0a00      	lsrs	r0, r0, #8
    ecba:	7260      	strb	r0, [r4, #9]
    ecbc:	2008      	movs	r0, #8
    ecbe:	e153      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ecc0:	2010      	movs	r0, #16
    ecc2:	e000      	b.n	ecc6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    ecc4:	201a      	movs	r0, #26
    ecc6:	7020      	strb	r0, [r4, #0]
    ecc8:	7908      	ldrb	r0, [r1, #4]
    ecca:	70a0      	strb	r0, [r4, #2]
    eccc:	e154      	b.n	ef78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    ecce:	7022      	strb	r2, [r4, #0]
    ecd0:	2002      	movs	r0, #2
    ecd2:	70a0      	strb	r0, [r4, #2]
    ecd4:	7908      	ldrb	r0, [r1, #4]
    ecd6:	70e0      	strb	r0, [r4, #3]
    ecd8:	7b88      	ldrb	r0, [r1, #14]
    ecda:	7120      	strb	r0, [r4, #4]
    ecdc:	7948      	ldrb	r0, [r1, #5]
    ecde:	7160      	strb	r0, [r4, #5]
    ece0:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ece4:	f8c4 0006 	str.w	r0, [r4, #6]
    ece8:	8948      	ldrh	r0, [r1, #10]
    ecea:	8160      	strh	r0, [r4, #10]
    ecec:	7b08      	ldrb	r0, [r1, #12]
    ecee:	7320      	strb	r0, [r4, #12]
    ecf0:	7b0e      	ldrb	r6, [r1, #12]
    ecf2:	1d0d      	adds	r5, r1, #4
    ecf4:	2e1f      	cmp	r6, #31
    ecf6:	d300      	bcc.n	ecfa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    ecf8:	261f      	movs	r6, #31
    ecfa:	4638      	mov	r0, r7
    ecfc:	4632      	mov	r2, r6
    ecfe:	f105 010b 	add.w	r1, r5, #11
    ed02:	f7f4 fdb3 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed06:	360d      	adds	r6, #13
    ed08:	7a69      	ldrb	r1, [r5, #9]
    ed0a:	55a1      	strb	r1, [r4, r6]
    ed0c:	1e76      	subs	r6, r6, #1
    ed0e:	b2f0      	uxtb	r0, r6
    ed10:	e128      	b.n	ef64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    ed12:	7022      	strb	r2, [r4, #0]
    ed14:	200b      	movs	r0, #11
    ed16:	70a0      	strb	r0, [r4, #2]
    ed18:	7908      	ldrb	r0, [r1, #4]
    ed1a:	70e0      	strb	r0, [r4, #3]
    ed1c:	7948      	ldrb	r0, [r1, #5]
    ed1e:	7120      	strb	r0, [r4, #4]
    ed20:	7988      	ldrb	r0, [r1, #6]
    ed22:	7160      	strb	r0, [r4, #5]
    ed24:	f8d1 0007 	ldr.w	r0, [r1, #7]
    ed28:	f8c4 0006 	str.w	r0, [r4, #6]
    ed2c:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    ed30:	8160      	strh	r0, [r4, #10]
    ed32:	7b48      	ldrb	r0, [r1, #13]
    ed34:	7320      	strb	r0, [r4, #12]
    ed36:	f8d1 000e 	ldr.w	r0, [r1, #14]
    ed3a:	f8c4 000d 	str.w	r0, [r4, #13]
    ed3e:	8a48      	ldrh	r0, [r1, #18]
    ed40:	f8a4 0011 	strh.w	r0, [r4, #17]
    ed44:	7d08      	ldrb	r0, [r1, #20]
    ed46:	74e0      	strb	r0, [r4, #19]
    ed48:	4628      	mov	r0, r5
    ed4a:	e10d      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ed4c:	4620      	mov	r0, r4
    ed4e:	f000 f98d 	bl	f06c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    ed52:	e107      	b.n	ef64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    ed54:	e10b      	b.n	ef6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    ed56:	7022      	strb	r2, [r4, #0]
    ed58:	200a      	movs	r0, #10
    ed5a:	70a0      	strb	r0, [r4, #2]
    ed5c:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    ed60:	70e0      	strb	r0, [r4, #3]
    ed62:	7888      	ldrb	r0, [r1, #2]
    ed64:	7120      	strb	r0, [r4, #4]
    ed66:	8848      	ldrh	r0, [r1, #2]
    ed68:	0a00      	lsrs	r0, r0, #8
    ed6a:	7160      	strb	r0, [r4, #5]
    ed6c:	7908      	ldrb	r0, [r1, #4]
    ed6e:	71a0      	strb	r0, [r4, #6]
    ed70:	7948      	ldrb	r0, [r1, #5]
    ed72:	71e0      	strb	r0, [r4, #7]
    ed74:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ed78:	60a0      	str	r0, [r4, #8]
    ed7a:	8948      	ldrh	r0, [r1, #10]
    ed7c:	81a0      	strh	r0, [r4, #12]
    ed7e:	68c8      	ldr	r0, [r1, #12]
    ed80:	f8c4 000e 	str.w	r0, [r4, #14]
    ed84:	8a08      	ldrh	r0, [r1, #16]
    ed86:	8260      	strh	r0, [r4, #18]
    ed88:	f8d1 0012 	ldr.w	r0, [r1, #18]
    ed8c:	6160      	str	r0, [r4, #20]
    ed8e:	8ac8      	ldrh	r0, [r1, #22]
    ed90:	8320      	strh	r0, [r4, #24]
    ed92:	7e08      	ldrb	r0, [r1, #24]
    ed94:	76a0      	strb	r0, [r4, #26]
    ed96:	8b08      	ldrh	r0, [r1, #24]
    ed98:	0a00      	lsrs	r0, r0, #8
    ed9a:	76e0      	strb	r0, [r4, #27]
    ed9c:	7e88      	ldrb	r0, [r1, #26]
    ed9e:	7720      	strb	r0, [r4, #28]
    eda0:	8b48      	ldrh	r0, [r1, #26]
    eda2:	0a00      	lsrs	r0, r0, #8
    eda4:	7760      	strb	r0, [r4, #29]
    eda6:	7f08      	ldrb	r0, [r1, #28]
    eda8:	77a0      	strb	r0, [r4, #30]
    edaa:	8b88      	ldrh	r0, [r1, #28]
    edac:	0a00      	lsrs	r0, r0, #8
    edae:	77e0      	strb	r0, [r4, #31]
    edb0:	7f88      	ldrb	r0, [r1, #30]
    edb2:	f884 0020 	strb.w	r0, [r4, #32]
    edb6:	201f      	movs	r0, #31
    edb8:	e0d6      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    edba:	7022      	strb	r2, [r4, #0]
    edbc:	f884 b002 	strb.w	fp, [r4, #2]
    edc0:	7908      	ldrb	r0, [r1, #4]
    edc2:	70e0      	strb	r0, [r4, #3]
    edc4:	8888      	ldrh	r0, [r1, #4]
    edc6:	0a00      	lsrs	r0, r0, #8
    edc8:	7120      	strb	r0, [r4, #4]
    edca:	7988      	ldrb	r0, [r1, #6]
    edcc:	e0ed      	b.n	efaa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    edce:	7022      	strb	r2, [r4, #0]
    edd0:	2004      	movs	r0, #4
    edd2:	70a0      	strb	r0, [r4, #2]
    edd4:	7908      	ldrb	r0, [r1, #4]
    edd6:	70e0      	strb	r0, [r4, #3]
    edd8:	7988      	ldrb	r0, [r1, #6]
    edda:	7120      	strb	r0, [r4, #4]
    eddc:	88c8      	ldrh	r0, [r1, #6]
    edde:	0a00      	lsrs	r0, r0, #8
    ede0:	7160      	strb	r0, [r4, #5]
    ede2:	6888      	ldr	r0, [r1, #8]
    ede4:	f8c4 0006 	str.w	r0, [r4, #6]
    ede8:	68c8      	ldr	r0, [r1, #12]
    edea:	f8c4 000a 	str.w	r0, [r4, #10]
    edee:	200c      	movs	r0, #12
    edf0:	e0ba      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    edf2:	7022      	strb	r2, [r4, #0]
    edf4:	2003      	movs	r0, #3
    edf6:	70a0      	strb	r0, [r4, #2]
    edf8:	7908      	ldrb	r0, [r1, #4]
    edfa:	70e0      	strb	r0, [r4, #3]
    edfc:	7988      	ldrb	r0, [r1, #6]
    edfe:	7120      	strb	r0, [r4, #4]
    ee00:	88c8      	ldrh	r0, [r1, #6]
    ee02:	0a00      	lsrs	r0, r0, #8
    ee04:	7160      	strb	r0, [r4, #5]
    ee06:	7a08      	ldrb	r0, [r1, #8]
    ee08:	71a0      	strb	r0, [r4, #6]
    ee0a:	8908      	ldrh	r0, [r1, #8]
    ee0c:	0a00      	lsrs	r0, r0, #8
    ee0e:	71e0      	strb	r0, [r4, #7]
    ee10:	7a88      	ldrb	r0, [r1, #10]
    ee12:	7220      	strb	r0, [r4, #8]
    ee14:	8948      	ldrh	r0, [r1, #10]
    ee16:	0a00      	lsrs	r0, r0, #8
    ee18:	7260      	strb	r0, [r4, #9]
    ee1a:	7b08      	ldrb	r0, [r1, #12]
    ee1c:	72a0      	strb	r0, [r4, #10]
    ee1e:	8988      	ldrh	r0, [r1, #12]
    ee20:	0a00      	lsrs	r0, r0, #8
    ee22:	72e0      	strb	r0, [r4, #11]
    ee24:	e120      	b.n	f068 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    ee26:	7022      	strb	r2, [r4, #0]
    ee28:	f884 a002 	strb.w	sl, [r4, #2]
    ee2c:	7908      	ldrb	r0, [r1, #4]
    ee2e:	70e0      	strb	r0, [r4, #3]
    ee30:	8888      	ldrh	r0, [r1, #4]
    ee32:	0a00      	lsrs	r0, r0, #8
    ee34:	7120      	strb	r0, [r4, #4]
    ee36:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ee3a:	f8c4 0005 	str.w	r0, [r4, #5]
    ee3e:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ee42:	f8c4 0009 	str.w	r0, [r4, #9]
    ee46:	89c8      	ldrh	r0, [r1, #14]
    ee48:	e010      	b.n	ee6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    ee4a:	e0fa      	b.n	f042 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    ee4c:	e0ce      	b.n	efec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    ee4e:	e0af      	b.n	efb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    ee50:	e0da      	b.n	f008 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    ee52:	e0e8      	b.n	f026 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    ee54:	e0a1      	b.n	ef9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    ee56:	e08c      	b.n	ef72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    ee58:	e090      	b.n	ef7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    ee5a:	e033      	b.n	eec4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    ee5c:	e02f      	b.n	eebe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    ee5e:	e043      	b.n	eee8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    ee60:	e03d      	b.n	eede <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    ee62:	e021      	b.n	eea8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    ee64:	e015      	b.n	ee92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    ee66:	e008      	b.n	ee7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    ee68:	e004      	b.n	ee74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    ee6a:	e046      	b.n	eefa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    ee6c:	f8a4 000d 	strh.w	r0, [r4, #13]
    ee70:	200d      	movs	r0, #13
    ee72:	e079      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ee74:	f884 9000 	strb.w	r9, [r4]
    ee78:	e038      	b.n	eeec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    ee7a:	f884 a000 	strb.w	sl, [r4]
    ee7e:	7908      	ldrb	r0, [r1, #4]
    ee80:	70a0      	strb	r0, [r4, #2]
    ee82:	7948      	ldrb	r0, [r1, #5]
    ee84:	70e0      	strb	r0, [r4, #3]
    ee86:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ee8a:	0a00      	lsrs	r0, r0, #8
    ee8c:	7120      	strb	r0, [r4, #4]
    ee8e:	79c8      	ldrb	r0, [r1, #7]
    ee90:	e08b      	b.n	efaa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    ee92:	2008      	movs	r0, #8
    ee94:	7020      	strb	r0, [r4, #0]
    ee96:	7908      	ldrb	r0, [r1, #4]
    ee98:	70a0      	strb	r0, [r4, #2]
    ee9a:	7988      	ldrb	r0, [r1, #6]
    ee9c:	70e0      	strb	r0, [r4, #3]
    ee9e:	88c8      	ldrh	r0, [r1, #6]
    eea0:	0a00      	lsrs	r0, r0, #8
    eea2:	7120      	strb	r0, [r4, #4]
    eea4:	7a08      	ldrb	r0, [r1, #8]
    eea6:	e080      	b.n	efaa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    eea8:	2030      	movs	r0, #48	; 0x30
    eeaa:	7020      	strb	r0, [r4, #0]
    eeac:	7908      	ldrb	r0, [r1, #4]
    eeae:	70a0      	strb	r0, [r4, #2]
    eeb0:	7988      	ldrb	r0, [r1, #6]
    eeb2:	70e0      	strb	r0, [r4, #3]
    eeb4:	88c8      	ldrh	r0, [r1, #6]
    eeb6:	0a00      	lsrs	r0, r0, #8
    eeb8:	7120      	strb	r0, [r4, #4]
    eeba:	2003      	movs	r0, #3
    eebc:	e054      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    eebe:	7022      	strb	r2, [r4, #0]
    eec0:	2007      	movs	r0, #7
    eec2:	e077      	b.n	efb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    eec4:	7022      	strb	r2, [r4, #0]
    eec6:	70a6      	strb	r6, [r4, #2]
    eec8:	7908      	ldrb	r0, [r1, #4]
    eeca:	70e0      	strb	r0, [r4, #3]
    eecc:	7988      	ldrb	r0, [r1, #6]
    eece:	7120      	strb	r0, [r4, #4]
    eed0:	88c8      	ldrh	r0, [r1, #6]
    eed2:	0a00      	lsrs	r0, r0, #8
    eed4:	7160      	strb	r0, [r4, #5]
    eed6:	7a08      	ldrb	r0, [r1, #8]
    eed8:	71a0      	strb	r0, [r4, #6]
    eeda:	7a48      	ldrb	r0, [r1, #9]
    eedc:	e05a      	b.n	ef94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    eede:	4620      	mov	r0, r4
    eee0:	1d09      	adds	r1, r1, #4
    eee2:	f7f4 ff23 	bl	3d2c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
    eee6:	e03d      	b.n	ef64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    eee8:	2057      	movs	r0, #87	; 0x57
    eeea:	7020      	strb	r0, [r4, #0]
    eeec:	7908      	ldrb	r0, [r1, #4]
    eeee:	70a0      	strb	r0, [r4, #2]
    eef0:	8888      	ldrh	r0, [r1, #4]
    eef2:	0a00      	lsrs	r0, r0, #8
    eef4:	70e0      	strb	r0, [r4, #3]
    eef6:	2002      	movs	r0, #2
    eef8:	e036      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    eefa:	7022      	strb	r2, [r4, #0]
    eefc:	220d      	movs	r2, #13
    eefe:	70a2      	strb	r2, [r4, #2]
    ef00:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    ef04:	70e2      	strb	r2, [r4, #3]
    ef06:	894a      	ldrh	r2, [r1, #10]
    ef08:	80a2      	strh	r2, [r4, #4]
    ef0a:	784a      	ldrb	r2, [r1, #1]
    ef0c:	71a2      	strb	r2, [r4, #6]
    ef0e:	f8d1 2002 	ldr.w	r2, [r1, #2]
    ef12:	f8c4 2007 	str.w	r2, [r4, #7]
    ef16:	88ca      	ldrh	r2, [r1, #6]
    ef18:	f8a4 200b 	strh.w	r2, [r4, #11]
    ef1c:	7b0a      	ldrb	r2, [r1, #12]
    ef1e:	4620      	mov	r0, r4
    ef20:	7362      	strb	r2, [r4, #13]
    ef22:	7b4a      	ldrb	r2, [r1, #13]
    ef24:	7382      	strb	r2, [r0, #14]
    ef26:	7b8a      	ldrb	r2, [r1, #14]
    ef28:	73c2      	strb	r2, [r0, #15]
    ef2a:	7eca      	ldrb	r2, [r1, #27]
    ef2c:	7402      	strb	r2, [r0, #16]
    ef2e:	7a4a      	ldrb	r2, [r1, #9]
    ef30:	7442      	strb	r2, [r0, #17]
    ef32:	8a4a      	ldrh	r2, [r1, #18]
    ef34:	8242      	strh	r2, [r0, #18]
    ef36:	7d0a      	ldrb	r2, [r1, #20]
    ef38:	7502      	strb	r2, [r0, #20]
    ef3a:	f8d1 2015 	ldr.w	r2, [r1, #21]
    ef3e:	f8c0 2015 	str.w	r2, [r0, #21]
    ef42:	f8b1 2019 	ldrh.w	r2, [r1, #25]
    ef46:	f8a0 2019 	strh.w	r2, [r0, #25]
    ef4a:	7a0a      	ldrb	r2, [r1, #8]
    ef4c:	76c2      	strb	r2, [r0, #27]
    ef4e:	7a0d      	ldrb	r5, [r1, #8]
    ef50:	2de5      	cmp	r5, #229	; 0xe5
    ef52:	d300      	bcc.n	ef56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    ef54:	25e5      	movs	r5, #229	; 0xe5
    ef56:	462a      	mov	r2, r5
    ef58:	301c      	adds	r0, #28
    ef5a:	311d      	adds	r1, #29
    ef5c:	f7f4 fc86 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ef60:	351a      	adds	r5, #26
    ef62:	b2e8      	uxtb	r0, r5
    ef64:	2800      	cmp	r0, #0
    ef66:	d002      	beq.n	ef6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    ef68:	7060      	strb	r0, [r4, #1]
    ef6a:	1c80      	adds	r0, r0, #2
    ef6c:	b2c0      	uxtb	r0, r0
    ef6e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    ef72:	7022      	strb	r2, [r4, #0]
    ef74:	f884 9002 	strb.w	r9, [r4, #2]
    ef78:	2001      	movs	r0, #1
    ef7a:	e7f5      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ef7c:	7022      	strb	r2, [r4, #0]
    ef7e:	70a5      	strb	r5, [r4, #2]
    ef80:	7908      	ldrb	r0, [r1, #4]
    ef82:	70e0      	strb	r0, [r4, #3]
    ef84:	7948      	ldrb	r0, [r1, #5]
    ef86:	7120      	strb	r0, [r4, #4]
    ef88:	7988      	ldrb	r0, [r1, #6]
    ef8a:	7160      	strb	r0, [r4, #5]
    ef8c:	88c8      	ldrh	r0, [r1, #6]
    ef8e:	0a00      	lsrs	r0, r0, #8
    ef90:	71a0      	strb	r0, [r4, #6]
    ef92:	7a08      	ldrb	r0, [r1, #8]
    ef94:	71e0      	strb	r0, [r4, #7]
    ef96:	2006      	movs	r0, #6
    ef98:	e7e6      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ef9a:	7023      	strb	r3, [r4, #0]
    ef9c:	20a1      	movs	r0, #161	; 0xa1
    ef9e:	70a0      	strb	r0, [r4, #2]
    efa0:	7908      	ldrb	r0, [r1, #4]
    efa2:	70e0      	strb	r0, [r4, #3]
    efa4:	7948      	ldrb	r0, [r1, #5]
    efa6:	7120      	strb	r0, [r4, #4]
    efa8:	2000      	movs	r0, #0
    efaa:	7160      	strb	r0, [r4, #5]
    efac:	2004      	movs	r0, #4
    efae:	e7db      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    efb0:	7023      	strb	r3, [r4, #0]
    efb2:	20a2      	movs	r0, #162	; 0xa2
    efb4:	70a0      	strb	r0, [r4, #2]
    efb6:	7908      	ldrb	r0, [r1, #4]
    efb8:	70e0      	strb	r0, [r4, #3]
    efba:	8888      	ldrh	r0, [r1, #4]
    efbc:	0a00      	lsrs	r0, r0, #8
    efbe:	7120      	strb	r0, [r4, #4]
    efc0:	7988      	ldrb	r0, [r1, #6]
    efc2:	7160      	strb	r0, [r4, #5]
    efc4:	88c8      	ldrh	r0, [r1, #6]
    efc6:	0a00      	lsrs	r0, r0, #8
    efc8:	71a0      	strb	r0, [r4, #6]
    efca:	7a08      	ldrb	r0, [r1, #8]
    efcc:	71e0      	strb	r0, [r4, #7]
    efce:	8908      	ldrh	r0, [r1, #8]
    efd0:	0a00      	lsrs	r0, r0, #8
    efd2:	7220      	strb	r0, [r4, #8]
    efd4:	7a88      	ldrb	r0, [r1, #10]
    efd6:	7260      	strb	r0, [r4, #9]
    efd8:	8948      	ldrh	r0, [r1, #10]
    efda:	0a00      	lsrs	r0, r0, #8
    efdc:	72a0      	strb	r0, [r4, #10]
    efde:	7b08      	ldrb	r0, [r1, #12]
    efe0:	72e0      	strb	r0, [r4, #11]
    efe2:	8988      	ldrh	r0, [r1, #12]
    efe4:	0a00      	lsrs	r0, r0, #8
    efe6:	7320      	strb	r0, [r4, #12]
    efe8:	200b      	movs	r0, #11
    efea:	e7bd      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    efec:	7023      	strb	r3, [r4, #0]
    efee:	20a3      	movs	r0, #163	; 0xa3
    eff0:	70a0      	strb	r0, [r4, #2]
    eff2:	7908      	ldrb	r0, [r1, #4]
    eff4:	70e0      	strb	r0, [r4, #3]
    eff6:	8888      	ldrh	r0, [r1, #4]
    eff8:	0a00      	lsrs	r0, r0, #8
    effa:	7120      	strb	r0, [r4, #4]
    effc:	7988      	ldrb	r0, [r1, #6]
    effe:	7160      	strb	r0, [r4, #5]
    f000:	79c8      	ldrb	r0, [r1, #7]
    f002:	71a0      	strb	r0, [r4, #6]
    f004:	2005      	movs	r0, #5
    f006:	e7af      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f008:	7022      	strb	r2, [r4, #0]
    f00a:	f884 e002 	strb.w	lr, [r4, #2]
    f00e:	7908      	ldrb	r0, [r1, #4]
    f010:	70e0      	strb	r0, [r4, #3]
    f012:	7948      	ldrb	r0, [r1, #5]
    f014:	7120      	strb	r0, [r4, #4]
    f016:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f01a:	f8c4 0005 	str.w	r0, [r4, #5]
    f01e:	8948      	ldrh	r0, [r1, #10]
    f020:	f8a4 0009 	strh.w	r0, [r4, #9]
    f024:	e020      	b.n	f068 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    f026:	7023      	strb	r3, [r4, #0]
    f028:	20a4      	movs	r0, #164	; 0xa4
    f02a:	70a0      	strb	r0, [r4, #2]
    f02c:	7908      	ldrb	r0, [r1, #4]
    f02e:	70e0      	strb	r0, [r4, #3]
    f030:	8888      	ldrh	r0, [r1, #4]
    f032:	0a00      	lsrs	r0, r0, #8
    f034:	7120      	strb	r0, [r4, #4]
    f036:	7988      	ldrb	r0, [r1, #6]
    f038:	7160      	strb	r0, [r4, #5]
    f03a:	79c8      	ldrb	r0, [r1, #7]
    f03c:	71a0      	strb	r0, [r4, #6]
    f03e:	2007      	movs	r0, #7
    f040:	e792      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f042:	7023      	strb	r3, [r4, #0]
    f044:	2080      	movs	r0, #128	; 0x80
    f046:	70a0      	strb	r0, [r4, #2]
    f048:	888a      	ldrh	r2, [r1, #4]
    f04a:	f8a4 2003 	strh.w	r2, [r4, #3]
    f04e:	88ca      	ldrh	r2, [r1, #6]
    f050:	f8a4 2005 	strh.w	r2, [r4, #5]
    f054:	7a0a      	ldrb	r2, [r1, #8]
    f056:	71e2      	strb	r2, [r4, #7]
    f058:	7a4a      	ldrb	r2, [r1, #9]
    f05a:	8122      	strh	r2, [r4, #8]
    f05c:	7a8a      	ldrb	r2, [r1, #10]
    f05e:	72a2      	strb	r2, [r4, #10]
    f060:	7ac9      	ldrb	r1, [r1, #11]
    f062:	f001 0101 	and.w	r1, r1, #1
    f066:	72e1      	strb	r1, [r4, #11]
    f068:	200a      	movs	r0, #10
    f06a:	e77d      	b.n	ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>

0000f06c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    f06c:	223e      	movs	r2, #62	; 0x3e
    f06e:	7002      	strb	r2, [r0, #0]
    f070:	2201      	movs	r2, #1
    f072:	7082      	strb	r2, [r0, #2]
    f074:	790a      	ldrb	r2, [r1, #4]
    f076:	70c2      	strb	r2, [r0, #3]
    f078:	798a      	ldrb	r2, [r1, #6]
    f07a:	7102      	strb	r2, [r0, #4]
    f07c:	88ca      	ldrh	r2, [r1, #6]
    f07e:	0a12      	lsrs	r2, r2, #8
    f080:	7142      	strb	r2, [r0, #5]
    f082:	7a0a      	ldrb	r2, [r1, #8]
    f084:	7182      	strb	r2, [r0, #6]
    f086:	7a4a      	ldrb	r2, [r1, #9]
    f088:	71c2      	strb	r2, [r0, #7]
    f08a:	f8d1 200a 	ldr.w	r2, [r1, #10]
    f08e:	6082      	str	r2, [r0, #8]
    f090:	89ca      	ldrh	r2, [r1, #14]
    f092:	8182      	strh	r2, [r0, #12]
    f094:	7c0a      	ldrb	r2, [r1, #16]
    f096:	7382      	strb	r2, [r0, #14]
    f098:	8a0a      	ldrh	r2, [r1, #16]
    f09a:	0a12      	lsrs	r2, r2, #8
    f09c:	73c2      	strb	r2, [r0, #15]
    f09e:	7c8a      	ldrb	r2, [r1, #18]
    f0a0:	7402      	strb	r2, [r0, #16]
    f0a2:	8a4a      	ldrh	r2, [r1, #18]
    f0a4:	0a12      	lsrs	r2, r2, #8
    f0a6:	7442      	strb	r2, [r0, #17]
    f0a8:	7d0a      	ldrb	r2, [r1, #20]
    f0aa:	7482      	strb	r2, [r0, #18]
    f0ac:	8a8a      	ldrh	r2, [r1, #20]
    f0ae:	0a12      	lsrs	r2, r2, #8
    f0b0:	74c2      	strb	r2, [r0, #19]
    f0b2:	7d89      	ldrb	r1, [r1, #22]
    f0b4:	7501      	strb	r1, [r0, #20]
    f0b6:	2013      	movs	r0, #19
    f0b8:	4770      	bx	lr

0000f0ba <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    f0ba:	223e      	movs	r2, #62	; 0x3e
    f0bc:	7002      	strb	r2, [r0, #0]
    f0be:	2201      	movs	r2, #1
    f0c0:	7082      	strb	r2, [r0, #2]
    f0c2:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    f0c6:	70c2      	strb	r2, [r0, #3]
    f0c8:	788a      	ldrb	r2, [r1, #2]
    f0ca:	7102      	strb	r2, [r0, #4]
    f0cc:	884a      	ldrh	r2, [r1, #2]
    f0ce:	0a12      	lsrs	r2, r2, #8
    f0d0:	7142      	strb	r2, [r0, #5]
    f0d2:	790a      	ldrb	r2, [r1, #4]
    f0d4:	7182      	strb	r2, [r0, #6]
    f0d6:	794a      	ldrb	r2, [r1, #5]
    f0d8:	71c2      	strb	r2, [r0, #7]
    f0da:	f8d1 2006 	ldr.w	r2, [r1, #6]
    f0de:	6082      	str	r2, [r0, #8]
    f0e0:	894a      	ldrh	r2, [r1, #10]
    f0e2:	8182      	strh	r2, [r0, #12]
    f0e4:	7e0a      	ldrb	r2, [r1, #24]
    f0e6:	7382      	strb	r2, [r0, #14]
    f0e8:	8b0a      	ldrh	r2, [r1, #24]
    f0ea:	0a12      	lsrs	r2, r2, #8
    f0ec:	73c2      	strb	r2, [r0, #15]
    f0ee:	7e8a      	ldrb	r2, [r1, #26]
    f0f0:	7402      	strb	r2, [r0, #16]
    f0f2:	8b4a      	ldrh	r2, [r1, #26]
    f0f4:	0a12      	lsrs	r2, r2, #8
    f0f6:	7442      	strb	r2, [r0, #17]
    f0f8:	7f0a      	ldrb	r2, [r1, #28]
    f0fa:	7482      	strb	r2, [r0, #18]
    f0fc:	8b8a      	ldrh	r2, [r1, #28]
    f0fe:	0a12      	lsrs	r2, r2, #8
    f100:	74c2      	strb	r2, [r0, #19]
    f102:	7f89      	ldrb	r1, [r1, #30]
    f104:	7501      	strb	r1, [r0, #20]
    f106:	2113      	movs	r1, #19
    f108:	7041      	strb	r1, [r0, #1]
    f10a:	4608      	mov	r0, r1
    f10c:	4770      	bx	lr

0000f10e <sdc_hci_data_get>:
    f10e:	b510      	push	{r4, lr}
    f110:	b120      	cbz	r0, f11c <sdc_hci_data_get+0xe>
    f112:	f7ff fd34 	bl	eb7e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    f116:	b120      	cbz	r0, f122 <sdc_hci_data_get+0x14>
    f118:	2000      	movs	r0, #0
    f11a:	bd10      	pop	{r4, pc}
    f11c:	f06f 0015 	mvn.w	r0, #21
    f120:	bd10      	pop	{r4, pc}
    f122:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f126:	bd10      	pop	{r4, pc}

0000f128 <sdc_hci_data_put>:
    f128:	b510      	push	{r4, lr}
    f12a:	f06f 0415 	mvn.w	r4, #21
    f12e:	b120      	cbz	r0, f13a <sdc_hci_data_put+0x12>
    f130:	f7ff fd33 	bl	eb9a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    f134:	b108      	cbz	r0, f13a <sdc_hci_data_put+0x12>
    f136:	2000      	movs	r0, #0
    f138:	bd10      	pop	{r4, pc}
    f13a:	4620      	mov	r0, r4
    f13c:	bd10      	pop	{r4, pc}

0000f13e <sdc_hci_evt_get>:
    f13e:	b510      	push	{r4, lr}
    f140:	b120      	cbz	r0, f14c <sdc_hci_evt_get+0xe>
    f142:	f7f4 fd9d 	bl	3c80 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    f146:	b120      	cbz	r0, f152 <sdc_hci_evt_get+0x14>
    f148:	2000      	movs	r0, #0
    f14a:	bd10      	pop	{r4, pc}
    f14c:	f06f 0015 	mvn.w	r0, #21
    f150:	bd10      	pop	{r4, pc}
    f152:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f156:	bd10      	pop	{r4, pc}

0000f158 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    f158:	f002 b9ed 	b.w	11536 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000f15c <sdc_hci_cmd_cb_read_transmit_power_level>:
    f15c:	f002 ba3e 	b.w	115dc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000f160 <sdc_hci_cmd_cb_set_event_mask>:
    f160:	b510      	push	{r4, lr}
    f162:	f7f4 fe41 	bl	3de8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    f166:	2000      	movs	r0, #0
    f168:	bd10      	pop	{r4, pc}

0000f16a <sdc_hci_cmd_cb_set_event_mask_page_2>:
    f16a:	b510      	push	{r4, lr}
    f16c:	f7f4 fe4a 	bl	3e04 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    f170:	2000      	movs	r0, #0
    f172:	bd10      	pop	{r4, pc}

0000f174 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    f174:	f002 ba4d 	b.w	11612 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000f178 <sdc_hci_cmd_vs_conn_event_extend>:
    f178:	b508      	push	{r3, lr}
    f17a:	7800      	ldrb	r0, [r0, #0]
    f17c:	f88d 0000 	strb.w	r0, [sp]
    f180:	4668      	mov	r0, sp
    f182:	f002 f9a4 	bl	114ce <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    f186:	bd08      	pop	{r3, pc}

0000f188 <sdc_hci_cmd_vs_conn_update>:
    f188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f18a:	2100      	movs	r1, #0
    f18c:	9100      	str	r1, [sp, #0]
    f18e:	9101      	str	r1, [sp, #4]
    f190:	9102      	str	r1, [sp, #8]
    f192:	9103      	str	r1, [sp, #12]
    f194:	f8d0 1002 	ldr.w	r1, [r0, #2]
    f198:	f641 524c 	movw	r2, #7500	; 0x1d4c
    f19c:	4291      	cmp	r1, r2
    f19e:	d304      	bcc.n	f1aa <sdc_hci_cmd_vs_conn_update+0x22>
    f1a0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f1a4:	fbb1 f1f2 	udiv	r1, r1, r2
    f1a8:	e005      	b.n	f1b6 <sdc_hci_cmd_vs_conn_update+0x2e>
    f1aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f1ae:	fbb1 f1f2 	udiv	r1, r1, r2
    f1b2:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    f1b6:	8802      	ldrh	r2, [r0, #0]
    f1b8:	b289      	uxth	r1, r1
    f1ba:	f8ad 2000 	strh.w	r2, [sp]
    f1be:	f8ad 1002 	strh.w	r1, [sp, #2]
    f1c2:	f8ad 1004 	strh.w	r1, [sp, #4]
    f1c6:	88c1      	ldrh	r1, [r0, #6]
    f1c8:	f8ad 1006 	strh.w	r1, [sp, #6]
    f1cc:	8900      	ldrh	r0, [r0, #8]
    f1ce:	f8ad 0008 	strh.w	r0, [sp, #8]
    f1d2:	4668      	mov	r0, sp
    f1d4:	f001 ff51 	bl	1107a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    f1d8:	b004      	add	sp, #16
    f1da:	bd10      	pop	{r4, pc}

0000f1dc <sdc_hci_cmd_vs_event_length_set>:
    f1dc:	f7fd ba22 	b.w	c624 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000f1e0 <sdc_hci_cmd_vs_llpm_mode_set>:
    f1e0:	b508      	push	{r3, lr}
    f1e2:	7800      	ldrb	r0, [r0, #0]
    f1e4:	f88d 0000 	strb.w	r0, [sp]
    f1e8:	4668      	mov	r0, sp
    f1ea:	f7fd fa7b 	bl	c6e4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
    f1ee:	bd08      	pop	{r3, pc}

0000f1f0 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    f1f0:	7800      	ldrb	r0, [r0, #0]
    f1f2:	b100      	cbz	r0, f1f6 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    f1f4:	2001      	movs	r0, #1
    f1f6:	f002 b904 	b.w	11402 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000f1fa <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    f1fa:	b510      	push	{r4, lr}
    f1fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    f200:	4604      	mov	r4, r0
    f202:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    f206:	1c40      	adds	r0, r0, #1
    f208:	d105      	bne.n	f216 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    f20a:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    f20e:	43c0      	mvns	r0, r0
    f210:	0400      	lsls	r0, r0, #16
    f212:	0c00      	lsrs	r0, r0, #16
    f214:	d036      	beq.n	f284 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
    f216:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
    f21a:	07c0      	lsls	r0, r0, #31
    f21c:	d032      	beq.n	f284 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
    f21e:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    f222:	f8c4 0001 	str.w	r0, [r4, #1]
    f226:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    f22a:	f8a4 0005 	strh.w	r0, [r4, #5]
    f22e:	79a0      	ldrb	r0, [r4, #6]
    f230:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    f234:	71a0      	strb	r0, [r4, #6]
    f236:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    f23a:	1c40      	adds	r0, r0, #1
    f23c:	d019      	beq.n	f272 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f23e:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    f242:	1c40      	adds	r0, r0, #1
    f244:	d015      	beq.n	f272 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f246:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
    f24a:	1c40      	adds	r0, r0, #1
    f24c:	d011      	beq.n	f272 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f24e:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    f252:	1c40      	adds	r0, r0, #1
    f254:	d00d      	beq.n	f272 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f256:	f851 0f90 	ldr.w	r0, [r1, #144]!
    f25a:	f8c4 0007 	str.w	r0, [r4, #7]
    f25e:	6848      	ldr	r0, [r1, #4]
    f260:	f8c4 000b 	str.w	r0, [r4, #11]
    f264:	6888      	ldr	r0, [r1, #8]
    f266:	f8c4 000f 	str.w	r0, [r4, #15]
    f26a:	68c8      	ldr	r0, [r1, #12]
    f26c:	f8c4 0013 	str.w	r0, [r4, #19]
    f270:	e004      	b.n	f27c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x82>
    f272:	2210      	movs	r2, #16
    f274:	2100      	movs	r1, #0
    f276:	1de0      	adds	r0, r4, #7
    f278:	f7ff fbd4 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f27c:	2001      	movs	r0, #1
    f27e:	7020      	strb	r0, [r4, #0]
    f280:	2000      	movs	r0, #0
    f282:	bd10      	pop	{r4, pc}
    f284:	2000      	movs	r0, #0
    f286:	e7fa      	b.n	f27e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x84>

0000f288 <sdc_hci_cmd_vs_zephyr_read_supported_commands>:
    f288:	b510      	push	{r4, lr}
    f28a:	4604      	mov	r4, r0
    f28c:	2240      	movs	r2, #64	; 0x40
    f28e:	2100      	movs	r1, #0
    f290:	f7ff fbc8 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f294:	7861      	ldrb	r1, [r4, #1]
    f296:	7820      	ldrb	r0, [r4, #0]
    f298:	f041 0121 	orr.w	r1, r1, #33	; 0x21
    f29c:	7061      	strb	r1, [r4, #1]
    f29e:	f040 0023 	orr.w	r0, r0, #35	; 0x23
    f2a2:	7020      	strb	r0, [r4, #0]
    f2a4:	2000      	movs	r0, #0
    f2a6:	bd10      	pop	{r4, pc}

0000f2a8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    f2a8:	f002 b8f1 	b.w	1148e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000f2ac <sdc_hci_cmd_ip_read_bd_addr>:
    f2ac:	f002 b954 	b.w	11558 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000f2b0 <sdc_hci_cmd_ip_read_local_supported_features>:
    f2b0:	f002 b95e 	b.w	11570 <sym_2PTHETYGBZAPJ2ZKYDOVYDIWST3AXGZGS3MY6DI>

0000f2b4 <sdc_hci_cmd_ip_read_local_version_information>:
    f2b4:	f7fd ba2a 	b.w	c70c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000f2b8 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    f2b8:	f001 be90 	b.w	10fdc <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000f2bc <sdc_hci_cmd_le_add_device_to_white_list>:
    f2bc:	f001 bea9 	b.w	11012 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000f2c0 <sdc_hci_cmd_le_clear_resolving_list>:
    f2c0:	f001 bec4 	b.w	1104c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000f2c4 <sdc_hci_cmd_le_clear_white_list>:
    f2c4:	f001 becf 	b.w	11066 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000f2c8 <sdc_hci_cmd_le_encrypt>:
    f2c8:	f001 bf34 	b.w	11134 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000f2cc <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    f2cc:	8802      	ldrh	r2, [r0, #0]
    f2ce:	800a      	strh	r2, [r1, #0]
    f2d0:	f001 bf39 	b.w	11146 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000f2d4 <sdc_hci_cmd_le_long_term_key_request_reply>:
    f2d4:	8802      	ldrh	r2, [r0, #0]
    f2d6:	800a      	strh	r2, [r1, #0]
    f2d8:	f001 bf4e 	b.w	11178 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000f2dc <sdc_hci_cmd_le_rand>:
    f2dc:	f001 bf70 	b.w	111c0 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000f2e0 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    f2e0:	f7fc bfde 	b.w	c2a0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000f2e4 <sdc_hci_cmd_le_read_buffer_size>:
    f2e4:	f7fc bfea 	b.w	c2bc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000f2e8 <sdc_hci_cmd_le_read_channel_map>:
    f2e8:	f001 bf70 	b.w	111cc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000f2ec <sdc_hci_cmd_le_read_local_supported_features>:
    f2ec:	f001 bf8f 	b.w	1120e <sym_7YL5EH5YISPHYP3GLCPHHLYJDC4YFSU26ARBXOI>

0000f2f0 <sdc_hci_cmd_le_read_max_data_length>:
    f2f0:	f001 bf9b 	b.w	1122a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000f2f4 <sdc_hci_cmd_le_read_phy>:
    f2f4:	f7fc bfee 	b.w	c2d4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000f2f8 <sdc_hci_cmd_le_read_remote_features>:
    f2f8:	f7fd b814 	b.w	c324 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000f2fc <sdc_hci_cmd_le_read_resolving_list_size>:
    f2fc:	f001 bfa5 	b.w	1124a <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000f300 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    f300:	f7fd b840 	b.w	c384 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000f304 <sdc_hci_cmd_le_read_transmit_power>:
    f304:	f001 bfa5 	b.w	11252 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000f308 <sdc_hci_cmd_le_read_white_list_size>:
    f308:	f001 bfa9 	b.w	1125e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000f30c <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    f30c:	f001 bfab 	b.w	11266 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000f310 <sdc_hci_cmd_le_remove_device_from_white_list>:
    f310:	f001 bfc2 	b.w	11298 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000f314 <sdc_hci_cmd_le_set_address_resolution_enable>:
    f314:	f001 bfdc 	b.w	112d0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000f318 <sdc_hci_cmd_le_set_adv_data>:
    f318:	f7fd b844 	b.w	c3a4 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000f31c <sdc_hci_cmd_le_set_adv_enable>:
    f31c:	f7fd b872 	b.w	c404 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000f320 <sdc_hci_cmd_le_set_adv_params>:
    f320:	f7fd b88e 	b.w	c440 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000f324 <sdc_hci_cmd_le_set_data_length>:
    f324:	f001 bfe2 	b.w	112ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000f328 <sdc_hci_cmd_le_set_default_phy>:
    f328:	f7fd b900 	b.w	c52c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000f32c <sdc_hci_cmd_le_set_event_mask>:
    f32c:	b510      	push	{r4, lr}
    f32e:	f7f4 fd55 	bl	3ddc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    f332:	2000      	movs	r0, #0
    f334:	bd10      	pop	{r4, pc}

0000f336 <sdc_hci_cmd_le_set_phy>:
    f336:	f002 b800 	b.w	1133a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000f33a <sdc_hci_cmd_le_set_privacy_mode>:
    f33a:	f002 b81e 	b.w	1137a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000f33e <sdc_hci_cmd_le_set_random_address>:
    f33e:	f002 b832 	b.w	113a6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000f342 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    f342:	f002 b83e 	b.w	113c2 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000f346 <sdc_hci_cmd_le_set_scan_response_data>:
    f346:	f7fd b923 	b.w	c590 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000f34a <sdc_hci_cmd_le_write_suggested_default_data_length>:
    f34a:	f002 b843 	b.w	113d4 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000f34e <sdc_hci_cmd_lc_disconnect>:
    f34e:	f001 bde5 	b.w	10f1c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000f352 <sdc_hci_cmd_lc_read_remote_version_information>:
    f352:	f002 b914 	b.w	1157e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    f356:	b530      	push	{r4, r5, lr}
    f358:	8804      	ldrh	r4, [r0, #0]
    f35a:	f424 4500 	bic.w	r5, r4, #32768	; 0x8000
    f35e:	4429      	add	r1, r5
    f360:	b289      	uxth	r1, r1
    f362:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    f366:	4291      	cmp	r1, r2
    f368:	d20b      	bcs.n	f382 <sdc_hci_cmd_lc_read_remote_version_information+0x30>
    f36a:	1a52      	subs	r2, r2, r1
    f36c:	b292      	uxth	r2, r2
    f36e:	331b      	adds	r3, #27
    f370:	429a      	cmp	r2, r3
    f372:	d201      	bcs.n	f378 <sdc_hci_cmd_lc_read_remote_version_information+0x26>
    f374:	43a5      	bics	r5, r4
    f376:	e002      	b.n	f37e <sdc_hci_cmd_lc_read_remote_version_information+0x2c>
    f378:	f404 4500 	and.w	r5, r4, #32768	; 0x8000
    f37c:	430d      	orrs	r5, r1
    f37e:	8005      	strh	r5, [r0, #0]
    f380:	bd30      	pop	{r4, r5, pc}
    f382:	1a89      	subs	r1, r1, r2
    f384:	b289      	uxth	r1, r1
    f386:	43a5      	bics	r5, r4
    f388:	e7f8      	b.n	f37c <sdc_hci_cmd_lc_read_remote_version_information+0x2a>
    f38a:	b510      	push	{r4, lr}
    f38c:	8802      	ldrh	r2, [r0, #0]
    f38e:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    f392:	428b      	cmp	r3, r1
    f394:	d203      	bcs.n	f39e <sdc_hci_cmd_lc_read_remote_version_information+0x4c>
    f396:	21b6      	movs	r1, #182	; 0xb6
    f398:	2014      	movs	r0, #20
    f39a:	f7f4 fbf1 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f39e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f3a2:	4393      	bics	r3, r2
    f3a4:	430b      	orrs	r3, r1
    f3a6:	8003      	strh	r3, [r0, #0]
    f3a8:	bd10      	pop	{r4, pc}
    f3aa:	4288      	cmp	r0, r1
    f3ac:	d101      	bne.n	f3b2 <sdc_hci_cmd_lc_read_remote_version_information+0x60>
    f3ae:	2001      	movs	r0, #1
    f3b0:	4770      	bx	lr
    f3b2:	2000      	movs	r0, #0
    f3b4:	4770      	bx	lr
    f3b6:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    f3ba:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    f3be:	429a      	cmp	r2, r3
    f3c0:	d107      	bne.n	f3d2 <sdc_hci_cmd_lc_read_remote_version_information+0x80>
    f3c2:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    f3c6:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    f3ca:	4288      	cmp	r0, r1
    f3cc:	d001      	beq.n	f3d2 <sdc_hci_cmd_lc_read_remote_version_information+0x80>
    f3ce:	2001      	movs	r0, #1
    f3d0:	4770      	bx	lr
    f3d2:	2000      	movs	r0, #0
    f3d4:	4770      	bx	lr

0000f3d6 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    f3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3da:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f3de:	7f40      	ldrb	r0, [r0, #29]
    f3e0:	461d      	mov	r5, r3
    f3e2:	3008      	adds	r0, #8
    f3e4:	4690      	mov	r8, r2
    f3e6:	1843      	adds	r3, r0, r1
    f3e8:	2400      	movs	r4, #0
    f3ea:	8808      	ldrh	r0, [r1, #0]
    f3ec:	884f      	ldrh	r7, [r1, #2]
    f3ee:	9a06      	ldr	r2, [sp, #24]
    f3f0:	1edb      	subs	r3, r3, #3
    f3f2:	b190      	cbz	r0, f41a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x44>
    f3f4:	1cc0      	adds	r0, r0, #3
    f3f6:	b280      	uxth	r0, r0
    f3f8:	4290      	cmp	r0, r2
    f3fa:	d912      	bls.n	f422 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x4c>
    f3fc:	1a80      	subs	r0, r0, r2
    f3fe:	42a8      	cmp	r0, r5
    f400:	db00      	blt.n	f404 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2e>
    f402:	4628      	mov	r0, r5
    f404:	b284      	uxth	r4, r0
    f406:	1899      	adds	r1, r3, r2
    f408:	4622      	mov	r2, r4
    f40a:	4640      	mov	r0, r8
    f40c:	f7f4 fa2e 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f410:	1b28      	subs	r0, r5, r4
    f412:	b285      	uxth	r5, r0
    f414:	44a0      	add	r8, r4
    f416:	2000      	movs	r0, #0
    f418:	e005      	b.n	f426 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x50>
    f41a:	1cff      	adds	r7, r7, #3
    f41c:	b2bf      	uxth	r7, r7
    f41e:	1ef6      	subs	r6, r6, #3
    f420:	e7ea      	b.n	f3f8 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x22>
    f422:	1a10      	subs	r0, r2, r0
    f424:	b280      	uxth	r0, r0
    f426:	1941      	adds	r1, r0, r5
    f428:	42b9      	cmp	r1, r7
    f42a:	d806      	bhi.n	f43a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x64>
    f42c:	1831      	adds	r1, r6, r0
    f42e:	462a      	mov	r2, r5
    f430:	4640      	mov	r0, r8
    f432:	f7f4 fa1b 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f436:	1960      	adds	r0, r4, r5
    f438:	b284      	uxth	r4, r0
    f43a:	4620      	mov	r0, r4
    f43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f440 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    f440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f444:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f448:	7f40      	ldrb	r0, [r0, #29]
    f44a:	461d      	mov	r5, r3
    f44c:	3008      	adds	r0, #8
    f44e:	4690      	mov	r8, r2
    f450:	1843      	adds	r3, r0, r1
    f452:	2400      	movs	r4, #0
    f454:	8808      	ldrh	r0, [r1, #0]
    f456:	884f      	ldrh	r7, [r1, #2]
    f458:	9a06      	ldr	r2, [sp, #24]
    f45a:	1edb      	subs	r3, r3, #3
    f45c:	b190      	cbz	r0, f484 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x44>
    f45e:	1cc0      	adds	r0, r0, #3
    f460:	b280      	uxth	r0, r0
    f462:	4290      	cmp	r0, r2
    f464:	d912      	bls.n	f48c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x4c>
    f466:	1a80      	subs	r0, r0, r2
    f468:	42a8      	cmp	r0, r5
    f46a:	db00      	blt.n	f46e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2e>
    f46c:	4628      	mov	r0, r5
    f46e:	b284      	uxth	r4, r0
    f470:	1898      	adds	r0, r3, r2
    f472:	4622      	mov	r2, r4
    f474:	4641      	mov	r1, r8
    f476:	f7f4 f9f9 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f47a:	1b28      	subs	r0, r5, r4
    f47c:	b285      	uxth	r5, r0
    f47e:	44a0      	add	r8, r4
    f480:	2000      	movs	r0, #0
    f482:	e005      	b.n	f490 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x50>
    f484:	1cff      	adds	r7, r7, #3
    f486:	b2bf      	uxth	r7, r7
    f488:	1ef6      	subs	r6, r6, #3
    f48a:	e7ea      	b.n	f462 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x22>
    f48c:	1a10      	subs	r0, r2, r0
    f48e:	b280      	uxth	r0, r0
    f490:	1941      	adds	r1, r0, r5
    f492:	42b9      	cmp	r1, r7
    f494:	d806      	bhi.n	f4a4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x64>
    f496:	4430      	add	r0, r6
    f498:	462a      	mov	r2, r5
    f49a:	4641      	mov	r1, r8
    f49c:	f7f4 f9e6 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f4a0:	1960      	adds	r0, r4, r5
    f4a2:	b284      	uxth	r4, r0
    f4a4:	4620      	mov	r0, r4
    f4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f4aa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    f4aa:	88c1      	ldrh	r1, [r0, #6]
    f4ac:	8880      	ldrh	r0, [r0, #4]
    f4ae:	f7ff bf7c 	b.w	f3aa <sdc_hci_cmd_lc_read_remote_version_information+0x58>

0000f4b2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    f4b2:	8881      	ldrh	r1, [r0, #4]
    f4b4:	8900      	ldrh	r0, [r0, #8]
    f4b6:	f7ff bf78 	b.w	f3aa <sdc_hci_cmd_lc_read_remote_version_information+0x58>

0000f4ba <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    f4ba:	b570      	push	{r4, r5, r6, lr}
    f4bc:	4604      	mov	r4, r0
    f4be:	f100 0128 	add.w	r1, r0, #40	; 0x28
    f4c2:	8880      	ldrh	r0, [r0, #4]
    f4c4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    f4c8:	1842      	adds	r2, r0, r1
    f4ca:	8a20      	ldrh	r0, [r4, #16]
    f4cc:	2800      	cmp	r0, #0
    f4ce:	d027      	beq.n	f520 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x66>
    f4d0:	89a1      	ldrh	r1, [r4, #12]
    f4d2:	2500      	movs	r5, #0
    f4d4:	4408      	add	r0, r1
    f4d6:	b280      	uxth	r0, r0
    f4d8:	81a0      	strh	r0, [r4, #12]
    f4da:	8811      	ldrh	r1, [r2, #0]
    f4dc:	8853      	ldrh	r3, [r2, #2]
    f4de:	4419      	add	r1, r3
    f4e0:	4281      	cmp	r1, r0
    f4e2:	d205      	bcs.n	f4f0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x36>
    f4e4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    f4e8:	f04f 0014 	mov.w	r0, #20
    f4ec:	f7f4 fb48 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4f0:	d114      	bne.n	f51c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x62>
    f4f2:	69a0      	ldr	r0, [r4, #24]
    f4f4:	b108      	cbz	r0, f4fa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x40>
    f4f6:	7f80      	ldrb	r0, [r0, #30]
    f4f8:	7110      	strb	r0, [r2, #4]
    f4fa:	8851      	ldrh	r1, [r2, #2]
    f4fc:	b121      	cbz	r1, f508 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4e>
    f4fe:	f104 0004 	add.w	r0, r4, #4
    f502:	f7ff ff42 	bl	f38a <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f506:	e008      	b.n	f51a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x60>
    f508:	7f63      	ldrb	r3, [r4, #29]
    f50a:	8810      	ldrh	r0, [r2, #0]
    f50c:	3308      	adds	r3, #8
    f50e:	4418      	add	r0, r3
    f510:	b281      	uxth	r1, r0
    f512:	8862      	ldrh	r2, [r4, #2]
    f514:	1d20      	adds	r0, r4, #4
    f516:	f7ff ff1e 	bl	f356 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    f51a:	81a5      	strh	r5, [r4, #12]
    f51c:	8225      	strh	r5, [r4, #16]
    f51e:	2001      	movs	r0, #1
    f520:	bd70      	pop	{r4, r5, r6, pc}

0000f522 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    f522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f526:	4604      	mov	r4, r0
    f528:	f100 0328 	add.w	r3, r0, #40	; 0x28
    f52c:	88c0      	ldrh	r0, [r0, #6]
    f52e:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    f532:	8a60      	ldrh	r0, [r4, #18]
    f534:	19dd      	adds	r5, r3, r7
    f536:	b108      	cbz	r0, f53c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    f538:	4288      	cmp	r0, r1
    f53a:	d202      	bcs.n	f542 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x20>
    f53c:	2000      	movs	r0, #0
    f53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f542:	89e6      	ldrh	r6, [r4, #14]
    f544:	b15e      	cbz	r6, f55e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3c>
    f546:	8828      	ldrh	r0, [r5, #0]
    f548:	f8b5 c002 	ldrh.w	ip, [r5, #2]
    f54c:	eb00 080c 	add.w	r8, r0, ip
    f550:	4546      	cmp	r6, r8
    f552:	d008      	beq.n	f566 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x44>
    f554:	f240 3112 	movw	r1, #786	; 0x312
    f558:	2014      	movs	r0, #20
    f55a:	f7f4 fb11 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f55e:	2000      	movs	r0, #0
    f560:	7fa6      	ldrb	r6, [r4, #30]
    f562:	4684      	mov	ip, r0
    f564:	712e      	strb	r6, [r5, #4]
    f566:	f894 801c 	ldrb.w	r8, [r4, #28]
    f56a:	f04f 0600 	mov.w	r6, #0
    f56e:	46c1      	mov	r9, r8
    f570:	ea58 080c 	orrs.w	r8, r8, ip
    f574:	d003      	beq.n	f57e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    f576:	ea5f 0709 	movs.w	r7, r9
    f57a:	d02d      	beq.n	f5d8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xb6>
    f57c:	e037      	b.n	f5ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xcc>
    f57e:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    f582:	f1bc 0f00 	cmp.w	ip, #0
    f586:	d00e      	beq.n	f5a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x84>
    f588:	f894 801d 	ldrb.w	r8, [r4, #29]
    f58c:	449c      	add	ip, r3
    f58e:	f108 0808 	add.w	r8, r8, #8
    f592:	44b8      	add	r8, r7
    f594:	44c4      	add	ip, r8
    f596:	f8b4 801f 	ldrh.w	r8, [r4, #31]
    f59a:	f82c 8c03 	strh.w	r8, [ip, #-3]
    f59e:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
    f5a2:	f80c 8c01 	strb.w	r8, [ip, #-1]
    f5a6:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    f5aa:	4408      	add	r0, r1
    f5ac:	4461      	add	r1, ip
    f5ae:	81e1      	strh	r1, [r4, #14]
    f5b0:	8028      	strh	r0, [r5, #0]
    f5b2:	806e      	strh	r6, [r5, #2]
    f5b4:	b14a      	cbz	r2, f5ca <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa8>
    f5b6:	7f63      	ldrb	r3, [r4, #29]
    f5b8:	8828      	ldrh	r0, [r5, #0]
    f5ba:	3308      	adds	r3, #8
    f5bc:	4418      	add	r0, r3
    f5be:	b281      	uxth	r1, r0
    f5c0:	8862      	ldrh	r2, [r4, #2]
    f5c2:	1da0      	adds	r0, r4, #6
    f5c4:	f7ff fec7 	bl	f356 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    f5c8:	e01f      	b.n	f60a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xe8>
    f5ca:	7f60      	ldrb	r0, [r4, #29]
    f5cc:	89e1      	ldrh	r1, [r4, #14]
    f5ce:	3008      	adds	r0, #8
    f5d0:	4438      	add	r0, r7
    f5d2:	4419      	add	r1, r3
    f5d4:	4408      	add	r0, r1
    f5d6:	e028      	b.n	f62a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x108>
    f5d8:	89e7      	ldrh	r7, [r4, #14]
    f5da:	f8b4 801f 	ldrh.w	r8, [r4, #31]
    f5de:	441f      	add	r7, r3
    f5e0:	1a3f      	subs	r7, r7, r0
    f5e2:	f827 8c03 	strh.w	r8, [r7, #-3]
    f5e6:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
    f5ea:	f807 8c01 	strb.w	r8, [r7, #-1]
    f5ee:	eb0c 0701 	add.w	r7, ip, r1
    f5f2:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    f5f6:	b2bf      	uxth	r7, r7
    f5f8:	4461      	add	r1, ip
    f5fa:	81e1      	strh	r1, [r4, #14]
    f5fc:	8028      	strh	r0, [r5, #0]
    f5fe:	806f      	strh	r7, [r5, #2]
    f600:	b182      	cbz	r2, f624 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x102>
    f602:	4639      	mov	r1, r7
    f604:	1da0      	adds	r0, r4, #6
    f606:	f7ff fec0 	bl	f38a <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f60a:	81e6      	strh	r6, [r4, #14]
    f60c:	7fa0      	ldrb	r0, [r4, #30]
    f60e:	1c40      	adds	r0, r0, #1
    f610:	77a0      	strb	r0, [r4, #30]
    f612:	7da0      	ldrb	r0, [r4, #22]
    f614:	b108      	cbz	r0, f61a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xf8>
    f616:	88e0      	ldrh	r0, [r4, #6]
    f618:	82a0      	strh	r0, [r4, #20]
    f61a:	75a6      	strb	r6, [r4, #22]
    f61c:	8266      	strh	r6, [r4, #18]
    f61e:	75e6      	strb	r6, [r4, #23]
    f620:	2001      	movs	r0, #1
    f622:	e78c      	b.n	f53e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    f624:	89e1      	ldrh	r1, [r4, #14]
    f626:	4419      	add	r1, r3
    f628:	1a08      	subs	r0, r1, r0
    f62a:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    f62e:	f8a4 101f 	strh.w	r1, [r4, #31]
    f632:	7880      	ldrb	r0, [r0, #2]
    f634:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    f638:	e7f0      	b.n	f61c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xfa>

0000f63a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    f63a:	b570      	push	{r4, r5, r6, lr}
    f63c:	4604      	mov	r4, r0
    f63e:	f100 0228 	add.w	r2, r0, #40	; 0x28
    f642:	88c1      	ldrh	r1, [r0, #6]
    f644:	8880      	ldrh	r0, [r0, #4]
    f646:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    f64a:	18d5      	adds	r5, r2, r3
    f64c:	f7ff fead 	bl	f3aa <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f650:	b938      	cbnz	r0, f662 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    f652:	89a0      	ldrh	r0, [r4, #12]
    f654:	b928      	cbnz	r0, f662 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    f656:	8a20      	ldrh	r0, [r4, #16]
    f658:	b918      	cbnz	r0, f662 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    f65a:	88a0      	ldrh	r0, [r4, #4]
    f65c:	8aa1      	ldrh	r1, [r4, #20]
    f65e:	4288      	cmp	r0, r1
    f660:	d101      	bne.n	f666 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x2c>
    f662:	2000      	movs	r0, #0
    f664:	bd70      	pop	{r4, r5, r6, pc}
    f666:	8828      	ldrh	r0, [r5, #0]
    f668:	8869      	ldrh	r1, [r5, #2]
    f66a:	b131      	cbz	r1, f67a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x40>
    f66c:	1d20      	adds	r0, r4, #4
    f66e:	f7ff fe8c 	bl	f38a <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f672:	2000      	movs	r0, #0
    f674:	8220      	strh	r0, [r4, #16]
    f676:	2001      	movs	r0, #1
    f678:	bd70      	pop	{r4, r5, r6, pc}
    f67a:	7f63      	ldrb	r3, [r4, #29]
    f67c:	8862      	ldrh	r2, [r4, #2]
    f67e:	3308      	adds	r3, #8
    f680:	4418      	add	r0, r3
    f682:	b281      	uxth	r1, r0
    f684:	1d20      	adds	r0, r4, #4
    f686:	f7ff fe66 	bl	f356 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    f68a:	e7f2      	b.n	f672 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x38>

0000f68c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    f68c:	b570      	push	{r4, r5, r6, lr}
    f68e:	4604      	mov	r4, r0
    f690:	f100 0228 	add.w	r2, r0, #40	; 0x28
    f694:	88c0      	ldrh	r0, [r0, #6]
    f696:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    f69a:	7de0      	ldrb	r0, [r4, #23]
    f69c:	2800      	cmp	r0, #0
    f69e:	d006      	beq.n	f6ae <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x22>
    f6a0:	18d0      	adds	r0, r2, r3
    f6a2:	8802      	ldrh	r2, [r0, #0]
    f6a4:	8843      	ldrh	r3, [r0, #2]
    f6a6:	4413      	add	r3, r2
    f6a8:	428b      	cmp	r3, r1
    f6aa:	d201      	bcs.n	f6b0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x24>
    f6ac:	2000      	movs	r0, #0
    f6ae:	bd70      	pop	{r4, r5, r6, pc}
    f6b0:	2500      	movs	r5, #0
    f6b2:	428a      	cmp	r2, r1
    f6b4:	d302      	bcc.n	f6bc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x30>
    f6b6:	8001      	strh	r1, [r0, #0]
    f6b8:	8045      	strh	r5, [r0, #2]
    f6ba:	e008      	b.n	f6ce <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
    f6bc:	1a89      	subs	r1, r1, r2
    f6be:	0409      	lsls	r1, r1, #16
    f6c0:	0c09      	lsrs	r1, r1, #16
    f6c2:	8041      	strh	r1, [r0, #2]
    f6c4:	d003      	beq.n	f6ce <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
    f6c6:	1da0      	adds	r0, r4, #6
    f6c8:	f7ff fe5f 	bl	f38a <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f6cc:	e008      	b.n	f6e0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x54>
    f6ce:	7f63      	ldrb	r3, [r4, #29]
    f6d0:	8800      	ldrh	r0, [r0, #0]
    f6d2:	3308      	adds	r3, #8
    f6d4:	4418      	add	r0, r3
    f6d6:	b281      	uxth	r1, r0
    f6d8:	8862      	ldrh	r2, [r4, #2]
    f6da:	1da0      	adds	r0, r4, #6
    f6dc:	f7ff fe3b 	bl	f356 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    f6e0:	75e5      	strb	r5, [r4, #23]
    f6e2:	2001      	movs	r0, #1
    f6e4:	bd70      	pop	{r4, r5, r6, pc}

0000f6e6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    f6e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f6ea:	4604      	mov	r4, r0
    f6ec:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f6f0:	8947      	ldrh	r7, [r0, #10]
    f6f2:	8880      	ldrh	r0, [r0, #4]
    f6f4:	2500      	movs	r5, #0
    f6f6:	4681      	mov	r9, r0
    f6f8:	4601      	mov	r1, r0
    f6fa:	4638      	mov	r0, r7
    f6fc:	f7ff fe55 	bl	f3aa <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f700:	b9e0      	cbnz	r0, f73c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x56>
    f702:	f104 080a 	add.w	r8, r4, #10
    f706:	f427 4000 	bic.w	r0, r7, #32768	; 0x8000
    f70a:	4430      	add	r0, r6
    f70c:	8841      	ldrh	r1, [r0, #2]
    f70e:	b119      	cbz	r1, f718 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x32>
    f710:	4640      	mov	r0, r8
    f712:	f7ff fe3a 	bl	f38a <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f716:	e008      	b.n	f72a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x44>
    f718:	7f63      	ldrb	r3, [r4, #29]
    f71a:	8800      	ldrh	r0, [r0, #0]
    f71c:	3308      	adds	r3, #8
    f71e:	4418      	add	r0, r3
    f720:	b281      	uxth	r1, r0
    f722:	8862      	ldrh	r2, [r4, #2]
    f724:	4640      	mov	r0, r8
    f726:	f7ff fe16 	bl	f356 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    f72a:	8967      	ldrh	r7, [r4, #10]
    f72c:	1c6d      	adds	r5, r5, #1
    f72e:	b2ad      	uxth	r5, r5
    f730:	4649      	mov	r1, r9
    f732:	4638      	mov	r0, r7
    f734:	f7ff fe39 	bl	f3aa <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f738:	2800      	cmp	r0, #0
    f73a:	d0e4      	beq.n	f706 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    f73c:	4628      	mov	r0, r5
    f73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f742 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    f742:	b570      	push	{r4, r5, r6, lr}
    f744:	4604      	mov	r4, r0
    f746:	f100 0228 	add.w	r2, r0, #40	; 0x28
    f74a:	88c1      	ldrh	r1, [r0, #6]
    f74c:	8880      	ldrh	r0, [r0, #4]
    f74e:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    f752:	18d5      	adds	r5, r2, r3
    f754:	88a2      	ldrh	r2, [r4, #4]
    f756:	8aa3      	ldrh	r3, [r4, #20]
    f758:	429a      	cmp	r2, r3
    f75a:	d013      	beq.n	f784 <__kernel_ram_size+0x3c>
    f75c:	f7ff fe25 	bl	f3aa <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f760:	b980      	cbnz	r0, f784 <__kernel_ram_size+0x3c>
    f762:	89a0      	ldrh	r0, [r4, #12]
    f764:	b970      	cbnz	r0, f784 <__kernel_ram_size+0x3c>
    f766:	69a4      	ldr	r4, [r4, #24]
    f768:	b174      	cbz	r4, f788 <__kernel_ram_size+0x40>
    f76a:	4620      	mov	r0, r4
    f76c:	f7ff fea1 	bl	f4b2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    f770:	b950      	cbnz	r0, f788 <__kernel_ram_size+0x40>
    f772:	8920      	ldrh	r0, [r4, #8]
    f774:	3428      	adds	r4, #40	; 0x28
    f776:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    f77a:	4420      	add	r0, r4
    f77c:	7929      	ldrb	r1, [r5, #4]
    f77e:	7900      	ldrb	r0, [r0, #4]
    f780:	4288      	cmp	r0, r1
    f782:	d101      	bne.n	f788 <__kernel_ram_size+0x40>
    f784:	2000      	movs	r0, #0
    f786:	bd70      	pop	{r4, r5, r6, pc}
    f788:	4628      	mov	r0, r5
    f78a:	bd70      	pop	{r4, r5, r6, pc}

0000f78c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    f78c:	f100 0328 	add.w	r3, r0, #40	; 0x28
    f790:	7f40      	ldrb	r0, [r0, #29]
    f792:	3008      	adds	r0, #8
    f794:	4408      	add	r0, r1
    f796:	1ec0      	subs	r0, r0, #3
    f798:	6010      	str	r0, [r2, #0]
    f79a:	8808      	ldrh	r0, [r1, #0]
    f79c:	b908      	cbnz	r0, f7a2 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY+0x16>
    f79e:	1edb      	subs	r3, r3, #3
    f7a0:	6013      	str	r3, [r2, #0]
    f7a2:	8808      	ldrh	r0, [r1, #0]
    f7a4:	8849      	ldrh	r1, [r1, #2]
    f7a6:	4408      	add	r0, r1
    f7a8:	b280      	uxth	r0, r0
    f7aa:	4770      	bx	lr

0000f7ac <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    f7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7b0:	460e      	mov	r6, r1
    f7b2:	88c1      	ldrh	r1, [r0, #6]
    f7b4:	4604      	mov	r4, r0
    f7b6:	f100 0828 	add.w	r8, r0, #40	; 0x28
    f7ba:	8900      	ldrh	r0, [r0, #8]
    f7bc:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    f7c0:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    f7c4:	f7ff fdf7 	bl	f3b6 <sdc_hci_cmd_lc_read_remote_version_information+0x64>
    f7c8:	b110      	cbz	r0, f7d0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x24>
    f7ca:	2000      	movs	r0, #0
    f7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7d0:	2200      	movs	r2, #0
    f7d2:	2301      	movs	r3, #1
    f7d4:	7f60      	ldrb	r0, [r4, #29]
    f7d6:	42af      	cmp	r7, r5
    f7d8:	d90b      	bls.n	f7f2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x46>
    f7da:	1b79      	subs	r1, r7, r5
    f7dc:	3008      	adds	r0, #8
    f7de:	1a08      	subs	r0, r1, r0
    f7e0:	4286      	cmp	r6, r0
    f7e2:	dc1d      	bgt.n	f820 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
    f7e4:	eb08 0005 	add.w	r0, r8, r5
    f7e8:	2100      	movs	r1, #0
    f7ea:	8006      	strh	r6, [r0, #0]
    f7ec:	8041      	strh	r1, [r0, #2]
    f7ee:	75e3      	strb	r3, [r4, #23]
    f7f0:	e7ec      	b.n	f7cc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    f7f2:	8861      	ldrh	r1, [r4, #2]
    f7f4:	3008      	adds	r0, #8
    f7f6:	1b49      	subs	r1, r1, r5
    f7f8:	1a08      	subs	r0, r1, r0
    f7fa:	d411      	bmi.n	f820 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
    f7fc:	281b      	cmp	r0, #27
    f7fe:	da04      	bge.n	f80a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x5e>
    f800:	f240 111d 	movw	r1, #285	; 0x11d
    f804:	2014      	movs	r0, #20
    f806:	f7f4 f9bb 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f80a:	4286      	cmp	r6, r0
    f80c:	dc01      	bgt.n	f812 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x66>
    f80e:	4630      	mov	r0, r6
    f810:	e000      	b.n	f814 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x68>
    f812:	b280      	uxth	r0, r0
    f814:	1a31      	subs	r1, r6, r0
    f816:	0409      	lsls	r1, r1, #16
    f818:	0c09      	lsrs	r1, r1, #16
    f81a:	d003      	beq.n	f824 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
    f81c:	42b9      	cmp	r1, r7
    f81e:	dd01      	ble.n	f824 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
    f820:	75e2      	strb	r2, [r4, #23]
    f822:	e7d2      	b.n	f7ca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x1e>
    f824:	eb08 0205 	add.w	r2, r8, r5
    f828:	8010      	strh	r0, [r2, #0]
    f82a:	8051      	strh	r1, [r2, #2]
    f82c:	75e3      	strb	r3, [r4, #23]
    f82e:	4610      	mov	r0, r2
    f830:	e7cc      	b.n	f7cc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>

0000f832 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    f832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f836:	4604      	mov	r4, r0
    f838:	f100 0228 	add.w	r2, r0, #40	; 0x28
    f83c:	88c1      	ldrh	r1, [r0, #6]
    f83e:	8880      	ldrh	r0, [r0, #4]
    f840:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    f844:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    f848:	19d6      	adds	r6, r2, r7
    f84a:	f7ff fdae 	bl	f3aa <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f84e:	b9e8      	cbnz	r0, f88c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    f850:	89a0      	ldrh	r0, [r4, #12]
    f852:	8a21      	ldrh	r1, [r4, #16]
    f854:	8832      	ldrh	r2, [r6, #0]
    f856:	4401      	add	r1, r0
    f858:	8870      	ldrh	r0, [r6, #2]
    f85a:	1813      	adds	r3, r2, r0
    f85c:	4299      	cmp	r1, r3
    f85e:	d312      	bcc.n	f886 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    f860:	b110      	cbz	r0, f868 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    f862:	42a8      	cmp	r0, r5
    f864:	d30f      	bcc.n	f886 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    f866:	e011      	b.n	f88c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    f868:	7f61      	ldrb	r1, [r4, #29]
    f86a:	3108      	adds	r1, #8
    f86c:	19c8      	adds	r0, r1, r7
    f86e:	4410      	add	r0, r2
    f870:	8862      	ldrh	r2, [r4, #2]
    f872:	b280      	uxth	r0, r0
    f874:	1a12      	subs	r2, r2, r0
    f876:	b292      	uxth	r2, r2
    f878:	311b      	adds	r1, #27
    f87a:	4291      	cmp	r1, r2
    f87c:	d901      	bls.n	f882 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x50>
    f87e:	b915      	cbnz	r5, f886 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    f880:	e004      	b.n	f88c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    f882:	42a8      	cmp	r0, r5
    f884:	d002      	beq.n	f88c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    f886:	2001      	movs	r0, #1
    f888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f88c:	2000      	movs	r0, #0
    f88e:	e7fb      	b.n	f888 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x56>

0000f890 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    f890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f894:	460f      	mov	r7, r1
    f896:	4604      	mov	r4, r0
    f898:	f100 0528 	add.w	r5, r0, #40	; 0x28
    f89c:	88c1      	ldrh	r1, [r0, #6]
    f89e:	8880      	ldrh	r0, [r0, #4]
    f8a0:	4690      	mov	r8, r2
    f8a2:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    f8a6:	18ae      	adds	r6, r5, r2
    f8a8:	f7ff fd7f 	bl	f3aa <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f8ac:	b118      	cbz	r0, f8b6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x26>
    f8ae:	2000      	movs	r0, #0
    f8b0:	8220      	strh	r0, [r4, #16]
    f8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8b6:	89a0      	ldrh	r0, [r4, #12]
    f8b8:	8831      	ldrh	r1, [r6, #0]
    f8ba:	4288      	cmp	r0, r1
    f8bc:	d306      	bcc.n	f8cc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3c>
    f8be:	1a40      	subs	r0, r0, r1
    f8c0:	8871      	ldrh	r1, [r6, #2]
    f8c2:	1a09      	subs	r1, r1, r0
    f8c4:	4428      	add	r0, r5
    f8c6:	b289      	uxth	r1, r1
    f8c8:	1ec0      	subs	r0, r0, #3
    f8ca:	e005      	b.n	f8d8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x48>
    f8cc:	1a09      	subs	r1, r1, r0
    f8ce:	7f62      	ldrb	r2, [r4, #29]
    f8d0:	b289      	uxth	r1, r1
    f8d2:	4410      	add	r0, r2
    f8d4:	4430      	add	r0, r6
    f8d6:	1d40      	adds	r0, r0, #5
    f8d8:	883a      	ldrh	r2, [r7, #0]
    f8da:	428a      	cmp	r2, r1
    f8dc:	d900      	bls.n	f8e0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x50>
    f8de:	8039      	strh	r1, [r7, #0]
    f8e0:	89a1      	ldrh	r1, [r4, #12]
    f8e2:	b129      	cbz	r1, f8f0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x60>
    f8e4:	2100      	movs	r1, #0
    f8e6:	f888 1000 	strb.w	r1, [r8]
    f8ea:	8839      	ldrh	r1, [r7, #0]
    f8ec:	8221      	strh	r1, [r4, #16]
    f8ee:	e7e0      	b.n	f8b2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x22>
    f8f0:	2101      	movs	r1, #1
    f8f2:	e7f8      	b.n	f8e6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x56>

0000f8f4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    f8f4:	b510      	push	{r4, lr}
    f8f6:	8a81      	ldrh	r1, [r0, #20]
    f8f8:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    f8fc:	3aff      	subs	r2, #255	; 0xff
    f8fe:	d002      	beq.n	f906 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    f900:	7d82      	ldrb	r2, [r0, #22]
    f902:	b95a      	cbnz	r2, f91c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    f904:	e004      	b.n	f910 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    f906:	f240 41ea 	movw	r1, #1258	; 0x4ea
    f90a:	2014      	movs	r0, #20
    f90c:	f7f4 f938 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f910:	8880      	ldrh	r0, [r0, #4]
    f912:	f7ff fd4a 	bl	f3aa <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f916:	b108      	cbz	r0, f91c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    f918:	2000      	movs	r0, #0
    f91a:	bd10      	pop	{r4, pc}
    f91c:	2001      	movs	r0, #1
    f91e:	bd10      	pop	{r4, pc}

0000f920 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    f920:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f924:	8281      	strh	r1, [r0, #20]
    f926:	2100      	movs	r1, #0
    f928:	7581      	strb	r1, [r0, #22]
    f92a:	4770      	bx	lr

0000f92c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    f92c:	b510      	push	{r4, lr}
    f92e:	8a81      	ldrh	r1, [r0, #20]
    f930:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    f934:	3aff      	subs	r2, #255	; 0xff
    f936:	d004      	beq.n	f942 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    f938:	f240 41cd 	movw	r1, #1229	; 0x4cd
    f93c:	2014      	movs	r0, #20
    f93e:	f7f4 f91f 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f942:	88c1      	ldrh	r1, [r0, #6]
    f944:	8281      	strh	r1, [r0, #20]
    f946:	89c1      	ldrh	r1, [r0, #14]
    f948:	b101      	cbz	r1, f94c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    f94a:	2101      	movs	r1, #1
    f94c:	7581      	strb	r1, [r0, #22]
    f94e:	bd10      	pop	{r4, pc}

0000f950 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    f950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f954:	461e      	mov	r6, r3
    f956:	4613      	mov	r3, r2
    f958:	460f      	mov	r7, r1
    f95a:	4604      	mov	r4, r0
    f95c:	4631      	mov	r1, r6
    f95e:	4618      	mov	r0, r3
    f960:	9a06      	ldr	r2, [sp, #24]
    f962:	f000 f864 	bl	fa2e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    f966:	4605      	mov	r5, r0
    f968:	42af      	cmp	r7, r5
    f96a:	d201      	bcs.n	f970 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    f96c:	21ca      	movs	r1, #202	; 0xca
    f96e:	e016      	b.n	f99e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
    f970:	2228      	movs	r2, #40	; 0x28
    f972:	2100      	movs	r1, #0
    f974:	4620      	mov	r0, r4
    f976:	f7ff f855 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f97a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f97e:	82a0      	strh	r0, [r4, #20]
    f980:	3d28      	subs	r5, #40	; 0x28
    f982:	b2a8      	uxth	r0, r5
    f984:	7766      	strb	r6, [r4, #29]
    f986:	8060      	strh	r0, [r4, #2]
    f988:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    f98c:	d901      	bls.n	f992 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x42>
    f98e:	21d0      	movs	r1, #208	; 0xd0
    f990:	e005      	b.n	f99e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
    f992:	f106 013c 	add.w	r1, r6, #60	; 0x3c
    f996:	3608      	adds	r6, #8
    f998:	4281      	cmp	r1, r0
    f99a:	d903      	bls.n	f9a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x54>
    f99c:	21d2      	movs	r1, #210	; 0xd2
    f99e:	2014      	movs	r0, #20
    f9a0:	f7f4 f8ee 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9a4:	1b80      	subs	r0, r0, r6
    f9a6:	3834      	subs	r0, #52	; 0x34
    f9a8:	b280      	uxth	r0, r0
    f9aa:	8020      	strh	r0, [r4, #0]
    f9ac:	281b      	cmp	r0, #27
    f9ae:	d200      	bcs.n	f9b2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x62>
    f9b0:	201b      	movs	r0, #27
    f9b2:	8020      	strh	r0, [r4, #0]
    f9b4:	2000      	movs	r0, #0
    f9b6:	77a0      	strb	r0, [r4, #30]
    f9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f9bc <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    f9bc:	6181      	str	r1, [r0, #24]
    f9be:	6188      	str	r0, [r1, #24]
    f9c0:	4770      	bx	lr

0000f9c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    f9c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f9c6:	4604      	mov	r4, r0
    f9c8:	4689      	mov	r9, r1
    f9ca:	8927      	ldrh	r7, [r4, #8]
    f9cc:	f8b4 800a 	ldrh.w	r8, [r4, #10]
    f9d0:	88a1      	ldrh	r1, [r4, #4]
    f9d2:	4616      	mov	r6, r2
    f9d4:	3028      	adds	r0, #40	; 0x28
    f9d6:	f427 4200 	bic.w	r2, r7, #32768	; 0x8000
    f9da:	1885      	adds	r5, r0, r2
    f9dc:	4638      	mov	r0, r7
    f9de:	f7ff fce4 	bl	f3aa <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f9e2:	b110      	cbz	r0, f9ea <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    f9e4:	2000      	movs	r0, #0
    f9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f9ea:	b10e      	cbz	r6, f9f0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2e>
    f9ec:	1d68      	adds	r0, r5, #5
    f9ee:	6030      	str	r0, [r6, #0]
    f9f0:	f1b9 0f00 	cmp.w	r9, #0
    f9f4:	d004      	beq.n	fa00 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x3e>
    f9f6:	7f62      	ldrb	r2, [r4, #29]
    f9f8:	1d69      	adds	r1, r5, #5
    f9fa:	4648      	mov	r0, r9
    f9fc:	f7f3 ff36 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fa00:	882e      	ldrh	r6, [r5, #0]
    fa02:	8869      	ldrh	r1, [r5, #2]
    fa04:	f104 0008 	add.w	r0, r4, #8
    fa08:	b121      	cbz	r1, fa14 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x52>
    fa0a:	198a      	adds	r2, r1, r6
    fa0c:	b296      	uxth	r6, r2
    fa0e:	f7ff fcbc 	bl	f38a <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fa12:	e006      	b.n	fa22 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x60>
    fa14:	7f63      	ldrb	r3, [r4, #29]
    fa16:	8862      	ldrh	r2, [r4, #2]
    fa18:	3308      	adds	r3, #8
    fa1a:	1999      	adds	r1, r3, r6
    fa1c:	b289      	uxth	r1, r1
    fa1e:	f7ff fc9a 	bl	f356 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fa22:	4547      	cmp	r7, r8
    fa24:	d101      	bne.n	fa2a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x68>
    fa26:	8920      	ldrh	r0, [r4, #8]
    fa28:	8160      	strh	r0, [r4, #10]
    fa2a:	4630      	mov	r0, r6
    fa2c:	e7db      	b.n	f9e6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>

0000fa2e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    fa2e:	f101 0308 	add.w	r3, r1, #8
    fa32:	4418      	add	r0, r3
    fa34:	4350      	muls	r0, r2
    fa36:	314a      	adds	r1, #74	; 0x4a
    fa38:	4408      	add	r0, r1
    fa3a:	b280      	uxth	r0, r0
    fa3c:	4770      	bx	lr

0000fa3e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    fa3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa42:	4688      	mov	r8, r1
    fa44:	88c1      	ldrh	r1, [r0, #6]
    fa46:	4604      	mov	r4, r0
    fa48:	8900      	ldrh	r0, [r0, #8]
    fa4a:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    fa4e:	f104 0628 	add.w	r6, r4, #40	; 0x28
    fa52:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fa56:	eb06 0905 	add.w	r9, r6, r5
    fa5a:	f7ff fcac 	bl	f3b6 <sdc_hci_cmd_lc_read_remote_version_information+0x64>
    fa5e:	2300      	movs	r3, #0
    fa60:	bb80      	cbnz	r0, fac4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x86>
    fa62:	7f60      	ldrb	r0, [r4, #29]
    fa64:	42af      	cmp	r7, r5
    fa66:	d904      	bls.n	fa72 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x34>
    fa68:	1b79      	subs	r1, r7, r5
    fa6a:	3008      	adds	r0, #8
    fa6c:	1a09      	subs	r1, r1, r0
    fa6e:	2700      	movs	r7, #0
    fa70:	e003      	b.n	fa7a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3c>
    fa72:	8861      	ldrh	r1, [r4, #2]
    fa74:	3008      	adds	r0, #8
    fa76:	1b49      	subs	r1, r1, r5
    fa78:	1a09      	subs	r1, r1, r0
    fa7a:	2900      	cmp	r1, #0
    fa7c:	db23      	blt.n	fac6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    fa7e:	89e0      	ldrh	r0, [r4, #14]
    fa80:	b160      	cbz	r0, fa9c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
    fa82:	f8b9 0000 	ldrh.w	r0, [r9]
    fa86:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    fa8a:	b13a      	cbz	r2, fa9c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
    fa8c:	1ab9      	subs	r1, r7, r2
    fa8e:	7723      	strb	r3, [r4, #28]
    fa90:	4541      	cmp	r1, r8
    fa92:	db18      	blt.n	fac6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    fa94:	89e1      	ldrh	r1, [r4, #14]
    fa96:	4431      	add	r1, r6
    fa98:	1a08      	subs	r0, r1, r0
    fa9a:	e009      	b.n	fab0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x72>
    fa9c:	1a09      	subs	r1, r1, r0
    fa9e:	7723      	strb	r3, [r4, #28]
    faa0:	4541      	cmp	r1, r8
    faa2:	db0a      	blt.n	faba <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x7c>
    faa4:	7f60      	ldrb	r0, [r4, #29]
    faa6:	89e1      	ldrh	r1, [r4, #14]
    faa8:	3008      	adds	r0, #8
    faaa:	4428      	add	r0, r5
    faac:	4431      	add	r1, r6
    faae:	4408      	add	r0, r1
    fab0:	1ec0      	subs	r0, r0, #3
    fab2:	f8a4 8012 	strh.w	r8, [r4, #18]
    fab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    faba:	4547      	cmp	r7, r8
    fabc:	db03      	blt.n	fac6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    fabe:	2101      	movs	r1, #1
    fac0:	7721      	strb	r1, [r4, #28]
    fac2:	e7e7      	b.n	fa94 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x56>
    fac4:	e7ff      	b.n	fac6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    fac6:	8263      	strh	r3, [r4, #18]
    fac8:	2000      	movs	r0, #0
    faca:	e7f4      	b.n	fab6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x78>

0000facc <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    facc:	2100      	movs	r1, #0
    face:	81c1      	strh	r1, [r0, #14]
    fad0:	7701      	strb	r1, [r0, #28]
    fad2:	8241      	strh	r1, [r0, #18]
    fad4:	75c1      	strb	r1, [r0, #23]
    fad6:	7581      	strb	r1, [r0, #22]
    fad8:	4770      	bx	lr

0000fada <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    fada:	b570      	push	{r4, r5, r6, lr}
    fadc:	2300      	movs	r3, #0
    fade:	2908      	cmp	r1, #8
    fae0:	d204      	bcs.n	faec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    fae2:	f240 11cb 	movw	r1, #459	; 0x1cb
    fae6:	2015      	movs	r0, #21
    fae8:	f7f4 f84a 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faec:	6802      	ldr	r2, [r0, #0]
    faee:	b90a      	cbnz	r2, faf4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    faf0:	e01e      	b.n	fb30 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    faf2:	4610      	mov	r0, r2
    faf4:	6802      	ldr	r2, [r0, #0]
    faf6:	8893      	ldrh	r3, [r2, #4]
    faf8:	428b      	cmp	r3, r1
    fafa:	d002      	beq.n	fb02 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    fafc:	6813      	ldr	r3, [r2, #0]
    fafe:	2b00      	cmp	r3, #0
    fb00:	d1f7      	bne.n	faf2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    fb02:	8894      	ldrh	r4, [r2, #4]
    fb04:	4613      	mov	r3, r2
    fb06:	428c      	cmp	r4, r1
    fb08:	d101      	bne.n	fb0e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    fb0a:	6811      	ldr	r1, [r2, #0]
    fb0c:	e00d      	b.n	fb2a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    fb0e:	f101 0508 	add.w	r5, r1, #8
    fb12:	b2ad      	uxth	r5, r5
    fb14:	42ac      	cmp	r4, r5
    fb16:	d30a      	bcc.n	fb2e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    fb18:	1a64      	subs	r4, r4, r1
    fb1a:	4411      	add	r1, r2
    fb1c:	2200      	movs	r2, #0
    fb1e:	600a      	str	r2, [r1, #0]
    fb20:	808c      	strh	r4, [r1, #4]
    fb22:	6802      	ldr	r2, [r0, #0]
    fb24:	6812      	ldr	r2, [r2, #0]
    fb26:	6002      	str	r2, [r0, #0]
    fb28:	600a      	str	r2, [r1, #0]
    fb2a:	6001      	str	r1, [r0, #0]
    fb2c:	e000      	b.n	fb30 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    fb2e:	2300      	movs	r3, #0
    fb30:	4618      	mov	r0, r3
    fb32:	bd70      	pop	{r4, r5, r6, pc}

0000fb34 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    fb34:	b510      	push	{r4, lr}
    fb36:	000c      	movs	r4, r1
    fb38:	d006      	beq.n	fb48 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    fb3a:	2c08      	cmp	r4, #8
    fb3c:	d209      	bcs.n	fb52 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    fb3e:	f240 1195 	movw	r1, #405	; 0x195
    fb42:	2015      	movs	r0, #21
    fb44:	f7f4 f81c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb48:	b108      	cbz	r0, fb4e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    fb4a:	2100      	movs	r1, #0
    fb4c:	6001      	str	r1, [r0, #0]
    fb4e:	2000      	movs	r0, #0
    fb50:	bd10      	pop	{r4, pc}
    fb52:	b118      	cbz	r0, fb5c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    fb54:	b2a1      	uxth	r1, r4
    fb56:	6800      	ldr	r0, [r0, #0]
    fb58:	f000 f814 	bl	fb84 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    fb5c:	1d20      	adds	r0, r4, #4
    fb5e:	bd10      	pop	{r4, pc}

0000fb60 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    fb60:	2100      	movs	r1, #0
    fb62:	6802      	ldr	r2, [r0, #0]
    fb64:	e003      	b.n	fb6e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    fb66:	8893      	ldrh	r3, [r2, #4]
    fb68:	6812      	ldr	r2, [r2, #0]
    fb6a:	4419      	add	r1, r3
    fb6c:	b289      	uxth	r1, r1
    fb6e:	2a00      	cmp	r2, #0
    fb70:	d1f9      	bne.n	fb66 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    fb72:	f000 b807 	b.w	fb84 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000fb76 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    fb76:	2300      	movs	r3, #0
    fb78:	600b      	str	r3, [r1, #0]
    fb7a:	808a      	strh	r2, [r1, #4]
    fb7c:	6802      	ldr	r2, [r0, #0]
    fb7e:	600a      	str	r2, [r1, #0]
    fb80:	6001      	str	r1, [r0, #0]
    fb82:	4770      	bx	lr
    fb84:	2300      	movs	r3, #0
    fb86:	6043      	str	r3, [r0, #4]
    fb88:	1d02      	adds	r2, r0, #4
    fb8a:	8101      	strh	r1, [r0, #8]
    fb8c:	6002      	str	r2, [r0, #0]
    fb8e:	4770      	bx	lr

0000fb90 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    fb90:	b50e      	push	{r1, r2, r3, lr}
    fb92:	4669      	mov	r1, sp
    fb94:	f000 f818 	bl	fbc8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fb98:	b120      	cbz	r0, fba4 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    fb9a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
    fb9e:	2017      	movs	r0, #23
    fba0:	f7f3 ffee 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fba4:	4668      	mov	r0, sp
    fba6:	f7f4 f9f1 	bl	3f8c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fbaa:	b108      	cbz	r0, fbb0 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    fbac:	2000      	movs	r0, #0
    fbae:	bd0e      	pop	{r1, r2, r3, pc}
    fbb0:	2001      	movs	r0, #1
    fbb2:	bd0e      	pop	{r1, r2, r3, pc}

0000fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    fbb4:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    fbb8:	3aff      	subs	r2, #255	; 0xff
    fbba:	d001      	beq.n	fbc0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    fbbc:	2902      	cmp	r1, #2
    fbbe:	d301      	bcc.n	fbc4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    fbc0:	2000      	movs	r0, #0
    fbc2:	4770      	bx	lr
    fbc4:	f7f4 ba78 	b.w	40b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>

0000fbc8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    fbc8:	b570      	push	{r4, r5, r6, lr}
    fbca:	4605      	mov	r5, r0
    fbcc:	460c      	mov	r4, r1
    fbce:	4608      	mov	r0, r1
    fbd0:	f000 f899 	bl	fd06 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    fbd4:	b108      	cbz	r0, fbda <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    fbd6:	2010      	movs	r0, #16
    fbd8:	bd70      	pop	{r4, r5, r6, pc}
    fbda:	2d02      	cmp	r5, #2
    fbdc:	d301      	bcc.n	fbe2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    fbde:	2007      	movs	r0, #7
    fbe0:	bd70      	pop	{r4, r5, r6, pc}
    fbe2:	7025      	strb	r5, [r4, #0]
    fbe4:	2000      	movs	r0, #0
    fbe6:	8060      	strh	r0, [r4, #2]
    fbe8:	bd70      	pop	{r4, r5, r6, pc}
    fbea:	b510      	push	{r4, lr}
    fbec:	4604      	mov	r4, r0
    fbee:	f7f4 fa25 	bl	403c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    fbf2:	42a0      	cmp	r0, r4
    fbf4:	d901      	bls.n	fbfa <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    fbf6:	2001      	movs	r0, #1
    fbf8:	bd10      	pop	{r4, pc}
    fbfa:	2000      	movs	r0, #0
    fbfc:	bd10      	pop	{r4, pc}

0000fbfe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    fbfe:	b570      	push	{r4, r5, r6, lr}
    fc00:	460e      	mov	r6, r1
    fc02:	461d      	mov	r5, r3
    fc04:	4611      	mov	r1, r2
    fc06:	f000 f811 	bl	fc2c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    fc0a:	4604      	mov	r4, r0
    fc0c:	4629      	mov	r1, r5
    fc0e:	4630      	mov	r0, r6
    fc10:	f000 f803 	bl	fc1a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    fc14:	4420      	add	r0, r4
    fc16:	1d00      	adds	r0, r0, #4
    fc18:	bd70      	pop	{r4, r5, r6, pc}
    fc1a:	b510      	push	{r4, lr}
    fc1c:	460a      	mov	r2, r1
    fc1e:	2101      	movs	r1, #1
    fc20:	f7ff ff05 	bl	fa2e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    fc24:	1cc0      	adds	r0, r0, #3
    fc26:	f020 0003 	bic.w	r0, r0, #3
    fc2a:	bd10      	pop	{r4, pc}
    fc2c:	b510      	push	{r4, lr}
    fc2e:	460a      	mov	r2, r1
    fc30:	2101      	movs	r1, #1
    fc32:	f7ff fefc 	bl	fa2e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    fc36:	1cc0      	adds	r0, r0, #3
    fc38:	f020 0003 	bic.w	r0, r0, #3
    fc3c:	bd10      	pop	{r4, pc}
    fc3e:	2800      	cmp	r0, #0
    fc40:	db09      	blt.n	fc56 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    fc42:	f000 021f 	and.w	r2, r0, #31
    fc46:	2101      	movs	r1, #1
    fc48:	4091      	lsls	r1, r2
    fc4a:	0940      	lsrs	r0, r0, #5
    fc4c:	0080      	lsls	r0, r0, #2
    fc4e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fc52:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fc56:	4770      	bx	lr

0000fc58 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    fc58:	f7f4 bc1e 	b.w	4498 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    fc5c:	2800      	cmp	r0, #0
    fc5e:	db09      	blt.n	fc74 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1c>
    fc60:	f000 021f 	and.w	r2, r0, #31
    fc64:	2101      	movs	r1, #1
    fc66:	4091      	lsls	r1, r2
    fc68:	0940      	lsrs	r0, r0, #5
    fc6a:	0080      	lsls	r0, r0, #2
    fc6c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fc70:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fc74:	4770      	bx	lr
    fc76:	2800      	cmp	r0, #0
    fc78:	db0d      	blt.n	fc96 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x3e>
    fc7a:	f000 021f 	and.w	r2, r0, #31
    fc7e:	2101      	movs	r1, #1
    fc80:	4091      	lsls	r1, r2
    fc82:	0940      	lsrs	r0, r0, #5
    fc84:	0080      	lsls	r0, r0, #2
    fc86:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fc8a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fc8e:	f3bf 8f4f 	dsb	sy
    fc92:	f3bf 8f6f 	isb	sy
    fc96:	4770      	bx	lr

0000fc98 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    fc98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    fc9c:	2000      	movs	r0, #0
    fc9e:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    fca2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fca6:	2001      	movs	r0, #1
    fca8:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    fcac:	4770      	bx	lr
    fcae:	2800      	cmp	r0, #0
    fcb0:	db04      	blt.n	fcbc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x24>
    fcb2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fcb6:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    fcba:	e005      	b.n	fcc8 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x30>
    fcbc:	f000 000f 	and.w	r0, r0, #15
    fcc0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fcc4:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    fcc8:	0940      	lsrs	r0, r0, #5
    fcca:	4770      	bx	lr
    fccc:	f810 1f41 	ldrb.w	r1, [r0, #65]!
    fcd0:	7840      	ldrb	r0, [r0, #1]
    fcd2:	4281      	cmp	r1, r0
    fcd4:	d301      	bcc.n	fcda <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x42>
    fcd6:	1a08      	subs	r0, r1, r0
    fcd8:	e002      	b.n	fce0 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x48>
    fcda:	f1c0 0041 	rsb	r0, r0, #65	; 0x41
    fcde:	4408      	add	r0, r1
    fce0:	b2c0      	uxtb	r0, r0
    fce2:	4770      	bx	lr
    fce4:	f810 1f41 	ldrb.w	r1, [r0, #65]!
    fce8:	2241      	movs	r2, #65	; 0x41
    fcea:	1c49      	adds	r1, r1, #1
    fcec:	fbb1 f3f2 	udiv	r3, r1, r2
    fcf0:	fb02 1113 	mls	r1, r2, r3, r1
    fcf4:	7840      	ldrb	r0, [r0, #1]
    fcf6:	4281      	cmp	r1, r0
    fcf8:	d101      	bne.n	fcfe <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x66>
    fcfa:	2001      	movs	r0, #1
    fcfc:	4770      	bx	lr
    fcfe:	2000      	movs	r0, #0
    fd00:	4770      	bx	lr

0000fd02 <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>:
    fd02:	2040      	movs	r0, #64	; 0x40
    fd04:	4770      	bx	lr

0000fd06 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    fd06:	b108      	cbz	r0, fd0c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    fd08:	2000      	movs	r0, #0
    fd0a:	4770      	bx	lr
    fd0c:	2001      	movs	r0, #1
    fd0e:	4770      	bx	lr

0000fd10 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    fd10:	b510      	push	{r4, lr}
    fd12:	2900      	cmp	r1, #0
    fd14:	4604      	mov	r4, r0
    fd16:	f04f 0106 	mov.w	r1, #6
    fd1a:	d002      	beq.n	fd22 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    fd1c:	f7f4 fd30 	bl	4780 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    fd20:	e001      	b.n	fd26 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    fd22:	f7f4 fd43 	bl	47ac <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    fd26:	7960      	ldrb	r0, [r4, #5]
    fd28:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    fd2c:	7160      	strb	r0, [r4, #5]
    fd2e:	bd10      	pop	{r4, pc}

0000fd30 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    fd30:	b530      	push	{r4, r5, lr}
    fd32:	460c      	mov	r4, r1
    fd34:	4605      	mov	r5, r0
    fd36:	b08d      	sub	sp, #52	; 0x34
    fd38:	f04f 0103 	mov.w	r1, #3
    fd3c:	f104 0003 	add.w	r0, r4, #3
    fd40:	b112      	cbz	r2, fd48 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    fd42:	f7f4 fd1d 	bl	4780 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    fd46:	e001      	b.n	fd4c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    fd48:	f7f4 fd30 	bl	47ac <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    fd4c:	7960      	ldrb	r0, [r4, #5]
    fd4e:	220d      	movs	r2, #13
    fd50:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    fd54:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    fd58:	7160      	strb	r0, [r4, #5]
    fd5a:	2100      	movs	r1, #0
    fd5c:	a804      	add	r0, sp, #16
    fd5e:	f7fe fe61 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fd62:	78e0      	ldrb	r0, [r4, #3]
    fd64:	f88d 001f 	strb.w	r0, [sp, #31]
    fd68:	7920      	ldrb	r0, [r4, #4]
    fd6a:	f88d 001e 	strb.w	r0, [sp, #30]
    fd6e:	7960      	ldrb	r0, [r4, #5]
    fd70:	f88d 001d 	strb.w	r0, [sp, #29]
    fd74:	6828      	ldr	r0, [r5, #0]
    fd76:	9000      	str	r0, [sp, #0]
    fd78:	6868      	ldr	r0, [r5, #4]
    fd7a:	9001      	str	r0, [sp, #4]
    fd7c:	68a8      	ldr	r0, [r5, #8]
    fd7e:	9002      	str	r0, [sp, #8]
    fd80:	68e8      	ldr	r0, [r5, #12]
    fd82:	9003      	str	r0, [sp, #12]
    fd84:	4668      	mov	r0, sp
    fd86:	f7ff ff67 	bl	fc58 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    fd8a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    fd8e:	7020      	strb	r0, [r4, #0]
    fd90:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    fd94:	7060      	strb	r0, [r4, #1]
    fd96:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    fd9a:	70a0      	strb	r0, [r4, #2]
    fd9c:	b00d      	add	sp, #52	; 0x34
    fd9e:	bd30      	pop	{r4, r5, pc}

0000fda0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    fda0:	b510      	push	{r4, lr}
    fda2:	f7fd f8fb 	bl	cf9c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    fda6:	2800      	cmp	r0, #0
    fda8:	bf04      	itt	eq
    fdaa:	20ff      	moveq	r0, #255	; 0xff
    fdac:	bd10      	popeq	{r4, pc}
    fdae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fdb2:	f7fd b8b1 	b.w	cf18 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

0000fdb6 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    fdb6:	b510      	push	{r4, lr}
    fdb8:	f7f6 f848 	bl	5e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    fdbc:	2810      	cmp	r0, #16
    fdbe:	bf04      	itt	eq
    fdc0:	2000      	moveq	r0, #0
    fdc2:	bd10      	popeq	{r4, pc}
    fdc4:	f7f6 f8fc 	bl	5fc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x218>
    fdc8:	2001      	movs	r0, #1
    fdca:	bd10      	pop	{r4, pc}

0000fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    fdcc:	b570      	push	{r4, r5, r6, lr}
    fdce:	460c      	mov	r4, r1
    fdd0:	4605      	mov	r5, r0
    fdd2:	2100      	movs	r1, #0
    fdd4:	f7ff feee 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fdd8:	6060      	str	r0, [r4, #4]
    fdda:	b110      	cbz	r0, fde2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    fddc:	2000      	movs	r0, #0
    fdde:	7020      	strb	r0, [r4, #0]
    fde0:	bd70      	pop	{r4, r5, r6, pc}
    fde2:	2101      	movs	r1, #1
    fde4:	4628      	mov	r0, r5
    fde6:	f7ff fee5 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fdea:	6060      	str	r0, [r4, #4]
    fdec:	2800      	cmp	r0, #0
    fdee:	bf04      	itt	eq
    fdf0:	2002      	moveq	r0, #2
    fdf2:	bd70      	popeq	{r4, r5, r6, pc}
    fdf4:	2001      	movs	r0, #1
    fdf6:	7020      	strb	r0, [r4, #0]
    fdf8:	2000      	movs	r0, #0
    fdfa:	bd70      	pop	{r4, r5, r6, pc}

0000fdfc <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    fdfc:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
    fe00:	2906      	cmp	r1, #6
    fe02:	bf9a      	itte	ls
    fe04:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
    fe08:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
    fe0c:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
    fe10:	4348      	muls	r0, r1
    fe12:	4770      	bx	lr

0000fe14 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    fe14:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
    fe18:	f241 7270 	movw	r2, #6000	; 0x1770
    fe1c:	4291      	cmp	r1, r2
    fe1e:	bf94      	ite	ls
    fe20:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
    fe24:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
    fe28:	fbb0 f0f1 	udiv	r0, r0, r1
    fe2c:	bf98      	it	ls
    fe2e:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
    fe32:	b280      	uxth	r0, r0
    fe34:	4770      	bx	lr

0000fe36 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    fe36:	b570      	push	{r4, r5, r6, lr}
    fe38:	4604      	mov	r4, r0
    fe3a:	4290      	cmp	r0, r2
    fe3c:	bf28      	it	cs
    fe3e:	bd70      	popcs	{r4, r5, r6, pc}
    fe40:	1b10      	subs	r0, r2, r4
    fe42:	2864      	cmp	r0, #100	; 0x64
    fe44:	d30b      	bcc.n	fe5e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x28>
    fe46:	1825      	adds	r5, r4, r0
    fe48:	428d      	cmp	r5, r1
    fe4a:	d806      	bhi.n	fe5a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x24>
    fe4c:	2104      	movs	r1, #4
    fe4e:	f7f1 f9e7 	bl	1220 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    fe52:	2800      	cmp	r0, #0
    fe54:	bf04      	itt	eq
    fe56:	4628      	moveq	r0, r5
    fe58:	bd70      	popeq	{r4, r5, r6, pc}
    fe5a:	4620      	mov	r0, r4
    fe5c:	bd70      	pop	{r4, r5, r6, pc}
    fe5e:	2064      	movs	r0, #100	; 0x64
    fe60:	e7f1      	b.n	fe46 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>

0000fe62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    fe62:	290c      	cmp	r1, #12
    fe64:	d265      	bcs.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fe66:	e8df f001 	tbb	[pc, r1]
    fe6a:	0906      	.short	0x0906
    fe6c:	1b16130e 	.word	0x1b16130e
    fe70:	5e433c32 	.word	0x5e433c32
    fe74:	504a      	.short	0x504a
    fe76:	2a00      	cmp	r2, #0
    fe78:	d05d      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fe7a:	e05a      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fe7c:	2a07      	cmp	r2, #7
    fe7e:	bf18      	it	ne
    fe80:	2a08      	cmpne	r2, #8
    fe82:	d058      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fe84:	e055      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fe86:	2a0c      	cmp	r2, #12
    fe88:	bf18      	it	ne
    fe8a:	2a0b      	cmpne	r2, #11
    fe8c:	d053      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fe8e:	e050      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fe90:	2a0d      	cmp	r2, #13
    fe92:	d050      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fe94:	e04d      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fe96:	f1a2 000f 	sub.w	r0, r2, #15
    fe9a:	280c      	cmp	r0, #12
    fe9c:	d94b      	bls.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fe9e:	e048      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fea0:	b123      	cbz	r3, feac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x4a>
    fea2:	f1a2 0010 	sub.w	r0, r2, #16
    fea6:	280b      	cmp	r0, #11
    fea8:	d945      	bls.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    feaa:	e042      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    feac:	2a12      	cmp	r2, #18
    feae:	bf18      	it	ne
    feb0:	2a11      	cmpne	r2, #17
    feb2:	d040      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    feb4:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
    feb8:	b120      	cbz	r0, fec4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x62>
    feba:	2a12      	cmp	r2, #18
    febc:	d339      	bcc.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    febe:	2a1a      	cmp	r2, #26
    fec0:	d939      	bls.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fec2:	e036      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fec4:	2a16      	cmp	r2, #22
    fec6:	d334      	bcc.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fec8:	2a1a      	cmp	r2, #26
    feca:	d934      	bls.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fecc:	e031      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fece:	f1a2 010f 	sub.w	r1, r2, #15
    fed2:	2903      	cmp	r1, #3
    fed4:	d92f      	bls.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fed6:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
    feda:	b318      	cbz	r0, ff24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    fedc:	2a1b      	cmp	r2, #27
    fede:	d92a      	bls.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fee0:	e027      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fee2:	b113      	cbz	r3, feea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x88>
    fee4:	2a04      	cmp	r2, #4
    fee6:	d026      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fee8:	e023      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    feea:	2a04      	cmp	r2, #4
    feec:	d121      	bne.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    feee:	e022      	b.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fef0:	b113      	cbz	r3, fef8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x96>
    fef2:	2a06      	cmp	r2, #6
    fef4:	d01f      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fef6:	e01c      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fef8:	2a01      	cmp	r2, #1
    fefa:	d11a      	bne.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fefc:	e01b      	b.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fefe:	2a1c      	cmp	r2, #28
    ff00:	bf1c      	itt	ne
    ff02:	2a1d      	cmpne	r2, #29
    ff04:	2a1e      	cmpne	r2, #30
    ff06:	d016      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff08:	e013      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff0a:	2a1f      	cmp	r2, #31
    ff0c:	bf18      	it	ne
    ff0e:	2a20      	cmpne	r2, #32
    ff10:	d011      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff12:	2a21      	cmp	r2, #33	; 0x21
    ff14:	bf18      	it	ne
    ff16:	2a22      	cmpne	r2, #34	; 0x22
    ff18:	d00d      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff1a:	2a23      	cmp	r2, #35	; 0x23
    ff1c:	bf1c      	itt	ne
    ff1e:	2a24      	cmpne	r2, #36	; 0x24
    ff20:	2a26      	cmpne	r2, #38	; 0x26
    ff22:	d008      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff24:	e005      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff26:	b113      	cbz	r3, ff2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xcc>
    ff28:	2a0e      	cmp	r2, #14
    ff2a:	d004      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff2c:	e001      	b.n	ff32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff2e:	2a05      	cmp	r2, #5
    ff30:	d001      	beq.n	ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff32:	2000      	movs	r0, #0
    ff34:	4770      	bx	lr
    ff36:	2001      	movs	r0, #1
    ff38:	4770      	bx	lr

0000ff3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ff3a:	280c      	cmp	r0, #12
    ff3c:	bf18      	it	ne
    ff3e:	280b      	cmpne	r0, #11
    ff40:	d010      	beq.n	ff64 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
    ff42:	280d      	cmp	r0, #13
    ff44:	bf18      	it	ne
    ff46:	281f      	cmpne	r0, #31
    ff48:	d00c      	beq.n	ff64 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
    ff4a:	2820      	cmp	r0, #32
    ff4c:	bf18      	it	ne
    ff4e:	2821      	cmpne	r0, #33	; 0x21
    ff50:	d008      	beq.n	ff64 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
    ff52:	2822      	cmp	r0, #34	; 0x22
    ff54:	bf18      	it	ne
    ff56:	2823      	cmpne	r0, #35	; 0x23
    ff58:	d004      	beq.n	ff64 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
    ff5a:	2824      	cmp	r0, #36	; 0x24
    ff5c:	bf1e      	ittt	ne
    ff5e:	2826      	cmpne	r0, #38	; 0x26
    ff60:	2000      	movne	r0, #0
    ff62:	4770      	bxne	lr
    ff64:	f04f 0001 	mov.w	r0, #1
    ff68:	4770      	bx	lr

0000ff6a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ff6a:	f011 0f0c 	tst.w	r1, #12
    ff6e:	d013      	beq.n	ff98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2e>
    ff70:	f001 0104 	and.w	r1, r1, #4
    ff74:	2900      	cmp	r1, #0
    ff76:	bf0d      	iteet	eq
    ff78:	2240      	moveq	r2, #64	; 0x40
    ff7a:	2210      	movne	r2, #16
    ff7c:	2196      	movne	r1, #150	; 0x96
    ff7e:	f44f 7116 	moveq.w	r1, #600	; 0x258
    ff82:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ff86:	eba0 0301 	sub.w	r3, r0, r1
    ff8a:	4288      	cmp	r0, r1
    ff8c:	bf88      	it	hi
    ff8e:	fb93 f0f2 	sdivhi	r0, r3, r2
    ff92:	d90e      	bls.n	ffb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
    ff94:	b280      	uxth	r0, r0
    ff96:	4770      	bx	lr
    ff98:	2902      	cmp	r1, #2
    ff9a:	d002      	beq.n	ffa2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    ff9c:	2870      	cmp	r0, #112	; 0x70
    ff9e:	d908      	bls.n	ffb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
    ffa0:	e009      	b.n	ffb6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4c>
    ffa2:	283c      	cmp	r0, #60	; 0x3c
    ffa4:	d905      	bls.n	ffb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
    ffa6:	383c      	subs	r0, #60	; 0x3c
    ffa8:	17c1      	asrs	r1, r0, #31
    ffaa:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ffae:	1080      	asrs	r0, r0, #2
    ffb0:	e7f0      	b.n	ff94 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
    ffb2:	2000      	movs	r0, #0
    ffb4:	e7ee      	b.n	ff94 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
    ffb6:	3870      	subs	r0, #112	; 0x70
    ffb8:	17c1      	asrs	r1, r0, #31
    ffba:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    ffbe:	10c0      	asrs	r0, r0, #3
    ffc0:	e7e8      	b.n	ff94 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>

0000ffc2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    ffc2:	6809      	ldr	r1, [r1, #0]
    ffc4:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
    ffc8:	4770      	bx	lr

0000ffca <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    ffca:	f010 0f01 	tst.w	r0, #1
    ffce:	bf1c      	itt	ne
    ffd0:	2001      	movne	r0, #1
    ffd2:	4770      	bxne	lr
    ffd4:	f010 0f02 	tst.w	r0, #2
    ffd8:	bf1c      	itt	ne
    ffda:	2002      	movne	r0, #2
    ffdc:	4770      	bxne	lr
    ffde:	f010 0004 	ands.w	r0, r0, #4
    ffe2:	bf18      	it	ne
    ffe4:	2008      	movne	r0, #8
    ffe6:	4770      	bx	lr

0000ffe8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    ffe8:	2901      	cmp	r1, #1
    ffea:	d002      	beq.n	fff2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0xa>
    ffec:	2902      	cmp	r1, #2
    ffee:	d005      	beq.n	fffc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x14>
    fff0:	e007      	b.n	10002 <CONFIG_PM_SRAM_SIZE+0x2>
    fff2:	2800      	cmp	r0, #0
    fff4:	bf04      	itt	eq
    fff6:	f240 40e2 	movweq	r0, #1250	; 0x4e2
    fffa:	4770      	bxeq	lr
    fffc:	f640 10c4 	movw	r0, #2500	; 0x9c4
   10000:	4770      	bx	lr
   10002:	b510      	push	{r4, lr}
   10004:	f240 514a 	movw	r1, #1354	; 0x54a
   10008:	2029      	movs	r0, #41	; 0x29
   1000a:	f7f3 fdb9 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001000e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
   1000e:	2a16      	cmp	r2, #22
   10010:	d110      	bne.n	10034 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   10012:	222a      	movs	r2, #42	; 0x2a
   10014:	280c      	cmp	r0, #12
   10016:	bf18      	it	ne
   10018:	280d      	cmpne	r0, #13
   1001a:	d00f      	beq.n	1003c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   1001c:	f04f 0c23 	mov.w	ip, #35	; 0x23
   10020:	281f      	cmp	r0, #31
   10022:	d00d      	beq.n	10040 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   10024:	b131      	cbz	r1, 10034 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   10026:	7808      	ldrb	r0, [r1, #0]
   10028:	2801      	cmp	r0, #1
   1002a:	bf18      	it	ne
   1002c:	2800      	cmpne	r0, #0
   1002e:	d005      	beq.n	1003c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   10030:	2816      	cmp	r0, #22
   10032:	d005      	beq.n	10040 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   10034:	2000      	movs	r0, #0
   10036:	4770      	bx	lr
   10038:	2001      	movs	r0, #1
   1003a:	4770      	bx	lr
   1003c:	701a      	strb	r2, [r3, #0]
   1003e:	e7fb      	b.n	10038 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
   10040:	f883 c000 	strb.w	ip, [r3]
   10044:	e7f8      	b.n	10038 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>

00010046 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
   10046:	b418      	push	{r3, r4}
   10048:	b2cb      	uxtb	r3, r1
   1004a:	f3c1 2c07 	ubfx	ip, r1, #8, #8
   1004e:	b2c1      	uxtb	r1, r0
   10050:	f3c0 2007 	ubfx	r0, r0, #8, #8
   10054:	2b01      	cmp	r3, #1
   10056:	d005      	beq.n	10064 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x1e>
   10058:	2b02      	cmp	r3, #2
   1005a:	bf08      	it	eq
   1005c:	f1bc 0f02 	cmpeq.w	ip, #2
   10060:	d01a      	beq.n	10098 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   10062:	e002      	b.n	1006a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
   10064:	f1bc 0f01 	cmp.w	ip, #1
   10068:	d016      	beq.n	10098 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   1006a:	2901      	cmp	r1, #1
   1006c:	d004      	beq.n	10078 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x32>
   1006e:	2902      	cmp	r1, #2
   10070:	bf08      	it	eq
   10072:	2802      	cmpeq	r0, #2
   10074:	d010      	beq.n	10098 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   10076:	e001      	b.n	1007c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
   10078:	2801      	cmp	r0, #1
   1007a:	d00d      	beq.n	10098 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   1007c:	ea01 010c 	and.w	r1, r1, ip
   10080:	f361 0207 	bfi	r2, r1, #0, #8
   10084:	4018      	ands	r0, r3
   10086:	f360 220f 	bfi	r2, r0, #8, #8
   1008a:	b2d0      	uxtb	r0, r2
   1008c:	f010 0f02 	tst.w	r0, #2
   10090:	bf18      	it	ne
   10092:	2002      	movne	r0, #2
   10094:	d10b      	bne.n	100ae <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   10096:	e006      	b.n	100a6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x60>
   10098:	4008      	ands	r0, r1
   1009a:	ea03 010c 	and.w	r1, r3, ip
   1009e:	4008      	ands	r0, r1
   100a0:	f360 0207 	bfi	r2, r0, #0, #8
   100a4:	e7ef      	b.n	10086 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x40>
   100a6:	f010 0001 	ands.w	r0, r0, #1
   100aa:	bf18      	it	ne
   100ac:	2001      	movne	r0, #1
   100ae:	f88d 0000 	strb.w	r0, [sp]
   100b2:	f3c2 2007 	ubfx	r0, r2, #8, #8
   100b6:	f010 0f02 	tst.w	r0, #2
   100ba:	bf18      	it	ne
   100bc:	2002      	movne	r0, #2
   100be:	d103      	bne.n	100c8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x82>
   100c0:	f010 0001 	ands.w	r0, r0, #1
   100c4:	bf18      	it	ne
   100c6:	2001      	movne	r0, #1
   100c8:	f88d 0001 	strb.w	r0, [sp, #1]
   100cc:	f8bd 0000 	ldrh.w	r0, [sp]
   100d0:	bc18      	pop	{r3, r4}
   100d2:	4770      	bx	lr

000100d4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   100d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100d8:	460c      	mov	r4, r1
   100da:	4605      	mov	r5, r0
   100dc:	68c7      	ldr	r7, [r0, #12]
   100de:	f7f1 fd25 	bl	1b2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   100e2:	b198      	cbz	r0, 1010c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
   100e4:	b1bc      	cbz	r4, 10116 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   100e6:	4638      	mov	r0, r7
   100e8:	68e9      	ldr	r1, [r5, #12]
   100ea:	f7f1 f9c7 	bl	147c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   100ee:	2800      	cmp	r0, #0
   100f0:	dd11      	ble.n	10116 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   100f2:	4420      	add	r0, r4
   100f4:	1e40      	subs	r0, r0, #1
   100f6:	fbb0 f6f4 	udiv	r6, r0, r4
   100fa:	fb06 f104 	mul.w	r1, r6, r4
   100fe:	4638      	mov	r0, r7
   10100:	f7f1 f986 	bl	1410 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   10104:	60e8      	str	r0, [r5, #12]
   10106:	4630      	mov	r0, r6
   10108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1010c:	f240 31cf 	movw	r1, #975	; 0x3cf
   10110:	2029      	movs	r0, #41	; 0x29
   10112:	f7f3 fd35 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10116:	2000      	movs	r0, #0
   10118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001011c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   1011c:	b538      	push	{r3, r4, r5, lr}
   1011e:	4605      	mov	r5, r0
   10120:	460c      	mov	r4, r1
   10122:	4668      	mov	r0, sp
   10124:	f7fd ff14 	bl	df50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   10128:	2800      	cmp	r0, #0
   1012a:	bf08      	it	eq
   1012c:	bd38      	popeq	{r3, r4, r5, pc}
   1012e:	f99d 2000 	ldrsb.w	r2, [sp]
   10132:	7222      	strb	r2, [r4, #8]
   10134:	7ee0      	ldrb	r0, [r4, #27]
   10136:	7260      	strb	r0, [r4, #9]
   10138:	f994 100a 	ldrsb.w	r1, [r4, #10]
   1013c:	2000      	movs	r0, #0
   1013e:	1a51      	subs	r1, r2, r1
   10140:	bf48      	it	mi
   10142:	4249      	negmi	r1, r1
   10144:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   10148:	428b      	cmp	r3, r1
   1014a:	bfc8      	it	gt
   1014c:	bd38      	popgt	{r3, r4, r5, pc}
   1014e:	2bff      	cmp	r3, #255	; 0xff
   10150:	bf08      	it	eq
   10152:	bd38      	popeq	{r3, r4, r5, pc}
   10154:	7ae1      	ldrb	r1, [r4, #11]
   10156:	1c49      	adds	r1, r1, #1
   10158:	b2c9      	uxtb	r1, r1
   1015a:	72e1      	strb	r1, [r4, #11]
   1015c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   10160:	4299      	cmp	r1, r3
   10162:	d803      	bhi.n	1016c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   10164:	7aa1      	ldrb	r1, [r4, #10]
   10166:	297f      	cmp	r1, #127	; 0x7f
   10168:	bf18      	it	ne
   1016a:	bd38      	popne	{r3, r4, r5, pc}
   1016c:	72a2      	strb	r2, [r4, #10]
   1016e:	2000      	movs	r0, #0
   10170:	72e0      	strb	r0, [r4, #11]
   10172:	2001      	movs	r0, #1
   10174:	bd38      	pop	{r3, r4, r5, pc}

00010176 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   10176:	2300      	movs	r3, #0
   10178:	6203      	str	r3, [r0, #32]
   1017a:	8502      	strh	r2, [r0, #40]	; 0x28
   1017c:	f240 2371 	movw	r3, #625	; 0x271
   10180:	435a      	muls	r2, r3
   10182:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   10186:	1e52      	subs	r2, r2, #1
   10188:	fbb2 f1f1 	udiv	r1, r2, r1
   1018c:	6241      	str	r1, [r0, #36]	; 0x24
   1018e:	4770      	bx	lr

00010190 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
   10190:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   10194:	4607      	mov	r7, r0
   10196:	4691      	mov	r9, r2
   10198:	468a      	mov	sl, r1
   1019a:	f04f 0801 	mov.w	r8, #1
   1019e:	4608      	mov	r0, r1
   101a0:	f000 f91d 	bl	103de <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
   101a4:	4604      	mov	r4, r0
   101a6:	4650      	mov	r0, sl
   101a8:	f000 f925 	bl	103f6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
   101ac:	4606      	mov	r6, r0
   101ae:	f010 0f01 	tst.w	r0, #1
   101b2:	bf18      	it	ne
   101b4:	2501      	movne	r5, #1
   101b6:	d02a      	beq.n	1020e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x7e>
   101b8:	f014 0f01 	tst.w	r4, #1
   101bc:	bf18      	it	ne
   101be:	f04f 0b01 	movne.w	fp, #1
   101c2:	d02f      	beq.n	10224 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x94>
   101c4:	ea55 000b 	orrs.w	r0, r5, fp
   101c8:	bf08      	it	eq
   101ca:	f04f 0800 	moveq.w	r8, #0
   101ce:	f7fc fe31 	bl	ce34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   101d2:	4230      	tst	r0, r6
   101d4:	bf08      	it	eq
   101d6:	2500      	moveq	r5, #0
   101d8:	f7fc fe2c 	bl	ce34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   101dc:	4220      	tst	r0, r4
   101de:	bf08      	it	eq
   101e0:	f04f 0b00 	moveq.w	fp, #0
   101e4:	f897 0066 	ldrb.w	r0, [r7, #102]	; 0x66
   101e8:	42a8      	cmp	r0, r5
   101ea:	bf08      	it	eq
   101ec:	2500      	moveq	r5, #0
   101ee:	f889 5000 	strb.w	r5, [r9]
   101f2:	f897 0067 	ldrb.w	r0, [r7, #103]	; 0x67
   101f6:	4558      	cmp	r0, fp
   101f8:	bf08      	it	eq
   101fa:	f04f 0b00 	moveq.w	fp, #0
   101fe:	f889 b001 	strb.w	fp, [r9, #1]
   10202:	2d00      	cmp	r5, #0
   10204:	bf08      	it	eq
   10206:	f1bb 0f00 	cmpeq.w	fp, #0
   1020a:	d128      	bne.n	1025e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xce>
   1020c:	e018      	b.n	10240 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xb0>
   1020e:	f010 0f02 	tst.w	r0, #2
   10212:	bf18      	it	ne
   10214:	2502      	movne	r5, #2
   10216:	d1cf      	bne.n	101b8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
   10218:	f016 0f04 	tst.w	r6, #4
   1021c:	bf14      	ite	ne
   1021e:	2508      	movne	r5, #8
   10220:	2500      	moveq	r5, #0
   10222:	e7c9      	b.n	101b8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
   10224:	f014 0f02 	tst.w	r4, #2
   10228:	bf18      	it	ne
   1022a:	f04f 0b02 	movne.w	fp, #2
   1022e:	d1c9      	bne.n	101c4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
   10230:	f014 0f04 	tst.w	r4, #4
   10234:	bf14      	ite	ne
   10236:	f04f 0b08 	movne.w	fp, #8
   1023a:	f04f 0b00 	moveq.w	fp, #0
   1023e:	e7c1      	b.n	101c4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
   10240:	4650      	mov	r0, sl
   10242:	f000 f8d6 	bl	103f2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
   10246:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
   1024a:	1a40      	subs	r0, r0, r1
   1024c:	b200      	sxth	r0, r0
   1024e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   10252:	4288      	cmp	r0, r1
   10254:	dc01      	bgt.n	1025a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xca>
   10256:	2800      	cmp	r0, #0
   10258:	dc01      	bgt.n	1025e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xce>
   1025a:	f04f 0800 	mov.w	r8, #0
   1025e:	4640      	mov	r0, r8
   10260:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

00010264 <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>:
   10264:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
   10268:	4281      	cmp	r1, r0
   1026a:	bf38      	it	cc
   1026c:	4608      	movcc	r0, r1
   1026e:	1a08      	subs	r0, r1, r0
   10270:	6819      	ldr	r1, [r3, #0]
   10272:	0840      	lsrs	r0, r0, #1
   10274:	4401      	add	r1, r0
   10276:	6019      	str	r1, [r3, #0]
   10278:	6811      	ldr	r1, [r2, #0]
   1027a:	eba1 0100 	sub.w	r1, r1, r0
   1027e:	6011      	str	r1, [r2, #0]
   10280:	bf18      	it	ne
   10282:	2001      	movne	r0, #1
   10284:	4770      	bx	lr

00010286 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   10286:	f641 524c 	movw	r2, #7500	; 0x1d4c
   1028a:	4291      	cmp	r1, r2
   1028c:	bf34      	ite	cc
   1028e:	2164      	movcc	r1, #100	; 0x64
   10290:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   10294:	4348      	muls	r0, r1
   10296:	4770      	bx	lr

00010298 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   10298:	f641 524c 	movw	r2, #7500	; 0x1d4c
   1029c:	4291      	cmp	r1, r2
   1029e:	bf34      	ite	cc
   102a0:	2164      	movcc	r1, #100	; 0x64
   102a2:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   102a6:	fb10 f001 	smulbb	r0, r0, r1
   102aa:	4770      	bx	lr
   102ac:	b510      	push	{r4, lr}
   102ae:	7c0a      	ldrb	r2, [r1, #16]
   102b0:	f002 021f 	and.w	r2, r2, #31
   102b4:	740a      	strb	r2, [r1, #16]
   102b6:	2200      	movs	r2, #0
   102b8:	7642      	strb	r2, [r0, #25]
   102ba:	188b      	adds	r3, r1, r2
   102bc:	f893 c00c 	ldrb.w	ip, [r3, #12]
   102c0:	f00c 0301 	and.w	r3, ip, #1
   102c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   102c8:	f00c 0401 	and.w	r4, ip, #1
   102cc:	4423      	add	r3, r4
   102ce:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   102d2:	f00c 0401 	and.w	r4, ip, #1
   102d6:	4423      	add	r3, r4
   102d8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   102dc:	f00c 0401 	and.w	r4, ip, #1
   102e0:	4423      	add	r3, r4
   102e2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   102e6:	f00c 0401 	and.w	r4, ip, #1
   102ea:	4423      	add	r3, r4
   102ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   102f0:	f00c 0401 	and.w	r4, ip, #1
   102f4:	4423      	add	r3, r4
   102f6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   102fa:	f00c 0401 	and.w	r4, ip, #1
   102fe:	4423      	add	r3, r4
   10300:	eb03 035c 	add.w	r3, r3, ip, lsr #1
   10304:	eb00 0c02 	add.w	ip, r0, r2
   10308:	1c52      	adds	r2, r2, #1
   1030a:	f88c 3014 	strb.w	r3, [ip, #20]
   1030e:	f890 c019 	ldrb.w	ip, [r0, #25]
   10312:	2a05      	cmp	r2, #5
   10314:	4463      	add	r3, ip
   10316:	7643      	strb	r3, [r0, #25]
   10318:	dbcf      	blt.n	102ba <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
   1031a:	b2d8      	uxtb	r0, r3
   1031c:	2825      	cmp	r0, #37	; 0x25
   1031e:	bf98      	it	ls
   10320:	bd10      	popls	{r4, pc}
   10322:	21d8      	movs	r1, #216	; 0xd8
   10324:	2029      	movs	r0, #41	; 0x29
   10326:	f7f3 fc2b 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001032a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
   1032a:	b430      	push	{r4, r5}
   1032c:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   10330:	f8b0 4009 	ldrh.w	r4, [r0, #9]
   10334:	f8b0 c005 	ldrh.w	ip, [r0, #5]
   10338:	7903      	ldrb	r3, [r0, #4]
   1033a:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   1033e:	2900      	cmp	r1, #0
   10340:	bf18      	it	ne
   10342:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   10346:	d903      	bls.n	10350 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x26>
   10348:	f640 5107 	movw	r1, #3335	; 0xd07
   1034c:	428a      	cmp	r2, r1
   1034e:	d90b      	bls.n	10368 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3e>
   10350:	1f91      	subs	r1, r2, #6
   10352:	f640 457a 	movw	r5, #3194	; 0xc7a
   10356:	42a9      	cmp	r1, r5
   10358:	d80f      	bhi.n	1037a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   1035a:	b173      	cbz	r3, 1037a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   1035c:	2b08      	cmp	r3, #8
   1035e:	bf98      	it	ls
   10360:	4293      	cmpls	r3, r2
   10362:	d20a      	bcs.n	1037a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10364:	4562      	cmp	r2, ip
   10366:	d308      	bcc.n	1037a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10368:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1036c:	d205      	bcs.n	1037a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   1036e:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   10372:	bf9e      	ittt	ls
   10374:	2001      	movls	r0, #1
   10376:	bc30      	popls	{r4, r5}
   10378:	4770      	bxls	lr
   1037a:	2000      	movs	r0, #0
   1037c:	bc30      	pop	{r4, r5}
   1037e:	4770      	bx	lr

00010380 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
   10380:	1d02      	adds	r2, r0, #4
   10382:	4608      	mov	r0, r1
   10384:	4611      	mov	r1, r2
   10386:	f001 bdb7 	b.w	11ef8 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>

0001038a <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
   1038a:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   1038e:	4770      	bx	lr

00010390 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
   10390:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   10394:	4770      	bx	lr

00010396 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
   10396:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   1039a:	4770      	bx	lr

0001039c <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
   1039c:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   103a0:	4770      	bx	lr

000103a2 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
   103a2:	8980      	ldrh	r0, [r0, #12]
   103a4:	8008      	strh	r0, [r1, #0]
   103a6:	4770      	bx	lr

000103a8 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
   103a8:	f8d0 0016 	ldr.w	r0, [r0, #22]
   103ac:	6008      	str	r0, [r1, #0]
   103ae:	4770      	bx	lr

000103b0 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
   103b0:	6842      	ldr	r2, [r0, #4]
   103b2:	600a      	str	r2, [r1, #0]
   103b4:	6880      	ldr	r0, [r0, #8]
   103b6:	6048      	str	r0, [r1, #4]
   103b8:	4770      	bx	lr

000103ba <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
   103ba:	f8d0 200e 	ldr.w	r2, [r0, #14]
   103be:	600a      	str	r2, [r1, #0]
   103c0:	f8d0 0012 	ldr.w	r0, [r0, #18]
   103c4:	6048      	str	r0, [r1, #4]
   103c6:	4770      	bx	lr

000103c8 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
   103c8:	6842      	ldr	r2, [r0, #4]
   103ca:	600a      	str	r2, [r1, #0]
   103cc:	6880      	ldr	r0, [r0, #8]
   103ce:	6048      	str	r0, [r1, #4]
   103d0:	4770      	bx	lr

000103d2 <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>:
   103d2:	7840      	ldrb	r0, [r0, #1]
   103d4:	4770      	bx	lr

000103d6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
   103d6:	7800      	ldrb	r0, [r0, #0]
   103d8:	f000 0003 	and.w	r0, r0, #3
   103dc:	4770      	bx	lr

000103de <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
   103de:	7900      	ldrb	r0, [r0, #4]
   103e0:	4770      	bx	lr

000103e2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
   103e2:	8880      	ldrh	r0, [r0, #4]
   103e4:	4770      	bx	lr

000103e6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
   103e6:	88c0      	ldrh	r0, [r0, #6]
   103e8:	4770      	bx	lr

000103ea <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
   103ea:	8900      	ldrh	r0, [r0, #8]
   103ec:	4770      	bx	lr

000103ee <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
   103ee:	8940      	ldrh	r0, [r0, #10]
   103f0:	4770      	bx	lr

000103f2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
   103f2:	88c0      	ldrh	r0, [r0, #6]
   103f4:	4770      	bx	lr

000103f6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
   103f6:	7940      	ldrb	r0, [r0, #5]
   103f8:	4770      	bx	lr

000103fa <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
   103fa:	7900      	ldrb	r0, [r0, #4]
   103fc:	4770      	bx	lr

000103fe <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
   103fe:	7900      	ldrb	r0, [r0, #4]
   10400:	4770      	bx	lr

00010402 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
   10402:	8901      	ldrh	r1, [r0, #8]
   10404:	291b      	cmp	r1, #27
   10406:	bf24      	itt	cs
   10408:	8941      	ldrhcs	r1, [r0, #10]
   1040a:	f5b1 7fa4 	cmpcs.w	r1, #328	; 0x148
   1040e:	d307      	bcc.n	10420 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x1e>
   10410:	8881      	ldrh	r1, [r0, #4]
   10412:	291b      	cmp	r1, #27
   10414:	bf21      	itttt	cs
   10416:	88c0      	ldrhcs	r0, [r0, #6]
   10418:	f5b0 7fa4 	cmpcs.w	r0, #328	; 0x148
   1041c:	2001      	movcs	r0, #1
   1041e:	4770      	bxcs	lr
   10420:	2000      	movs	r0, #0
   10422:	4770      	bx	lr

00010424 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   10424:	b510      	push	{r4, lr}
   10426:	29fb      	cmp	r1, #251	; 0xfb
   10428:	bf9c      	itt	ls
   1042a:	7041      	strbls	r1, [r0, #1]
   1042c:	bd10      	popls	{r4, pc}
   1042e:	f240 5156 	movw	r1, #1366	; 0x556
   10432:	202a      	movs	r0, #42	; 0x2a
   10434:	f7f3 fba4 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010438 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
   10438:	7901      	ldrb	r1, [r0, #4]
   1043a:	f011 0f07 	tst.w	r1, #7
   1043e:	bf1b      	ittet	ne
   10440:	7940      	ldrbne	r0, [r0, #5]
   10442:	f010 0f07 	tstne.w	r0, #7
   10446:	2000      	moveq	r0, #0
   10448:	2001      	movne	r0, #1
   1044a:	4770      	bx	lr

0001044c <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
   1044c:	7901      	ldrb	r1, [r0, #4]
   1044e:	f011 0f07 	tst.w	r1, #7
   10452:	bf1b      	ittet	ne
   10454:	7940      	ldrbne	r0, [r0, #5]
   10456:	f010 0f07 	tstne.w	r0, #7
   1045a:	2000      	moveq	r0, #0
   1045c:	2001      	movne	r0, #1
   1045e:	4770      	bx	lr

00010460 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
   10460:	7900      	ldrb	r0, [r0, #4]
   10462:	4770      	bx	lr

00010464 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
   10464:	7940      	ldrb	r0, [r0, #5]
   10466:	4770      	bx	lr

00010468 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   10468:	7101      	strb	r1, [r0, #4]
   1046a:	4770      	bx	lr

0001046c <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   1046c:	7141      	strb	r1, [r0, #5]
   1046e:	4770      	bx	lr

00010470 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
   10470:	b510      	push	{r4, lr}
   10472:	2a1b      	cmp	r2, #27
   10474:	d904      	bls.n	10480 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
   10476:	f240 31bd 	movw	r1, #957	; 0x3bd
   1047a:	202a      	movs	r0, #42	; 0x2a
   1047c:	f7f3 fb80 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10480:	7042      	strb	r2, [r0, #1]
   10482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10486:	1cc0      	adds	r0, r0, #3
   10488:	f7f3 b9f0 	b.w	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0001048c <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
   1048c:	6809      	ldr	r1, [r1, #0]
   1048e:	60c1      	str	r1, [r0, #12]
   10490:	4770      	bx	lr

00010492 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
   10492:	680a      	ldr	r2, [r1, #0]
   10494:	6042      	str	r2, [r0, #4]
   10496:	6849      	ldr	r1, [r1, #4]
   10498:	6081      	str	r1, [r0, #8]
   1049a:	4770      	bx	lr

0001049c <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   1049c:	680a      	ldr	r2, [r1, #0]
   1049e:	6042      	str	r2, [r0, #4]
   104a0:	6849      	ldr	r1, [r1, #4]
   104a2:	6081      	str	r1, [r0, #8]
   104a4:	4770      	bx	lr

000104a6 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
   104a6:	680a      	ldr	r2, [r1, #0]
   104a8:	6042      	str	r2, [r0, #4]
   104aa:	6849      	ldr	r1, [r1, #4]
   104ac:	6081      	str	r1, [r0, #8]
   104ae:	4770      	bx	lr

000104b0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   104b0:	7802      	ldrb	r2, [r0, #0]
   104b2:	f001 0103 	and.w	r1, r1, #3
   104b6:	f022 0203 	bic.w	r2, r2, #3
   104ba:	4311      	orrs	r1, r2
   104bc:	7001      	strb	r1, [r0, #0]
   104be:	4770      	bx	lr

000104c0 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   104c0:	7101      	strb	r1, [r0, #4]
   104c2:	0a09      	lsrs	r1, r1, #8
   104c4:	7141      	strb	r1, [r0, #5]
   104c6:	4770      	bx	lr

000104c8 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   104c8:	7181      	strb	r1, [r0, #6]
   104ca:	0a09      	lsrs	r1, r1, #8
   104cc:	71c1      	strb	r1, [r0, #7]
   104ce:	4770      	bx	lr

000104d0 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   104d0:	7201      	strb	r1, [r0, #8]
   104d2:	0a09      	lsrs	r1, r1, #8
   104d4:	7241      	strb	r1, [r0, #9]
   104d6:	4770      	bx	lr

000104d8 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   104d8:	7281      	strb	r1, [r0, #10]
   104da:	0a09      	lsrs	r1, r1, #8
   104dc:	72c1      	strb	r1, [r0, #11]
   104de:	4770      	bx	lr

000104e0 <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>:
   104e0:	7800      	ldrb	r0, [r0, #0]
   104e2:	f000 000f 	and.w	r0, r0, #15
   104e6:	4770      	bx	lr

000104e8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
   104e8:	b430      	push	{r4, r5}
   104ea:	7802      	ldrb	r2, [r0, #0]
   104ec:	f002 020f 	and.w	r2, r2, #15
   104f0:	2a03      	cmp	r2, #3
   104f2:	d02d      	beq.n	10550 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x68>
   104f4:	2a05      	cmp	r2, #5
   104f6:	d12e      	bne.n	10556 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   104f8:	f8b0 2019 	ldrh.w	r2, [r0, #25]
   104fc:	f8b0 401b 	ldrh.w	r4, [r0, #27]
   10500:	f8b0 c017 	ldrh.w	ip, [r0, #23]
   10504:	7d83      	ldrb	r3, [r0, #22]
   10506:	2900      	cmp	r1, #0
   10508:	bf18      	it	ne
   1050a:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   1050e:	d907      	bls.n	10520 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   10510:	f640 5107 	movw	r1, #3335	; 0xd07
   10514:	428a      	cmp	r2, r1
   10516:	d803      	bhi.n	10520 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   10518:	7841      	ldrb	r1, [r0, #1]
   1051a:	2922      	cmp	r1, #34	; 0x22
   1051c:	d11b      	bne.n	10556 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   1051e:	e00e      	b.n	1053e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x56>
   10520:	7841      	ldrb	r1, [r0, #1]
   10522:	2922      	cmp	r1, #34	; 0x22
   10524:	d117      	bne.n	10556 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10526:	1f91      	subs	r1, r2, #6
   10528:	f640 457a 	movw	r5, #3194	; 0xc7a
   1052c:	42a9      	cmp	r1, r5
   1052e:	d812      	bhi.n	10556 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10530:	b18b      	cbz	r3, 10556 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10532:	2b08      	cmp	r3, #8
   10534:	bf98      	it	ls
   10536:	4293      	cmpls	r3, r2
   10538:	d20d      	bcs.n	10556 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   1053a:	4562      	cmp	r2, ip
   1053c:	d30b      	bcc.n	10556 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   1053e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   10542:	d208      	bcs.n	10556 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10544:	f8b0 001d 	ldrh.w	r0, [r0, #29]
   10548:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1054c:	d803      	bhi.n	10556 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   1054e:	e005      	b.n	1055c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   10550:	7840      	ldrb	r0, [r0, #1]
   10552:	280c      	cmp	r0, #12
   10554:	d002      	beq.n	1055c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   10556:	bc30      	pop	{r4, r5}
   10558:	2000      	movs	r0, #0
   1055a:	4770      	bx	lr
   1055c:	bc30      	pop	{r4, r5}
   1055e:	2001      	movs	r0, #1
   10560:	4770      	bx	lr

00010562 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>:
   10562:	22c0      	movs	r2, #192	; 0xc0
   10564:	ea02 1181 	and.w	r1, r2, r1, lsl #6
   10568:	78c2      	ldrb	r2, [r0, #3]
   1056a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1056e:	4311      	orrs	r1, r2
   10570:	70c1      	strb	r1, [r0, #3]
   10572:	4770      	bx	lr

00010574 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
   10574:	b570      	push	{r4, r5, r6, lr}
   10576:	4614      	mov	r4, r2
   10578:	4605      	mov	r5, r0
   1057a:	2a1f      	cmp	r2, #31
   1057c:	d903      	bls.n	10586 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
   1057e:	21b0      	movs	r1, #176	; 0xb0
   10580:	202a      	movs	r0, #42	; 0x2a
   10582:	f7f3 fafd 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10586:	f105 0009 	add.w	r0, r5, #9
   1058a:	f7f3 f96f 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1058e:	1da0      	adds	r0, r4, #6
   10590:	7068      	strb	r0, [r5, #1]
   10592:	bd70      	pop	{r4, r5, r6, pc}

00010594 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>:
   10594:	b570      	push	{r4, r5, r6, lr}
   10596:	461e      	mov	r6, r3
   10598:	000c      	movs	r4, r1
   1059a:	4605      	mov	r5, r0
   1059c:	d00a      	beq.n	105b4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x20>
   1059e:	4611      	mov	r1, r2
   105a0:	f7f5 fffc 	bl	659c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
   105a4:	b158      	cbz	r0, 105be <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x2a>
   105a6:	4428      	add	r0, r5
   105a8:	4632      	mov	r2, r6
   105aa:	4621      	mov	r1, r4
   105ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   105b0:	f7f3 b95c 	b.w	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   105b4:	f240 21be 	movw	r1, #702	; 0x2be
   105b8:	202a      	movs	r0, #42	; 0x2a
   105ba:	f7f3 fae1 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105be:	f240 21bf 	movw	r1, #703	; 0x2bf
   105c2:	202a      	movs	r0, #42	; 0x2a
   105c4:	f7f3 fadc 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000105c8 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>:
   105c8:	b2c9      	uxtb	r1, r1
   105ca:	f001 0201 	and.w	r2, r1, #1
   105ce:	f3c1 0340 	ubfx	r3, r1, #1, #1
   105d2:	441a      	add	r2, r3
   105d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   105d8:	f3c1 0380 	ubfx	r3, r1, #2, #1
   105dc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   105e0:	f3c1 03c0 	ubfx	r3, r1, #3, #1
   105e4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   105e8:	f3c1 1300 	ubfx	r3, r1, #4, #1
   105ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   105f0:	441a      	add	r2, r3
   105f2:	f3c1 1340 	ubfx	r3, r1, #5, #1
   105f6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   105fa:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   105fe:	f3c1 1380 	ubfx	r3, r1, #6, #1
   10602:	441a      	add	r2, r3
   10604:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   10608:	d002      	beq.n	10610 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ+0x48>
   1060a:	1c52      	adds	r2, r2, #1
   1060c:	b2d2      	uxtb	r2, r2
   1060e:	7101      	strb	r1, [r0, #4]
   10610:	78c3      	ldrb	r3, [r0, #3]
   10612:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   10616:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1061a:	4319      	orrs	r1, r3
   1061c:	70c1      	strb	r1, [r0, #3]
   1061e:	1c51      	adds	r1, r2, #1
   10620:	7041      	strb	r1, [r0, #1]
   10622:	4770      	bx	lr

00010624 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   10624:	b510      	push	{r4, lr}
   10626:	7802      	ldrb	r2, [r0, #0]
   10628:	f001 030f 	and.w	r3, r1, #15
   1062c:	f022 020f 	bic.w	r2, r2, #15
   10630:	431a      	orrs	r2, r3
   10632:	7002      	strb	r2, [r0, #0]
   10634:	2909      	cmp	r1, #9
   10636:	d213      	bcs.n	10660 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x3c>
   10638:	e8df f001 	tbb	[pc, r1]
   1063c:	07050705 	.word	0x07050705
   10640:	0b050905 	.word	0x0b050905
   10644:	000f      	.short	0x000f
   10646:	2106      	movs	r1, #6
   10648:	e008      	b.n	1065c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   1064a:	210c      	movs	r1, #12
   1064c:	e006      	b.n	1065c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   1064e:	2122      	movs	r1, #34	; 0x22
   10650:	e004      	b.n	1065c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10652:	2101      	movs	r1, #1
   10654:	2200      	movs	r2, #0
   10656:	70c2      	strb	r2, [r0, #3]
   10658:	e000      	b.n	1065c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   1065a:	210e      	movs	r1, #14
   1065c:	7041      	strb	r1, [r0, #1]
   1065e:	bd10      	pop	{r4, pc}
   10660:	216e      	movs	r1, #110	; 0x6e
   10662:	202a      	movs	r0, #42	; 0x2a
   10664:	f7f3 fa8c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010668 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   10668:	680a      	ldr	r2, [r1, #0]
   1066a:	f8c0 2009 	str.w	r2, [r0, #9]
   1066e:	8889      	ldrh	r1, [r1, #4]
   10670:	f8a0 100d 	strh.w	r1, [r0, #13]
   10674:	4770      	bx	lr

00010676 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   10676:	7802      	ldrb	r2, [r0, #0]
   10678:	2380      	movs	r3, #128	; 0x80
   1067a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1067e:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
   10682:	4311      	orrs	r1, r2
   10684:	7001      	strb	r1, [r0, #0]
   10686:	4770      	bx	lr

00010688 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   10688:	680a      	ldr	r2, [r1, #0]
   1068a:	f8c0 2003 	str.w	r2, [r0, #3]
   1068e:	8889      	ldrh	r1, [r1, #4]
   10690:	f8a0 1007 	strh.w	r1, [r0, #7]
   10694:	4770      	bx	lr

00010696 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   10696:	7802      	ldrb	r2, [r0, #0]
   10698:	2340      	movs	r3, #64	; 0x40
   1069a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1069e:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   106a2:	4311      	orrs	r1, r2
   106a4:	7001      	strb	r1, [r0, #0]
   106a6:	4770      	bx	lr

000106a8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
   106a8:	b570      	push	{r4, r5, r6, lr}
   106aa:	4614      	mov	r4, r2
   106ac:	4605      	mov	r5, r0
   106ae:	2a1f      	cmp	r2, #31
   106b0:	d903      	bls.n	106ba <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
   106b2:	21d2      	movs	r1, #210	; 0xd2
   106b4:	202a      	movs	r0, #42	; 0x2a
   106b6:	f7f3 fa63 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106ba:	f105 0009 	add.w	r0, r5, #9
   106be:	f7f3 f8d5 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   106c2:	1da0      	adds	r0, r4, #6
   106c4:	7068      	strb	r0, [r5, #1]
   106c6:	bd70      	pop	{r4, r5, r6, pc}

000106c8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
   106c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106cc:	4604      	mov	r4, r0
   106ce:	b082      	sub	sp, #8
   106d0:	4688      	mov	r8, r1
   106d2:	2000      	movs	r0, #0
   106d4:	f7f3 fc08 	bl	3ee8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   106d8:	4605      	mov	r5, r0
   106da:	2001      	movs	r0, #1
   106dc:	f7f3 fc04 	bl	3ee8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   106e0:	4428      	add	r0, r5
   106e2:	b2c7      	uxtb	r7, r0
   106e4:	2600      	movs	r6, #0
   106e6:	eb17 0508 	adds.w	r5, r7, r8
   106ea:	bf18      	it	ne
   106ec:	f04f 0800 	movne.w	r8, #0
   106f0:	d01c      	beq.n	1072c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x64>
   106f2:	8820      	ldrh	r0, [r4, #0]
   106f4:	1c40      	adds	r0, r0, #1
   106f6:	b280      	uxth	r0, r0
   106f8:	8020      	strh	r0, [r4, #0]
   106fa:	42a8      	cmp	r0, r5
   106fc:	bf28      	it	cs
   106fe:	f8a4 8000 	strhcs.w	r8, [r4]
   10702:	8820      	ldrh	r0, [r4, #0]
   10704:	42b8      	cmp	r0, r7
   10706:	bf28      	it	cs
   10708:	4285      	cmpcs	r5, r0
   1070a:	d903      	bls.n	10714 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4c>
   1070c:	b002      	add	sp, #8
   1070e:	2000      	movs	r0, #0
   10710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10714:	4669      	mov	r1, sp
   10716:	f7ff fb59 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1071a:	2800      	cmp	r0, #0
   1071c:	bf04      	itt	eq
   1071e:	b002      	addeq	sp, #8
   10720:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10724:	1c70      	adds	r0, r6, #1
   10726:	b2c6      	uxtb	r6, r0
   10728:	42b5      	cmp	r5, r6
   1072a:	d8e2      	bhi.n	106f2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x2a>
   1072c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   10730:	8020      	strh	r0, [r4, #0]
   10732:	b002      	add	sp, #8
   10734:	2012      	movs	r0, #18
   10736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001073a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   1073a:	7801      	ldrb	r1, [r0, #0]
   1073c:	2900      	cmp	r1, #0
   1073e:	bf08      	it	eq
   10740:	4770      	bxeq	lr
   10742:	6841      	ldr	r1, [r0, #4]
   10744:	f891 210d 	ldrb.w	r2, [r1, #269]	; 0x10d
   10748:	2a00      	cmp	r2, #0
   1074a:	bf08      	it	eq
   1074c:	4770      	bxeq	lr
   1074e:	2200      	movs	r2, #0
   10750:	f881 210d 	strb.w	r2, [r1, #269]	; 0x10d
   10754:	6840      	ldr	r0, [r0, #4]
   10756:	f000 ba28 	b.w	10baa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>

0001075a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   1075a:	b430      	push	{r4, r5}
   1075c:	8050      	strh	r0, [r2, #2]
   1075e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   10762:	f8a2 c004 	strh.w	ip, [r2, #4]
   10766:	898b      	ldrh	r3, [r1, #12]
   10768:	80d3      	strh	r3, [r2, #6]
   1076a:	8948      	ldrh	r0, [r1, #10]
   1076c:	8110      	strh	r0, [r2, #8]
   1076e:	89cc      	ldrh	r4, [r1, #14]
   10770:	8154      	strh	r4, [r2, #10]
   10772:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
   10774:	42a5      	cmp	r5, r4
   10776:	bf04      	itt	eq
   10778:	8d4c      	ldrheq	r4, [r1, #42]	; 0x2a
   1077a:	4284      	cmpeq	r4, r0
   1077c:	d106      	bne.n	1078c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   1077e:	8e0c      	ldrh	r4, [r1, #48]	; 0x30
   10780:	429c      	cmp	r4, r3
   10782:	bf02      	ittt	eq
   10784:	8d8b      	ldrheq	r3, [r1, #44]	; 0x2c
   10786:	4563      	cmpeq	r3, ip
   10788:	2300      	moveq	r3, #0
   1078a:	d001      	beq.n	10790 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x36>
   1078c:	f04f 0301 	mov.w	r3, #1
   10790:	7313      	strb	r3, [r2, #12]
   10792:	8548      	strh	r0, [r1, #42]	; 0x2a
   10794:	8950      	ldrh	r0, [r2, #10]
   10796:	85c8      	strh	r0, [r1, #46]	; 0x2e
   10798:	8890      	ldrh	r0, [r2, #4]
   1079a:	8588      	strh	r0, [r1, #44]	; 0x2c
   1079c:	88d0      	ldrh	r0, [r2, #6]
   1079e:	8608      	strh	r0, [r1, #48]	; 0x30
   107a0:	f04f 0001 	mov.w	r0, #1
   107a4:	7010      	strb	r0, [r2, #0]
   107a6:	bc30      	pop	{r4, r5}
   107a8:	4770      	bx	lr

000107aa <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
   107aa:	888a      	ldrh	r2, [r1, #4]
   107ac:	890b      	ldrh	r3, [r1, #8]
   107ae:	f8b1 c002 	ldrh.w	ip, [r1, #2]
   107b2:	88c9      	ldrh	r1, [r1, #6]
   107b4:	f8a0 c044 	strh.w	ip, [r0, #68]	; 0x44
   107b8:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
   107bc:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   107c0:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
   107c4:	4770      	bx	lr

000107c6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   107c6:	b4f0      	push	{r4, r5, r6, r7}
   107c8:	f8d0 c004 	ldr.w	ip, [r0, #4]
   107cc:	2696      	movs	r6, #150	; 0x96
   107ce:	f641 534c 	movw	r3, #7500	; 0x1d4c
   107d2:	459c      	cmp	ip, r3
   107d4:	bf3a      	itte	cc
   107d6:	264d      	movcc	r6, #77	; 0x4d
   107d8:	4635      	movcc	r5, r6
   107da:	2596      	movcs	r5, #150	; 0x96
   107dc:	f890 c066 	ldrb.w	ip, [r0, #102]	; 0x66
   107e0:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
   107e4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   107e6:	f1bc 0f02 	cmp.w	ip, #2
   107ea:	bf07      	ittee	eq
   107ec:	009b      	lsleq	r3, r3, #2
   107ee:	333c      	addeq	r3, #60	; 0x3c
   107f0:	00db      	lslne	r3, r3, #3
   107f2:	3370      	addne	r3, #112	; 0x70
   107f4:	fa1f fc83 	uxth.w	ip, r3
   107f8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   107fc:	f8b0 7042 	ldrh.w	r7, [r0, #66]	; 0x42
   10800:	42bb      	cmp	r3, r7
   10802:	bf28      	it	cs
   10804:	463b      	movcs	r3, r7
   10806:	4563      	cmp	r3, ip
   10808:	bf28      	it	cs
   1080a:	4663      	movcs	r3, ip
   1080c:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   10810:	2c02      	cmp	r4, #2
   10812:	bf07      	ittee	eq
   10814:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
   10818:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
   1081c:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
   10820:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
   10824:	fa1f f48c 	uxth.w	r4, ip
   10828:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	; 0x4a
   1082c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   10830:	4584      	cmp	ip, r0
   10832:	bf28      	it	cs
   10834:	4684      	movcs	ip, r0
   10836:	45a4      	cmp	ip, r4
   10838:	bf28      	it	cs
   1083a:	46a4      	movcs	ip, r4
   1083c:	eb03 000c 	add.w	r0, r3, ip
   10840:	4428      	add	r0, r5
   10842:	1d80      	adds	r0, r0, #6
   10844:	4430      	add	r0, r6
   10846:	4410      	add	r0, r2
   10848:	4288      	cmp	r0, r1
   1084a:	bf94      	ite	ls
   1084c:	1a08      	subls	r0, r1, r0
   1084e:	2000      	movhi	r0, #0
   10850:	bcf0      	pop	{r4, r5, r6, r7}
   10852:	4770      	bx	lr

00010854 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   10854:	b470      	push	{r4, r5, r6}
   10856:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   1085a:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
   1085c:	8e45      	ldrh	r5, [r0, #50]	; 0x32
   1085e:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
   10860:	428a      	cmp	r2, r1
   10862:	bf28      	it	cs
   10864:	460a      	movcs	r2, r1
   10866:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   1086a:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
   1086e:	428b      	cmp	r3, r1
   10870:	bf38      	it	cc
   10872:	4619      	movcc	r1, r3
   10874:	8642      	strh	r2, [r0, #50]	; 0x32
   10876:	86c1      	strh	r1, [r0, #54]	; 0x36
   10878:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   1087c:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   1087e:	4594      	cmp	ip, r2
   10880:	bf38      	it	cc
   10882:	4694      	movcc	ip, r2
   10884:	428b      	cmp	r3, r1
   10886:	bf38      	it	cc
   10888:	460b      	movcc	r3, r1
   1088a:	f8a0 c038 	strh.w	ip, [r0, #56]	; 0x38
   1088e:	8743      	strh	r3, [r0, #58]	; 0x3a
   10890:	42aa      	cmp	r2, r5
   10892:	bf0a      	itet	eq
   10894:	42a1      	cmpeq	r1, r4
   10896:	2301      	movne	r3, #1
   10898:	2300      	moveq	r3, #0
   1089a:	8e04      	ldrh	r4, [r0, #48]	; 0x30
   1089c:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   108a0:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   108a2:	f8b0 c034 	ldrh.w	ip, [r0, #52]	; 0x34
   108a6:	428a      	cmp	r2, r1
   108a8:	bf28      	it	cs
   108aa:	460a      	movcs	r2, r1
   108ac:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
   108b0:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
   108b4:	428d      	cmp	r5, r1
   108b6:	bf38      	it	cc
   108b8:	4629      	movcc	r1, r5
   108ba:	f890 505c 	ldrb.w	r5, [r0, #92]	; 0x5c
   108be:	2d02      	cmp	r5, #2
   108c0:	d00a      	beq.n	108d8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
   108c2:	8602      	strh	r2, [r0, #48]	; 0x30
   108c4:	8681      	strh	r1, [r0, #52]	; 0x34
   108c6:	42a2      	cmp	r2, r4
   108c8:	bf0a      	itet	eq
   108ca:	4561      	cmpeq	r1, ip
   108cc:	2001      	movne	r0, #1
   108ce:	2000      	moveq	r0, #0
   108d0:	ea40 0003 	orr.w	r0, r0, r3
   108d4:	bc70      	pop	{r4, r5, r6}
   108d6:	4770      	bx	lr
   108d8:	4294      	cmp	r4, r2
   108da:	bf38      	it	cc
   108dc:	4622      	movcc	r2, r4
   108de:	458c      	cmp	ip, r1
   108e0:	bf38      	it	cc
   108e2:	4661      	movcc	r1, ip
   108e4:	2500      	movs	r5, #0
   108e6:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
   108ea:	e7ea      	b.n	108c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6e>

000108ec <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   108ec:	b4f0      	push	{r4, r5, r6, r7}
   108ee:	6845      	ldr	r5, [r0, #4]
   108f0:	f641 534c 	movw	r3, #7500	; 0x1d4c
   108f4:	429d      	cmp	r5, r3
   108f6:	bf34      	ite	cc
   108f8:	264d      	movcc	r6, #77	; 0x4d
   108fa:	2696      	movcs	r6, #150	; 0x96
   108fc:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
   10900:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   10904:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
   10908:	2c02      	cmp	r4, #2
   1090a:	bf07      	ittee	eq
   1090c:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
   10910:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
   10914:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
   10918:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
   1091c:	fa1f f48c 	uxth.w	r4, ip
   10920:	f8b0 7046 	ldrh.w	r7, [r0, #70]	; 0x46
   10924:	f8b0 c042 	ldrh.w	ip, [r0, #66]	; 0x42
   10928:	4567      	cmp	r7, ip
   1092a:	bf38      	it	cc
   1092c:	46bc      	movcc	ip, r7
   1092e:	45a4      	cmp	ip, r4
   10930:	bf38      	it	cc
   10932:	4664      	movcc	r4, ip
   10934:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   10938:	2b02      	cmp	r3, #2
   1093a:	bf07      	ittee	eq
   1093c:	ea4f 038c 	moveq.w	r3, ip, lsl #2
   10940:	333c      	addeq	r3, #60	; 0x3c
   10942:	ea4f 03cc 	movne.w	r3, ip, lsl #3
   10946:	3370      	addne	r3, #112	; 0x70
   10948:	fa1f fc83 	uxth.w	ip, r3
   1094c:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
   10950:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10954:	429f      	cmp	r7, r3
   10956:	bf38      	it	cc
   10958:	463b      	movcc	r3, r7
   1095a:	4563      	cmp	r3, ip
   1095c:	bf28      	it	cs
   1095e:	4663      	movcs	r3, ip
   10960:	4423      	add	r3, r4
   10962:	4433      	add	r3, r6
   10964:	f8d0 c028 	ldr.w	ip, [r0, #40]	; 0x28
   10968:	1d9b      	adds	r3, r3, #6
   1096a:	45ac      	cmp	ip, r5
   1096c:	bf38      	it	cc
   1096e:	4665      	movcc	r5, ip
   10970:	1a69      	subs	r1, r5, r1
   10972:	441a      	add	r2, r3
   10974:	428a      	cmp	r2, r1
   10976:	bf28      	it	cs
   10978:	4611      	movcs	r1, r2
   1097a:	62c1      	str	r1, [r0, #44]	; 0x2c
   1097c:	bcf0      	pop	{r4, r5, r6, r7}
   1097e:	4770      	bx	lr

00010980 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   10980:	221b      	movs	r2, #27
   10982:	8402      	strh	r2, [r0, #32]
   10984:	8382      	strh	r2, [r0, #28]
   10986:	82c2      	strh	r2, [r0, #22]
   10988:	8282      	strh	r2, [r0, #20]
   1098a:	8142      	strh	r2, [r0, #10]
   1098c:	8202      	strh	r2, [r0, #16]
   1098e:	8102      	strh	r2, [r0, #8]
   10990:	8542      	strh	r2, [r0, #42]	; 0x2a
   10992:	8582      	strh	r2, [r0, #44]	; 0x2c
   10994:	8482      	strh	r2, [r0, #36]	; 0x24
   10996:	2900      	cmp	r1, #0
   10998:	bf18      	it	ne
   1099a:	4770      	bxne	lr
   1099c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   109a0:	8441      	strh	r1, [r0, #34]	; 0x22
   109a2:	83c1      	strh	r1, [r0, #30]
   109a4:	8341      	strh	r1, [r0, #26]
   109a6:	8301      	strh	r1, [r0, #24]
   109a8:	81c1      	strh	r1, [r0, #14]
   109aa:	8241      	strh	r1, [r0, #18]
   109ac:	8181      	strh	r1, [r0, #12]
   109ae:	85c1      	strh	r1, [r0, #46]	; 0x2e
   109b0:	8601      	strh	r1, [r0, #48]	; 0x30
   109b2:	4770      	bx	lr

000109b4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   109b4:	6800      	ldr	r0, [r0, #0]
   109b6:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   109ba:	4290      	cmp	r0, r2
   109bc:	bf9c      	itt	ls
   109be:	2000      	movls	r0, #0
   109c0:	4770      	bxls	lr
   109c2:	1a40      	subs	r0, r0, r1
   109c4:	389c      	subs	r0, #156	; 0x9c
   109c6:	0840      	lsrs	r0, r0, #1
   109c8:	4770      	bx	lr

000109ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   109ca:	f8dd c000 	ldr.w	ip, [sp]
   109ce:	8281      	strh	r1, [r0, #20]
   109d0:	82c2      	strh	r2, [r0, #22]
   109d2:	8303      	strh	r3, [r0, #24]
   109d4:	f8a0 c01a 	strh.w	ip, [r0, #26]
   109d8:	4770      	bx	lr

000109da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   109da:	8050      	strh	r0, [r2, #2]
   109dc:	8a88      	ldrh	r0, [r1, #20]
   109de:	8090      	strh	r0, [r2, #4]
   109e0:	8ac8      	ldrh	r0, [r1, #22]
   109e2:	80d0      	strh	r0, [r2, #6]
   109e4:	8b08      	ldrh	r0, [r1, #24]
   109e6:	8110      	strh	r0, [r2, #8]
   109e8:	8b48      	ldrh	r0, [r1, #26]
   109ea:	8150      	strh	r0, [r2, #10]
   109ec:	2001      	movs	r0, #1
   109ee:	7010      	strb	r0, [r2, #0]
   109f0:	4770      	bx	lr
   109f2:	2001      	movs	r0, #1
   109f4:	f7f6 be1c 	b.w	7630 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   109f8:	2001      	movs	r0, #1
   109fa:	f7f6 be19 	b.w	7630 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   109fe:	b510      	push	{r4, lr}
   10a00:	f7f7 f88c 	bl	7b1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   10a04:	2800      	cmp	r0, #0
   10a06:	bf18      	it	ne
   10a08:	bd10      	popne	{r4, pc}
   10a0a:	2000      	movs	r0, #0
   10a0c:	f7f6 fe10 	bl	7630 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10a10:	2000      	movs	r0, #0
   10a12:	bd10      	pop	{r4, pc}
   10a14:	2001      	movs	r0, #1
   10a16:	f7f6 be0b 	b.w	7630 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>

00010a1a <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   10a1a:	b510      	push	{r4, lr}
   10a1c:	7001      	strb	r1, [r0, #0]
   10a1e:	7042      	strb	r2, [r0, #1]
   10a20:	7880      	ldrb	r0, [r0, #2]
   10a22:	f3c0 0380 	ubfx	r3, r0, #2, #1
   10a26:	f3c0 0c40 	ubfx	ip, r0, #1, #1
   10a2a:	4463      	add	r3, ip
   10a2c:	f000 0001 	and.w	r0, r0, #1
   10a30:	4418      	add	r0, r3
   10a32:	fb10 f001 	smulbb	r0, r0, r1
   10a36:	fb10 f002 	smulbb	r0, r0, r2
   10a3a:	28ff      	cmp	r0, #255	; 0xff
   10a3c:	bf38      	it	cc
   10a3e:	bd10      	popcc	{r4, pc}
   10a40:	215c      	movs	r1, #92	; 0x5c
   10a42:	202e      	movs	r0, #46	; 0x2e
   10a44:	f7f3 f89c 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010a48 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   10a48:	7881      	ldrb	r1, [r0, #2]
   10a4a:	f3c1 0280 	ubfx	r2, r1, #2, #1
   10a4e:	f3c1 0340 	ubfx	r3, r1, #1, #1
   10a52:	441a      	add	r2, r3
   10a54:	f001 0101 	and.w	r1, r1, #1
   10a58:	4411      	add	r1, r2
   10a5a:	7842      	ldrb	r2, [r0, #1]
   10a5c:	7800      	ldrb	r0, [r0, #0]
   10a5e:	fb12 f000 	smulbb	r0, r2, r0
   10a62:	4348      	muls	r0, r1
   10a64:	b2c0      	uxtb	r0, r0
   10a66:	4770      	bx	lr

00010a68 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   10a68:	7882      	ldrb	r2, [r0, #2]
   10a6a:	2100      	movs	r1, #0
   10a6c:	f012 0f01 	tst.w	r2, #1
   10a70:	d005      	beq.n	10a7e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
   10a72:	78c3      	ldrb	r3, [r0, #3]
   10a74:	f013 0f01 	tst.w	r3, #1
   10a78:	bf08      	it	eq
   10a7a:	2101      	moveq	r1, #1
   10a7c:	d010      	beq.n	10aa0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10a7e:	f012 0f02 	tst.w	r2, #2
   10a82:	d005      	beq.n	10a90 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
   10a84:	78c3      	ldrb	r3, [r0, #3]
   10a86:	f013 0f02 	tst.w	r3, #2
   10a8a:	bf08      	it	eq
   10a8c:	2102      	moveq	r1, #2
   10a8e:	d007      	beq.n	10aa0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10a90:	f012 0f04 	tst.w	r2, #4
   10a94:	d004      	beq.n	10aa0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10a96:	78c3      	ldrb	r3, [r0, #3]
   10a98:	f013 0f04 	tst.w	r3, #4
   10a9c:	bf08      	it	eq
   10a9e:	2104      	moveq	r1, #4
   10aa0:	7943      	ldrb	r3, [r0, #5]
   10aa2:	1c5b      	adds	r3, r3, #1
   10aa4:	b2db      	uxtb	r3, r3
   10aa6:	7143      	strb	r3, [r0, #5]
   10aa8:	f890 c001 	ldrb.w	ip, [r0, #1]
   10aac:	4563      	cmp	r3, ip
   10aae:	d10d      	bne.n	10acc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   10ab0:	2300      	movs	r3, #0
   10ab2:	7143      	strb	r3, [r0, #5]
   10ab4:	f890 c003 	ldrb.w	ip, [r0, #3]
   10ab8:	ea4c 0c01 	orr.w	ip, ip, r1
   10abc:	f880 c003 	strb.w	ip, [r0, #3]
   10ac0:	4594      	cmp	ip, r2
   10ac2:	d103      	bne.n	10acc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   10ac4:	70c3      	strb	r3, [r0, #3]
   10ac6:	7902      	ldrb	r2, [r0, #4]
   10ac8:	1c52      	adds	r2, r2, #1
   10aca:	7102      	strb	r2, [r0, #4]
   10acc:	2901      	cmp	r1, #1
   10ace:	bf04      	itt	eq
   10ad0:	2025      	moveq	r0, #37	; 0x25
   10ad2:	4770      	bxeq	lr
   10ad4:	2902      	cmp	r1, #2
   10ad6:	bf04      	itt	eq
   10ad8:	2026      	moveq	r0, #38	; 0x26
   10ada:	4770      	bxeq	lr
   10adc:	2904      	cmp	r1, #4
   10ade:	bf04      	itt	eq
   10ae0:	2027      	moveq	r0, #39	; 0x27
   10ae2:	4770      	bxeq	lr
   10ae4:	b510      	push	{r4, lr}
   10ae6:	2139      	movs	r1, #57	; 0x39
   10ae8:	202e      	movs	r0, #46	; 0x2e
   10aea:	f7f3 f849 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010aee <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   10aee:	7081      	strb	r1, [r0, #2]
   10af0:	4770      	bx	lr

00010af2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   10af2:	b410      	push	{r4}
   10af4:	7881      	ldrb	r1, [r0, #2]
   10af6:	f3c1 0280 	ubfx	r2, r1, #2, #1
   10afa:	f3c1 0340 	ubfx	r3, r1, #1, #1
   10afe:	441a      	add	r2, r3
   10b00:	f001 0101 	and.w	r1, r1, #1
   10b04:	7843      	ldrb	r3, [r0, #1]
   10b06:	4411      	add	r1, r2
   10b08:	fb13 f201 	smulbb	r2, r3, r1
   10b0c:	78c1      	ldrb	r1, [r0, #3]
   10b0e:	f3c1 0c80 	ubfx	ip, r1, #2, #1
   10b12:	f3c1 0440 	ubfx	r4, r1, #1, #1
   10b16:	44a4      	add	ip, r4
   10b18:	f001 0101 	and.w	r1, r1, #1
   10b1c:	4461      	add	r1, ip
   10b1e:	f890 c005 	ldrb.w	ip, [r0, #5]
   10b22:	fb11 c103 	smlabb	r1, r1, r3, ip
   10b26:	7803      	ldrb	r3, [r0, #0]
   10b28:	7900      	ldrb	r0, [r0, #4]
   10b2a:	1a18      	subs	r0, r3, r0
   10b2c:	fb10 f002 	smulbb	r0, r0, r2
   10b30:	1a40      	subs	r0, r0, r1
   10b32:	bc10      	pop	{r4}
   10b34:	b2c0      	uxtb	r0, r0
   10b36:	4770      	bx	lr

00010b38 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   10b38:	b510      	push	{r4, lr}
   10b3a:	4604      	mov	r4, r0
   10b3c:	f001 f9e1 	bl	11f02 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   10b40:	2001      	movs	r0, #1
   10b42:	7060      	strb	r0, [r4, #1]
   10b44:	7020      	strb	r0, [r4, #0]
   10b46:	bd10      	pop	{r4, pc}

00010b48 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   10b48:	2100      	movs	r1, #0
   10b4a:	70c1      	strb	r1, [r0, #3]
   10b4c:	7141      	strb	r1, [r0, #5]
   10b4e:	7101      	strb	r1, [r0, #4]
   10b50:	4770      	bx	lr

00010b52 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   10b52:	f240 315a 	movw	r1, #858	; 0x35a
   10b56:	4348      	muls	r0, r1
   10b58:	4770      	bx	lr

00010b5a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   10b5a:	f240 20ef 	movw	r0, #751	; 0x2ef
   10b5e:	4770      	bx	lr
   10b60:	041c020e 	.word	0x041c020e
   10b64:	0c600630 	.word	0x0c600630
   10b68:	06b4035a 	.word	0x06b4035a
   10b6c:	0bf505c5 	.word	0x0bf505c5
   10b70:	01a31225 	.word	0x01a31225
   10b74:	05bf03b1 	.word	0x05bf03b1
   10b78:	064902ef 	.word	0x064902ef
   10b7c:	09a3      	.short	0x09a3

00010b7e <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>:
   10b7e:	b510      	push	{r4, lr}
   10b80:	4604      	mov	r4, r0
   10b82:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
   10b86:	f001 f92d 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10b8a:	f64d 7141 	movw	r1, #57153	; 0xdf41
   10b8e:	4408      	add	r0, r1
   10b90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10b94:	fbb0 f0f1 	udiv	r0, r0, r1
   10b98:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
   10b9c:	4620      	mov	r0, r4
   10b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10ba2:	f44f 71a8 	mov.w	r1, #336	; 0x150
   10ba6:	f7ff bea1 	b.w	108ec <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>

00010baa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
   10baa:	b570      	push	{r4, r5, r6, lr}
   10bac:	4604      	mov	r4, r0
   10bae:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
   10bb2:	b082      	sub	sp, #8
   10bb4:	2800      	cmp	r0, #0
   10bb6:	bf07      	ittee	eq
   10bb8:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
   10bbc:	2803      	cmpeq	r0, #3
   10bbe:	b002      	addne	sp, #8
   10bc0:	bd70      	popne	{r4, r5, r6, pc}
   10bc2:	f7fd fdca 	bl	e75a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   10bc6:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
   10bca:	4601      	mov	r1, r0
   10bcc:	4610      	mov	r0, r2
   10bce:	f7f0 fc55 	bl	147c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   10bd2:	2800      	cmp	r0, #0
   10bd4:	bfdc      	itt	le
   10bd6:	b002      	addle	sp, #8
   10bd8:	bd70      	pople	{r4, r5, r6, pc}
   10bda:	6861      	ldr	r1, [r4, #4]
   10bdc:	2900      	cmp	r1, #0
   10bde:	bf14      	ite	ne
   10be0:	fbb0 f0f1 	udivne	r0, r0, r1
   10be4:	2000      	moveq	r0, #0
   10be6:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   10bea:	1c40      	adds	r0, r0, #1
   10bec:	4408      	add	r0, r1
   10bee:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   10bf2:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
   10bf6:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   10bfa:	1a08      	subs	r0, r1, r0
   10bfc:	b200      	sxth	r0, r0
   10bfe:	2800      	cmp	r0, #0
   10c00:	bfdc      	itt	le
   10c02:	b002      	addle	sp, #8
   10c04:	bd70      	pople	{r4, r5, r6, pc}
   10c06:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
   10c0a:	f7f1 f971 	bl	1ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   10c0e:	2800      	cmp	r0, #0
   10c10:	bf04      	itt	eq
   10c12:	b002      	addeq	sp, #8
   10c14:	bd70      	popeq	{r4, r5, r6, pc}
   10c16:	2001      	movs	r0, #1
   10c18:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
   10c1c:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
   10c20:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   10c24:	ae01      	add	r6, sp, #4
   10c26:	1a40      	subs	r0, r0, r1
   10c28:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   10c2c:	1e40      	subs	r0, r0, #1
   10c2e:	4408      	add	r0, r1
   10c30:	b285      	uxth	r5, r0
   10c32:	e019      	b.n	10c68 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xbe>
   10c34:	9600      	str	r6, [sp, #0]
   10c36:	f8b4 1150 	ldrh.w	r1, [r4, #336]	; 0x150
   10c3a:	2300      	movs	r3, #0
   10c3c:	2201      	movs	r2, #1
   10c3e:	4620      	mov	r0, r4
   10c40:	f7f8 f938 	bl	8eb4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
   10c44:	2800      	cmp	r0, #0
   10c46:	bf04      	itt	eq
   10c48:	b002      	addeq	sp, #8
   10c4a:	bd70      	popeq	{r4, r5, r6, pc}
   10c4c:	2801      	cmp	r0, #1
   10c4e:	d004      	beq.n	10c5a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb0>
   10c50:	f240 51df 	movw	r1, #1503	; 0x5df
   10c54:	2030      	movs	r0, #48	; 0x30
   10c56:	f7f2 ff93 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10c5a:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   10c5e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   10c62:	4408      	add	r0, r1
   10c64:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   10c68:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   10c6c:	1a28      	subs	r0, r5, r0
   10c6e:	b200      	sxth	r0, r0
   10c70:	2800      	cmp	r0, #0
   10c72:	dadf      	bge.n	10c34 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x8a>
   10c74:	b002      	add	sp, #8
   10c76:	bd70      	pop	{r4, r5, r6, pc}
   10c78:	00fa01f4 	.word	0x00fa01f4
   10c7c:	00640096 	.word	0x00640096
   10c80:	0032004b 	.word	0x0032004b
   10c84:	0014001e 	.word	0x0014001e
   10c88:	0005000a 	.word	0x0005000a
   10c8c:	00010002 	.word	0x00010002

00010c90 <sym_KI22E7SNUU4SSUGQ7PUDMBEHERNXLLCCBKOZDTY>:
   10c90:	b570      	push	{r4, r5, r6, lr}
   10c92:	460c      	mov	r4, r1
   10c94:	4605      	mov	r5, r0
   10c96:	f44f 720a 	mov.w	r2, #552	; 0x228
   10c9a:	2100      	movs	r1, #0
   10c9c:	4620      	mov	r0, r4
   10c9e:	f7fd fec1 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   10ca2:	8025      	strh	r5, [r4, #0]
   10ca4:	bd70      	pop	{r4, r5, r6, pc}

00010ca6 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   10ca6:	f7f3 baaf 	b.w	4208 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

00010caa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
   10caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cae:	460d      	mov	r5, r1
   10cb0:	4607      	mov	r7, r0
   10cb2:	2101      	movs	r1, #1
   10cb4:	f7fe ff7e 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10cb8:	1e04      	subs	r4, r0, #0
   10cba:	bf08      	it	eq
   10cbc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cc0:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   10cc4:	2600      	movs	r6, #0
   10cc6:	b1b8      	cbz	r0, 10cf8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4e>
   10cc8:	706e      	strb	r6, [r5, #1]
   10cca:	2009      	movs	r0, #9
   10ccc:	7028      	strb	r0, [r5, #0]
   10cce:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   10cd2:	b178      	cbz	r0, 10cf4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4a>
   10cd4:	8466      	strh	r6, [r4, #34]	; 0x22
   10cd6:	f884 61c8 	strb.w	r6, [r4, #456]	; 0x1c8
   10cda:	f8d4 01ca 	ldr.w	r0, [r4, #458]	; 0x1ca
   10cde:	6068      	str	r0, [r5, #4]
   10ce0:	f8d4 01ce 	ldr.w	r0, [r4, #462]	; 0x1ce
   10ce4:	60a8      	str	r0, [r5, #8]
   10ce6:	f8b4 01d2 	ldrh.w	r0, [r4, #466]	; 0x1d2
   10cea:	81a8      	strh	r0, [r5, #12]
   10cec:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   10cf0:	2800      	cmp	r0, #0
   10cf2:	d1ef      	bne.n	10cd4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x2a>
   10cf4:	712e      	strb	r6, [r5, #4]
   10cf6:	e047      	b.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10cf8:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   10cfc:	2800      	cmp	r0, #0
   10cfe:	d03a      	beq.n	10d76 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xcc>
   10d00:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   10d04:	280d      	cmp	r0, #13
   10d06:	d01b      	beq.n	10d40 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x96>
   10d08:	280e      	cmp	r0, #14
   10d0a:	d004      	beq.n	10d16 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x6c>
   10d0c:	f640 21c9 	movw	r1, #2761	; 0xac9
   10d10:	2031      	movs	r0, #49	; 0x31
   10d12:	f7f2 ff35 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d16:	8820      	ldrh	r0, [r4, #0]
   10d18:	f7f3 faea 	bl	42f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   10d1c:	4607      	mov	r7, r0
   10d1e:	f7fe fde9 	bl	f8f4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   10d22:	b9a0      	cbnz	r0, 10d4e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa4>
   10d24:	706e      	strb	r6, [r5, #1]
   10d26:	200e      	movs	r0, #14
   10d28:	7028      	strb	r0, [r5, #0]
   10d2a:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   10d2e:	7128      	strb	r0, [r5, #4]
   10d30:	8820      	ldrh	r0, [r4, #0]
   10d32:	80e8      	strh	r0, [r5, #6]
   10d34:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   10d38:	4638      	mov	r0, r7
   10d3a:	f7fe fdf1 	bl	f920 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   10d3e:	e023      	b.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10d40:	8820      	ldrh	r0, [r4, #0]
   10d42:	f7f3 fad5 	bl	42f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   10d46:	4607      	mov	r7, r0
   10d48:	f7fe fdd4 	bl	f8f4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   10d4c:	b110      	cbz	r0, 10d54 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xaa>
   10d4e:	2000      	movs	r0, #0
   10d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d54:	706e      	strb	r6, [r5, #1]
   10d56:	200d      	movs	r0, #13
   10d58:	7028      	strb	r0, [r5, #0]
   10d5a:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   10d5e:	7128      	strb	r0, [r5, #4]
   10d60:	8820      	ldrh	r0, [r4, #0]
   10d62:	80e8      	strh	r0, [r5, #6]
   10d64:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
   10d68:	7228      	strb	r0, [r5, #8]
   10d6a:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   10d6e:	4638      	mov	r0, r7
   10d70:	f7fe fdd6 	bl	f920 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   10d74:	e008      	b.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10d76:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
   10d7a:	b140      	cbz	r0, 10d8e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xe4>
   10d7c:	706e      	strb	r6, [r5, #1]
   10d7e:	2010      	movs	r0, #16
   10d80:	7028      	strb	r0, [r5, #0]
   10d82:	f884 620a 	strb.w	r6, [r4, #522]	; 0x20a
   10d86:	80af      	strh	r7, [r5, #4]
   10d88:	2001      	movs	r0, #1
   10d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d8e:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   10d92:	b190      	cbz	r0, 10dba <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x110>
   10d94:	706e      	strb	r6, [r5, #1]
   10d96:	200a      	movs	r0, #10
   10d98:	7028      	strb	r0, [r5, #0]
   10d9a:	8820      	ldrh	r0, [r4, #0]
   10d9c:	80a8      	strh	r0, [r5, #4]
   10d9e:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   10da2:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
   10da6:	f8c5 0006 	str.w	r0, [r5, #6]
   10daa:	f8c5 100a 	str.w	r1, [r5, #10]
   10dae:	f8b4 01e8 	ldrh.w	r0, [r4, #488]	; 0x1e8
   10db2:	81e8      	strh	r0, [r5, #14]
   10db4:	f884 61dc 	strb.w	r6, [r4, #476]	; 0x1dc
   10db8:	e7e6      	b.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10dba:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   10dbe:	b180      	cbz	r0, 10de2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x138>
   10dc0:	706e      	strb	r6, [r5, #1]
   10dc2:	201a      	movs	r0, #26
   10dc4:	7028      	strb	r0, [r5, #0]
   10dc6:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   10dca:	2800      	cmp	r0, #0
   10dcc:	d0dc      	beq.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10dce:	f884 6204 	strb.w	r6, [r4, #516]	; 0x204
   10dd2:	f8d4 0206 	ldr.w	r0, [r4, #518]	; 0x206
   10dd6:	6068      	str	r0, [r5, #4]
   10dd8:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   10ddc:	2800      	cmp	r0, #0
   10dde:	d1f6      	bne.n	10dce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x124>
   10de0:	e7d2      	b.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10de2:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
   10de6:	b160      	cbz	r0, 10e02 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x158>
   10de8:	706e      	strb	r6, [r5, #1]
   10dea:	2008      	movs	r0, #8
   10dec:	7028      	strb	r0, [r5, #0]
   10dee:	e9d4 0187 	ldrd	r0, r1, [r4, #540]	; 0x21c
   10df2:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
   10df6:	60ea      	str	r2, [r5, #12]
   10df8:	e9c5 0101 	strd	r0, r1, [r5, #4]
   10dfc:	f884 621a 	strb.w	r6, [r4, #538]	; 0x21a
   10e00:	e7c2      	b.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e02:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   10e06:	b1a0      	cbz	r0, 10e32 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x188>
   10e08:	706e      	strb	r6, [r5, #1]
   10e0a:	2015      	movs	r0, #21
   10e0c:	7028      	strb	r0, [r5, #0]
   10e0e:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   10e12:	2800      	cmp	r0, #0
   10e14:	d0b8      	beq.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e16:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
   10e1a:	e9d4 017b 	ldrd	r0, r1, [r4, #492]	; 0x1ec
   10e1e:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
   10e22:	60ea      	str	r2, [r5, #12]
   10e24:	e9c5 0101 	strd	r0, r1, [r5, #4]
   10e28:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   10e2c:	2800      	cmp	r0, #0
   10e2e:	d1f2      	bne.n	10e16 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
   10e30:	e7aa      	b.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e32:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
   10e36:	b170      	cbz	r0, 10e56 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ac>
   10e38:	706e      	strb	r6, [r5, #1]
   10e3a:	201c      	movs	r0, #28
   10e3c:	7028      	strb	r0, [r5, #0]
   10e3e:	f884 61f8 	strb.w	r6, [r4, #504]	; 0x1f8
   10e42:	f8d4 01fa 	ldr.w	r0, [r4, #506]	; 0x1fa
   10e46:	6068      	str	r0, [r5, #4]
   10e48:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
   10e4c:	60a8      	str	r0, [r5, #8]
   10e4e:	f8b4 0202 	ldrh.w	r0, [r4, #514]	; 0x202
   10e52:	81a8      	strh	r0, [r5, #12]
   10e54:	e798      	b.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e56:	f894 020c 	ldrb.w	r0, [r4, #524]	; 0x20c
   10e5a:	b138      	cbz	r0, 10e6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1c2>
   10e5c:	201d      	movs	r0, #29
   10e5e:	7028      	strb	r0, [r5, #0]
   10e60:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
   10e64:	f8d4 020e 	ldr.w	r0, [r4, #526]	; 0x20e
   10e68:	6068      	str	r0, [r5, #4]
   10e6a:	e78d      	b.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e6c:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   10e70:	2800      	cmp	r0, #0
   10e72:	bf08      	it	eq
   10e74:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e78:	706e      	strb	r6, [r5, #1]
   10e7a:	2016      	movs	r0, #22
   10e7c:	7028      	strb	r0, [r5, #0]
   10e7e:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   10e82:	2800      	cmp	r0, #0
   10e84:	d080      	beq.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e86:	f884 6212 	strb.w	r6, [r4, #530]	; 0x212
   10e8a:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
   10e8e:	6068      	str	r0, [r5, #4]
   10e90:	f8b4 0218 	ldrh.w	r0, [r4, #536]	; 0x218
   10e94:	8128      	strh	r0, [r5, #8]
   10e96:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   10e9a:	2800      	cmp	r0, #0
   10e9c:	d1f3      	bne.n	10e86 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1dc>
   10e9e:	e773      	b.n	10d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>

00010ea0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   10ea0:	2100      	movs	r1, #0
   10ea2:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
   10ea6:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   10eaa:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
   10eae:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
   10eb2:	b111      	cbz	r1, 10eba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   10eb4:	2102      	movs	r1, #2
   10eb6:	f7f7 bed5 	b.w	8c64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   10eba:	2103      	movs	r1, #3
   10ebc:	f7f7 bed2 	b.w	8c64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>

00010ec0 <sym_ZPJU5R5GDEFYRMC4TDZZOTGF3X7ZJAYC5F5EFYY>:
   10ec0:	b570      	push	{r4, r5, r6, lr}
   10ec2:	460c      	mov	r4, r1
   10ec4:	4615      	mov	r5, r2
   10ec6:	4606      	mov	r6, r0
   10ec8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   10ecc:	2100      	movs	r1, #0
   10ece:	4620      	mov	r0, r4
   10ed0:	f7fd fda8 	bl	ea24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   10ed4:	8026      	strh	r6, [r4, #0]
   10ed6:	b14d      	cbz	r5, 10eec <sym_ZPJU5R5GDEFYRMC4TDZZOTGF3X7ZJAYC5F5EFYY+0x2c>
   10ed8:	6828      	ldr	r0, [r5, #0]
   10eda:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   10ede:	6868      	ldr	r0, [r5, #4]
   10ee0:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
   10ee4:	68a8      	ldr	r0, [r5, #8]
   10ee6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   10eea:	bd70      	pop	{r4, r5, r6, pc}
   10eec:	f640 116b 	movw	r1, #2411	; 0x96b
   10ef0:	2036      	movs	r0, #54	; 0x36
   10ef2:	f7f2 fe45 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010ef6 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   10ef6:	f7f3 b987 	b.w	4208 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   10efa:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10efe:	f001 0107 	and.w	r1, r1, #7
   10f02:	7800      	ldrb	r0, [r0, #0]
   10f04:	2201      	movs	r2, #1
   10f06:	408a      	lsls	r2, r1
   10f08:	4010      	ands	r0, r2
   10f0a:	40c8      	lsrs	r0, r1
   10f0c:	4770      	bx	lr
   10f0e:	b118      	cbz	r0, 10f18 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   10f10:	2802      	cmp	r0, #2
   10f12:	d001      	beq.n	10f18 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   10f14:	2001      	movs	r0, #1
   10f16:	4770      	bx	lr
   10f18:	2000      	movs	r0, #0
   10f1a:	4770      	bx	lr

00010f1c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   10f1c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10f20:	7881      	ldrb	r1, [r0, #2]
   10f22:	4605      	mov	r5, r0
   10f24:	291a      	cmp	r1, #26
   10f26:	d025      	beq.n	10f74 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
   10f28:	dc0e      	bgt.n	10f48 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
   10f2a:	2916      	cmp	r1, #22
   10f2c:	d22e      	bcs.n	10f8c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   10f2e:	e8df f001 	tbb	[pc, r1]
   10f32:	2d2d      	.short	0x2d2d
   10f34:	212d2d2d 	.word	0x212d2d2d
   10f38:	2d2d2d2d 	.word	0x2d2d2d2d
   10f3c:	2d2d2d2d 	.word	0x2d2d2d2d
   10f40:	2d2d2d2d 	.word	0x2d2d2d2d
   10f44:	2121212d 	.word	0x2121212d
   10f48:	292a      	cmp	r1, #42	; 0x2a
   10f4a:	d01f      	beq.n	10f8c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   10f4c:	dc0b      	bgt.n	10f66 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
   10f4e:	f1a1 011e 	sub.w	r1, r1, #30
   10f52:	290c      	cmp	r1, #12
   10f54:	d21a      	bcs.n	10f8c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   10f56:	e8df f001 	tbb	[pc, r1]
   10f5a:	1919      	.short	0x1919
   10f5c:	19191919 	.word	0x19191919
   10f60:	19191919 	.word	0x19191919
   10f64:	0d19      	.short	0x0d19
   10f66:	393a      	subs	r1, #58	; 0x3a
   10f68:	2904      	cmp	r1, #4
   10f6a:	d20f      	bcs.n	10f8c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   10f6c:	e8df f001 	tbb	[pc, r1]
   10f70:	020e020e 	.word	0x020e020e
   10f74:	8828      	ldrh	r0, [r5, #0]
   10f76:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   10f7a:	d207      	bcs.n	10f8c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   10f7c:	2701      	movs	r7, #1
   10f7e:	4669      	mov	r1, sp
   10f80:	f7fe ff24 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10f84:	b120      	cbz	r0, 10f90 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
   10f86:	2002      	movs	r0, #2
   10f88:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10f8c:	2012      	movs	r0, #18
   10f8e:	e7fb      	b.n	10f88 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   10f90:	f89d 0000 	ldrb.w	r0, [sp]
   10f94:	f000 fc22 	bl	117dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   10f98:	9c01      	ldr	r4, [sp, #4]
   10f9a:	b110      	cbz	r0, 10fa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x86>
   10f9c:	f504 7494 	add.w	r4, r4, #296	; 0x128
   10fa0:	e001      	b.n	10fa6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   10fa2:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   10fa6:	f89d 0000 	ldrb.w	r0, [sp]
   10faa:	f000 fc17 	bl	117dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   10fae:	9e01      	ldr	r6, [sp, #4]
   10fb0:	b110      	cbz	r0, 10fb8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x9c>
   10fb2:	f206 1629 	addw	r6, r6, #297	; 0x129
   10fb6:	e001      	b.n	10fbc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xa0>
   10fb8:	f206 1689 	addw	r6, r6, #393	; 0x189
   10fbc:	4668      	mov	r0, sp
   10fbe:	f000 fd6d 	bl	11a9c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   10fc2:	b108      	cbz	r0, 10fc8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xac>
   10fc4:	7820      	ldrb	r0, [r4, #0]
   10fc6:	b108      	cbz	r0, 10fcc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xb0>
   10fc8:	200c      	movs	r0, #12
   10fca:	e7dd      	b.n	10f88 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   10fcc:	7027      	strb	r7, [r4, #0]
   10fce:	78a8      	ldrb	r0, [r5, #2]
   10fd0:	7030      	strb	r0, [r6, #0]
   10fd2:	4668      	mov	r0, sp
   10fd4:	f7ff fbb1 	bl	1073a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10fd8:	2000      	movs	r0, #0
   10fda:	e7d5      	b.n	10f88 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

00010fdc <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   10fdc:	b510      	push	{r4, lr}
   10fde:	4604      	mov	r4, r0
   10fe0:	7800      	ldrb	r0, [r0, #0]
   10fe2:	b118      	cbz	r0, 10fec <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   10fe4:	2801      	cmp	r0, #1
   10fe6:	d001      	beq.n	10fec <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   10fe8:	2012      	movs	r0, #18
   10fea:	bd10      	pop	{r4, pc}
   10fec:	f000 fd26 	bl	11a3c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   10ff0:	b120      	cbz	r0, 10ffc <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   10ff2:	f7f4 fca3 	bl	593c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10ff6:	b108      	cbz	r0, 10ffc <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   10ff8:	200c      	movs	r0, #12
   10ffa:	bd10      	pop	{r4, pc}
   10ffc:	7820      	ldrb	r0, [r4, #0]
   10ffe:	f7ff ff86 	bl	10f0e <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11002:	1de2      	adds	r2, r4, #7
   11004:	f104 0317 	add.w	r3, r4, #23
   11008:	1c61      	adds	r1, r4, #1
   1100a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1100e:	f7f4 bce5 	b.w	59dc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

00011012 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   11012:	b510      	push	{r4, lr}
   11014:	4604      	mov	r4, r0
   11016:	f000 fe48 	bl	11caa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   1101a:	b108      	cbz	r0, 11020 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   1101c:	200c      	movs	r0, #12
   1101e:	bd10      	pop	{r4, pc}
   11020:	7820      	ldrb	r0, [r4, #0]
   11022:	b128      	cbz	r0, 11030 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   11024:	2801      	cmp	r0, #1
   11026:	d003      	beq.n	11030 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   11028:	28ff      	cmp	r0, #255	; 0xff
   1102a:	d00b      	beq.n	11044 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
   1102c:	2012      	movs	r0, #18
   1102e:	bd10      	pop	{r4, pc}
   11030:	f7ff ff6d 	bl	10f0e <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11034:	1c61      	adds	r1, r4, #1
   11036:	f7f4 fe19 	bl	5c6c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   1103a:	b108      	cbz	r0, 11040 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
   1103c:	2000      	movs	r0, #0
   1103e:	bd10      	pop	{r4, pc}
   11040:	2007      	movs	r0, #7
   11042:	bd10      	pop	{r4, pc}
   11044:	2001      	movs	r0, #1
   11046:	f7f4 fe4d 	bl	5ce4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   1104a:	e7f7      	b.n	1103c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

0001104c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   1104c:	b510      	push	{r4, lr}
   1104e:	f000 fcf5 	bl	11a3c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   11052:	b120      	cbz	r0, 1105e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   11054:	f7f4 fc72 	bl	593c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   11058:	b108      	cbz	r0, 1105e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   1105a:	200c      	movs	r0, #12
   1105c:	bd10      	pop	{r4, pc}
   1105e:	f7f4 fd23 	bl	5aa8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   11062:	2000      	movs	r0, #0
   11064:	bd10      	pop	{r4, pc}

00011066 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   11066:	b510      	push	{r4, lr}
   11068:	f000 fe1f 	bl	11caa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   1106c:	b108      	cbz	r0, 11072 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   1106e:	200c      	movs	r0, #12
   11070:	bd10      	pop	{r4, pc}
   11072:	f7f4 fe3d 	bl	5cf0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   11076:	2000      	movs	r0, #0
   11078:	bd10      	pop	{r4, pc}

0001107a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   1107a:	b570      	push	{r4, r5, r6, lr}
   1107c:	4605      	mov	r5, r0
   1107e:	f000 fb6d 	bl	1175c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   11082:	2800      	cmp	r0, #0
   11084:	d10e      	bne.n	110a4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x2a>
   11086:	8828      	ldrh	r0, [r5, #0]
   11088:	2100      	movs	r1, #0
   1108a:	f7fe fd93 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1108e:	0004      	movs	r4, r0
   11090:	d007      	beq.n	110a2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   11092:	f000 fd0a 	bl	11aaa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
   11096:	b120      	cbz	r0, 110a2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   11098:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   1109c:	7800      	ldrb	r0, [r0, #0]
   1109e:	b930      	cbnz	r0, 110ae <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   110a0:	e001      	b.n	110a6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x2c>
   110a2:	2002      	movs	r0, #2
   110a4:	bd70      	pop	{r4, r5, r6, pc}
   110a6:	f8d4 018c 	ldr.w	r0, [r4, #396]	; 0x18c
   110aa:	7800      	ldrb	r0, [r0, #0]
   110ac:	b108      	cbz	r0, 110b2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   110ae:	203a      	movs	r0, #58	; 0x3a
   110b0:	bd70      	pop	{r4, r5, r6, pc}
   110b2:	88a8      	ldrh	r0, [r5, #4]
   110b4:	f7fe fea2 	bl	fdfc <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   110b8:	4606      	mov	r6, r0
   110ba:	4601      	mov	r1, r0
   110bc:	2005      	movs	r0, #5
   110be:	f7ff f8eb 	bl	10298 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   110c2:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   110c6:	80c8      	strh	r0, [r1, #6]
   110c8:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   110cc:	2000      	movs	r0, #0
   110ce:	6088      	str	r0, [r1, #8]
   110d0:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   110d4:	60c6      	str	r6, [r0, #12]
   110d6:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   110da:	88e8      	ldrh	r0, [r5, #6]
   110dc:	8208      	strh	r0, [r1, #16]
   110de:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   110e2:	8928      	ldrh	r0, [r5, #8]
   110e4:	f504 7496 	add.w	r4, r4, #300	; 0x12c
   110e8:	8248      	strh	r0, [r1, #18]
   110ea:	4631      	mov	r1, r6
   110ec:	2008      	movs	r0, #8
   110ee:	f7ff f8d3 	bl	10298 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   110f2:	6821      	ldr	r1, [r4, #0]
   110f4:	4602      	mov	r2, r0
   110f6:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   110fa:	88c8      	ldrh	r0, [r1, #6]
   110fc:	4282      	cmp	r2, r0
   110fe:	d301      	bcc.n	11104 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x8a>
   11100:	42b0      	cmp	r0, r6
   11102:	d301      	bcc.n	11108 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x8e>
   11104:	2012      	movs	r0, #18
   11106:	bd70      	pop	{r4, r5, r6, pc}
   11108:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1110c:	4286      	cmp	r6, r0
   1110e:	d209      	bcs.n	11124 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xaa>
   11110:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
   11114:	2802      	cmp	r0, #2
   11116:	d103      	bne.n	11120 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xa6>
   11118:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1111c:	2802      	cmp	r0, #2
   1111e:	d001      	beq.n	11124 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xaa>
   11120:	200c      	movs	r0, #12
   11122:	bd70      	pop	{r4, r5, r6, pc}
   11124:	8828      	ldrh	r0, [r5, #0]
   11126:	8048      	strh	r0, [r1, #2]
   11128:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   1112c:	2002      	movs	r0, #2
   1112e:	7008      	strb	r0, [r1, #0]
   11130:	2000      	movs	r0, #0
   11132:	bd70      	pop	{r4, r5, r6, pc}

00011134 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   11134:	b510      	push	{r4, lr}
   11136:	460b      	mov	r3, r1
   11138:	2201      	movs	r2, #1
   1113a:	f100 0110 	add.w	r1, r0, #16
   1113e:	f7f4 ff8d 	bl	605c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   11142:	2000      	movs	r0, #0
   11144:	bd10      	pop	{r4, pc}

00011146 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   11146:	b510      	push	{r4, lr}
   11148:	8800      	ldrh	r0, [r0, #0]
   1114a:	2101      	movs	r1, #1
   1114c:	f7fe fd32 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   11150:	b118      	cbz	r0, 1115a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   11152:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
   11156:	b111      	cbz	r1, 1115e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   11158:	e007      	b.n	1116a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   1115a:	2002      	movs	r0, #2
   1115c:	bd10      	pop	{r4, pc}
   1115e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   11162:	2914      	cmp	r1, #20
   11164:	d003      	beq.n	1116e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   11166:	2915      	cmp	r1, #21
   11168:	d001      	beq.n	1116e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   1116a:	200c      	movs	r0, #12
   1116c:	bd10      	pop	{r4, pc}
   1116e:	2102      	movs	r1, #2
   11170:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
   11174:	2000      	movs	r0, #0
   11176:	bd10      	pop	{r4, pc}

00011178 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   11178:	b570      	push	{r4, r5, r6, lr}
   1117a:	4605      	mov	r5, r0
   1117c:	8800      	ldrh	r0, [r0, #0]
   1117e:	2101      	movs	r1, #1
   11180:	f7fe fd18 	bl	fbb4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   11184:	0004      	movs	r4, r0
   11186:	d003      	beq.n	11190 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   11188:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
   1118c:	b110      	cbz	r0, 11194 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   1118e:	e00a      	b.n	111a6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   11190:	2002      	movs	r0, #2
   11192:	bd70      	pop	{r4, r5, r6, pc}
   11194:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
   11198:	2814      	cmp	r0, #20
   1119a:	d001      	beq.n	111a0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   1119c:	2815      	cmp	r0, #21
   1119e:	d102      	bne.n	111a6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   111a0:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   111a4:	b108      	cbz	r0, 111aa <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x32>
   111a6:	200c      	movs	r0, #12
   111a8:	bd70      	pop	{r4, r5, r6, pc}
   111aa:	2210      	movs	r2, #16
   111ac:	1ca9      	adds	r1, r5, #2
   111ae:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
   111b2:	f7f2 fb5b 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   111b6:	2001      	movs	r0, #1
   111b8:	f884 018b 	strb.w	r0, [r4, #395]	; 0x18b
   111bc:	2000      	movs	r0, #0
   111be:	bd70      	pop	{r4, r5, r6, pc}

000111c0 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   111c0:	b510      	push	{r4, lr}
   111c2:	2108      	movs	r1, #8
   111c4:	f7f3 faf2 	bl	47ac <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   111c8:	2000      	movs	r0, #0
   111ca:	bd10      	pop	{r4, pc}

000111cc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   111cc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   111ce:	460c      	mov	r4, r1
   111d0:	4605      	mov	r5, r0
   111d2:	8800      	ldrh	r0, [r0, #0]
   111d4:	4669      	mov	r1, sp
   111d6:	f7fe fdf9 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   111da:	2200      	movs	r2, #0
   111dc:	b128      	cbz	r0, 111ea <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
   111de:	f8c4 2002 	str.w	r2, [r4, #2]
   111e2:	71a2      	strb	r2, [r4, #6]
   111e4:	8022      	strh	r2, [r4, #0]
   111e6:	2002      	movs	r0, #2
   111e8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   111ea:	9901      	ldr	r1, [sp, #4]
   111ec:	4608      	mov	r0, r1
   111ee:	3178      	adds	r1, #120	; 0x78
   111f0:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
   111f4:	68c3      	ldr	r3, [r0, #12]
   111f6:	f8c4 3002 	str.w	r3, [r4, #2]
   111fa:	7c03      	ldrb	r3, [r0, #16]
   111fc:	71a3      	strb	r3, [r4, #6]
   111fe:	882b      	ldrh	r3, [r5, #0]
   11200:	8023      	strh	r3, [r4, #0]
   11202:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   11206:	2b00      	cmp	r3, #0
   11208:	d1f2      	bne.n	111f0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
   1120a:	2000      	movs	r0, #0
   1120c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001120e <sym_7YL5EH5YISPHYP3GLCPHHLYJDC4YFSU26ARBXOI>:
   1120e:	b510      	push	{r4, lr}
   11210:	4604      	mov	r4, r0
   11212:	2000      	movs	r0, #0
   11214:	6020      	str	r0, [r4, #0]
   11216:	6060      	str	r0, [r4, #4]
   11218:	f7fb fe04 	bl	ce24 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>
   1121c:	7020      	strb	r0, [r4, #0]
   1121e:	2001      	movs	r0, #1
   11220:	f7fb fe00 	bl	ce24 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>
   11224:	7060      	strb	r0, [r4, #1]
   11226:	2000      	movs	r0, #0
   11228:	bd10      	pop	{r4, pc}

0001122a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   1122a:	b510      	push	{r4, lr}
   1122c:	4604      	mov	r4, r0
   1122e:	f000 fc2f 	bl	11a90 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11232:	b140      	cbz	r0, 11246 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   11234:	20fb      	movs	r0, #251	; 0xfb
   11236:	8020      	strh	r0, [r4, #0]
   11238:	f640 0148 	movw	r1, #2120	; 0x848
   1123c:	8061      	strh	r1, [r4, #2]
   1123e:	80a0      	strh	r0, [r4, #4]
   11240:	80e1      	strh	r1, [r4, #6]
   11242:	2000      	movs	r0, #0
   11244:	bd10      	pop	{r4, pc}
   11246:	2001      	movs	r0, #1
   11248:	bd10      	pop	{r4, pc}

0001124a <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   1124a:	2108      	movs	r1, #8
   1124c:	7001      	strb	r1, [r0, #0]
   1124e:	2000      	movs	r0, #0
   11250:	4770      	bx	lr

00011252 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   11252:	21d8      	movs	r1, #216	; 0xd8
   11254:	7001      	strb	r1, [r0, #0]
   11256:	2104      	movs	r1, #4
   11258:	7041      	strb	r1, [r0, #1]
   1125a:	2000      	movs	r0, #0
   1125c:	4770      	bx	lr

0001125e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   1125e:	2108      	movs	r1, #8
   11260:	7001      	strb	r1, [r0, #0]
   11262:	2000      	movs	r0, #0
   11264:	4770      	bx	lr

00011266 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   11266:	b510      	push	{r4, lr}
   11268:	4604      	mov	r4, r0
   1126a:	7800      	ldrb	r0, [r0, #0]
   1126c:	b108      	cbz	r0, 11272 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   1126e:	2801      	cmp	r0, #1
   11270:	d110      	bne.n	11294 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   11272:	f000 fbe3 	bl	11a3c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   11276:	b120      	cbz	r0, 11282 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   11278:	f7f4 fb60 	bl	593c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1127c:	b108      	cbz	r0, 11282 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   1127e:	200c      	movs	r0, #12
   11280:	bd10      	pop	{r4, pc}
   11282:	7820      	ldrb	r0, [r4, #0]
   11284:	f7ff fe43 	bl	10f0e <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11288:	1c61      	adds	r1, r4, #1
   1128a:	f7f4 fcab 	bl	5be4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   1128e:	b108      	cbz	r0, 11294 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   11290:	2000      	movs	r0, #0
   11292:	bd10      	pop	{r4, pc}
   11294:	2012      	movs	r0, #18
   11296:	bd10      	pop	{r4, pc}

00011298 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   11298:	b510      	push	{r4, lr}
   1129a:	4604      	mov	r4, r0
   1129c:	f000 fd05 	bl	11caa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   112a0:	b108      	cbz	r0, 112a6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   112a2:	200c      	movs	r0, #12
   112a4:	bd10      	pop	{r4, pc}
   112a6:	7820      	ldrb	r0, [r4, #0]
   112a8:	b120      	cbz	r0, 112b4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   112aa:	2801      	cmp	r0, #1
   112ac:	d002      	beq.n	112b4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   112ae:	28ff      	cmp	r0, #255	; 0xff
   112b0:	d108      	bne.n	112c4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   112b2:	e009      	b.n	112c8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
   112b4:	f7ff fe2b 	bl	10f0e <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   112b8:	1c61      	adds	r1, r4, #1
   112ba:	f7fe fd7c 	bl	fdb6 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   112be:	b108      	cbz	r0, 112c4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   112c0:	2000      	movs	r0, #0
   112c2:	bd10      	pop	{r4, pc}
   112c4:	2012      	movs	r0, #18
   112c6:	bd10      	pop	{r4, pc}
   112c8:	2000      	movs	r0, #0
   112ca:	f7f4 fd0b 	bl	5ce4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   112ce:	e7f7      	b.n	112c0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

000112d0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   112d0:	b510      	push	{r4, lr}
   112d2:	4604      	mov	r4, r0
   112d4:	f000 fbb2 	bl	11a3c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   112d8:	b108      	cbz	r0, 112de <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   112da:	200c      	movs	r0, #12
   112dc:	bd10      	pop	{r4, pc}
   112de:	7820      	ldrb	r0, [r4, #0]
   112e0:	f000 0001 	and.w	r0, r0, #1
   112e4:	f7f4 fb24 	bl	5930 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   112e8:	2000      	movs	r0, #0
   112ea:	bd10      	pop	{r4, pc}

000112ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   112ec:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   112ee:	460d      	mov	r5, r1
   112f0:	4604      	mov	r4, r0
   112f2:	f000 fbcd 	bl	11a90 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   112f6:	b130      	cbz	r0, 11306 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   112f8:	88a2      	ldrh	r2, [r4, #4]
   112fa:	f244 2090 	movw	r0, #17040	; 0x4290
   112fe:	4282      	cmp	r2, r0
   11300:	d903      	bls.n	1130a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   11302:	2012      	movs	r0, #18
   11304:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11306:	2001      	movs	r0, #1
   11308:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1130a:	f640 0048 	movw	r0, #2120	; 0x848
   1130e:	4282      	cmp	r2, r0
   11310:	d300      	bcc.n	11314 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   11312:	4602      	mov	r2, r0
   11314:	8820      	ldrh	r0, [r4, #0]
   11316:	f8ad 0000 	strh.w	r0, [sp]
   1131a:	8860      	ldrh	r0, [r4, #2]
   1131c:	f8ad 0002 	strh.w	r0, [sp, #2]
   11320:	f8ad 2004 	strh.w	r2, [sp, #4]
   11324:	8860      	ldrh	r0, [r4, #2]
   11326:	f8ad 0006 	strh.w	r0, [sp, #6]
   1132a:	f8ad 2008 	strh.w	r2, [sp, #8]
   1132e:	8820      	ldrh	r0, [r4, #0]
   11330:	8028      	strh	r0, [r5, #0]
   11332:	4668      	mov	r0, sp
   11334:	f000 fbdc 	bl	11af0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x394>
   11338:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001133a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   1133a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1133c:	4604      	mov	r4, r0
   1133e:	f7fb fd6b 	bl	ce18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   11342:	f3c0 2000 	ubfx	r0, r0, #8, #1
   11346:	b1b0      	cbz	r0, 11376 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
   11348:	f10d 0007 	add.w	r0, sp, #7
   1134c:	9000      	str	r0, [sp, #0]
   1134e:	7922      	ldrb	r2, [r4, #4]
   11350:	78e1      	ldrb	r1, [r4, #3]
   11352:	78a0      	ldrb	r0, [r4, #2]
   11354:	f10d 0306 	add.w	r3, sp, #6
   11358:	f000 fc61 	bl	11c1e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4c2>
   1135c:	2800      	cmp	r0, #0
   1135e:	d109      	bne.n	11374 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
   11360:	8820      	ldrh	r0, [r4, #0]
   11362:	f8ad 0004 	strh.w	r0, [sp, #4]
   11366:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   1136a:	f8ad 0008 	strh.w	r0, [sp, #8]
   1136e:	a801      	add	r0, sp, #4
   11370:	f000 f8c7 	bl	11502 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   11374:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11376:	2001      	movs	r0, #1
   11378:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001137a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   1137a:	b510      	push	{r4, lr}
   1137c:	4604      	mov	r4, r0
   1137e:	f000 fb5d 	bl	11a3c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   11382:	b120      	cbz	r0, 1138e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   11384:	f7f4 fada 	bl	593c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   11388:	b108      	cbz	r0, 1138e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   1138a:	200c      	movs	r0, #12
   1138c:	bd10      	pop	{r4, pc}
   1138e:	7820      	ldrb	r0, [r4, #0]
   11390:	f7ff fdbd 	bl	10f0e <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11394:	79e2      	ldrb	r2, [r4, #7]
   11396:	1c61      	adds	r1, r4, #1
   11398:	f7f4 fa60 	bl	585c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   1139c:	b108      	cbz	r0, 113a2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   1139e:	2000      	movs	r0, #0
   113a0:	bd10      	pop	{r4, pc}
   113a2:	2002      	movs	r0, #2
   113a4:	bd10      	pop	{r4, pc}

000113a6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   113a6:	b510      	push	{r4, lr}
   113a8:	4604      	mov	r4, r0
   113aa:	2001      	movs	r0, #1
   113ac:	f7fb fa58 	bl	c860 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   113b0:	b128      	cbz	r0, 113be <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   113b2:	4621      	mov	r1, r4
   113b4:	2001      	movs	r0, #1
   113b6:	f7f3 fb5b 	bl	4a70 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   113ba:	2000      	movs	r0, #0
   113bc:	bd10      	pop	{r4, pc}
   113be:	200c      	movs	r0, #12
   113c0:	bd10      	pop	{r4, pc}

000113c2 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   113c2:	b510      	push	{r4, lr}
   113c4:	8800      	ldrh	r0, [r0, #0]
   113c6:	f7f4 fc33 	bl	5c30 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   113ca:	b108      	cbz	r0, 113d0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   113cc:	2000      	movs	r0, #0
   113ce:	bd10      	pop	{r4, pc}
   113d0:	2030      	movs	r0, #48	; 0x30
   113d2:	bd10      	pop	{r4, pc}

000113d4 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   113d4:	b51c      	push	{r2, r3, r4, lr}
   113d6:	4604      	mov	r4, r0
   113d8:	f000 fb5a 	bl	11a90 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   113dc:	b178      	cbz	r0, 113fe <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   113de:	8820      	ldrh	r0, [r4, #0]
   113e0:	f8ad 0000 	strh.w	r0, [sp]
   113e4:	8860      	ldrh	r0, [r4, #2]
   113e6:	f8ad 0002 	strh.w	r0, [sp, #2]
   113ea:	8820      	ldrh	r0, [r4, #0]
   113ec:	f8ad 0004 	strh.w	r0, [sp, #4]
   113f0:	8860      	ldrh	r0, [r4, #2]
   113f2:	f8ad 0006 	strh.w	r0, [sp, #6]
   113f6:	4668      	mov	r0, sp
   113f8:	f7fb fc3a 	bl	cc70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
   113fc:	bd1c      	pop	{r2, r3, r4, pc}
   113fe:	2001      	movs	r0, #1
   11400:	bd1c      	pop	{r2, r3, r4, pc}

00011402 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   11402:	b510      	push	{r4, lr}
   11404:	f7f3 fb62 	bl	4acc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   11408:	2000      	movs	r0, #0
   1140a:	bd10      	pop	{r4, pc}

0001140c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   1140c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1140e:	460c      	mov	r4, r1
   11410:	4605      	mov	r5, r0
   11412:	f000 fb3d 	bl	11a90 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11416:	b178      	cbz	r0, 11438 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2c>
   11418:	4669      	mov	r1, sp
   1141a:	4628      	mov	r0, r5
   1141c:	f7fe fcd6 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11420:	2800      	cmp	r0, #0
   11422:	d108      	bne.n	11436 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2a>
   11424:	f89d 0000 	ldrb.w	r0, [sp]
   11428:	b140      	cbz	r0, 1143c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x30>
   1142a:	2100      	movs	r1, #0
   1142c:	4622      	mov	r2, r4
   1142e:	9801      	ldr	r0, [sp, #4]
   11430:	f000 faca 	bl	119c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
   11434:	2000      	movs	r0, #0
   11436:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11438:	2001      	movs	r0, #1
   1143a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1143c:	2101      	movs	r1, #1
   1143e:	e7f5      	b.n	1142c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>

00011440 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   11440:	b538      	push	{r3, r4, r5, lr}
   11442:	460d      	mov	r5, r1
   11444:	4604      	mov	r4, r0
   11446:	f000 fa32 	bl	118ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   1144a:	2800      	cmp	r0, #0
   1144c:	d108      	bne.n	11460 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   1144e:	4620      	mov	r0, r4
   11450:	f000 f9fc 	bl	1184c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf0>
   11454:	2800      	cmp	r0, #0
   11456:	d103      	bne.n	11460 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   11458:	f7f7 fb04 	bl	8a64 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   1145c:	b108      	cbz	r0, 11462 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x22>
   1145e:	200c      	movs	r0, #12
   11460:	bd38      	pop	{r3, r4, r5, pc}
   11462:	f7f6 f81d 	bl	74a0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   11466:	7028      	strb	r0, [r5, #0]
   11468:	74e0      	strb	r0, [r4, #19]
   1146a:	7e60      	ldrb	r0, [r4, #25]
   1146c:	b150      	cbz	r0, 11484 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x44>
   1146e:	20ff      	movs	r0, #255	; 0xff
   11470:	f88d 0000 	strb.w	r0, [sp]
   11474:	4669      	mov	r1, sp
   11476:	2000      	movs	r0, #0
   11478:	f7f6 f86c 	bl	7554 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
   1147c:	4669      	mov	r1, sp
   1147e:	2000      	movs	r0, #0
   11480:	f7f6 f876 	bl	7570 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
   11484:	4620      	mov	r0, r4
   11486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1148a:	f7f5 bebd 	b.w	7208 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>

0001148e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1148e:	b510      	push	{r4, lr}
   11490:	4604      	mov	r4, r0
   11492:	2000      	movs	r0, #0
   11494:	f7fb f9e4 	bl	c860 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   11498:	b128      	cbz	r0, 114a6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   1149a:	4621      	mov	r1, r4
   1149c:	2000      	movs	r0, #0
   1149e:	f7f3 fae7 	bl	4a70 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   114a2:	2000      	movs	r0, #0
   114a4:	bd10      	pop	{r4, pc}
   114a6:	200c      	movs	r0, #12
   114a8:	bd10      	pop	{r4, pc}

000114aa <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
   114aa:	b510      	push	{r4, lr}
   114ac:	4604      	mov	r4, r0
   114ae:	f7fa fc1b 	bl	bce8 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>
   114b2:	b150      	cbz	r0, 114ca <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   114b4:	f7f7 fb72 	bl	8b9c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
   114b8:	b138      	cbz	r0, 114ca <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   114ba:	7820      	ldrb	r0, [r4, #0]
   114bc:	f7f7 fb8c 	bl	8bd8 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
   114c0:	7820      	ldrb	r0, [r4, #0]
   114c2:	f7fa fbe5 	bl	bc90 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>
   114c6:	2000      	movs	r0, #0
   114c8:	bd10      	pop	{r4, pc}
   114ca:	200c      	movs	r0, #12
   114cc:	bd10      	pop	{r4, pc}

000114ce <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   114ce:	b510      	push	{r4, lr}
   114d0:	4604      	mov	r4, r0
   114d2:	7800      	ldrb	r0, [r0, #0]
   114d4:	f000 0001 	and.w	r0, r0, #1
   114d8:	f7fa fc1c 	bl	bd14 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
   114dc:	7820      	ldrb	r0, [r4, #0]
   114de:	f000 0001 	and.w	r0, r0, #1
   114e2:	f7f7 fb7f 	bl	8be4 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
   114e6:	2000      	movs	r0, #0
   114e8:	bd10      	pop	{r4, pc}

000114ea <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   114ea:	b510      	push	{r4, lr}
   114ec:	4604      	mov	r4, r0
   114ee:	f000 facf 	bl	11a90 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   114f2:	b120      	cbz	r0, 114fe <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   114f4:	4620      	mov	r0, r4
   114f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   114fa:	f000 baf9 	b.w	11af0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x394>
   114fe:	2001      	movs	r0, #1
   11500:	bd10      	pop	{r4, pc}

00011502 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   11502:	b510      	push	{r4, lr}
   11504:	4604      	mov	r4, r0
   11506:	8880      	ldrh	r0, [r0, #4]
   11508:	b128      	cbz	r0, 11516 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1150a:	2801      	cmp	r0, #1
   1150c:	d003      	beq.n	11516 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1150e:	2802      	cmp	r0, #2
   11510:	d001      	beq.n	11516 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11512:	2012      	movs	r0, #18
   11514:	bd10      	pop	{r4, pc}
   11516:	78e0      	ldrb	r0, [r4, #3]
   11518:	f000 fa33 	bl	11982 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
   1151c:	b148      	cbz	r0, 11532 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1151e:	78a0      	ldrb	r0, [r4, #2]
   11520:	f000 fa2f 	bl	11982 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
   11524:	b128      	cbz	r0, 11532 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   11526:	4620      	mov	r0, r4
   11528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1152c:	2101      	movs	r1, #1
   1152e:	f000 b893 	b.w	11658 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   11532:	2011      	movs	r0, #17
   11534:	bd10      	pop	{r4, pc}

00011536 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   11536:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11538:	460c      	mov	r4, r1
   1153a:	4605      	mov	r5, r0
   1153c:	8800      	ldrh	r0, [r0, #0]
   1153e:	4669      	mov	r1, sp
   11540:	f7fe fc44 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11544:	2800      	cmp	r0, #0
   11546:	d106      	bne.n	11556 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   11548:	9801      	ldr	r0, [sp, #4]
   1154a:	8829      	ldrh	r1, [r5, #0]
   1154c:	8021      	strh	r1, [r4, #0]
   1154e:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
   11552:	8060      	strh	r0, [r4, #2]
   11554:	2000      	movs	r0, #0
   11556:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011558 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   11558:	b510      	push	{r4, lr}
   1155a:	4604      	mov	r4, r0
   1155c:	4601      	mov	r1, r0
   1155e:	2000      	movs	r0, #0
   11560:	f7f3 fa64 	bl	4a2c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   11564:	b910      	cbnz	r0, 1156c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   11566:	2000      	movs	r0, #0
   11568:	6020      	str	r0, [r4, #0]
   1156a:	80a0      	strh	r0, [r4, #4]
   1156c:	2000      	movs	r0, #0
   1156e:	bd10      	pop	{r4, pc}

00011570 <sym_2PTHETYGBZAPJ2ZKYDOVYDIWST3AXGZGS3MY6DI>:
   11570:	2100      	movs	r1, #0
   11572:	6001      	str	r1, [r0, #0]
   11574:	6041      	str	r1, [r0, #4]
   11576:	2160      	movs	r1, #96	; 0x60
   11578:	7101      	strb	r1, [r0, #4]
   1157a:	2000      	movs	r0, #0
   1157c:	4770      	bx	lr

0001157e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   1157e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11580:	8800      	ldrh	r0, [r0, #0]
   11582:	4669      	mov	r1, sp
   11584:	f7fe fc22 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11588:	b978      	cbnz	r0, 115aa <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   1158a:	4668      	mov	r0, sp
   1158c:	f000 fa86 	bl	11a9c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   11590:	b158      	cbz	r0, 115aa <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   11592:	9c01      	ldr	r4, [sp, #4]
   11594:	f89d 0000 	ldrb.w	r0, [sp]
   11598:	3478      	adds	r4, #120	; 0x78
   1159a:	f000 f91f 	bl	117dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   1159e:	2800      	cmp	r0, #0
   115a0:	9801      	ldr	r0, [sp, #4]
   115a2:	d004      	beq.n	115ae <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x30>
   115a4:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   115a8:	e003      	b.n	115b2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   115aa:	2002      	movs	r0, #2
   115ac:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   115ae:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
   115b2:	7801      	ldrb	r1, [r0, #0]
   115b4:	b911      	cbnz	r1, 115bc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   115b6:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   115ba:	b109      	cbz	r1, 115c0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   115bc:	203a      	movs	r0, #58	; 0x3a
   115be:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   115c0:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   115c4:	f04f 0501 	mov.w	r5, #1
   115c8:	0789      	lsls	r1, r1, #30
   115ca:	d103      	bne.n	115d4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x56>
   115cc:	7005      	strb	r5, [r0, #0]
   115ce:	4668      	mov	r0, sp
   115d0:	f7ff f8b3 	bl	1073a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   115d4:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   115d8:	2000      	movs	r0, #0
   115da:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000115dc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   115dc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   115de:	460c      	mov	r4, r1
   115e0:	4605      	mov	r5, r0
   115e2:	8800      	ldrh	r0, [r0, #0]
   115e4:	4669      	mov	r1, sp
   115e6:	f7fe fbf1 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   115ea:	b108      	cbz	r0, 115f0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   115ec:	2002      	movs	r0, #2
   115ee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   115f0:	78a8      	ldrb	r0, [r5, #2]
   115f2:	b128      	cbz	r0, 11600 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x24>
   115f4:	2004      	movs	r0, #4
   115f6:	70a0      	strb	r0, [r4, #2]
   115f8:	8828      	ldrh	r0, [r5, #0]
   115fa:	8020      	strh	r0, [r4, #0]
   115fc:	2000      	movs	r0, #0
   115fe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11600:	9801      	ldr	r0, [sp, #4]
   11602:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   11606:	e7f6      	b.n	115f6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1a>

00011608 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   11608:	b510      	push	{r4, lr}
   1160a:	f7fb fb61 	bl	ccd0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1160e:	2000      	movs	r0, #0
   11610:	bd10      	pop	{r4, pc}

00011612 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   11612:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   11616:	460d      	mov	r5, r1
   11618:	4604      	mov	r4, r0
   1161a:	8842      	ldrh	r2, [r0, #2]
   1161c:	f64b 3180 	movw	r1, #48000	; 0xbb80
   11620:	2012      	movs	r0, #18
   11622:	428a      	cmp	r2, r1
   11624:	d816      	bhi.n	11654 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11626:	2a00      	cmp	r2, #0
   11628:	d014      	beq.n	11654 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   1162a:	8820      	ldrh	r0, [r4, #0]
   1162c:	4669      	mov	r1, sp
   1162e:	f7fe fbcd 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11632:	2800      	cmp	r0, #0
   11634:	d10e      	bne.n	11654 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11636:	8820      	ldrh	r0, [r4, #0]
   11638:	8028      	strh	r0, [r5, #0]
   1163a:	9e01      	ldr	r6, [sp, #4]
   1163c:	1d35      	adds	r5, r6, #4
   1163e:	3678      	adds	r6, #120	; 0x78
   11640:	682f      	ldr	r7, [r5, #0]
   11642:	8862      	ldrh	r2, [r4, #2]
   11644:	4639      	mov	r1, r7
   11646:	4630      	mov	r0, r6
   11648:	f7fe fd95 	bl	10176 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   1164c:	6828      	ldr	r0, [r5, #0]
   1164e:	42b8      	cmp	r0, r7
   11650:	d1f6      	bne.n	11640 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x2e>
   11652:	2000      	movs	r0, #0
   11654:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00011658 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   11658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1165c:	b089      	sub	sp, #36	; 0x24
   1165e:	4689      	mov	r9, r1
   11660:	4604      	mov	r4, r0
   11662:	8800      	ldrh	r0, [r0, #0]
   11664:	a904      	add	r1, sp, #16
   11666:	f7fe fbb1 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1166a:	2800      	cmp	r0, #0
   1166c:	d14a      	bne.n	11704 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   1166e:	9805      	ldr	r0, [sp, #20]
   11670:	f89d 1010 	ldrb.w	r1, [sp, #16]
   11674:	4605      	mov	r5, r0
   11676:	3078      	adds	r0, #120	; 0x78
   11678:	2900      	cmp	r1, #0
   1167a:	4629      	mov	r1, r5
   1167c:	d005      	beq.n	1168a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x32>
   1167e:	f891 620c 	ldrb.w	r6, [r1, #524]	; 0x20c
   11682:	7b41      	ldrb	r1, [r0, #13]
   11684:	2921      	cmp	r1, #33	; 0x21
   11686:	d003      	beq.n	11690 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   11688:	e003      	b.n	11692 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   1168a:	f891 616e 	ldrb.w	r6, [r1, #366]	; 0x16e
   1168e:	e7f8      	b.n	11682 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x2a>
   11690:	b13e      	cbz	r6, 116a2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4a>
   11692:	2700      	movs	r7, #0
   11694:	3046      	adds	r0, #70	; 0x46
   11696:	2108      	movs	r1, #8
   11698:	4680      	mov	r8, r0
   1169a:	f7ff fc2e 	bl	10efa <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   1169e:	b110      	cbz	r0, 116a6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   116a0:	e007      	b.n	116b2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   116a2:	2701      	movs	r7, #1
   116a4:	e7f6      	b.n	11694 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
   116a6:	210b      	movs	r1, #11
   116a8:	4640      	mov	r0, r8
   116aa:	f7ff fc26 	bl	10efa <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   116ae:	b900      	cbnz	r0, 116b2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   116b0:	b33f      	cbz	r7, 11702 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xaa>
   116b2:	a802      	add	r0, sp, #8
   116b4:	9000      	str	r0, [sp, #0]
   116b6:	f89d 0010 	ldrb.w	r0, [sp, #16]
   116ba:	ab01      	add	r3, sp, #4
   116bc:	4622      	mov	r2, r4
   116be:	4629      	mov	r1, r5
   116c0:	f000 f9c6 	bl	11a50 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f4>
   116c4:	0007      	movs	r7, r0
   116c6:	d11d      	bne.n	11704 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   116c8:	f89d 0010 	ldrb.w	r0, [sp, #16]
   116cc:	9c05      	ldr	r4, [sp, #20]
   116ce:	b1e0      	cbz	r0, 1170a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb2>
   116d0:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   116d4:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
   116d8:	b168      	cbz	r0, 116f6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   116da:	f89d 0004 	ldrb.w	r0, [sp, #4]
   116de:	f010 0102 	ands.w	r1, r0, #2
   116e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
   116e6:	f88d 1004 	strb.w	r1, [sp, #4]
   116ea:	f000 0002 	and.w	r0, r0, #2
   116ee:	f88d 0008 	strb.w	r0, [sp, #8]
   116f2:	d00d      	beq.n	11710 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   116f4:	b160      	cbz	r0, 11710 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   116f6:	2001      	movs	r0, #1
   116f8:	7060      	strb	r0, [r4, #1]
   116fa:	f04f 0800 	mov.w	r8, #0
   116fe:	b95e      	cbnz	r6, 11718 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc0>
   11700:	e008      	b.n	11714 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xbc>
   11702:	201a      	movs	r0, #26
   11704:	b009      	add	sp, #36	; 0x24
   11706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1170a:	f504 74a1 	add.w	r4, r4, #322	; 0x142
   1170e:	e7e1      	b.n	116d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7c>
   11710:	2009      	movs	r0, #9
   11712:	e7f7      	b.n	11704 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   11714:	7820      	ldrb	r0, [r4, #0]
   11716:	b108      	cbz	r0, 1171c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
   11718:	273a      	movs	r7, #58	; 0x3a
   1171a:	e011      	b.n	11740 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xe8>
   1171c:	f8cd 8018 	str.w	r8, [sp, #24]
   11720:	f884 9000 	strb.w	r9, [r4]
   11724:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11728:	70a1      	strb	r1, [r4, #2]
   1172a:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1172e:	70e0      	strb	r0, [r4, #3]
   11730:	f88d 1018 	strb.w	r1, [sp, #24]
   11734:	f88d 0019 	strb.w	r0, [sp, #25]
   11738:	a906      	add	r1, sp, #24
   1173a:	4628      	mov	r0, r5
   1173c:	f7fe fc41 	bl	ffc2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   11740:	f884 8001 	strb.w	r8, [r4, #1]
   11744:	4638      	mov	r0, r7
   11746:	e7dd      	b.n	11704 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>

00011748 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   11748:	b510      	push	{r4, lr}
   1174a:	2008      	movs	r0, #8
   1174c:	f7fb fb52 	bl	cdf4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   11750:	f7fa fb18 	bl	bd84 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>
   11754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11758:	f7f8 b9ca 	b.w	9af0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>

0001175c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   1175c:	b510      	push	{r4, lr}
   1175e:	4604      	mov	r4, r0
   11760:	2000      	movs	r0, #0
   11762:	8822      	ldrh	r2, [r4, #0]
   11764:	b086      	sub	sp, #24
   11766:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   1176a:	39ff      	subs	r1, #255	; 0xff
   1176c:	d008      	beq.n	11780 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   1176e:	a903      	add	r1, sp, #12
   11770:	4610      	mov	r0, r2
   11772:	f7fe fb2b 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11776:	b110      	cbz	r0, 1177e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   11778:	2002      	movs	r0, #2
   1177a:	b006      	add	sp, #24
   1177c:	bd10      	pop	{r4, pc}
   1177e:	9804      	ldr	r0, [sp, #16]
   11780:	8921      	ldrh	r1, [r4, #8]
   11782:	89a3      	ldrh	r3, [r4, #12]
   11784:	8962      	ldrh	r2, [r4, #10]
   11786:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   1178a:	88e3      	ldrh	r3, [r4, #6]
   1178c:	88a2      	ldrh	r2, [r4, #4]
   1178e:	8861      	ldrh	r1, [r4, #2]
   11790:	f7fb f8f8 	bl	c984 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18c>
   11794:	b108      	cbz	r0, 1179a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   11796:	2000      	movs	r0, #0
   11798:	e7ef      	b.n	1177a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   1179a:	2030      	movs	r0, #48	; 0x30
   1179c:	e7ed      	b.n	1177a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   1179e:	f44f 71a4 	mov.w	r1, #328	; 0x148
   117a2:	4288      	cmp	r0, r1
   117a4:	d303      	bcc.n	117ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   117a6:	f640 0148 	movw	r1, #2120	; 0x848
   117aa:	4288      	cmp	r0, r1
   117ac:	d300      	bcc.n	117b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   117ae:	4608      	mov	r0, r1
   117b0:	4770      	bx	lr
   117b2:	07c1      	lsls	r1, r0, #31
   117b4:	d001      	beq.n	117ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   117b6:	2001      	movs	r0, #1
   117b8:	4770      	bx	lr
   117ba:	0780      	lsls	r0, r0, #30
   117bc:	d501      	bpl.n	117c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   117be:	2002      	movs	r0, #2
   117c0:	4770      	bx	lr
   117c2:	2000      	movs	r0, #0
   117c4:	4770      	bx	lr
   117c6:	b510      	push	{r4, lr}
   117c8:	2801      	cmp	r0, #1
   117ca:	d006      	beq.n	117da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   117cc:	2802      	cmp	r0, #2
   117ce:	d004      	beq.n	117da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   117d0:	f240 218f 	movw	r1, #655	; 0x28f
   117d4:	2006      	movs	r0, #6
   117d6:	f7f2 f9d3 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   117da:	bd10      	pop	{r4, pc}
   117dc:	b108      	cbz	r0, 117e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x86>
   117de:	2000      	movs	r0, #0
   117e0:	4770      	bx	lr
   117e2:	2001      	movs	r0, #1
   117e4:	4770      	bx	lr
   117e6:	b570      	push	{r4, r5, r6, lr}
   117e8:	460d      	mov	r5, r1
   117ea:	8899      	ldrh	r1, [r3, #4]
   117ec:	461c      	mov	r4, r3
   117ee:	194b      	adds	r3, r1, r5
   117f0:	4293      	cmp	r3, r2
   117f2:	d901      	bls.n	117f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x9c>
   117f4:	2007      	movs	r0, #7
   117f6:	bd70      	pop	{r4, r5, r6, pc}
   117f8:	6822      	ldr	r2, [r4, #0]
   117fa:	1853      	adds	r3, r2, r1
   117fc:	4601      	mov	r1, r0
   117fe:	462a      	mov	r2, r5
   11800:	4618      	mov	r0, r3
   11802:	f7f2 f833 	bl	386c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11806:	88a0      	ldrh	r0, [r4, #4]
   11808:	4428      	add	r0, r5
   1180a:	80a0      	strh	r0, [r4, #4]
   1180c:	2000      	movs	r0, #0
   1180e:	bd70      	pop	{r4, r5, r6, pc}
   11810:	b570      	push	{r4, r5, r6, lr}
   11812:	460c      	mov	r4, r1
   11814:	4605      	mov	r5, r0
   11816:	b112      	cbz	r2, 1181e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   11818:	291f      	cmp	r1, #31
   1181a:	d807      	bhi.n	1182c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd0>
   1181c:	e010      	b.n	11840 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe4>
   1181e:	2cff      	cmp	r4, #255	; 0xff
   11820:	d804      	bhi.n	1182c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd0>
   11822:	f7f5 fe25 	bl	7470 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   11826:	b118      	cbz	r0, 11830 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd4>
   11828:	2c1f      	cmp	r4, #31
   1182a:	d901      	bls.n	11830 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd4>
   1182c:	2012      	movs	r0, #18
   1182e:	bd70      	pop	{r4, r5, r6, pc}
   11830:	4628      	mov	r0, r5
   11832:	f7f5 fe3b 	bl	74ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   11836:	b128      	cbz	r0, 11844 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe8>
   11838:	4620      	mov	r0, r4
   1183a:	f7f5 fc99 	bl	7170 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1183e:	b118      	cbz	r0, 11848 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xec>
   11840:	2000      	movs	r0, #0
   11842:	bd70      	pop	{r4, r5, r6, pc}
   11844:	2042      	movs	r0, #66	; 0x42
   11846:	bd70      	pop	{r4, r5, r6, pc}
   11848:	2045      	movs	r0, #69	; 0x45
   1184a:	bd70      	pop	{r4, r5, r6, pc}
   1184c:	b510      	push	{r4, lr}
   1184e:	4604      	mov	r4, r0
   11850:	7840      	ldrb	r0, [r0, #1]
   11852:	06c0      	lsls	r0, r0, #27
   11854:	d413      	bmi.n	1187e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
   11856:	f7fb faed 	bl	ce34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1185a:	0780      	lsls	r0, r0, #30
   1185c:	d405      	bmi.n	1186a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x10e>
   1185e:	7d20      	ldrb	r0, [r4, #20]
   11860:	2802      	cmp	r0, #2
   11862:	d020      	beq.n	118a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11864:	7da0      	ldrb	r0, [r4, #22]
   11866:	2802      	cmp	r0, #2
   11868:	d01d      	beq.n	118a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   1186a:	f7fb fae3 	bl	ce34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1186e:	0740      	lsls	r0, r0, #29
   11870:	d405      	bmi.n	1187e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
   11872:	7d20      	ldrb	r0, [r4, #20]
   11874:	2803      	cmp	r0, #3
   11876:	d016      	beq.n	118a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11878:	7da0      	ldrb	r0, [r4, #22]
   1187a:	2803      	cmp	r0, #3
   1187c:	d013      	beq.n	118a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   1187e:	7860      	ldrb	r0, [r4, #1]
   11880:	07c0      	lsls	r0, r0, #31
   11882:	d002      	beq.n	1188a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x12e>
   11884:	f7fb fa62 	bl	cd4c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   11888:	b168      	cbz	r0, 118a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   1188a:	7860      	ldrb	r0, [r4, #1]
   1188c:	06c1      	lsls	r1, r0, #27
   1188e:	d405      	bmi.n	1189c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
   11890:	0700      	lsls	r0, r0, #28
   11892:	d503      	bpl.n	1189c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
   11894:	7d20      	ldrb	r0, [r4, #20]
   11896:	2802      	cmp	r0, #2
   11898:	d105      	bne.n	118a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   1189a:	e006      	b.n	118aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   1189c:	7d20      	ldrb	r0, [r4, #20]
   1189e:	2802      	cmp	r0, #2
   118a0:	d003      	beq.n	118aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   118a2:	7ea0      	ldrb	r0, [r4, #26]
   118a4:	b108      	cbz	r0, 118aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   118a6:	2011      	movs	r0, #17
   118a8:	bd10      	pop	{r4, pc}
   118aa:	2000      	movs	r0, #0
   118ac:	bd10      	pop	{r4, pc}
   118ae:	b538      	push	{r3, r4, r5, lr}
   118b0:	4604      	mov	r4, r0
   118b2:	7800      	ldrb	r0, [r0, #0]
   118b4:	28ef      	cmp	r0, #239	; 0xef
   118b6:	d860      	bhi.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   118b8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   118bc:	f8ad 0000 	strh.w	r0, [sp]
   118c0:	9800      	ldr	r0, [sp, #0]
   118c2:	f000 f9c3 	bl	11c4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f0>
   118c6:	b3c0      	cbz	r0, 1193a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1de>
   118c8:	7860      	ldrb	r0, [r4, #1]
   118ca:	0701      	lsls	r1, r0, #28
   118cc:	d40f      	bmi.n	118ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x192>
   118ce:	f8d4 2002 	ldr.w	r2, [r4, #2]
   118d2:	f8d4 1005 	ldr.w	r1, [r4, #5]
   118d6:	0a13      	lsrs	r3, r2, #8
   118d8:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
   118dc:	d84d      	bhi.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   118de:	2320      	movs	r3, #32
   118e0:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
   118e4:	d849      	bhi.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   118e6:	025a      	lsls	r2, r3, #9
   118e8:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   118ec:	d345      	bcc.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   118ee:	7a61      	ldrb	r1, [r4, #9]
   118f0:	b319      	cbz	r1, 1193a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1de>
   118f2:	2907      	cmp	r1, #7
   118f4:	d841      	bhi.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   118f6:	7aa1      	ldrb	r1, [r4, #10]
   118f8:	b129      	cbz	r1, 11906 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   118fa:	2901      	cmp	r1, #1
   118fc:	d003      	beq.n	11906 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   118fe:	2902      	cmp	r1, #2
   11900:	d001      	beq.n	11906 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   11902:	2903      	cmp	r1, #3
   11904:	d139      	bne.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11906:	0742      	lsls	r2, r0, #29
   11908:	d403      	bmi.n	11912 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b6>
   1190a:	2902      	cmp	r1, #2
   1190c:	d001      	beq.n	11912 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b6>
   1190e:	2903      	cmp	r1, #3
   11910:	d105      	bne.n	1191e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c2>
   11912:	7ae1      	ldrb	r1, [r4, #11]
   11914:	b109      	cbz	r1, 1191a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1be>
   11916:	2901      	cmp	r1, #1
   11918:	d12f      	bne.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1191a:	0741      	lsls	r1, r0, #29
   1191c:	d407      	bmi.n	1192e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   1191e:	7ca1      	ldrb	r1, [r4, #18]
   11920:	b129      	cbz	r1, 1192e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11922:	2901      	cmp	r1, #1
   11924:	d003      	beq.n	1192e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11926:	2902      	cmp	r1, #2
   11928:	d001      	beq.n	1192e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   1192a:	2903      	cmp	r1, #3
   1192c:	d125      	bne.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1192e:	06c1      	lsls	r1, r0, #27
   11930:	d504      	bpl.n	1193c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e0>
   11932:	7d20      	ldrb	r0, [r4, #20]
   11934:	2801      	cmp	r0, #1
   11936:	d120      	bne.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11938:	e01b      	b.n	11972 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x216>
   1193a:	e01e      	b.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1193c:	7d21      	ldrb	r1, [r4, #20]
   1193e:	2902      	cmp	r1, #2
   11940:	d10b      	bne.n	1195a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fe>
   11942:	07c1      	lsls	r1, r0, #31
   11944:	d019      	beq.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11946:	0741      	lsls	r1, r0, #29
   11948:	d417      	bmi.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1194a:	0701      	lsls	r1, r0, #28
   1194c:	d515      	bpl.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1194e:	0641      	lsls	r1, r0, #25
   11950:	d413      	bmi.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11952:	0681      	lsls	r1, r0, #26
   11954:	d411      	bmi.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11956:	0781      	lsls	r1, r0, #30
   11958:	d40f      	bmi.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1195a:	06c0      	lsls	r0, r0, #27
   1195c:	d409      	bmi.n	11972 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x216>
   1195e:	7da0      	ldrb	r0, [r4, #22]
   11960:	2801      	cmp	r0, #1
   11962:	d003      	beq.n	1196c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   11964:	2802      	cmp	r0, #2
   11966:	d001      	beq.n	1196c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   11968:	2803      	cmp	r0, #3
   1196a:	d106      	bne.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1196c:	7de0      	ldrb	r0, [r4, #23]
   1196e:	280f      	cmp	r0, #15
   11970:	d803      	bhi.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11972:	7e20      	ldrb	r0, [r4, #24]
   11974:	b118      	cbz	r0, 1197e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   11976:	2801      	cmp	r0, #1
   11978:	d001      	beq.n	1197e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   1197a:	2012      	movs	r0, #18
   1197c:	bd38      	pop	{r3, r4, r5, pc}
   1197e:	2000      	movs	r0, #0
   11980:	bd38      	pop	{r3, r4, r5, pc}
   11982:	b510      	push	{r4, lr}
   11984:	0004      	movs	r4, r0
   11986:	d005      	beq.n	11994 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   11988:	f7fb fa54 	bl	ce34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1198c:	4384      	bics	r4, r0
   1198e:	d001      	beq.n	11994 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   11990:	2000      	movs	r0, #0
   11992:	bd10      	pop	{r4, pc}
   11994:	2001      	movs	r0, #1
   11996:	bd10      	pop	{r4, pc}
   11998:	28fb      	cmp	r0, #251	; 0xfb
   1199a:	d803      	bhi.n	119a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x248>
   1199c:	f640 0048 	movw	r0, #2120	; 0x848
   119a0:	4281      	cmp	r1, r0
   119a2:	d901      	bls.n	119a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24c>
   119a4:	2011      	movs	r0, #17
   119a6:	4770      	bx	lr
   119a8:	2000      	movs	r0, #0
   119aa:	4770      	bx	lr
   119ac:	381b      	subs	r0, #27
   119ae:	28e1      	cmp	r0, #225	; 0xe1
   119b0:	d206      	bcs.n	119c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x264>
   119b2:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   119b6:	d303      	bcc.n	119c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x264>
   119b8:	f244 2090 	movw	r0, #17040	; 0x4290
   119bc:	4281      	cmp	r1, r0
   119be:	d901      	bls.n	119c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x268>
   119c0:	2012      	movs	r0, #18
   119c2:	4770      	bx	lr
   119c4:	2000      	movs	r0, #0
   119c6:	4770      	bx	lr
   119c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119cc:	4605      	mov	r5, r0
   119ce:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
   119d2:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
   119d6:	4616      	mov	r6, r2
   119d8:	3028      	adds	r0, #40	; 0x28
   119da:	b111      	cbz	r1, 119e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
   119dc:	f7fa f9a0 	bl	bd20 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
   119e0:	e001      	b.n	119e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28a>
   119e2:	f7f7 f905 	bl	8bf0 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
   119e6:	4680      	mov	r8, r0
   119e8:	2102      	movs	r1, #2
   119ea:	f7fe fabe 	bl	ff6a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   119ee:	4287      	cmp	r7, r0
   119f0:	d200      	bcs.n	119f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
   119f2:	4638      	mov	r0, r7
   119f4:	4607      	mov	r7, r0
   119f6:	2102      	movs	r1, #2
   119f8:	4640      	mov	r0, r8
   119fa:	f7fe fab6 	bl	ff6a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   119fe:	4284      	cmp	r4, r0
   11a00:	d200      	bcs.n	11a04 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a8>
   11a02:	4620      	mov	r0, r4
   11a04:	8829      	ldrh	r1, [r5, #0]
   11a06:	8031      	strh	r1, [r6, #0]
   11a08:	2f1b      	cmp	r7, #27
   11a0a:	d913      	bls.n	11a34 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d8>
   11a0c:	2ffb      	cmp	r7, #251	; 0xfb
   11a0e:	d300      	bcc.n	11a12 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2b6>
   11a10:	27fb      	movs	r7, #251	; 0xfb
   11a12:	8077      	strh	r7, [r6, #2]
   11a14:	281b      	cmp	r0, #27
   11a16:	d90f      	bls.n	11a38 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2dc>
   11a18:	28fb      	cmp	r0, #251	; 0xfb
   11a1a:	d300      	bcc.n	11a1e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c2>
   11a1c:	20fb      	movs	r0, #251	; 0xfb
   11a1e:	80f0      	strh	r0, [r6, #6]
   11a20:	4640      	mov	r0, r8
   11a22:	f7ff febc 	bl	1179e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   11a26:	80b0      	strh	r0, [r6, #4]
   11a28:	4640      	mov	r0, r8
   11a2a:	f7ff feb8 	bl	1179e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   11a2e:	8130      	strh	r0, [r6, #8]
   11a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a34:	271b      	movs	r7, #27
   11a36:	e7ec      	b.n	11a12 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2b6>
   11a38:	201b      	movs	r0, #27
   11a3a:	e7f0      	b.n	11a1e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c2>
   11a3c:	b510      	push	{r4, lr}
   11a3e:	f000 f84c 	bl	11ada <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   11a42:	b918      	cbnz	r0, 11a4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   11a44:	f7f7 f80e 	bl	8a64 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   11a48:	2800      	cmp	r0, #0
   11a4a:	d000      	beq.n	11a4e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f2>
   11a4c:	2001      	movs	r0, #1
   11a4e:	bd10      	pop	{r4, pc}
   11a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a54:	7890      	ldrb	r0, [r2, #2]
   11a56:	9e06      	ldr	r6, [sp, #24]
   11a58:	461d      	mov	r5, r3
   11a5a:	4614      	mov	r4, r2
   11a5c:	b908      	cbnz	r0, 11a62 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x306>
   11a5e:	f7fb f9e9 	bl	ce34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11a62:	78e4      	ldrb	r4, [r4, #3]
   11a64:	4607      	mov	r7, r0
   11a66:	b914      	cbnz	r4, 11a6e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x312>
   11a68:	f7fb f9e4 	bl	ce34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11a6c:	4604      	mov	r4, r0
   11a6e:	b16f      	cbz	r7, 11a8c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11a70:	b164      	cbz	r4, 11a8c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11a72:	4638      	mov	r0, r7
   11a74:	f7ff fe9d 	bl	117b2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   11a78:	4620      	mov	r0, r4
   11a7a:	f7ff fe9a 	bl	117b2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   11a7e:	b12f      	cbz	r7, 11a8c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11a80:	b124      	cbz	r4, 11a8c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11a82:	702f      	strb	r7, [r5, #0]
   11a84:	7034      	strb	r4, [r6, #0]
   11a86:	2000      	movs	r0, #0
   11a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a8c:	2009      	movs	r0, #9
   11a8e:	e7fb      	b.n	11a88 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x32c>
   11a90:	b510      	push	{r4, lr}
   11a92:	f7fb f9c1 	bl	ce18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   11a96:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11a9a:	bd10      	pop	{r4, pc}
   11a9c:	7801      	ldrb	r1, [r0, #0]
   11a9e:	6840      	ldr	r0, [r0, #4]
   11aa0:	b109      	cbz	r1, 11aa6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34a>
   11aa2:	f000 b80e 	b.w	11ac2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x366>
   11aa6:	f000 b800 	b.w	11aaa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
   11aaa:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
   11aae:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   11ab2:	b920      	cbnz	r0, 11abe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11ab4:	b119      	cbz	r1, 11abe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11ab6:	2904      	cmp	r1, #4
   11ab8:	d001      	beq.n	11abe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11aba:	2001      	movs	r0, #1
   11abc:	4770      	bx	lr
   11abe:	2000      	movs	r0, #0
   11ac0:	4770      	bx	lr
   11ac2:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
   11ac6:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   11aca:	b920      	cbnz	r0, 11ad6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   11acc:	b119      	cbz	r1, 11ad6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   11ace:	2904      	cmp	r1, #4
   11ad0:	d001      	beq.n	11ad6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   11ad2:	2001      	movs	r0, #1
   11ad4:	4770      	bx	lr
   11ad6:	2000      	movs	r0, #0
   11ad8:	4770      	bx	lr
   11ada:	b510      	push	{r4, lr}
   11adc:	f7fa f92e 	bl	bd3c <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   11ae0:	2804      	cmp	r0, #4
   11ae2:	d003      	beq.n	11aec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x390>
   11ae4:	2805      	cmp	r0, #5
   11ae6:	d001      	beq.n	11aec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x390>
   11ae8:	2000      	movs	r0, #0
   11aea:	bd10      	pop	{r4, pc}
   11aec:	2001      	movs	r0, #1
   11aee:	bd10      	pop	{r4, pc}
   11af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11af4:	b086      	sub	sp, #24
   11af6:	4604      	mov	r4, r0
   11af8:	8800      	ldrh	r0, [r0, #0]
   11afa:	4669      	mov	r1, sp
   11afc:	f7fe f966 	bl	fdcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11b00:	2800      	cmp	r0, #0
   11b02:	d151      	bne.n	11ba8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11b04:	9801      	ldr	r0, [sp, #4]
   11b06:	f89d 1000 	ldrb.w	r1, [sp]
   11b0a:	3078      	adds	r0, #120	; 0x78
   11b0c:	2900      	cmp	r1, #0
   11b0e:	9901      	ldr	r1, [sp, #4]
   11b10:	d007      	beq.n	11b22 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
   11b12:	f891 11f8 	ldrb.w	r1, [r1, #504]	; 0x1f8
   11b16:	f88d 1008 	strb.w	r1, [sp, #8]
   11b1a:	7b81      	ldrb	r1, [r0, #14]
   11b1c:	0689      	lsls	r1, r1, #26
   11b1e:	d413      	bmi.n	11b48 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ec>
   11b20:	e009      	b.n	11b36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   11b22:	f891 1162 	ldrb.w	r1, [r1, #354]	; 0x162
   11b26:	f88d 1008 	strb.w	r1, [sp, #8]
   11b2a:	7b41      	ldrb	r1, [r0, #13]
   11b2c:	291d      	cmp	r1, #29
   11b2e:	d00b      	beq.n	11b48 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ec>
   11b30:	e001      	b.n	11b36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   11b32:	2101      	movs	r1, #1
   11b34:	e000      	b.n	11b38 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3dc>
   11b36:	2100      	movs	r1, #0
   11b38:	f88d 100c 	strb.w	r1, [sp, #12]
   11b3c:	2105      	movs	r1, #5
   11b3e:	3046      	adds	r0, #70	; 0x46
   11b40:	f7ff f9db 	bl	10efa <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   11b44:	b128      	cbz	r0, 11b52 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f6>
   11b46:	e007      	b.n	11b58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fc>
   11b48:	f89d 1008 	ldrb.w	r1, [sp, #8]
   11b4c:	2900      	cmp	r1, #0
   11b4e:	d1f2      	bne.n	11b36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   11b50:	e7ef      	b.n	11b32 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d6>
   11b52:	f89d 000c 	ldrb.w	r0, [sp, #12]
   11b56:	b330      	cbz	r0, 11ba6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44a>
   11b58:	8921      	ldrh	r1, [r4, #8]
   11b5a:	88e0      	ldrh	r0, [r4, #6]
   11b5c:	f7ff ff26 	bl	119ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
   11b60:	2800      	cmp	r0, #0
   11b62:	d121      	bne.n	11ba8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11b64:	88a1      	ldrh	r1, [r4, #4]
   11b66:	8860      	ldrh	r0, [r4, #2]
   11b68:	f7ff ff20 	bl	119ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
   11b6c:	2800      	cmp	r0, #0
   11b6e:	d11b      	bne.n	11ba8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11b70:	8921      	ldrh	r1, [r4, #8]
   11b72:	88e0      	ldrh	r0, [r4, #6]
   11b74:	f7ff ff10 	bl	11998 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   11b78:	2800      	cmp	r0, #0
   11b7a:	d115      	bne.n	11ba8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11b7c:	88a1      	ldrh	r1, [r4, #4]
   11b7e:	8860      	ldrh	r0, [r4, #2]
   11b80:	f7ff ff0a 	bl	11998 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   11b84:	0006      	movs	r6, r0
   11b86:	d10f      	bne.n	11ba8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11b88:	f89d 0000 	ldrb.w	r0, [sp]
   11b8c:	9f01      	ldr	r7, [sp, #4]
   11b8e:	b170      	cbz	r0, 11bae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
   11b90:	f507 75da 	add.w	r5, r7, #436	; 0x1b4
   11b94:	f04f 0801 	mov.w	r8, #1
   11b98:	f885 8001 	strb.w	r8, [r5, #1]
   11b9c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   11ba0:	b140      	cbz	r0, 11bb4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x458>
   11ba2:	263a      	movs	r6, #58	; 0x3a
   11ba4:	e037      	b.n	11c16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ba>
   11ba6:	201a      	movs	r0, #26
   11ba8:	b006      	add	sp, #24
   11baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11bae:	f507 759c 	add.w	r5, r7, #312	; 0x138
   11bb2:	e7ef      	b.n	11b94 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x438>
   11bb4:	f89d 0000 	ldrb.w	r0, [sp]
   11bb8:	f7ff fe10 	bl	117dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   11bbc:	4601      	mov	r1, r0
   11bbe:	aa02      	add	r2, sp, #8
   11bc0:	4638      	mov	r0, r7
   11bc2:	f7ff ff01 	bl	119c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
   11bc6:	8861      	ldrh	r1, [r4, #2]
   11bc8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   11bcc:	4281      	cmp	r1, r0
   11bce:	d200      	bcs.n	11bd2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   11bd0:	4608      	mov	r0, r1
   11bd2:	80e8      	strh	r0, [r5, #6]
   11bd4:	88a1      	ldrh	r1, [r4, #4]
   11bd6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   11bda:	4281      	cmp	r1, r0
   11bdc:	d200      	bcs.n	11be0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x484>
   11bde:	4608      	mov	r0, r1
   11be0:	8128      	strh	r0, [r5, #8]
   11be2:	88e2      	ldrh	r2, [r4, #6]
   11be4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   11be8:	428a      	cmp	r2, r1
   11bea:	d200      	bcs.n	11bee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x492>
   11bec:	4611      	mov	r1, r2
   11bee:	8069      	strh	r1, [r5, #2]
   11bf0:	8921      	ldrh	r1, [r4, #8]
   11bf2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   11bf6:	4291      	cmp	r1, r2
   11bf8:	d300      	bcc.n	11bfc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a0>
   11bfa:	4611      	mov	r1, r2
   11bfc:	f640 0248 	movw	r2, #2120	; 0x848
   11c00:	80a9      	strh	r1, [r5, #4]
   11c02:	4291      	cmp	r1, r2
   11c04:	d300      	bcc.n	11c08 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ac>
   11c06:	4611      	mov	r1, r2
   11c08:	80a9      	strh	r1, [r5, #4]
   11c0a:	4290      	cmp	r0, r2
   11c0c:	d200      	bcs.n	11c10 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4b4>
   11c0e:	4602      	mov	r2, r0
   11c10:	812a      	strh	r2, [r5, #8]
   11c12:	f885 8000 	strb.w	r8, [r5]
   11c16:	2000      	movs	r0, #0
   11c18:	7068      	strb	r0, [r5, #1]
   11c1a:	4630      	mov	r0, r6
   11c1c:	e7c4      	b.n	11ba8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11c1e:	b530      	push	{r4, r5, lr}
   11c20:	f340 0400 	sbfx	r4, r0, #0, #1
   11c24:	f340 0040 	sbfx	r0, r0, #1, #1
   11c28:	1c40      	adds	r0, r0, #1
   11c2a:	9d03      	ldr	r5, [sp, #12]
   11c2c:	1c64      	adds	r4, r4, #1
   11c2e:	d000      	beq.n	11c32 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4d6>
   11c30:	b119      	cbz	r1, 11c3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   11c32:	b100      	cbz	r0, 11c36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4da>
   11c34:	b10a      	cbz	r2, 11c3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   11c36:	b91c      	cbnz	r4, 11c40 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e4>
   11c38:	e001      	b.n	11c3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e2>
   11c3a:	2011      	movs	r0, #17
   11c3c:	bd30      	pop	{r4, r5, pc}
   11c3e:	2100      	movs	r1, #0
   11c40:	7019      	strb	r1, [r3, #0]
   11c42:	b900      	cbnz	r0, 11c46 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ea>
   11c44:	2200      	movs	r2, #0
   11c46:	702a      	strb	r2, [r5, #0]
   11c48:	2000      	movs	r0, #0
   11c4a:	bd30      	pop	{r4, r5, pc}
   11c4c:	b2c0      	uxtb	r0, r0
   11c4e:	06c1      	lsls	r1, r0, #27
   11c50:	d415      	bmi.n	11c7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x522>
   11c52:	0681      	lsls	r1, r0, #26
   11c54:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   11c58:	d503      	bpl.n	11c62 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x506>
   11c5a:	bb21      	cbnz	r1, 11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c5c:	0781      	lsls	r1, r0, #30
   11c5e:	d422      	bmi.n	11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c60:	e001      	b.n	11c66 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x50a>
   11c62:	2900      	cmp	r1, #0
   11c64:	d1fa      	bne.n	11c5c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x500>
   11c66:	0701      	lsls	r1, r0, #28
   11c68:	d51b      	bpl.n	11ca2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x546>
   11c6a:	07c1      	lsls	r1, r0, #31
   11c6c:	d01b      	beq.n	11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c6e:	0781      	lsls	r1, r0, #30
   11c70:	d419      	bmi.n	11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c72:	0641      	lsls	r1, r0, #25
   11c74:	d417      	bmi.n	11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c76:	0741      	lsls	r1, r0, #29
   11c78:	d415      	bmi.n	11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c7a:	0680      	lsls	r0, r0, #26
   11c7c:	e00f      	b.n	11c9e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x542>
   11c7e:	0641      	lsls	r1, r0, #25
   11c80:	d411      	bmi.n	11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c82:	0681      	lsls	r1, r0, #26
   11c84:	d40f      	bmi.n	11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c86:	07c1      	lsls	r1, r0, #31
   11c88:	ea4f 7180 	mov.w	r1, r0, lsl #30
   11c8c:	d004      	beq.n	11c98 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   11c8e:	2900      	cmp	r1, #0
   11c90:	db02      	blt.n	11c98 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   11c92:	0740      	lsls	r0, r0, #29
   11c94:	d405      	bmi.n	11ca2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x546>
   11c96:	e006      	b.n	11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c98:	0701      	lsls	r1, r0, #28
   11c9a:	d404      	bmi.n	11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c9c:	0740      	lsls	r0, r0, #29
   11c9e:	2800      	cmp	r0, #0
   11ca0:	db01      	blt.n	11ca6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11ca2:	2001      	movs	r0, #1
   11ca4:	4770      	bx	lr
   11ca6:	2000      	movs	r0, #0
   11ca8:	4770      	bx	lr
   11caa:	b510      	push	{r4, lr}
   11cac:	f7ff ff15 	bl	11ada <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   11cb0:	b110      	cbz	r0, 11cb8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x55c>
   11cb2:	f7f9 fffd 	bl	bcb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   11cb6:	b928      	cbnz	r0, 11cc4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x568>
   11cb8:	f7f6 fed4 	bl	8a64 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   11cbc:	b120      	cbz	r0, 11cc8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56c>
   11cbe:	f7f5 fcaf 	bl	7620 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   11cc2:	b108      	cbz	r0, 11cc8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56c>
   11cc4:	2001      	movs	r0, #1
   11cc6:	bd10      	pop	{r4, pc}
   11cc8:	2000      	movs	r0, #0
   11cca:	bd10      	pop	{r4, pc}

00011ccc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   11ccc:	6802      	ldr	r2, [r0, #0]
   11cce:	b912      	cbnz	r2, 11cd6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   11cd0:	6001      	str	r1, [r0, #0]
   11cd2:	4770      	bx	lr
   11cd4:	4602      	mov	r2, r0
   11cd6:	6850      	ldr	r0, [r2, #4]
   11cd8:	2800      	cmp	r0, #0
   11cda:	d1fb      	bne.n	11cd4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   11cdc:	6051      	str	r1, [r2, #4]
   11cde:	4770      	bx	lr
   11ce0:	b510      	push	{r4, lr}
   11ce2:	f7f5 fbd5 	bl	7490 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   11ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11cea:	f7fb b835 	b.w	cd58 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   11cee:	b510      	push	{r4, lr}
   11cf0:	f7f6 fed2 	bl	8a98 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
   11cf4:	b108      	cbz	r0, 11cfa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
   11cf6:	21e2      	movs	r1, #226	; 0xe2
   11cf8:	e004      	b.n	11d04 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
   11cfa:	f7f5 fbe7 	bl	74cc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   11cfe:	2800      	cmp	r0, #0
   11d00:	d003      	beq.n	11d0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   11d02:	21e7      	movs	r1, #231	; 0xe7
   11d04:	2001      	movs	r0, #1
   11d06:	f7f1 ff3b 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11d0a:	bd10      	pop	{r4, pc}
   11d0c:	b50e      	push	{r1, r2, r3, lr}
   11d0e:	4669      	mov	r1, sp
   11d10:	2001      	movs	r0, #1
   11d12:	f7fd ff59 	bl	fbc8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   11d16:	b148      	cbz	r0, 11d2c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x60>
   11d18:	219c      	movs	r1, #156	; 0x9c
   11d1a:	e01a      	b.n	11d52 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   11d1c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   11d20:	2101      	movs	r1, #1
   11d22:	f7f2 f959 	bl	3fd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   11d26:	b108      	cbz	r0, 11d2c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x60>
   11d28:	21a0      	movs	r1, #160	; 0xa0
   11d2a:	e012      	b.n	11d52 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   11d2c:	4668      	mov	r0, sp
   11d2e:	f7f2 f92d 	bl	3f8c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11d32:	2800      	cmp	r0, #0
   11d34:	d0f2      	beq.n	11d1c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x50>
   11d36:	4669      	mov	r1, sp
   11d38:	2000      	movs	r0, #0
   11d3a:	f7fd ff45 	bl	fbc8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   11d3e:	b158      	cbz	r0, 11d58 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   11d40:	21a6      	movs	r1, #166	; 0xa6
   11d42:	e006      	b.n	11d52 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   11d44:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   11d48:	2100      	movs	r1, #0
   11d4a:	f7f2 f945 	bl	3fd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   11d4e:	b118      	cbz	r0, 11d58 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   11d50:	21aa      	movs	r1, #170	; 0xaa
   11d52:	2001      	movs	r0, #1
   11d54:	f7f1 ff14 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11d58:	4668      	mov	r0, sp
   11d5a:	f7f2 f917 	bl	3f8c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11d5e:	2800      	cmp	r0, #0
   11d60:	d0f0      	beq.n	11d44 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x78>
   11d62:	bd0e      	pop	{r1, r2, r3, pc}
   11d64:	b510      	push	{r4, lr}
   11d66:	4604      	mov	r4, r0
   11d68:	e002      	b.n	11d70 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa4>
   11d6a:	6820      	ldr	r0, [r4, #0]
   11d6c:	4780      	blx	r0
   11d6e:	6864      	ldr	r4, [r4, #4]
   11d70:	2c00      	cmp	r4, #0
   11d72:	d1fa      	bne.n	11d6a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x9e>
   11d74:	bd10      	pop	{r4, pc}
   11d76:	b510      	push	{r4, lr}
   11d78:	f7ff ffc8 	bl	11d0c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x40>
   11d7c:	f7f2 faa4 	bl	42c8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   11d80:	f7f2 fe14 	bl	49ac <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   11d84:	f7f3 f8a4 	bl	4ed0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   11d88:	2800      	cmp	r0, #0
   11d8a:	d003      	beq.n	11d94 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xc8>
   11d8c:	21c0      	movs	r1, #192	; 0xc0
   11d8e:	2001      	movs	r0, #1
   11d90:	f7f1 fef6 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11d94:	bd10      	pop	{r4, pc}
   11d96:	f7ff bfee 	b.w	11d76 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xaa>
   11d9a:	b510      	push	{r4, lr}
   11d9c:	f7ff ffa7 	bl	11cee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x22>
   11da0:	f7f8 f86c 	bl	9e7c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   11da4:	2800      	cmp	r0, #0
   11da6:	d003      	beq.n	11db0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xe4>
   11da8:	21fe      	movs	r1, #254	; 0xfe
   11daa:	2001      	movs	r0, #1
   11dac:	f7f1 fee8 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11db0:	bd10      	pop	{r4, pc}

00011db2 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   11db2:	b510      	push	{r4, lr}
   11db4:	f7fb fce8 	bl	d788 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   11db8:	f7fb f9ee 	bl	d198 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   11dbc:	f7fb f8a2 	bl	cf04 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   11dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11dc4:	f7fb b982 	b.w	d0cc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00011dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   11dc8:	2801      	cmp	r0, #1
   11dca:	bf04      	itt	eq
   11dcc:	2028      	moveq	r0, #40	; 0x28
   11dce:	4770      	bxeq	lr
   11dd0:	2802      	cmp	r0, #2
   11dd2:	bf04      	itt	eq
   11dd4:	2018      	moveq	r0, #24
   11dd6:	4770      	bxeq	lr
   11dd8:	b510      	push	{r4, lr}
   11dda:	f640 217f 	movw	r1, #2687	; 0xa7f
   11dde:	203e      	movs	r0, #62	; 0x3e
   11de0:	f7f1 fece 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   11de4:	2801      	cmp	r0, #1
   11de6:	bf04      	itt	eq
   11de8:	f641 6014 	movweq	r0, #7700	; 0x1e14
   11dec:	4770      	bxeq	lr
   11dee:	2802      	cmp	r0, #2
   11df0:	bf04      	itt	eq
   11df2:	f241 1030 	movweq	r0, #4400	; 0x1130
   11df6:	4770      	bxeq	lr
   11df8:	b510      	push	{r4, lr}
   11dfa:	f640 2193 	movw	r1, #2707	; 0xa93
   11dfe:	203e      	movs	r0, #62	; 0x3e
   11e00:	f7f1 febe 	bl	3b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011e04 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   11e04:	b570      	push	{r4, r5, r6, lr}
   11e06:	4604      	mov	r4, r0
   11e08:	4615      	mov	r5, r2
   11e0a:	4608      	mov	r0, r1
   11e0c:	f7ff ffea 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11e10:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   11e14:	ebc1 11c4 	rsb	r1, r1, r4, lsl #7
   11e18:	ebc0 04c1 	rsb	r4, r0, r1, lsl #3
   11e1c:	4628      	mov	r0, r5
   11e1e:	f7ff ffe1 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11e22:	4420      	add	r0, r4
   11e24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11e28:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   11e2c:	fbb0 f4f1 	udiv	r4, r0, r1
   11e30:	4628      	mov	r0, r5
   11e32:	f7ff ffc9 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   11e36:	4420      	add	r0, r4
   11e38:	1d40      	adds	r0, r0, #5
   11e3a:	bd70      	pop	{r4, r5, r6, pc}

00011e3c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   11e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e40:	4606      	mov	r6, r0
   11e42:	461c      	mov	r4, r3
   11e44:	460d      	mov	r5, r1
   11e46:	4617      	mov	r7, r2
   11e48:	4610      	mov	r0, r2
   11e4a:	f7ff ffcb 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11e4e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   11e52:	ebc1 11c6 	rsb	r1, r1, r6, lsl #7
   11e56:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   11e5a:	2d02      	cmp	r5, #2
   11e5c:	bf0c      	ite	eq
   11e5e:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   11e62:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   11e66:	4408      	add	r0, r1
   11e68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11e6c:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   11e70:	fbb0 f5f1 	udiv	r5, r0, r1
   11e74:	4638      	mov	r0, r7
   11e76:	f7ff ffa7 	bl	11dc8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   11e7a:	4428      	add	r0, r5
   11e7c:	4420      	add	r0, r4
   11e7e:	1d40      	adds	r0, r0, #5
   11e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011e84 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   11e84:	b510      	push	{r4, lr}
   11e86:	4604      	mov	r4, r0
   11e88:	4608      	mov	r0, r1
   11e8a:	f7ff ffab 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11e8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11e92:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   11e96:	fbb0 f0f1 	udiv	r0, r0, r1
   11e9a:	1a20      	subs	r0, r4, r0
   11e9c:	1e80      	subs	r0, r0, #2
   11e9e:	bd10      	pop	{r4, pc}

00011ea0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   11ea0:	b510      	push	{r4, lr}
   11ea2:	4604      	mov	r4, r0
   11ea4:	4608      	mov	r0, r1
   11ea6:	f7ff ff9d 	bl	11de4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11eaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11eae:	fbb0 f0f1 	udiv	r0, r0, r1
   11eb2:	1a20      	subs	r0, r4, r0
   11eb4:	bd10      	pop	{r4, pc}

00011eb6 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   11eb6:	2902      	cmp	r1, #2
   11eb8:	bf0c      	ite	eq
   11eba:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   11ebe:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   11ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11ec6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   11eca:	fbb1 f1f2 	udiv	r1, r1, r2
   11ece:	4408      	add	r0, r1
   11ed0:	1e80      	subs	r0, r0, #2
   11ed2:	4770      	bx	lr

00011ed4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   11ed4:	2902      	cmp	r1, #2
   11ed6:	bf0c      	ite	eq
   11ed8:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   11edc:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   11ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11ee4:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   11ee8:	fbb1 f1f2 	udiv	r1, r1, r2
   11eec:	4408      	add	r0, r1
   11eee:	4770      	bx	lr

00011ef0 <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>:
   11ef0:	2100      	movs	r1, #0
   11ef2:	6001      	str	r1, [r0, #0]
   11ef4:	6041      	str	r1, [r0, #4]
   11ef6:	4770      	bx	lr

00011ef8 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   11ef8:	680a      	ldr	r2, [r1, #0]
   11efa:	6002      	str	r2, [r0, #0]
   11efc:	790b      	ldrb	r3, [r1, #4]
   11efe:	7103      	strb	r3, [r0, #4]
   11f00:	4770      	bx	lr

00011f02 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   11f02:	2100      	movs	r1, #0
   11f04:	6001      	str	r1, [r0, #0]
   11f06:	8081      	strh	r1, [r0, #4]
   11f08:	4770      	bx	lr
   11f0a:	0345      	.short	0x0345
   11f0c:	02310502 	.word	0x02310502
   11f10:	0402      	.short	0x0402
   11f12:	080c      	.short	0x080c
   11f14:	010d1702 	.word	0x010d1702
   11f18:	09090201 	.word	0x09090201
   11f1c:	02060101 	.word	0x02060101
   11f20:	03181809 	.word	0x03181809
   11f24:	09090101 	.word	0x09090101
   11f28:	00050303 	.word	0x00050303

00011f2c <disconnected>:

	dk_set_led_on(CON_STATUS_LED);
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   11f2c:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   11f2e:	4804      	ldr	r0, [pc, #16]	; (11f40 <disconnected+0x14>)
   11f30:	f007 fbb5 	bl	1969e <printk>

	dk_set_led_off(CON_STATUS_LED);
}
   11f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_off(CON_STATUS_LED);
   11f38:	2001      	movs	r0, #1
   11f3a:	f00a ba39 	b.w	1c3b0 <dk_set_led_off>
   11f3e:	bf00      	nop
   11f40:	0001d4f4 	.word	0x0001d4f4

00011f44 <connected>:
{
   11f44:	b508      	push	{r3, lr}
	if (err) {
   11f46:	b121      	cbz	r1, 11f52 <connected+0xe>
}
   11f48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err %u)\n", err);
   11f4c:	4805      	ldr	r0, [pc, #20]	; (11f64 <connected+0x20>)
   11f4e:	f007 bba6 	b.w	1969e <printk>
	printk("Connected\n");
   11f52:	4805      	ldr	r0, [pc, #20]	; (11f68 <connected+0x24>)
   11f54:	f007 fba3 	bl	1969e <printk>
}
   11f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_on(CON_STATUS_LED);
   11f5c:	2001      	movs	r0, #1
   11f5e:	f00a ba24 	b.w	1c3aa <dk_set_led_on>
   11f62:	bf00      	nop
   11f64:	0001d50e 	.word	0x0001d50e
   11f68:	0001d52a 	.word	0x0001d52a

00011f6c <pwm_set>:
static struct bt_conn_cb conn_callbacks = {
	.connected        = connected,
	.disconnected     = disconnected,
};
//PWM set
void pwm_set(uint32_t val){
   11f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        int ret;
        int dutyCycle = (PERIOD_USEC * val) / 100;
        ret = pwm_pin_set_usec(pwm, PWM_CHANNEL, PERIOD_USEC, dutyCycle, PWM_FLAGS);
   11f70:	4b20      	ldr	r3, [pc, #128]	; (11ff4 <pwm_set+0x88>)
        int dutyCycle = (PERIOD_USEC * val) / 100;
   11f72:	4d21      	ldr	r5, [pc, #132]	; (11ff8 <pwm_set+0x8c>)
        ret = pwm_pin_set_usec(pwm, PWM_CHANNEL, PERIOD_USEC, dutyCycle, PWM_FLAGS);
   11f74:	681f      	ldr	r7, [r3, #0]
        int dutyCycle = (PERIOD_USEC * val) / 100;
   11f76:	fb05 f600 	mul.w	r6, r5, r0
void pwm_set(uint32_t val){
   11f7a:	b087      	sub	sp, #28
        int dutyCycle = (PERIOD_USEC * val) / 100;
   11f7c:	2064      	movs	r0, #100	; 0x64
   11f7e:	fbb6 f6f0 	udiv	r6, r6, r0
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
   11f82:	68bb      	ldr	r3, [r7, #8]
   11f84:	aa04      	add	r2, sp, #16
   11f86:	685b      	ldr	r3, [r3, #4]
   11f88:	2114      	movs	r1, #20
   11f8a:	4638      	mov	r0, r7
   11f8c:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
   11f8e:	9003      	str	r0, [sp, #12]
   11f90:	bb68      	cbnz	r0, 11fee <pwm_set+0x82>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   11f92:	e9dd 4b04 	ldrd	r4, fp, [sp, #16]
   11f96:	fba4 8905 	umull	r8, r9, r4, r5
   11f9a:	fb05 990b 	mla	r9, r5, fp, r9
   11f9e:	4a17      	ldr	r2, [pc, #92]	; (11ffc <pwm_set+0x90>)
   11fa0:	2300      	movs	r3, #0
   11fa2:	4640      	mov	r0, r8
   11fa4:	4649      	mov	r1, r9
   11fa6:	f7ee f899 	bl	dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
   11faa:	4b15      	ldr	r3, [pc, #84]	; (12000 <pwm_set+0x94>)
   11fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11fb0:	454b      	cmp	r3, r9
   11fb2:	bf08      	it	eq
   11fb4:	4542      	cmpeq	r2, r8
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   11fb6:	4682      	mov	sl, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
   11fb8:	d319      	bcc.n	11fee <pwm_set+0x82>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   11fba:	fba6 4504 	umull	r4, r5, r6, r4
   11fbe:	fb06 550b 	mla	r5, r6, fp, r5
   11fc2:	4a0e      	ldr	r2, [pc, #56]	; (11ffc <pwm_set+0x90>)
   11fc4:	2300      	movs	r3, #0
   11fc6:	4620      	mov	r0, r4
   11fc8:	4629      	mov	r1, r5
   11fca:	f7ee f887 	bl	dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
   11fce:	4a0c      	ldr	r2, [pc, #48]	; (12000 <pwm_set+0x94>)
   11fd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11fd4:	42aa      	cmp	r2, r5
   11fd6:	bf08      	it	eq
   11fd8:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   11fda:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
   11fdc:	d307      	bcc.n	11fee <pwm_set+0x82>
	return api->pin_set(dev, pwm, period, pulse, flags);
   11fde:	68ba      	ldr	r2, [r7, #8]
   11fe0:	9903      	ldr	r1, [sp, #12]
   11fe2:	9100      	str	r1, [sp, #0]
   11fe4:	6814      	ldr	r4, [r2, #0]
   11fe6:	2114      	movs	r1, #20
   11fe8:	4652      	mov	r2, sl
   11fea:	4638      	mov	r0, r7
   11fec:	47a0      	blx	r4
}
   11fee:	b007      	add	sp, #28
   11ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff4:	200023d8 	.word	0x200023d8
   11ff8:	00030d40 	.word	0x00030d40
   11ffc:	000f4240 	.word	0x000f4240
   12000:	000f423f 	.word	0x000f423f

00012004 <main>:
static struct bt_pwmService_cb service_callbacks = {
    .pwm_cb = app_pwm_cb,
};

void main(void)
{
   12004:	b530      	push	{r4, r5, lr}
   12006:	b089      	sub	sp, #36	; 0x24
    int blinkStatus = 0;
    int err;
    err = dk_leds_init();
   12008:	f005 faa4 	bl	17554 <dk_leds_init>

    if(err){
   1200c:	4604      	mov	r4, r0
   1200e:	b128      	cbz	r0, 1201c <main+0x18>
        printk("Leds init failed (err %d) \n", err);
   12010:	4601      	mov	r1, r0
   12012:	4824      	ldr	r0, [pc, #144]	; (120a4 <main+0xa0>)
	}

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
			      sd, ARRAY_SIZE(sd));
	if (err) {
		printk("Advertising failed to start (err %d)\n", err);
   12014:	f007 fb43 	bl	1969e <printk>

	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blinkStatus) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   12018:	b009      	add	sp, #36	; 0x24
   1201a:	bd30      	pop	{r4, r5, pc}
	printk("Starting Bluetooth PWM template\n");
   1201c:	4822      	ldr	r0, [pc, #136]	; (120a8 <main+0xa4>)
   1201e:	f007 fb3e 	bl	1969e <printk>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   12022:	4822      	ldr	r0, [pc, #136]	; (120ac <main+0xa8>)
   12024:	f006 fa3a 	bl	1849c <z_impl_device_get_binding>
        pwm = device_get_binding(PWM_LABEL);
   12028:	4b21      	ldr	r3, [pc, #132]	; (120b0 <main+0xac>)
   1202a:	6018      	str	r0, [r3, #0]
	if (!pwm) {
   1202c:	b910      	cbnz	r0, 12034 <main+0x30>
		printk("Error: didn't find %s device\n", PWM_LABEL);
   1202e:	491f      	ldr	r1, [pc, #124]	; (120ac <main+0xa8>)
   12030:	4820      	ldr	r0, [pc, #128]	; (120b4 <main+0xb0>)
   12032:	e7ef      	b.n	12014 <main+0x10>
    bt_conn_cb_register(&conn_callbacks);
   12034:	4820      	ldr	r0, [pc, #128]	; (120b8 <main+0xb4>)
   12036:	f003 f87d 	bl	15134 <bt_conn_cb_register>
    err = bt_enable(NULL);
   1203a:	4620      	mov	r0, r4
   1203c:	f002 fca2 	bl	14984 <bt_enable>
       if(err){
   12040:	4601      	mov	r1, r0
   12042:	b108      	cbz	r0, 12048 <main+0x44>
        printk("Bluetooth init failed (err %d) \n", err);
   12044:	481d      	ldr	r0, [pc, #116]	; (120bc <main+0xb8>)
   12046:	e7e5      	b.n	12014 <main+0x10>
    printk("Bluetooth initialized\n");
   12048:	481d      	ldr	r0, [pc, #116]	; (120c0 <main+0xbc>)
   1204a:	f007 fb28 	bl	1969e <printk>
	err = bt_pwmService_init(&service_callbacks);
   1204e:	481d      	ldr	r0, [pc, #116]	; (120c4 <main+0xc0>)
   12050:	f000 f852 	bl	120f8 <bt_pwmService_init>
	if (err) {
   12054:	4601      	mov	r1, r0
   12056:	b108      	cbz	r0, 1205c <main+0x58>
		printk("Failed to init PWM service (err:%d)\n", err);
   12058:	481b      	ldr	r0, [pc, #108]	; (120c8 <main+0xc4>)
   1205a:	e7db      	b.n	12014 <main+0x10>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1205c:	4d1b      	ldr	r5, [pc, #108]	; (120cc <main+0xc8>)
   1205e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12060:	ac03      	add	r4, sp, #12
   12062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12064:	682b      	ldr	r3, [r5, #0]
   12066:	6023      	str	r3, [r4, #0]
   12068:	2301      	movs	r3, #1
   1206a:	9300      	str	r3, [sp, #0]
   1206c:	4918      	ldr	r1, [pc, #96]	; (120d0 <main+0xcc>)
   1206e:	4b19      	ldr	r3, [pc, #100]	; (120d4 <main+0xd0>)
   12070:	2202      	movs	r2, #2
   12072:	a803      	add	r0, sp, #12
   12074:	f002 fe24 	bl	14cc0 <bt_le_adv_start>
	if (err) {
   12078:	4604      	mov	r4, r0
   1207a:	b110      	cbz	r0, 12082 <main+0x7e>
		printk("Advertising failed to start (err %d)\n", err);
   1207c:	4601      	mov	r1, r0
   1207e:	4816      	ldr	r0, [pc, #88]	; (120d8 <main+0xd4>)
   12080:	e7c8      	b.n	12014 <main+0x10>
	printk("Advertising successfully started\n");
   12082:	4816      	ldr	r0, [pc, #88]	; (120dc <main+0xd8>)
   12084:	f007 fb0b 	bl	1969e <printk>
		dk_set_led(RUN_STATUS_LED, (++blinkStatus) % 2);
   12088:	3401      	adds	r4, #1
   1208a:	f004 0101 	and.w	r1, r4, #1
   1208e:	bf48      	it	mi
   12090:	4249      	negmi	r1, r1
   12092:	2000      	movs	r0, #0
   12094:	f005 fa82 	bl	1759c <dk_set_led>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   12098:	2100      	movs	r1, #0
   1209a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1209e:	f006 ff15 	bl	18ecc <z_impl_k_sleep>
	for (;;) {
   120a2:	e7f1      	b.n	12088 <main+0x84>
   120a4:	0001d535 	.word	0x0001d535
   120a8:	0001d551 	.word	0x0001d551
   120ac:	0001d572 	.word	0x0001d572
   120b0:	200023d8 	.word	0x200023d8
   120b4:	0001d578 	.word	0x0001d578
   120b8:	20000500 	.word	0x20000500
   120bc:	0001d596 	.word	0x0001d596
   120c0:	0001d5b7 	.word	0x0001d5b7
   120c4:	20000514 	.word	0x20000514
   120c8:	0001d5ce 	.word	0x0001d5ce
   120cc:	0001d040 	.word	0x0001d040
   120d0:	0001d0a8 	.word	0x0001d0a8
   120d4:	0001d0b8 	.word	0x0001d0b8
   120d8:	0001d5f3 	.word	0x0001d5f3
   120dc:	0001d619 	.word	0x0001d619

000120e0 <writeDuty>:
#include <bluetooth/uuid.h>
#include <bluetooth/gatt.h>

static struct bt_pwmService_cb pwmService_cb;

static ssize_t writeDuty(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf, uint16_t len, uint16_t offset, uint8_t flags){
   120e0:	b510      	push	{r4, lr}
   120e2:	461c      	mov	r4, r3
    if(pwmService_cb.pwm_cb){
   120e4:	4b03      	ldr	r3, [pc, #12]	; (120f4 <writeDuty+0x14>)
   120e6:	681b      	ldr	r3, [r3, #0]
   120e8:	b10b      	cbz	r3, 120ee <writeDuty+0xe>
        pwmService_cb.pwm_cb(*(uint32_t *)buf);
   120ea:	6810      	ldr	r0, [r2, #0]
   120ec:	4798      	blx	r3
    }
    return len;
}
   120ee:	4620      	mov	r0, r4
   120f0:	bd10      	pop	{r4, pc}
   120f2:	bf00      	nop
   120f4:	200023dc 	.word	0x200023dc

000120f8 <bt_pwmService_init>:
BT_GATT_PRIMARY_SERVICE(BT_UUID_SERVICE),
BT_GATT_CHARACTERISTIC(BT_UUID_PWM, BT_GATT_CHRC_WRITE, BT_GATT_PERM_WRITE, NULL, writeDuty, NULL),
);

int bt_pwmService_init(struct bt_pwmService_cb *callbacks){
    if (callbacks){
   120f8:	b110      	cbz	r0, 12100 <bt_pwmService_init+0x8>
        pwmService_cb.pwm_cb = callbacks->pwm_cb;
   120fa:	4b02      	ldr	r3, [pc, #8]	; (12104 <bt_pwmService_init+0xc>)
   120fc:	6802      	ldr	r2, [r0, #0]
   120fe:	601a      	str	r2, [r3, #0]
    }
    return 0;
}
   12100:	2000      	movs	r0, #0
   12102:	4770      	bx	lr
   12104:	200023dc 	.word	0x200023dc

00012108 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   12108:	680b      	ldr	r3, [r1, #0]
   1210a:	3301      	adds	r3, #1
   1210c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1210e:	4b01      	ldr	r3, [pc, #4]	; (12114 <char_out+0xc>)
   12110:	681b      	ldr	r3, [r3, #0]
   12112:	4718      	bx	r3
   12114:	20000520 	.word	0x20000520

00012118 <__printk_hook_install>:
	_char_out = fn;
   12118:	4b01      	ldr	r3, [pc, #4]	; (12120 <__printk_hook_install+0x8>)
   1211a:	6018      	str	r0, [r3, #0]
}
   1211c:	4770      	bx	lr
   1211e:	bf00      	nop
   12120:	20000520 	.word	0x20000520

00012124 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   12124:	b507      	push	{r0, r1, r2, lr}
   12126:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   12128:	2100      	movs	r1, #0
{
   1212a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1212c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   1212e:	4803      	ldr	r0, [pc, #12]	; (1213c <vprintk+0x18>)
   12130:	a901      	add	r1, sp, #4
   12132:	f000 fa43 	bl	125bc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   12136:	b003      	add	sp, #12
   12138:	f85d fb04 	ldr.w	pc, [sp], #4
   1213c:	00012109 	.word	0x00012109

00012140 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12144:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12148:	f019 0808 	ands.w	r8, r9, #8
{
   1214c:	4604      	mov	r4, r0
   1214e:	4693      	mov	fp, r2
	if (processing) {
   12150:	d00d      	beq.n	1216e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   12152:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12154:	bf0c      	ite	eq
   12156:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1215a:	f049 0920 	orrne.w	r9, r9, #32
   1215e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12162:	f38b 8811 	msr	BASEPRI, fp
   12166:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1216a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1216e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   12172:	2902      	cmp	r1, #2
   12174:	d107      	bne.n	12186 <process_event+0x46>
			evt = process_recheck(mgr);
   12176:	4620      	mov	r0, r4
   12178:	f007 fa9e 	bl	196b8 <process_recheck>
		if (evt == EVT_NOP) {
   1217c:	2800      	cmp	r0, #0
   1217e:	d0f0      	beq.n	12162 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   12180:	2801      	cmp	r0, #1
   12182:	8b23      	ldrh	r3, [r4, #24]
   12184:	d150      	bne.n	12228 <process_event+0xe8>
			res = mgr->last_res;
   12186:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12188:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   1218a:	2f00      	cmp	r7, #0
   1218c:	da15      	bge.n	121ba <process_event+0x7a>
		*clients = mgr->clients;
   1218e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12190:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   12194:	e9c4 8800 	strd	r8, r8, [r4]
   12198:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1219c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1219e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   121a0:	8b21      	ldrh	r1, [r4, #24]
   121a2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   121a6:	45ca      	cmp	sl, r9
   121a8:	d002      	beq.n	121b0 <process_event+0x70>
		if (do_monitors
   121aa:	68a3      	ldr	r3, [r4, #8]
   121ac:	2b00      	cmp	r3, #0
   121ae:	d15c      	bne.n	1226a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   121b0:	b90d      	cbnz	r5, 121b6 <process_event+0x76>
		    || (transit != NULL)) {
   121b2:	2e00      	cmp	r6, #0
   121b4:	d074      	beq.n	122a0 <process_event+0x160>
   121b6:	2300      	movs	r3, #0
   121b8:	e058      	b.n	1226c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   121ba:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   121be:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   121c0:	2a01      	cmp	r2, #1
   121c2:	d820      	bhi.n	12206 <process_event+0xc6>
		*clients = mgr->clients;
   121c4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   121c8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   121ca:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   121cc:	b289      	uxth	r1, r1
	list->tail = NULL;
   121ce:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   121d2:	d10c      	bne.n	121ee <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   121d4:	2d00      	cmp	r5, #0
   121d6:	462b      	mov	r3, r5
   121d8:	bf38      	it	cc
   121da:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   121dc:	b12b      	cbz	r3, 121ea <process_event+0xaa>
				mgr->refs += 1U;
   121de:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	3201      	adds	r2, #1
   121e4:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   121e6:	2b00      	cmp	r3, #0
   121e8:	d1f8      	bne.n	121dc <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   121ea:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   121ee:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   121f0:	4620      	mov	r0, r4
   121f2:	f007 fa61 	bl	196b8 <process_recheck>
   121f6:	4606      	mov	r6, r0
   121f8:	2800      	cmp	r0, #0
   121fa:	d0d1      	beq.n	121a0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   121fc:	8b23      	ldrh	r3, [r4, #24]
   121fe:	f043 0320 	orr.w	r3, r3, #32
   12202:	8323      	strh	r3, [r4, #24]
   12204:	e7cb      	b.n	1219e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12206:	2b04      	cmp	r3, #4
   12208:	d10c      	bne.n	12224 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1220a:	f021 0107 	bic.w	r1, r1, #7
   1220e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12210:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12212:	4620      	mov	r0, r4
   12214:	f007 fa50 	bl	196b8 <process_recheck>
   12218:	4605      	mov	r5, r0
   1221a:	2800      	cmp	r0, #0
   1221c:	d0bf      	beq.n	1219e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1221e:	f041 0120 	orr.w	r1, r1, #32
   12222:	8321      	strh	r1, [r4, #24]
   12224:	2500      	movs	r5, #0
   12226:	e7ba      	b.n	1219e <process_event+0x5e>
		} else if (evt == EVT_START) {
   12228:	2803      	cmp	r0, #3
   1222a:	d109      	bne.n	12240 <process_event+0x100>
			transit = mgr->transitions->start;
   1222c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1222e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   12232:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12234:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12238:	8323      	strh	r3, [r4, #24]
}
   1223a:	2500      	movs	r5, #0
		res = 0;
   1223c:	462f      	mov	r7, r5
   1223e:	e7af      	b.n	121a0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   12240:	2804      	cmp	r0, #4
   12242:	d106      	bne.n	12252 <process_event+0x112>
			transit = mgr->transitions->stop;
   12244:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12246:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   1224a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1224c:	f043 0304 	orr.w	r3, r3, #4
   12250:	e7f2      	b.n	12238 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   12252:	2805      	cmp	r0, #5
   12254:	d106      	bne.n	12264 <process_event+0x124>
			transit = mgr->transitions->reset;
   12256:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12258:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   1225c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1225e:	f043 0305 	orr.w	r3, r3, #5
   12262:	e7e9      	b.n	12238 <process_event+0xf8>
   12264:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   12266:	462e      	mov	r6, r5
   12268:	e7e8      	b.n	1223c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   1226a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1226c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12270:	8321      	strh	r1, [r4, #24]
   12272:	f38b 8811 	msr	BASEPRI, fp
   12276:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1227a:	bb03      	cbnz	r3, 122be <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   1227c:	2d00      	cmp	r5, #0
   1227e:	d133      	bne.n	122e8 <process_event+0x1a8>
			if (transit != NULL) {
   12280:	b116      	cbz	r6, 12288 <process_event+0x148>
				transit(mgr, transition_complete);
   12282:	4921      	ldr	r1, [pc, #132]	; (12308 <process_event+0x1c8>)
   12284:	4620      	mov	r0, r4
   12286:	47b0      	blx	r6
	__asm__ volatile(
   12288:	f04f 0340 	mov.w	r3, #64	; 0x40
   1228c:	f3ef 8b11 	mrs	fp, BASEPRI
   12290:	f383 8811 	msr	BASEPRI, r3
   12294:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12298:	8b23      	ldrh	r3, [r4, #24]
   1229a:	f023 0308 	bic.w	r3, r3, #8
   1229e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   122a0:	8b23      	ldrh	r3, [r4, #24]
   122a2:	06da      	lsls	r2, r3, #27
   122a4:	d528      	bpl.n	122f8 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   122a6:	f023 0310 	bic.w	r3, r3, #16
   122aa:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   122ac:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   122ae:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   122b2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   122b6:	2900      	cmp	r1, #0
   122b8:	f47f af5b 	bne.w	12172 <process_event+0x32>
out:
   122bc:	e751      	b.n	12162 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   122be:	68a1      	ldr	r1, [r4, #8]
   122c0:	2900      	cmp	r1, #0
   122c2:	d0db      	beq.n	1227c <process_event+0x13c>
	return node->next;
   122c4:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   122c6:	f8d1 b004 	ldr.w	fp, [r1, #4]
   122ca:	2b00      	cmp	r3, #0
   122cc:	bf38      	it	cc
   122ce:	2300      	movcc	r3, #0
   122d0:	4699      	mov	r9, r3
   122d2:	4652      	mov	r2, sl
   122d4:	463b      	mov	r3, r7
   122d6:	4620      	mov	r0, r4
   122d8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   122da:	f1b9 0f00 	cmp.w	r9, #0
   122de:	d0cd      	beq.n	1227c <process_event+0x13c>
   122e0:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   122e4:	4649      	mov	r1, r9
   122e6:	e7ee      	b.n	122c6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   122e8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   122ea:	463b      	mov	r3, r7
   122ec:	4652      	mov	r2, sl
   122ee:	4620      	mov	r0, r4
   122f0:	682d      	ldr	r5, [r5, #0]
   122f2:	f007 f9fd 	bl	196f0 <notify_one>
   122f6:	e7c1      	b.n	1227c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   122f8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   122fc:	bf1e      	ittt	ne
   122fe:	f023 0320 	bicne.w	r3, r3, #32
   12302:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   12304:	2102      	movne	r1, #2
   12306:	e7d2      	b.n	122ae <process_event+0x16e>
   12308:	0001971d 	.word	0x0001971d

0001230c <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
   1230c:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
   1230e:	2200      	movs	r2, #0
   12310:	e9c0 2200 	strd	r2, r2, [r0]
   12314:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   12316:	784a      	ldrb	r2, [r1, #1]
   12318:	2a25      	cmp	r2, #37	; 0x25
{
   1231a:	4603      	mov	r3, r0
	if (*sp == '%') {
   1231c:	d033      	beq.n	12386 <extract_conversion+0x7a>
	++sp;
   1231e:	3101      	adds	r1, #1
   12320:	460c      	mov	r4, r1
		switch (*sp) {
   12322:	f811 2b01 	ldrb.w	r2, [r1], #1
   12326:	2a2b      	cmp	r2, #43	; 0x2b
   12328:	d03d      	beq.n	123a6 <extract_conversion+0x9a>
   1232a:	d82f      	bhi.n	1238c <extract_conversion+0x80>
   1232c:	2a20      	cmp	r2, #32
   1232e:	d03e      	beq.n	123ae <extract_conversion+0xa2>
   12330:	2a23      	cmp	r2, #35	; 0x23
   12332:	d040      	beq.n	123b6 <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
   12334:	781a      	ldrb	r2, [r3, #0]
   12336:	f002 0144 	and.w	r1, r2, #68	; 0x44
   1233a:	2944      	cmp	r1, #68	; 0x44
   1233c:	d102      	bne.n	12344 <extract_conversion+0x38>
		conv->flag_zero = false;
   1233e:	f36f 1286 	bfc	r2, #6, #1
   12342:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
   12344:	7822      	ldrb	r2, [r4, #0]
   12346:	2a2a      	cmp	r2, #42	; 0x2a
   12348:	d14c      	bne.n	123e4 <extract_conversion+0xd8>
		conv->width_present = true;
   1234a:	881a      	ldrh	r2, [r3, #0]
   1234c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
   12350:	1c60      	adds	r0, r4, #1
   12352:	801a      	strh	r2, [r3, #0]
	if (*sp != '.') {
   12354:	7802      	ldrb	r2, [r0, #0]
   12356:	2a2e      	cmp	r2, #46	; 0x2e
   12358:	d14f      	bne.n	123fa <extract_conversion+0xee>
	if (*sp == '*') {
   1235a:	7842      	ldrb	r2, [r0, #1]
   1235c:	2a2a      	cmp	r2, #42	; 0x2a
   1235e:	d045      	beq.n	123ec <extract_conversion+0xe0>
   12360:	3001      	adds	r0, #1
	const char *sp = *str;
   12362:	4605      	mov	r5, r0
	size_t val = 0;
   12364:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12366:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12368:	4601      	mov	r1, r0
   1236a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1236e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12372:	2e09      	cmp	r6, #9
   12374:	d953      	bls.n	1241e <extract_conversion+0x112>
	if (sp != wp) {
   12376:	42a8      	cmp	r0, r5
		conv->prec_present = true;
   12378:	bf1f      	itttt	ne
   1237a:	7859      	ldrbne	r1, [r3, #1]
		conv->prec_value = prec;
   1237c:	609a      	strne	r2, [r3, #8]
		conv->prec_present = true;
   1237e:	f041 0102 	orrne.w	r1, r1, #2
   12382:	7059      	strbne	r1, [r3, #1]
		if (prec != conv->prec_value) {
   12384:	e039      	b.n	123fa <extract_conversion+0xee>
		conv->specifier = *sp++;
   12386:	1c88      	adds	r0, r1, #2
   12388:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   1238a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
   1238c:	2a2d      	cmp	r2, #45	; 0x2d
   1238e:	d005      	beq.n	1239c <extract_conversion+0x90>
   12390:	2a30      	cmp	r2, #48	; 0x30
   12392:	d1cf      	bne.n	12334 <extract_conversion+0x28>
			conv->flag_zero = true;
   12394:	781a      	ldrb	r2, [r3, #0]
   12396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1239a:	e002      	b.n	123a2 <extract_conversion+0x96>
			conv->flag_dash = true;
   1239c:	781a      	ldrb	r2, [r3, #0]
   1239e:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
   123a2:	701a      	strb	r2, [r3, #0]
			break;
   123a4:	e7bc      	b.n	12320 <extract_conversion+0x14>
			conv->flag_plus = true;
   123a6:	781a      	ldrb	r2, [r3, #0]
   123a8:	f042 0208 	orr.w	r2, r2, #8
   123ac:	e7f9      	b.n	123a2 <extract_conversion+0x96>
			conv->flag_space = true;
   123ae:	781a      	ldrb	r2, [r3, #0]
   123b0:	f042 0210 	orr.w	r2, r2, #16
   123b4:	e7f5      	b.n	123a2 <extract_conversion+0x96>
			conv->flag_hash = true;
   123b6:	781a      	ldrb	r2, [r3, #0]
   123b8:	f042 0220 	orr.w	r2, r2, #32
   123bc:	e7f1      	b.n	123a2 <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
   123be:	fb07 5202 	mla	r2, r7, r2, r5
   123c2:	3a30      	subs	r2, #48	; 0x30
   123c4:	4608      	mov	r0, r1
   123c6:	4601      	mov	r1, r0
   123c8:	f811 5b01 	ldrb.w	r5, [r1], #1
   123cc:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   123d0:	2e09      	cmp	r6, #9
   123d2:	d9f4      	bls.n	123be <extract_conversion+0xb2>
	if (sp != wp) {
   123d4:	4284      	cmp	r4, r0
		conv->width_present = true;
   123d6:	bf1f      	itttt	ne
   123d8:	7819      	ldrbne	r1, [r3, #0]
		conv->width_value = width;
   123da:	605a      	strne	r2, [r3, #4]
		conv->width_present = true;
   123dc:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
   123e0:	7019      	strbne	r1, [r3, #0]
		if (width != conv->width_value) {
   123e2:	e7b7      	b.n	12354 <extract_conversion+0x48>
   123e4:	4620      	mov	r0, r4
	size_t val = 0;
   123e6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   123e8:	270a      	movs	r7, #10
   123ea:	e7ec      	b.n	123c6 <extract_conversion+0xba>
		conv->prec_present = true;
   123ec:	785a      	ldrb	r2, [r3, #1]
   123ee:	f022 0206 	bic.w	r2, r2, #6
   123f2:	f042 0206 	orr.w	r2, r2, #6
   123f6:	705a      	strb	r2, [r3, #1]
		return ++sp;
   123f8:	3002      	adds	r0, #2
	switch (*sp) {
   123fa:	4601      	mov	r1, r0
   123fc:	f811 4b01 	ldrb.w	r4, [r1], #1
   12400:	2c6c      	cmp	r4, #108	; 0x6c
   12402:	d03c      	beq.n	1247e <extract_conversion+0x172>
   12404:	d810      	bhi.n	12428 <extract_conversion+0x11c>
   12406:	2c68      	cmp	r4, #104	; 0x68
   12408:	d015      	beq.n	12436 <extract_conversion+0x12a>
   1240a:	2c6a      	cmp	r4, #106	; 0x6a
   1240c:	d03f      	beq.n	1248e <extract_conversion+0x182>
   1240e:	2c4c      	cmp	r4, #76	; 0x4c
   12410:	d042      	beq.n	12498 <extract_conversion+0x18c>
		conv->length_mod = LENGTH_NONE;
   12412:	785a      	ldrb	r2, [r3, #1]
   12414:	f36f 02c6 	bfc	r2, #3, #4
   12418:	705a      	strb	r2, [r3, #1]
		break;
   1241a:	4601      	mov	r1, r0
   1241c:	e014      	b.n	12448 <extract_conversion+0x13c>
		val = 10U * val + *sp++ - '0';
   1241e:	fb07 4202 	mla	r2, r7, r2, r4
   12422:	3a30      	subs	r2, #48	; 0x30
   12424:	4608      	mov	r0, r1
   12426:	e79f      	b.n	12368 <extract_conversion+0x5c>
	switch (*sp) {
   12428:	2c74      	cmp	r4, #116	; 0x74
   1242a:	785a      	ldrb	r2, [r3, #1]
   1242c:	d032      	beq.n	12494 <extract_conversion+0x188>
   1242e:	2c7a      	cmp	r4, #122	; 0x7a
   12430:	d1ef      	bne.n	12412 <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
   12432:	2006      	movs	r0, #6
   12434:	e01f      	b.n	12476 <extract_conversion+0x16a>
		if (*++sp == 'h') {
   12436:	7842      	ldrb	r2, [r0, #1]
   12438:	2a68      	cmp	r2, #104	; 0x68
   1243a:	785a      	ldrb	r2, [r3, #1]
   1243c:	d11a      	bne.n	12474 <extract_conversion+0x168>
			conv->length_mod = LENGTH_HH;
   1243e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12440:	f361 02c6 	bfi	r2, r1, #3, #4
   12444:	705a      	strb	r2, [r3, #1]
			++sp;
   12446:	1c81      	adds	r1, r0, #2
	conv->specifier = *sp++;
   12448:	4608      	mov	r0, r1
   1244a:	f810 4b01 	ldrb.w	r4, [r0], #1
   1244e:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
   12450:	2c78      	cmp	r4, #120	; 0x78
   12452:	f200 80ac 	bhi.w	125ae <extract_conversion+0x2a2>
   12456:	2c57      	cmp	r4, #87	; 0x57
   12458:	d829      	bhi.n	124ae <extract_conversion+0x1a2>
   1245a:	2c41      	cmp	r4, #65	; 0x41
   1245c:	d003      	beq.n	12466 <extract_conversion+0x15a>
   1245e:	3c45      	subs	r4, #69	; 0x45
   12460:	2c02      	cmp	r4, #2
   12462:	f200 80a4 	bhi.w	125ae <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
   12466:	789a      	ldrb	r2, [r3, #2]
   12468:	2104      	movs	r1, #4
   1246a:	f361 0202 	bfi	r2, r1, #0, #3
   1246e:	709a      	strb	r2, [r3, #2]
			unsupported = true;
   12470:	2201      	movs	r2, #1
			break;
   12472:	e078      	b.n	12566 <extract_conversion+0x25a>
			conv->length_mod = LENGTH_H;
   12474:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
   12476:	f360 02c6 	bfi	r2, r0, #3, #4
   1247a:	705a      	strb	r2, [r3, #1]
   1247c:	e7e4      	b.n	12448 <extract_conversion+0x13c>
		if (*++sp == 'l') {
   1247e:	7842      	ldrb	r2, [r0, #1]
   12480:	2a6c      	cmp	r2, #108	; 0x6c
   12482:	785a      	ldrb	r2, [r3, #1]
   12484:	d101      	bne.n	1248a <extract_conversion+0x17e>
			conv->length_mod = LENGTH_LL;
   12486:	2104      	movs	r1, #4
   12488:	e7da      	b.n	12440 <extract_conversion+0x134>
			conv->length_mod = LENGTH_L;
   1248a:	2003      	movs	r0, #3
   1248c:	e7f3      	b.n	12476 <extract_conversion+0x16a>
		conv->length_mod = LENGTH_J;
   1248e:	785a      	ldrb	r2, [r3, #1]
   12490:	2005      	movs	r0, #5
   12492:	e7f0      	b.n	12476 <extract_conversion+0x16a>
		conv->length_mod = LENGTH_T;
   12494:	2007      	movs	r0, #7
   12496:	e7ee      	b.n	12476 <extract_conversion+0x16a>
		conv->unsupported = true;
   12498:	881a      	ldrh	r2, [r3, #0]
   1249a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1249e:	f022 0202 	bic.w	r2, r2, #2
   124a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   124a6:	f042 0202 	orr.w	r2, r2, #2
   124aa:	801a      	strh	r2, [r3, #0]
		break;
   124ac:	e7cc      	b.n	12448 <extract_conversion+0x13c>
   124ae:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
   124b2:	2a20      	cmp	r2, #32
   124b4:	d87b      	bhi.n	125ae <extract_conversion+0x2a2>
   124b6:	a101      	add	r1, pc, #4	; (adr r1, 124bc <extract_conversion+0x1b0>)
   124b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   124bc:	00012577 	.word	0x00012577
   124c0:	000125af 	.word	0x000125af
   124c4:	000125af 	.word	0x000125af
   124c8:	000125af 	.word	0x000125af
   124cc:	000125af 	.word	0x000125af
   124d0:	000125af 	.word	0x000125af
   124d4:	000125af 	.word	0x000125af
   124d8:	000125af 	.word	0x000125af
   124dc:	000125af 	.word	0x000125af
   124e0:	00012467 	.word	0x00012467
   124e4:	000125af 	.word	0x000125af
   124e8:	00012577 	.word	0x00012577
   124ec:	00012541 	.word	0x00012541
   124f0:	00012467 	.word	0x00012467
   124f4:	00012467 	.word	0x00012467
   124f8:	00012467 	.word	0x00012467
   124fc:	000125af 	.word	0x000125af
   12500:	00012541 	.word	0x00012541
   12504:	000125af 	.word	0x000125af
   12508:	000125af 	.word	0x000125af
   1250c:	000125af 	.word	0x000125af
   12510:	000125af 	.word	0x000125af
   12514:	0001257d 	.word	0x0001257d
   12518:	00012577 	.word	0x00012577
   1251c:	00012597 	.word	0x00012597
   12520:	000125af 	.word	0x000125af
   12524:	000125af 	.word	0x000125af
   12528:	00012597 	.word	0x00012597
   1252c:	000125af 	.word	0x000125af
   12530:	00012577 	.word	0x00012577
   12534:	000125af 	.word	0x000125af
   12538:	000125af 	.word	0x000125af
   1253c:	00012577 	.word	0x00012577
		conv->specifier_cat = SPECIFIER_SINT;
   12540:	789a      	ldrb	r2, [r3, #2]
   12542:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
   12544:	f361 0202 	bfi	r2, r1, #0, #3
   12548:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1254a:	785a      	ldrb	r2, [r3, #1]
   1254c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12550:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
   12552:	bf02      	ittt	eq
   12554:	7819      	ldrbeq	r1, [r3, #0]
   12556:	f041 0101 	orreq.w	r1, r1, #1
   1255a:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
   1255c:	2c63      	cmp	r4, #99	; 0x63
   1255e:	d12a      	bne.n	125b6 <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12560:	3a00      	subs	r2, #0
   12562:	bf18      	it	ne
   12564:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
   12566:	7819      	ldrb	r1, [r3, #0]
   12568:	f3c1 0440 	ubfx	r4, r1, #1, #1
   1256c:	4322      	orrs	r2, r4
   1256e:	f362 0141 	bfi	r1, r2, #1, #1
   12572:	7019      	strb	r1, [r3, #0]
	return sp;
   12574:	e709      	b.n	1238a <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
   12576:	789a      	ldrb	r2, [r3, #2]
   12578:	2102      	movs	r1, #2
   1257a:	e7e3      	b.n	12544 <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
   1257c:	789a      	ldrb	r2, [r3, #2]
   1257e:	2103      	movs	r1, #3
   12580:	f361 0202 	bfi	r2, r1, #0, #3
   12584:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   12586:	785a      	ldrb	r2, [r3, #1]
   12588:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1258c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
   12590:	424a      	negs	r2, r1
   12592:	414a      	adcs	r2, r1
   12594:	e7e7      	b.n	12566 <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
   12596:	789a      	ldrb	r2, [r3, #2]
   12598:	2103      	movs	r1, #3
   1259a:	f361 0202 	bfi	r2, r1, #0, #3
   1259e:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
   125a0:	785a      	ldrb	r2, [r3, #1]
   125a2:	f012 0f78 	tst.w	r2, #120	; 0x78
   125a6:	bf14      	ite	ne
   125a8:	2201      	movne	r2, #1
   125aa:	2200      	moveq	r2, #0
   125ac:	e7db      	b.n	12566 <extract_conversion+0x25a>
		conv->invalid = true;
   125ae:	781a      	ldrb	r2, [r3, #0]
   125b0:	f042 0201 	orr.w	r2, r2, #1
   125b4:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
   125b6:	2200      	movs	r2, #0
   125b8:	e7d5      	b.n	12566 <extract_conversion+0x25a>
   125ba:	bf00      	nop

000125bc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   125bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125c0:	4680      	mov	r8, r0
   125c2:	b08f      	sub	sp, #60	; 0x3c
   125c4:	4689      	mov	r9, r1
   125c6:	4692      	mov	sl, r2
   125c8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   125ca:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   125cc:	f89a 0000 	ldrb.w	r0, [sl]
   125d0:	b908      	cbnz	r0, 125d6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   125d2:	4628      	mov	r0, r5
   125d4:	e10b      	b.n	127ee <cbvprintf+0x232>
		if (*fp != '%') {
   125d6:	2825      	cmp	r0, #37	; 0x25
   125d8:	d009      	beq.n	125ee <cbvprintf+0x32>
			OUTC(*fp++);
   125da:	4649      	mov	r1, r9
   125dc:	47c0      	blx	r8
   125de:	2800      	cmp	r0, #0
   125e0:	f2c0 8105 	blt.w	127ee <cbvprintf+0x232>
   125e4:	f10a 0301 	add.w	r3, sl, #1
   125e8:	9302      	str	r3, [sp, #8]
			OUTC('%');
   125ea:	3501      	adds	r5, #1
			break;
   125ec:	e059      	b.n	126a2 <cbvprintf+0xe6>
		fp = extract_conversion(&conv, sp);
   125ee:	4651      	mov	r1, sl
   125f0:	a805      	add	r0, sp, #20
   125f2:	f7ff fe8b 	bl	1230c <extract_conversion>
		if (conv.width_star) {
   125f6:	f89d 3015 	ldrb.w	r3, [sp, #21]
		fp = extract_conversion(&conv, sp);
   125fa:	9002      	str	r0, [sp, #8]
		if (conv.width_star) {
   125fc:	07d9      	lsls	r1, r3, #31
   125fe:	d51a      	bpl.n	12636 <cbvprintf+0x7a>
			width = va_arg(ap, int);
   12600:	f854 7b04 	ldr.w	r7, [r4], #4
			if (width < 0) {
   12604:	2f00      	cmp	r7, #0
   12606:	da06      	bge.n	12616 <cbvprintf+0x5a>
				conv.flag_dash = true;
   12608:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1260c:	f042 0204 	orr.w	r2, r2, #4
   12610:	f88d 2014 	strb.w	r2, [sp, #20]
				width = -width;
   12614:	427f      	negs	r7, r7
		if (conv.prec_star) {
   12616:	075a      	lsls	r2, r3, #29
   12618:	d515      	bpl.n	12646 <cbvprintf+0x8a>
			int arg = va_arg(ap, int);
   1261a:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   1261e:	f1bb 0f00 	cmp.w	fp, #0
   12622:	da14      	bge.n	1264e <cbvprintf+0x92>
				conv.prec_present = false;
   12624:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12628:	f36f 0341 	bfc	r3, #1, #1
   1262c:	f88d 3015 	strb.w	r3, [sp, #21]
		int precision = -1;
   12630:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   12634:	e00b      	b.n	1264e <cbvprintf+0x92>
		} else if (conv.width_present) {
   12636:	f99d 2014 	ldrsb.w	r2, [sp, #20]
   1263a:	2a00      	cmp	r2, #0
			width = conv.width_value;
   1263c:	bfb4      	ite	lt
   1263e:	9f06      	ldrlt	r7, [sp, #24]
		int width = -1;
   12640:	f04f 37ff 	movge.w	r7, #4294967295	; 0xffffffff
   12644:	e7e7      	b.n	12616 <cbvprintf+0x5a>
		} else if (conv.prec_present) {
   12646:	079b      	lsls	r3, r3, #30
   12648:	d5f2      	bpl.n	12630 <cbvprintf+0x74>
			precision = conv.prec_value;
   1264a:	f8dd b01c 	ldr.w	fp, [sp, #28]
			= (enum specifier_cat_enum)conv.specifier_cat;
   1264e:	f89d 3016 	ldrb.w	r3, [sp, #22]
			= (enum length_mod_enum)conv.length_mod;
   12652:	f89d c015 	ldrb.w	ip, [sp, #21]
		enum specifier_cat_enum specifier_cat
   12656:	f003 0307 	and.w	r3, r3, #7
		conv.pad0_value = 0;
   1265a:	2100      	movs	r1, #0
		if (specifier_cat == SPECIFIER_SINT) {
   1265c:	2b01      	cmp	r3, #1
		conv.pad0_pre_exp = 0;
   1265e:	e9cd 1106 	strd	r1, r1, [sp, #24]
			= (enum length_mod_enum)conv.length_mod;
   12662:	f3cc 0cc3 	ubfx	ip, ip, #3, #4
		union argument_value value = (union argument_value){
   12666:	468e      	mov	lr, r1
		if (specifier_cat == SPECIFIER_SINT) {
   12668:	d130      	bne.n	126cc <cbvprintf+0x110>
			switch (length_mod) {
   1266a:	f1ac 0303 	sub.w	r3, ip, #3
   1266e:	2b04      	cmp	r3, #4
   12670:	d81a      	bhi.n	126a8 <cbvprintf+0xec>
   12672:	e8df f003 	tbb	[pc, r3]
   12676:	3b03      	.short	0x3b03
   12678:	193b      	.short	0x193b
   1267a:	19          	.byte	0x19
   1267b:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
   1267c:	f854 1b04 	ldr.w	r1, [r4], #4
   12680:	17cb      	asrs	r3, r1, #31
				value.sint = (short)value.sint;
   12682:	469e      	mov	lr, r3
		if (conv.invalid || conv.unsupported) {
   12684:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12688:	f013 0603 	ands.w	r6, r3, #3
   1268c:	d050      	beq.n	12730 <cbvprintf+0x174>
			OUTS(sp, fp);
   1268e:	9b02      	ldr	r3, [sp, #8]
   12690:	4652      	mov	r2, sl
   12692:	4649      	mov	r1, r9
   12694:	4640      	mov	r0, r8
   12696:	f007 fb5f 	bl	19d58 <outs>
   1269a:	2800      	cmp	r0, #0
   1269c:	f2c0 80a7 	blt.w	127ee <cbvprintf+0x232>
   126a0:	4405      	add	r5, r0
			OUTS(bps, bpe);
   126a2:	f8dd a008 	ldr.w	sl, [sp, #8]
   126a6:	e791      	b.n	125cc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   126a8:	f854 1b04 	ldr.w	r1, [r4], #4
			if (length_mod == LENGTH_HH) {
   126ac:	f1bc 0f01 	cmp.w	ip, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   126b0:	ea4f 73e1 	mov.w	r3, r1, asr #31
				value.sint =
   126b4:	469e      	mov	lr, r3
			if (length_mod == LENGTH_HH) {
   126b6:	d102      	bne.n	126be <cbvprintf+0x102>
				value.uint = (unsigned char)value.uint;
   126b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   126bc:	e013      	b.n	126e6 <cbvprintf+0x12a>
			} else if (length_mod == LENGTH_H) {
   126be:	f1bc 0f02 	cmp.w	ip, #2
   126c2:	d1df      	bne.n	12684 <cbvprintf+0xc8>
				value.sint = (short)value.sint;
   126c4:	b20a      	sxth	r2, r1
   126c6:	17d3      	asrs	r3, r2, #31
   126c8:	4611      	mov	r1, r2
   126ca:	e7da      	b.n	12682 <cbvprintf+0xc6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   126cc:	2b02      	cmp	r3, #2
   126ce:	d122      	bne.n	12716 <cbvprintf+0x15a>
			switch (length_mod) {
   126d0:	f1ac 0303 	sub.w	r3, ip, #3
   126d4:	2b04      	cmp	r3, #4
   126d6:	d812      	bhi.n	126fe <cbvprintf+0x142>
   126d8:	e8df f003 	tbb	[pc, r3]
   126dc:	11080803 	.word	0x11080803
   126e0:	11          	.byte	0x11
   126e1:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
   126e2:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint = (unsigned short)value.uint;
   126e6:	f04f 0e00 	mov.w	lr, #0
   126ea:	e7cb      	b.n	12684 <cbvprintf+0xc8>
					(uint_value_type)va_arg(ap,
   126ec:	1de3      	adds	r3, r4, #7
   126ee:	f023 0307 	bic.w	r3, r3, #7
   126f2:	461c      	mov	r4, r3
				value.uint =
   126f4:	f8d3 e004 	ldr.w	lr, [r3, #4]
   126f8:	f854 1b08 	ldr.w	r1, [r4], #8
				break;
   126fc:	e7c2      	b.n	12684 <cbvprintf+0xc8>
			if (length_mod == LENGTH_HH) {
   126fe:	f1bc 0f01 	cmp.w	ip, #1
					(uint_value_type)va_arg(ap, size_t);
   12702:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint =
   12706:	f04f 0e00 	mov.w	lr, #0
			if (length_mod == LENGTH_HH) {
   1270a:	d0d5      	beq.n	126b8 <cbvprintf+0xfc>
			} else if (length_mod == LENGTH_H) {
   1270c:	f1bc 0f02 	cmp.w	ip, #2
   12710:	d1b8      	bne.n	12684 <cbvprintf+0xc8>
				value.uint = (unsigned short)value.uint;
   12712:	b289      	uxth	r1, r1
   12714:	e7e7      	b.n	126e6 <cbvprintf+0x12a>
		} else if (specifier_cat == SPECIFIER_FP) {
   12716:	2b04      	cmp	r3, #4
   12718:	d105      	bne.n	12726 <cbvprintf+0x16a>
			if (length_mod == LENGTH_UPPER_L) {
   1271a:	3407      	adds	r4, #7
   1271c:	f024 0407 	bic.w	r4, r4, #7
   12720:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   12724:	e7d0      	b.n	126c8 <cbvprintf+0x10c>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12726:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
   12728:	bf08      	it	eq
   1272a:	f854 1b04 	ldreq.w	r1, [r4], #4
   1272e:	e7a9      	b.n	12684 <cbvprintf+0xc8>
		switch (conv.specifier) {
   12730:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12734:	2878      	cmp	r0, #120	; 0x78
   12736:	d8b4      	bhi.n	126a2 <cbvprintf+0xe6>
   12738:	2862      	cmp	r0, #98	; 0x62
   1273a:	d821      	bhi.n	12780 <cbvprintf+0x1c4>
   1273c:	2825      	cmp	r0, #37	; 0x25
   1273e:	d051      	beq.n	127e4 <cbvprintf+0x228>
   12740:	2858      	cmp	r0, #88	; 0x58
   12742:	d1ae      	bne.n	126a2 <cbvprintf+0xe6>
			bps = encode_uint(value.uint, &conv, buf, bpe);
   12744:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12748:	9300      	str	r3, [sp, #0]
   1274a:	4608      	mov	r0, r1
   1274c:	ab08      	add	r3, sp, #32
   1274e:	aa05      	add	r2, sp, #20
   12750:	4671      	mov	r1, lr
   12752:	f007 fab6 	bl	19cc2 <encode_uint>
   12756:	4682      	mov	sl, r0
			if (precision >= 0) {
   12758:	f1bb 0f00 	cmp.w	fp, #0
   1275c:	f10d 0136 	add.w	r1, sp, #54	; 0x36
   12760:	db0c      	blt.n	1277c <cbvprintf+0x1c0>
				conv.flag_zero = false;
   12762:	f89d 2014 	ldrb.w	r2, [sp, #20]
				size_t len = bpe - bps;
   12766:	eba1 030a 	sub.w	r3, r1, sl
				conv.flag_zero = false;
   1276a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1276e:	459b      	cmp	fp, r3
				conv.flag_zero = false;
   12770:	f88d 2014 	strb.w	r2, [sp, #20]
				if (len < (size_t)precision) {
   12774:	d902      	bls.n	1277c <cbvprintf+0x1c0>
					conv.pad0_value = precision - (int)len;
   12776:	ebab 0303 	sub.w	r3, fp, r3
   1277a:	9306      	str	r3, [sp, #24]
		const char *bpe = buf + sizeof(buf);
   1277c:	468b      	mov	fp, r1
   1277e:	e048      	b.n	12812 <cbvprintf+0x256>
   12780:	3863      	subs	r0, #99	; 0x63
   12782:	2815      	cmp	r0, #21
   12784:	d88d      	bhi.n	126a2 <cbvprintf+0xe6>
   12786:	a201      	add	r2, pc, #4	; (adr r2, 1278c <cbvprintf+0x1d0>)
   12788:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1278c:	0001281b 	.word	0x0001281b
   12790:	00012879 	.word	0x00012879
   12794:	000126a3 	.word	0x000126a3
   12798:	000126a3 	.word	0x000126a3
   1279c:	000126a3 	.word	0x000126a3
   127a0:	000126a3 	.word	0x000126a3
   127a4:	00012879 	.word	0x00012879
   127a8:	000126a3 	.word	0x000126a3
   127ac:	000126a3 	.word	0x000126a3
   127b0:	000126a3 	.word	0x000126a3
   127b4:	000126a3 	.word	0x000126a3
   127b8:	000128d3 	.word	0x000128d3
   127bc:	000128a1 	.word	0x000128a1
   127c0:	000128a5 	.word	0x000128a5
   127c4:	000126a3 	.word	0x000126a3
   127c8:	000126a3 	.word	0x000126a3
   127cc:	000127f5 	.word	0x000127f5
   127d0:	000126a3 	.word	0x000126a3
   127d4:	000128a1 	.word	0x000128a1
   127d8:	000126a3 	.word	0x000126a3
   127dc:	000126a3 	.word	0x000126a3
   127e0:	000128a1 	.word	0x000128a1
			OUTC('%');
   127e4:	4649      	mov	r1, r9
   127e6:	47c0      	blx	r8
   127e8:	2800      	cmp	r0, #0
   127ea:	f6bf aefe 	bge.w	125ea <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
   127ee:	b00f      	add	sp, #60	; 0x3c
   127f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = strlen(bps);
   127f4:	4608      	mov	r0, r1
			bps = (const char *)value.ptr;
   127f6:	468a      	mov	sl, r1
			size_t len = strlen(bps);
   127f8:	9103      	str	r1, [sp, #12]
   127fa:	f007 fd4e 	bl	1a29a <strlen>
			if ((precision >= 0)
   127fe:	f1bb 0f00 	cmp.w	fp, #0
   12802:	9903      	ldr	r1, [sp, #12]
   12804:	db02      	blt.n	1280c <cbvprintf+0x250>
   12806:	4558      	cmp	r0, fp
   12808:	bf28      	it	cs
   1280a:	4658      	movcs	r0, fp
			bpe = bps + len;
   1280c:	eb01 0b00 	add.w	fp, r1, r0
		char sign = 0;
   12810:	2600      	movs	r6, #0
		if (bps == NULL) {
   12812:	f1ba 0f00 	cmp.w	sl, #0
   12816:	d107      	bne.n	12828 <cbvprintf+0x26c>
   12818:	e743      	b.n	126a2 <cbvprintf+0xe6>
			buf[0] = value.uint;
   1281a:	f88d 1020 	strb.w	r1, [sp, #32]
			break;
   1281e:	2600      	movs	r6, #0
			bpe = buf + 1;
   12820:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
			bps = buf;
   12824:	f10d 0a20 	add.w	sl, sp, #32
		size_t nj_len = (bpe - bps);
   12828:	ebab 030a 	sub.w	r3, fp, sl
		if (sign != 0) {
   1282c:	b106      	cbz	r6, 12830 <cbvprintf+0x274>
			nj_len += 1U;
   1282e:	3301      	adds	r3, #1
		if (conv.altform_0c) {
   12830:	f89d 2016 	ldrb.w	r2, [sp, #22]
   12834:	06d0      	lsls	r0, r2, #27
   12836:	d567      	bpl.n	12908 <cbvprintf+0x34c>
			nj_len += 2U;
   12838:	3302      	adds	r3, #2
		if (conv.pad_fp) {
   1283a:	0652      	lsls	r2, r2, #25
		nj_len += conv.pad0_value;
   1283c:	9906      	ldr	r1, [sp, #24]
			nj_len += conv.pad0_pre_exp;
   1283e:	bf48      	it	mi
   12840:	9a07      	ldrmi	r2, [sp, #28]
		nj_len += conv.pad0_value;
   12842:	440b      	add	r3, r1
			nj_len += conv.pad0_pre_exp;
   12844:	bf48      	it	mi
   12846:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   12848:	2f00      	cmp	r7, #0
   1284a:	dd70      	ble.n	1292e <cbvprintf+0x372>
			if (!conv.flag_dash) {
   1284c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			width -= (int)nj_len;
   12850:	1aff      	subs	r7, r7, r3
			if (!conv.flag_dash) {
   12852:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12856:	9303      	str	r3, [sp, #12]
   12858:	0753      	lsls	r3, r2, #29
   1285a:	d468      	bmi.n	1292e <cbvprintf+0x372>
				if (conv.flag_zero) {
   1285c:	0650      	lsls	r0, r2, #25
   1285e:	f140 80a3 	bpl.w	129a8 <cbvprintf+0x3ec>
					if (sign != 0) {
   12862:	b13e      	cbz	r6, 12874 <cbvprintf+0x2b8>
						OUTC(sign);
   12864:	4649      	mov	r1, r9
   12866:	4630      	mov	r0, r6
   12868:	47c0      	blx	r8
   1286a:	2800      	cmp	r0, #0
   1286c:	dbbf      	blt.n	127ee <cbvprintf+0x232>
						sign = 0;
   1286e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   12870:	3501      	adds	r5, #1
						sign = 0;
   12872:	461e      	mov	r6, r3
					pad = '0';
   12874:	2330      	movs	r3, #48	; 0x30
   12876:	e098      	b.n	129aa <cbvprintf+0x3ee>
			if (conv.flag_plus) {
   12878:	071e      	lsls	r6, r3, #28
   1287a:	d40f      	bmi.n	1289c <cbvprintf+0x2e0>
				sign = ' ';
   1287c:	f013 0610 	ands.w	r6, r3, #16
   12880:	bf18      	it	ne
   12882:	2620      	movne	r6, #32
			if (value.sint < 0) {
   12884:	2900      	cmp	r1, #0
   12886:	f17e 0000 	sbcs.w	r0, lr, #0
   1288a:	f6bf af5b 	bge.w	12744 <cbvprintf+0x188>
				value.uint = -value.sint;
   1288e:	424a      	negs	r2, r1
   12890:	eb6e 034e 	sbc.w	r3, lr, lr, lsl #1
   12894:	4611      	mov	r1, r2
   12896:	469e      	mov	lr, r3
				sign = '-';
   12898:	262d      	movs	r6, #45	; 0x2d
   1289a:	e753      	b.n	12744 <cbvprintf+0x188>
				sign = '+';
   1289c:	262b      	movs	r6, #43	; 0x2b
   1289e:	e7f1      	b.n	12884 <cbvprintf+0x2c8>
		switch (conv.specifier) {
   128a0:	2600      	movs	r6, #0
   128a2:	e74f      	b.n	12744 <cbvprintf+0x188>
			if (value.ptr != NULL) {
   128a4:	b351      	cbz	r1, 128fc <cbvprintf+0x340>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   128a6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   128aa:	9300      	str	r3, [sp, #0]
   128ac:	4608      	mov	r0, r1
   128ae:	ab08      	add	r3, sp, #32
   128b0:	aa05      	add	r2, sp, #20
   128b2:	2100      	movs	r1, #0
   128b4:	f007 fa05 	bl	19cc2 <encode_uint>
				conv.altform_0c = true;
   128b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   128bc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   128c0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   128c4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   128c8:	4682      	mov	sl, r0
				conv.altform_0c = true;
   128ca:	f8ad 3016 	strh.w	r3, [sp, #22]
		char sign = 0;
   128ce:	2600      	movs	r6, #0
				goto prec_int_pad0;
   128d0:	e742      	b.n	12758 <cbvprintf+0x19c>
	switch ((enum length_mod_enum)conv->length_mod) {
   128d2:	f1bc 0f07 	cmp.w	ip, #7
   128d6:	f63f aee4 	bhi.w	126a2 <cbvprintf+0xe6>
   128da:	e8df f00c 	tbb	[pc, ip]
   128de:	040d      	.short	0x040d
   128e0:	08080d06 	.word	0x08080d06
   128e4:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   128e6:	700d      	strb	r5, [r1, #0]
		break;
   128e8:	e6db      	b.n	126a2 <cbvprintf+0xe6>
		*(short *)dp = (short)count;
   128ea:	800d      	strh	r5, [r1, #0]
		break;
   128ec:	e6d9      	b.n	126a2 <cbvprintf+0xe6>
		*(intmax_t *)dp = (intmax_t)count;
   128ee:	462a      	mov	r2, r5
   128f0:	17eb      	asrs	r3, r5, #31
   128f2:	e9c1 2300 	strd	r2, r3, [r1]
		break;
   128f6:	e6d4      	b.n	126a2 <cbvprintf+0xe6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   128f8:	600d      	str	r5, [r1, #0]
		break;
   128fa:	e6d2      	b.n	126a2 <cbvprintf+0xe6>
			bpe = bps + 5;
   128fc:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 129c0 <cbvprintf+0x404>
   12900:	460e      	mov	r6, r1
			bps = "(nil)";
   12902:	f1ab 0a05 	sub.w	sl, fp, #5
   12906:	e78f      	b.n	12828 <cbvprintf+0x26c>
		} else if (conv.altform_0) {
   12908:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1290a:	bf48      	it	mi
   1290c:	3301      	addmi	r3, #1
   1290e:	e794      	b.n	1283a <cbvprintf+0x27e>
					OUTC(pad);
   12910:	4618      	mov	r0, r3
   12912:	4649      	mov	r1, r9
   12914:	9303      	str	r3, [sp, #12]
   12916:	47c0      	blx	r8
   12918:	2800      	cmp	r0, #0
   1291a:	9b03      	ldr	r3, [sp, #12]
   1291c:	f6ff af67 	blt.w	127ee <cbvprintf+0x232>
				while (width-- > 0) {
   12920:	2f00      	cmp	r7, #0
   12922:	eba5 0107 	sub.w	r1, r5, r7
   12926:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   1292a:	dcf1      	bgt.n	12910 <cbvprintf+0x354>
   1292c:	460d      	mov	r5, r1
		if (sign != 0) {
   1292e:	b136      	cbz	r6, 1293e <cbvprintf+0x382>
			OUTC(sign);
   12930:	4649      	mov	r1, r9
   12932:	4630      	mov	r0, r6
   12934:	47c0      	blx	r8
   12936:	2800      	cmp	r0, #0
   12938:	f6ff af59 	blt.w	127ee <cbvprintf+0x232>
   1293c:	3501      	adds	r5, #1
			if (conv.altform_0c | conv.altform_0) {
   1293e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   12942:	06d9      	lsls	r1, r3, #27
   12944:	d401      	bmi.n	1294a <cbvprintf+0x38e>
   12946:	071a      	lsls	r2, r3, #28
   12948:	d506      	bpl.n	12958 <cbvprintf+0x39c>
				OUTC('0');
   1294a:	4649      	mov	r1, r9
   1294c:	2030      	movs	r0, #48	; 0x30
   1294e:	47c0      	blx	r8
   12950:	2800      	cmp	r0, #0
   12952:	f6ff af4c 	blt.w	127ee <cbvprintf+0x232>
   12956:	3501      	adds	r5, #1
			if (conv.altform_0c) {
   12958:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1295c:	06db      	lsls	r3, r3, #27
   1295e:	d507      	bpl.n	12970 <cbvprintf+0x3b4>
				OUTC(conv.specifier);
   12960:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12964:	4649      	mov	r1, r9
   12966:	47c0      	blx	r8
   12968:	2800      	cmp	r0, #0
   1296a:	f6ff af40 	blt.w	127ee <cbvprintf+0x232>
   1296e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12970:	9e06      	ldr	r6, [sp, #24]
   12972:	442e      	add	r6, r5
   12974:	1b73      	subs	r3, r6, r5
   12976:	2b00      	cmp	r3, #0
   12978:	dc19      	bgt.n	129ae <cbvprintf+0x3f2>
			OUTS(bps, bpe);
   1297a:	465b      	mov	r3, fp
   1297c:	4652      	mov	r2, sl
   1297e:	4649      	mov	r1, r9
   12980:	4640      	mov	r0, r8
   12982:	f007 f9e9 	bl	19d58 <outs>
   12986:	2800      	cmp	r0, #0
   12988:	f6ff af31 	blt.w	127ee <cbvprintf+0x232>
   1298c:	4405      	add	r5, r0
		while (width > 0) {
   1298e:	442f      	add	r7, r5
   12990:	1b7b      	subs	r3, r7, r5
   12992:	2b00      	cmp	r3, #0
   12994:	f77f ae85 	ble.w	126a2 <cbvprintf+0xe6>
			OUTC(' ');
   12998:	4649      	mov	r1, r9
   1299a:	2020      	movs	r0, #32
   1299c:	47c0      	blx	r8
   1299e:	2800      	cmp	r0, #0
   129a0:	f6ff af25 	blt.w	127ee <cbvprintf+0x232>
   129a4:	3501      	adds	r5, #1
			--width;
   129a6:	e7f3      	b.n	12990 <cbvprintf+0x3d4>
				char pad = ' ';
   129a8:	2320      	movs	r3, #32
   129aa:	443d      	add	r5, r7
   129ac:	e7b8      	b.n	12920 <cbvprintf+0x364>
				OUTC('0');
   129ae:	4649      	mov	r1, r9
   129b0:	2030      	movs	r0, #48	; 0x30
   129b2:	47c0      	blx	r8
   129b4:	2800      	cmp	r0, #0
   129b6:	f6ff af1a 	blt.w	127ee <cbvprintf+0x232>
   129ba:	3501      	adds	r5, #1
   129bc:	e7da      	b.n	12974 <cbvprintf+0x3b8>
   129be:	bf00      	nop
   129c0:	0001d647 	.word	0x0001d647

000129c4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   129c4:	b510      	push	{r4, lr}
   129c6:	4807      	ldr	r0, [pc, #28]	; (129e4 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
   129c8:	4c07      	ldr	r4, [pc, #28]	; (129e8 <uart_console_init+0x24>)
   129ca:	f005 fd67 	bl	1849c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   129ce:	4b07      	ldr	r3, [pc, #28]	; (129ec <uart_console_init+0x28>)
   129d0:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   129d2:	4620      	mov	r0, r4
   129d4:	f000 fedc 	bl	13790 <__stdout_hook_install>
	__printk_hook_install(console_out);
   129d8:	4620      	mov	r0, r4
   129da:	f7ff fb9d 	bl	12118 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   129de:	2000      	movs	r0, #0
   129e0:	bd10      	pop	{r4, pc}
   129e2:	bf00      	nop
   129e4:	0001d648 	.word	0x0001d648
   129e8:	000129f1 	.word	0x000129f1
   129ec:	200023e0 	.word	0x200023e0

000129f0 <console_out>:
	if ('\n' == c) {
   129f0:	280a      	cmp	r0, #10
{
   129f2:	b538      	push	{r3, r4, r5, lr}
   129f4:	4d07      	ldr	r5, [pc, #28]	; (12a14 <console_out+0x24>)
   129f6:	4604      	mov	r4, r0
	if ('\n' == c) {
   129f8:	d104      	bne.n	12a04 <console_out+0x14>
   129fa:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   129fc:	6883      	ldr	r3, [r0, #8]
   129fe:	210d      	movs	r1, #13
   12a00:	685b      	ldr	r3, [r3, #4]
   12a02:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   12a04:	6828      	ldr	r0, [r5, #0]
   12a06:	6883      	ldr	r3, [r0, #8]
   12a08:	b2e1      	uxtb	r1, r4
   12a0a:	685b      	ldr	r3, [r3, #4]
   12a0c:	4798      	blx	r3
}
   12a0e:	4620      	mov	r0, r4
   12a10:	bd38      	pop	{r3, r4, r5, pc}
   12a12:	bf00      	nop
   12a14:	200023e0 	.word	0x200023e0

00012a18 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
   12a18:	4a0e      	ldr	r2, [pc, #56]	; (12a54 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12a1a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   12a1c:	1a84      	subs	r4, r0, r2
   12a1e:	10a3      	asrs	r3, r4, #2
   12a20:	4c0d      	ldr	r4, [pc, #52]	; (12a58 <onoff_stop+0x40>)
   12a22:	435c      	muls	r4, r3
{
   12a24:	4605      	mov	r5, r0
   12a26:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   12a28:	200c      	movs	r0, #12
   12a2a:	fb00 2004 	mla	r0, r0, r4, r2
{
   12a2e:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   12a30:	2140      	movs	r1, #64	; 0x40
   12a32:	4408      	add	r0, r1
   12a34:	f007 f9b0 	bl	19d98 <set_off_state>
	if (err < 0) {
   12a38:	1e01      	subs	r1, r0, #0
   12a3a:	db05      	blt.n	12a48 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   12a3c:	4b07      	ldr	r3, [pc, #28]	; (12a5c <onoff_stop+0x44>)
   12a3e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   12a42:	6863      	ldr	r3, [r4, #4]
   12a44:	4798      	blx	r3
	return 0;
   12a46:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   12a48:	4628      	mov	r0, r5
   12a4a:	4633      	mov	r3, r6
}
   12a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   12a50:	4718      	bx	r3
   12a52:	bf00      	nop
   12a54:	200023f4 	.word	0x200023f4
   12a58:	b6db6db7 	.word	0xb6db6db7
   12a5c:	0001d110 	.word	0x0001d110

00012a60 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   12a64:	4e10      	ldr	r6, [pc, #64]	; (12aa8 <onoff_start+0x48>)
   12a66:	1b84      	subs	r4, r0, r6
   12a68:	10a3      	asrs	r3, r4, #2
   12a6a:	4c10      	ldr	r4, [pc, #64]	; (12aac <onoff_start+0x4c>)
   12a6c:	435c      	muls	r4, r3
   12a6e:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   12a70:	250c      	movs	r5, #12
   12a72:	4365      	muls	r5, r4
{
   12a74:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
   12a76:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   12a7a:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
   12a7c:	4430      	add	r0, r6
   12a7e:	2140      	movs	r1, #64	; 0x40
   12a80:	f007 f9a3 	bl	19dca <set_starting_state>
	if (err < 0) {
   12a84:	1e01      	subs	r1, r0, #0
   12a86:	db09      	blt.n	12a9c <onoff_start+0x3c>
	subdata->cb = cb;
   12a88:	4a09      	ldr	r2, [pc, #36]	; (12ab0 <onoff_start+0x50>)
   12a8a:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   12a8c:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   12a90:	4b08      	ldr	r3, [pc, #32]	; (12ab4 <onoff_start+0x54>)
   12a92:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   12a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   12a9a:	4718      	bx	r3
		notify(mgr, err);
   12a9c:	4640      	mov	r0, r8
   12a9e:	463b      	mov	r3, r7
}
   12aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   12aa4:	4718      	bx	r3
   12aa6:	bf00      	nop
   12aa8:	200023f4 	.word	0x200023f4
   12aac:	b6db6db7 	.word	0xb6db6db7
   12ab0:	00019e2d 	.word	0x00019e2d
   12ab4:	0001d110 	.word	0x0001d110

00012ab8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12ab8:	2200      	movs	r2, #0
{
   12aba:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12abc:	2101      	movs	r1, #1
{
   12abe:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12ac0:	4610      	mov	r0, r2
   12ac2:	f000 fb3b 	bl	1313c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   12ac6:	2000      	movs	r0, #0
   12ac8:	f000 fb28 	bl	1311c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   12acc:	480f      	ldr	r0, [pc, #60]	; (12b0c <clk_init+0x54>)
   12ace:	f005 fa45 	bl	17f5c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   12ad2:	4b0f      	ldr	r3, [pc, #60]	; (12b10 <clk_init+0x58>)
   12ad4:	4298      	cmp	r0, r3
   12ad6:	d115      	bne.n	12b04 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   12ad8:	f009 fcaf 	bl	1c43a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   12adc:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   12ade:	490d      	ldr	r1, [pc, #52]	; (12b14 <clk_init+0x5c>)
   12ae0:	4630      	mov	r0, r6
   12ae2:	f006 fe38 	bl	19756 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   12ae6:	2800      	cmp	r0, #0
   12ae8:	db0b      	blt.n	12b02 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12aea:	2501      	movs	r5, #1
   12aec:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   12aee:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12af0:	4908      	ldr	r1, [pc, #32]	; (12b14 <clk_init+0x5c>)
   12af2:	f104 001c 	add.w	r0, r4, #28
   12af6:	f006 fe2e 	bl	19756 <onoff_manager_init>
		if (err < 0) {
   12afa:	2800      	cmp	r0, #0
   12afc:	db01      	blt.n	12b02 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12afe:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   12b00:	2000      	movs	r0, #0
}
   12b02:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   12b04:	f06f 0004 	mvn.w	r0, #4
   12b08:	e7fb      	b.n	12b02 <clk_init+0x4a>
   12b0a:	bf00      	nop
   12b0c:	00012b4d 	.word	0x00012b4d
   12b10:	0bad0000 	.word	0x0bad0000
   12b14:	0001d120 	.word	0x0001d120

00012b18 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   12b18:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   12b1a:	230c      	movs	r3, #12
   12b1c:	4809      	ldr	r0, [pc, #36]	; (12b44 <clkstarted_handle.constprop.0+0x2c>)
   12b1e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   12b20:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   12b22:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   12b24:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   12b28:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   12b2a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   12b2c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   12b2e:	4418      	add	r0, r3
   12b30:	f007 f969 	bl	19e06 <set_on_state>
	if (callback) {
   12b34:	b12d      	cbz	r5, 12b42 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   12b36:	4632      	mov	r2, r6
   12b38:	462b      	mov	r3, r5
   12b3a:	4803      	ldr	r0, [pc, #12]	; (12b48 <clkstarted_handle.constprop.0+0x30>)
}
   12b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   12b40:	4718      	bx	r3
}
   12b42:	bd70      	pop	{r4, r5, r6, pc}
   12b44:	200023f4 	.word	0x200023f4
   12b48:	200006b0 	.word	0x200006b0

00012b4c <clock_event_handler>:
	switch (event) {
   12b4c:	b110      	cbz	r0, 12b54 <clock_event_handler+0x8>
   12b4e:	2801      	cmp	r0, #1
   12b50:	d004      	beq.n	12b5c <clock_event_handler+0x10>
   12b52:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   12b54:	4b03      	ldr	r3, [pc, #12]	; (12b64 <clock_event_handler+0x18>)
   12b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   12b58:	075b      	lsls	r3, r3, #29
   12b5a:	d101      	bne.n	12b60 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   12b5c:	f7ff bfdc 	b.w	12b18 <clkstarted_handle.constprop.0>
}
   12b60:	4770      	bx	lr
   12b62:	bf00      	nop
   12b64:	200023f4 	.word	0x200023f4

00012b68 <generic_hfclk_start>:
{
   12b68:	b508      	push	{r3, lr}
   12b6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   12b6e:	f3ef 8111 	mrs	r1, BASEPRI
   12b72:	f383 8811 	msr	BASEPRI, r3
   12b76:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   12b7a:	4a12      	ldr	r2, [pc, #72]	; (12bc4 <generic_hfclk_start+0x5c>)
   12b7c:	6813      	ldr	r3, [r2, #0]
   12b7e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   12b82:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   12b86:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   12b88:	d00c      	beq.n	12ba4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12b8e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12b92:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12b96:	f013 0301 	ands.w	r3, r3, #1
   12b9a:	d003      	beq.n	12ba4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   12b9c:	480a      	ldr	r0, [pc, #40]	; (12bc8 <generic_hfclk_start+0x60>)
   12b9e:	f007 f932 	bl	19e06 <set_on_state>
			already_started = true;
   12ba2:	2301      	movs	r3, #1
	__asm__ volatile(
   12ba4:	f381 8811 	msr	BASEPRI, r1
   12ba8:	f3bf 8f6f 	isb	sy
	if (already_started) {
   12bac:	b123      	cbz	r3, 12bb8 <generic_hfclk_start+0x50>
}
   12bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   12bb2:	2000      	movs	r0, #0
   12bb4:	f7ff bfb0 	b.w	12b18 <clkstarted_handle.constprop.0>
}
   12bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12bbc:	2001      	movs	r0, #1
   12bbe:	f005 b9bd 	b.w	17f3c <nrfx_clock_start>
   12bc2:	bf00      	nop
   12bc4:	20002444 	.word	0x20002444
   12bc8:	20002434 	.word	0x20002434

00012bcc <lfclk_start>:
{
   12bcc:	b510      	push	{r4, lr}
	if (!once) {
   12bce:	4c07      	ldr	r4, [pc, #28]	; (12bec <lfclk_start+0x20>)
   12bd0:	7823      	ldrb	r3, [r4, #0]
   12bd2:	b92b      	cbnz	r3, 12be0 <lfclk_start+0x14>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
   12bd4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   12bd8:	f009 fecf 	bl	1c97a <z_impl_k_busy_wait>
		once = true;
   12bdc:	2301      	movs	r3, #1
   12bde:	7023      	strb	r3, [r4, #0]
}
   12be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   12be4:	2000      	movs	r0, #0
   12be6:	f005 b9a9 	b.w	17f3c <nrfx_clock_start>
   12bea:	bf00      	nop
   12bec:	20002642 	.word	0x20002642

00012bf0 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12bf0:	4b09      	ldr	r3, [pc, #36]	; (12c18 <generic_hfclk_stop+0x28>)
   12bf2:	f3bf 8f5b 	dmb	ish
   12bf6:	e853 2f00 	ldrex	r2, [r3]
   12bfa:	f022 0102 	bic.w	r1, r2, #2
   12bfe:	e843 1000 	strex	r0, r1, [r3]
   12c02:	2800      	cmp	r0, #0
   12c04:	d1f7      	bne.n	12bf6 <generic_hfclk_stop+0x6>
   12c06:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   12c0a:	07d3      	lsls	r3, r2, #31
   12c0c:	d402      	bmi.n	12c14 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   12c0e:	2001      	movs	r0, #1
   12c10:	f009 bc0e 	b.w	1c430 <nrfx_clock_stop>
}
   12c14:	4770      	bx	lr
   12c16:	bf00      	nop
   12c18:	20002444 	.word	0x20002444

00012c1c <api_blocking_start>:
{
   12c1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12c1e:	2200      	movs	r2, #0
   12c20:	2301      	movs	r3, #1
   12c22:	e9cd 2302 	strd	r2, r3, [sp, #8]
   12c26:	ab04      	add	r3, sp, #16
   12c28:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12c2c:	4a09      	ldr	r2, [pc, #36]	; (12c54 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12c2e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12c32:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12c34:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12c38:	f007 f91b 	bl	19e72 <api_start>
	if (err < 0) {
   12c3c:	2800      	cmp	r0, #0
   12c3e:	db05      	blt.n	12c4c <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   12c40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12c44:	2300      	movs	r3, #0
   12c46:	4668      	mov	r0, sp
   12c48:	f006 f98c 	bl	18f64 <z_impl_k_sem_take>
}
   12c4c:	b007      	add	sp, #28
   12c4e:	f85d fb04 	ldr.w	pc, [sp], #4
   12c52:	bf00      	nop
   12c54:	00019e3f 	.word	0x00019e3f

00012c58 <z_nrf_clock_control_lf_on>:
{
   12c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12c5c:	493a      	ldr	r1, [pc, #232]	; (12d48 <z_nrf_clock_control_lf_on+0xf0>)
   12c5e:	f3bf 8f5b 	dmb	ish
   12c62:	4606      	mov	r6, r0
   12c64:	2201      	movs	r2, #1
   12c66:	e851 3f00 	ldrex	r3, [r1]
   12c6a:	e841 2000 	strex	r0, r2, [r1]
   12c6e:	2800      	cmp	r0, #0
   12c70:	d1f9      	bne.n	12c66 <z_nrf_clock_control_lf_on+0xe>
   12c72:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   12c76:	b933      	cbnz	r3, 12c86 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   12c78:	4934      	ldr	r1, [pc, #208]	; (12d4c <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   12c7a:	4835      	ldr	r0, [pc, #212]	; (12d50 <z_nrf_clock_control_lf_on+0xf8>)
   12c7c:	604b      	str	r3, [r1, #4]
   12c7e:	60cb      	str	r3, [r1, #12]
   12c80:	608a      	str	r2, [r1, #8]
   12c82:	f006 fd7b 	bl	1977c <onoff_request>
	switch (start_mode) {
   12c86:	1e73      	subs	r3, r6, #1
   12c88:	2b01      	cmp	r3, #1
   12c8a:	d832      	bhi.n	12cf2 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   12c8c:	2e01      	cmp	r6, #1
   12c8e:	d107      	bne.n	12ca0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   12c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12c94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   12c98:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   12c9c:	2b01      	cmp	r3, #1
   12c9e:	d028      	beq.n	12cf2 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12ca0:	f009 fe65 	bl	1c96e <k_is_in_isr>
   12ca4:	4604      	mov	r4, r0
   12ca6:	b918      	cbnz	r0, 12cb0 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   12ca8:	4b2a      	ldr	r3, [pc, #168]	; (12d54 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   12caa:	781b      	ldrb	r3, [r3, #0]
   12cac:	2b00      	cmp	r3, #0
   12cae:	d144      	bne.n	12d3a <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   12cb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   12cb4:	f3ef 8511 	mrs	r5, BASEPRI
   12cb8:	f383 8811 	msr	BASEPRI, r3
   12cbc:	f3bf 8f6f 	isb	sy
   12cc0:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12cc2:	4f25      	ldr	r7, [pc, #148]	; (12d58 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12cc4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 12d5c <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12cc8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 12d60 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12cd0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12cd4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   12cd8:	03d2      	lsls	r2, r2, #15
   12cda:	d50c      	bpl.n	12cf6 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   12cdc:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   12ce0:	2b01      	cmp	r3, #1
   12ce2:	d001      	beq.n	12ce8 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   12ce4:	2e01      	cmp	r6, #1
   12ce6:	d106      	bne.n	12cf6 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   12ce8:	b30c      	cbz	r4, 12d2e <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   12cea:	f385 8811 	msr	BASEPRI, r5
   12cee:	f3bf 8f6f 	isb	sy
}
   12cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   12cf6:	b1ac      	cbz	r4, 12d24 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   12cf8:	4628      	mov	r0, r5
   12cfa:	f000 fb07 	bl	1330c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   12cfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12d02:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   12d06:	2b00      	cmp	r3, #0
   12d08:	d1e0      	bne.n	12ccc <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12d0a:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   12d0c:	2900      	cmp	r1, #0
   12d0e:	d0dd      	beq.n	12ccc <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d10:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   12d12:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   12d14:	2301      	movs	r3, #1
   12d16:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   12d1a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12d1e:	f8c9 3000 	str.w	r3, [r9]
}
   12d22:	e7d3      	b.n	12ccc <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   12d24:	2100      	movs	r1, #0
   12d26:	2021      	movs	r0, #33	; 0x21
   12d28:	f006 f8d0 	bl	18ecc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12d2c:	e7e7      	b.n	12cfe <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   12d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12d32:	2202      	movs	r2, #2
   12d34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12d38:	e7db      	b.n	12cf2 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   12d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12d3e:	2202      	movs	r2, #2
   12d40:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   12d44:	4605      	mov	r5, r0
}
   12d46:	e7bc      	b.n	12cc2 <z_nrf_clock_control_lf_on+0x6a>
   12d48:	20002448 	.word	0x20002448
   12d4c:	200023e4 	.word	0x200023e4
   12d50:	20002410 	.word	0x20002410
   12d54:	20002ec3 	.word	0x20002ec3
   12d58:	40000104 	.word	0x40000104
   12d5c:	e000e100 	.word	0xe000e100
   12d60:	40000008 	.word	0x40000008

00012d64 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   12d64:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   12d66:	4b08      	ldr	r3, [pc, #32]	; (12d88 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   12d68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   12d6c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   12d70:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   12d74:	4290      	cmp	r0, r2
   12d76:	d100      	bne.n	12d7a <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   12d78:	4770      	bx	lr
   12d7a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   12d7e:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   12d80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   12d84:	e7f2      	b.n	12d6c <handle_next_cycle_case+0x8>
   12d86:	bf00      	nop
   12d88:	40011000 	.word	0x40011000

00012d8c <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12d8c:	4b07      	ldr	r3, [pc, #28]	; (12dac <rtc_nrf_isr+0x20>)
   12d8e:	2200      	movs	r2, #0
   12d90:	601a      	str	r2, [r3, #0]
   12d92:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   12d94:	4a06      	ldr	r2, [pc, #24]	; (12db0 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   12d96:	4b07      	ldr	r3, [pc, #28]	; (12db4 <rtc_nrf_isr+0x28>)
   12d98:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   12d9c:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   12d9e:	1ac0      	subs	r0, r0, r3
   12da0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   12da4:	4403      	add	r3, r0
   12da6:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   12da8:	f006 bb2c 	b.w	19404 <z_clock_announce>
   12dac:	40011140 	.word	0x40011140
   12db0:	2000244c 	.word	0x2000244c
   12db4:	40011000 	.word	0x40011000

00012db8 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   12db8:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   12dba:	4d10      	ldr	r5, [pc, #64]	; (12dfc <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12dbc:	4b10      	ldr	r3, [pc, #64]	; (12e00 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   12dbe:	2400      	movs	r4, #0
   12dc0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12dc4:	601c      	str	r4, [r3, #0]
   12dc6:	681b      	ldr	r3, [r3, #0]
   12dc8:	4b0e      	ldr	r3, [pc, #56]	; (12e04 <z_clock_driver_init+0x4c>)
   12dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12dce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   12dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   12dd6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   12dda:	4622      	mov	r2, r4
   12ddc:	2101      	movs	r1, #1
   12dde:	2011      	movs	r0, #17
   12de0:	f000 f9ac 	bl	1313c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   12de4:	2011      	movs	r0, #17
   12de6:	f000 f999 	bl	1311c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12dea:	4a07      	ldr	r2, [pc, #28]	; (12e08 <z_clock_driver_init+0x50>)
   12dec:	2301      	movs	r3, #1
   12dee:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   12df0:	2002      	movs	r0, #2
   12df2:	602b      	str	r3, [r5, #0]
   12df4:	f7ff ff30 	bl	12c58 <z_nrf_clock_control_lf_on>

	return 0;
}
   12df8:	4620      	mov	r0, r4
   12dfa:	bd38      	pop	{r3, r4, r5, pc}
   12dfc:	40011000 	.word	0x40011000
   12e00:	40011140 	.word	0x40011140
   12e04:	e000e100 	.word	0xe000e100
   12e08:	40011008 	.word	0x40011008

00012e0c <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   12e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   12e0e:	4b2d      	ldr	r3, [pc, #180]	; (12ec4 <z_clock_set_timeout+0xb8>)
   12e10:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12e14:	bf08      	it	eq
   12e16:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12e18:	3801      	subs	r0, #1
   12e1a:	2800      	cmp	r0, #0
   12e1c:	dd40      	ble.n	12ea0 <z_clock_set_timeout+0x94>
   12e1e:	4298      	cmp	r0, r3
   12e20:	bfa8      	it	ge
   12e22:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   12e24:	4c28      	ldr	r4, [pc, #160]	; (12ec8 <z_clock_set_timeout+0xbc>)

	uint32_t unannounced = counter_sub(counter(), last_count);
   12e26:	4a29      	ldr	r2, [pc, #164]	; (12ecc <z_clock_set_timeout+0xc0>)
   12e28:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   12e2c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12e2e:	4e28      	ldr	r6, [pc, #160]	; (12ed0 <z_clock_set_timeout+0xc4>)
	return (a - b) & COUNTER_MAX;
   12e30:	1a9b      	subs	r3, r3, r2
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   12e32:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   12e36:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
		ticks = 0;
   12e3a:	bf18      	it	ne
   12e3c:	2000      	movne	r0, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   12e3e:	3501      	adds	r5, #1
   12e40:	4428      	add	r0, r5
    p_reg->INTENCLR = mask;
   12e42:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   12e46:	4d1f      	ldr	r5, [pc, #124]	; (12ec4 <z_clock_set_timeout+0xb8>)
   12e48:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
   12e4c:	42a8      	cmp	r0, r5
   12e4e:	bf94      	ite	ls
   12e50:	1815      	addls	r5, r2, r0
   12e52:	1955      	addhi	r5, r2, r5
     return p_reg->COUNTER;
   12e54:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
   12e58:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12e5c:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
   12e5e:	1a9b      	subs	r3, r3, r2
   12e60:	6037      	str	r7, [r6, #0]
   12e62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   12e66:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
   12e68:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   12e6a:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   12e6e:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   12e72:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   12e76:	d104      	bne.n	12e82 <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
   12e78:	200f      	movs	r0, #15
   12e7a:	f009 fd7e 	bl	1c97a <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12e7e:	6037      	str	r7, [r6, #0]
   12e80:	6833      	ldr	r3, [r6, #0]
   12e82:	4b14      	ldr	r3, [pc, #80]	; (12ed4 <z_clock_set_timeout+0xc8>)
   12e84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12e88:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   12e8c:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   12e90:	1a2b      	subs	r3, r5, r0
   12e92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   12e96:	2b01      	cmp	r3, #1
   12e98:	d104      	bne.n	12ea4 <z_clock_set_timeout+0x98>
		handle_next_cycle_case(t);
   12e9a:	f7ff ff63 	bl	12d64 <handle_next_cycle_case>
   12e9e:	e00b      	b.n	12eb8 <z_clock_set_timeout+0xac>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12ea0:	2000      	movs	r0, #0
   12ea2:	e7bf      	b.n	12e24 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   12ea4:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   12ea8:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   12eac:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   12eb0:	1a2d      	subs	r5, r5, r0
   12eb2:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
   12eb4:	022b      	lsls	r3, r5, #8
   12eb6:	d4f0      	bmi.n	12e9a <z_clock_set_timeout+0x8e>
    p_reg->INTENSET = mask;
   12eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   12ebc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   12ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ec2:	bf00      	nop
   12ec4:	007fffff 	.word	0x007fffff
   12ec8:	40011000 	.word	0x40011000
   12ecc:	2000244c 	.word	0x2000244c
   12ed0:	40011140 	.word	0x40011140
   12ed4:	e000e100 	.word	0xe000e100

00012ed8 <z_clock_elapsed>:
	__asm__ volatile(
   12ed8:	f04f 0240 	mov.w	r2, #64	; 0x40
   12edc:	f3ef 8311 	mrs	r3, BASEPRI
   12ee0:	f382 8811 	msr	BASEPRI, r2
   12ee4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   12ee8:	4a06      	ldr	r2, [pc, #24]	; (12f04 <z_clock_elapsed+0x2c>)
   12eea:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   12eee:	4a06      	ldr	r2, [pc, #24]	; (12f08 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   12ef0:	6812      	ldr	r2, [r2, #0]
   12ef2:	1a80      	subs	r0, r0, r2
   12ef4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   12ef8:	f383 8811 	msr	BASEPRI, r3
   12efc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   12f00:	4770      	bx	lr
   12f02:	bf00      	nop
   12f04:	40011000 	.word	0x40011000
   12f08:	2000244c 	.word	0x2000244c

00012f0c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
   12f0c:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   12f0e:	4c11      	ldr	r4, [pc, #68]	; (12f54 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   12f10:	4a11      	ldr	r2, [pc, #68]	; (12f58 <_DoInit+0x4c>)
   12f12:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   12f14:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   12f16:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   12f1a:	4b10      	ldr	r3, [pc, #64]	; (12f5c <_DoInit+0x50>)
   12f1c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   12f1e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   12f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
   12f24:	4a0e      	ldr	r2, [pc, #56]	; (12f60 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   12f26:	490f      	ldr	r1, [pc, #60]	; (12f64 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   12f28:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   12f2a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   12f2c:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   12f2e:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
   12f30:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   12f32:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   12f34:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   12f36:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   12f38:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   12f3a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   12f3c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   12f3e:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   12f40:	f007 f9a1 	bl	1a286 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   12f44:	4908      	ldr	r1, [pc, #32]	; (12f68 <_DoInit+0x5c>)
   12f46:	4620      	mov	r0, r4
   12f48:	f007 f99d 	bl	1a286 <strcpy>
  p->acID[6] = ' ';
   12f4c:	2320      	movs	r3, #32
   12f4e:	71a3      	strb	r3, [r4, #6]
}
   12f50:	bd10      	pop	{r4, pc}
   12f52:	bf00      	nop
   12f54:	20002450 	.word	0x20002450
   12f58:	0001d65f 	.word	0x0001d65f
   12f5c:	20002653 	.word	0x20002653
   12f60:	20002643 	.word	0x20002643
   12f64:	0001d668 	.word	0x0001d668
   12f68:	0001d66c 	.word	0x0001d66c

00012f6c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   12f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   12f6e:	4e26      	ldr	r6, [pc, #152]	; (13008 <tc_aes128_set_encrypt_key+0x9c>)
{
   12f70:	4607      	mov	r7, r0
   12f72:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12f74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12f76:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12f78:	ad01      	add	r5, sp, #4
   12f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12f7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12f80:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12f84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   12f88:	4638      	mov	r0, r7
   12f8a:	2f00      	cmp	r7, #0
   12f8c:	d038      	beq.n	13000 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   12f8e:	2c00      	cmp	r4, #0
   12f90:	d038      	beq.n	13004 <tc_aes128_set_encrypt_key+0x98>
   12f92:	1f38      	subs	r0, r7, #4
   12f94:	4621      	mov	r1, r4
   12f96:	4602      	mov	r2, r0
   12f98:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12f9a:	784b      	ldrb	r3, [r1, #1]
   12f9c:	780d      	ldrb	r5, [r1, #0]
   12f9e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12fa0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12fa4:	78cd      	ldrb	r5, [r1, #3]
   12fa6:	432b      	orrs	r3, r5
   12fa8:	788d      	ldrb	r5, [r1, #2]
   12faa:	3104      	adds	r1, #4
   12fac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   12fb0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12fb2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   12fb6:	d1f0      	bne.n	12f9a <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12fb8:	4c14      	ldr	r4, [pc, #80]	; (1300c <tc_aes128_set_encrypt_key+0xa0>)
   12fba:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   12fbc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   12fbe:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   12fc0:	d116      	bne.n	12ff0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12fc2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12fc6:	5ca5      	ldrb	r5, [r4, r2]
   12fc8:	0e1a      	lsrs	r2, r3, #24
   12fca:	5ca2      	ldrb	r2, [r4, r2]
   12fcc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   12fd0:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12fd4:	b2db      	uxtb	r3, r3
   12fd6:	5d65      	ldrb	r5, [r4, r5]
   12fd8:	5ce3      	ldrb	r3, [r4, r3]
   12fda:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   12fde:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   12fe2:	ad0c      	add	r5, sp, #48	; 0x30
   12fe4:	f021 0303 	bic.w	r3, r1, #3
   12fe8:	442b      	add	r3, r5
   12fea:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   12fee:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   12ff0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   12ff4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   12ff6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   12ff8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   12ffa:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12ffc:	d1de      	bne.n	12fbc <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   12ffe:	2001      	movs	r0, #1
}
   13000:	b00d      	add	sp, #52	; 0x34
   13002:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13004:	4620      	mov	r0, r4
   13006:	e7fb      	b.n	13000 <tc_aes128_set_encrypt_key+0x94>
   13008:	0001d054 	.word	0x0001d054
   1300c:	0001d673 	.word	0x0001d673

00013010 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   13010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13014:	4615      	mov	r5, r2
   13016:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   13018:	4606      	mov	r6, r0
   1301a:	2800      	cmp	r0, #0
   1301c:	d058      	beq.n	130d0 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1301e:	2900      	cmp	r1, #0
   13020:	d059      	beq.n	130d6 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   13022:	2a00      	cmp	r2, #0
   13024:	d059      	beq.n	130da <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   13026:	2310      	movs	r3, #16
   13028:	460a      	mov	r2, r1
   1302a:	4668      	mov	r0, sp
   1302c:	4619      	mov	r1, r3
   1302e:	f006 ff44 	bl	19eba <_copy>
	add_round_key(state, s->words);
   13032:	4629      	mov	r1, r5
   13034:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   13036:	4c2a      	ldr	r4, [pc, #168]	; (130e0 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   13038:	f006 ff57 	bl	19eea <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1303c:	f105 0710 	add.w	r7, r5, #16
   13040:	46a1      	mov	r9, r4
   13042:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   13044:	46e8      	mov	r8, sp
{
   13046:	466a      	mov	r2, sp
   13048:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   1304a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1304c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   1304e:	5c61      	ldrb	r1, [r4, r1]
   13050:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13054:	d1f9      	bne.n	1304a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   13056:	4668      	mov	r0, sp
   13058:	f006 ff8c 	bl	19f74 <shift_rows>
	mult_row_column(t, s);
   1305c:	4669      	mov	r1, sp
   1305e:	a804      	add	r0, sp, #16
   13060:	f006 ffc1 	bl	19fe6 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   13064:	a901      	add	r1, sp, #4
   13066:	a805      	add	r0, sp, #20
   13068:	f006 ffbd 	bl	19fe6 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1306c:	a902      	add	r1, sp, #8
   1306e:	a806      	add	r0, sp, #24
   13070:	f006 ffb9 	bl	19fe6 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   13074:	a903      	add	r1, sp, #12
   13076:	a807      	add	r0, sp, #28
   13078:	f006 ffb5 	bl	19fe6 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1307c:	2310      	movs	r3, #16
   1307e:	4619      	mov	r1, r3
   13080:	eb0d 0203 	add.w	r2, sp, r3
   13084:	4668      	mov	r0, sp
   13086:	f006 ff18 	bl	19eba <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1308a:	4639      	mov	r1, r7
   1308c:	4668      	mov	r0, sp
   1308e:	3710      	adds	r7, #16
   13090:	f006 ff2b 	bl	19eea <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   13094:	42af      	cmp	r7, r5
   13096:	d1d5      	bne.n	13044 <tc_aes_encrypt+0x34>
   13098:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   1309a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   1309e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   130a0:	f819 3003 	ldrb.w	r3, [r9, r3]
   130a4:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   130a8:	d1f7      	bne.n	1309a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   130aa:	4668      	mov	r0, sp
   130ac:	f006 ff62 	bl	19f74 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   130b0:	4629      	mov	r1, r5
   130b2:	4668      	mov	r0, sp
   130b4:	f006 ff19 	bl	19eea <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   130b8:	2310      	movs	r3, #16
   130ba:	4619      	mov	r1, r3
   130bc:	466a      	mov	r2, sp
   130be:	4630      	mov	r0, r6
   130c0:	f006 fefb 	bl	19eba <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   130c4:	4668      	mov	r0, sp
   130c6:	2210      	movs	r2, #16
   130c8:	4621      	mov	r1, r4
   130ca:	f006 ff03 	bl	19ed4 <_set>

	return TC_CRYPTO_SUCCESS;
   130ce:	2001      	movs	r0, #1
}
   130d0:	b009      	add	sp, #36	; 0x24
   130d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   130d6:	4608      	mov	r0, r1
   130d8:	e7fa      	b.n	130d0 <tc_aes_encrypt+0xc0>
   130da:	4610      	mov	r0, r2
   130dc:	e7f8      	b.n	130d0 <tc_aes_encrypt+0xc0>
   130de:	bf00      	nop
   130e0:	0001d673 	.word	0x0001d673

000130e4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   130e4:	4a0a      	ldr	r2, [pc, #40]	; (13110 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   130e6:	490b      	ldr	r1, [pc, #44]	; (13114 <arch_swap+0x30>)
	_current->arch.basepri = key;
   130e8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   130ea:	6809      	ldr	r1, [r1, #0]
   130ec:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   130f0:	4909      	ldr	r1, [pc, #36]	; (13118 <arch_swap+0x34>)
	_current->arch.basepri = key;
   130f2:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   130f4:	684b      	ldr	r3, [r1, #4]
   130f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   130fa:	604b      	str	r3, [r1, #4]
   130fc:	2300      	movs	r3, #0
   130fe:	f383 8811 	msr	BASEPRI, r3
   13102:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13106:	6893      	ldr	r3, [r2, #8]
}
   13108:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   1310c:	4770      	bx	lr
   1310e:	bf00      	nop
   13110:	200025f0 	.word	0x200025f0
   13114:	0001d4f0 	.word	0x0001d4f0
   13118:	e000ed00 	.word	0xe000ed00

0001311c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1311c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1311e:	2b00      	cmp	r3, #0
   13120:	db08      	blt.n	13134 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13122:	2201      	movs	r2, #1
   13124:	f000 001f 	and.w	r0, r0, #31
   13128:	fa02 f000 	lsl.w	r0, r2, r0
   1312c:	095b      	lsrs	r3, r3, #5
   1312e:	4a02      	ldr	r2, [pc, #8]	; (13138 <arch_irq_enable+0x1c>)
   13130:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13134:	4770      	bx	lr
   13136:	bf00      	nop
   13138:	e000e100 	.word	0xe000e100

0001313c <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (flags & IRQ_ZERO_LATENCY) {
   1313c:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1313e:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   13140:	bf54      	ite	pl
   13142:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13144:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13146:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13148:	bfac      	ite	ge
   1314a:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1314e:	4a07      	ldrlt	r2, [pc, #28]	; (1316c <z_arm_irq_priority_set+0x30>)
   13150:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13154:	bfac      	ite	ge
   13156:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1315a:	f000 000f 	andlt.w	r0, r0, #15
   1315e:	b2db      	uxtb	r3, r3
   13160:	bfb4      	ite	lt
   13162:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13164:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   13168:	4770      	bx	lr
   1316a:	bf00      	nop
   1316c:	e000ed14 	.word	0xe000ed14

00013170 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   13170:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13172:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13174:	4b04      	ldr	r3, [pc, #16]	; (13188 <_arch_isr_direct_pm+0x18>)
   13176:	6a58      	ldr	r0, [r3, #36]	; 0x24
   13178:	b118      	cbz	r0, 13182 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1317a:	2200      	movs	r2, #0
   1317c:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
   1317e:	f009 f9b6 	bl	1c4ee <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13182:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13184:	bd08      	pop	{r3, pc}
   13186:	bf00      	nop
   13188:	200025f0 	.word	0x200025f0

0001318c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1318c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13190:	9b00      	ldr	r3, [sp, #0]
   13192:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   13196:	490a      	ldr	r1, [pc, #40]	; (131c0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   13198:	9b01      	ldr	r3, [sp, #4]
   1319a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1319e:	9b02      	ldr	r3, [sp, #8]
   131a0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   131a4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   131a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   131ac:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   131b0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   131b4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   131b6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   131b8:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   131ba:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   131bc:	4770      	bx	lr
   131be:	bf00      	nop
   131c0:	0001980f 	.word	0x0001980f

000131c4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   131c4:	4a0b      	ldr	r2, [pc, #44]	; (131f4 <z_check_thread_stack_fail+0x30>)
{
   131c6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   131c8:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
   131ca:	b190      	cbz	r0, 131f2 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   131cc:	f113 0f16 	cmn.w	r3, #22
   131d0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   131d2:	d005      	beq.n	131e0 <z_check_thread_stack_fail+0x1c>
   131d4:	f1a0 0220 	sub.w	r2, r0, #32
   131d8:	429a      	cmp	r2, r3
   131da:	d806      	bhi.n	131ea <z_check_thread_stack_fail+0x26>
   131dc:	4283      	cmp	r3, r0
   131de:	d204      	bcs.n	131ea <z_check_thread_stack_fail+0x26>
   131e0:	4281      	cmp	r1, r0
   131e2:	bf2c      	ite	cs
   131e4:	2100      	movcs	r1, #0
   131e6:	2101      	movcc	r1, #1
   131e8:	e000      	b.n	131ec <z_check_thread_stack_fail+0x28>
   131ea:	2100      	movs	r1, #0
   131ec:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   131ee:	bf08      	it	eq
   131f0:	2000      	moveq	r0, #0
}
   131f2:	4770      	bx	lr
   131f4:	200025f0 	.word	0x200025f0

000131f8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   131f8:	b508      	push	{r3, lr}
   131fa:	4604      	mov	r4, r0
   131fc:	460e      	mov	r6, r1
   131fe:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
   13200:	f000 f9f0 	bl	135e4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13204:	4b08      	ldr	r3, [pc, #32]	; (13228 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13206:	4620      	mov	r0, r4
	_current = main_thread;
   13208:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1320a:	f000 fa07 	bl	1361c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1320e:	4628      	mov	r0, r5
   13210:	f386 8809 	msr	PSP, r6
   13214:	2100      	movs	r1, #0
   13216:	b663      	cpsie	if
   13218:	f381 8811 	msr	BASEPRI, r1
   1321c:	f3bf 8f6f 	isb	sy
   13220:	2200      	movs	r2, #0
   13222:	2300      	movs	r3, #0
   13224:	f006 faf3 	bl	1980e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13228:	200025f0 	.word	0x200025f0

0001322c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1322c:	4a0e      	ldr	r2, [pc, #56]	; (13268 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1322e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13230:	4b0e      	ldr	r3, [pc, #56]	; (1326c <z_arm_prep_c+0x40>)
   13232:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13236:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13238:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1323c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13240:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13244:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1324c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   13250:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   13254:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13258:	f005 f984 	bl	18564 <z_bss_zero>
	z_data_copy();
   1325c:	f005 f98c 	bl	18578 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13260:	f000 f992 	bl	13588 <z_arm_interrupt_init>
	z_cstart();
   13264:	f005 f9c6 	bl	185f4 <z_cstart>
   13268:	00000000 	.word	0x00000000
   1326c:	e000ed00 	.word	0xe000ed00

00013270 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13270:	4912      	ldr	r1, [pc, #72]	; (132bc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13272:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13274:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   13278:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1327a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1327e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13282:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13284:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13288:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1328c:	4f0c      	ldr	r7, [pc, #48]	; (132c0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1328e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13292:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   13294:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13296:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13298:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
   1329a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1329c:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1329e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   132a2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   132a4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   132a6:	f000 f9b9 	bl	1361c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   132aa:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   132ae:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   132b2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   132b6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   132ba:	4770      	bx	lr
    ldr r1, =_kernel
   132bc:	200025f0 	.word	0x200025f0
    ldr v4, =_SCS_ICSR
   132c0:	e000ed04 	.word	0xe000ed04

000132c4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   132c4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   132c8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   132ca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   132ce:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   132d2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   132d4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   132d8:	2902      	cmp	r1, #2
    beq _oops
   132da:	d0ff      	beq.n	132dc <_oops>

000132dc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   132dc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   132de:	f006 ffc7 	bl	1a270 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   132e2:	bd01      	pop	{r0, pc}

000132e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   132e4:	4901      	ldr	r1, [pc, #4]	; (132ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   132e6:	2210      	movs	r2, #16
	str	r2, [r1]
   132e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   132ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   132ec:	e000ed10 	.word	0xe000ed10

000132f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   132f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   132f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   132f4:	f380 8811 	msr	BASEPRI, r0
	isb
   132f8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   132fc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13300:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13302:	b662      	cpsie	i
	isb
   13304:	f3bf 8f6f 	isb	sy

	bx	lr
   13308:	4770      	bx	lr
   1330a:	bf00      	nop

0001330c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1330c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1330e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13310:	f381 8811 	msr	BASEPRI, r1

	wfe
   13314:	bf20      	wfe

	msr	BASEPRI, r0
   13316:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1331a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1331c:	4770      	bx	lr
   1331e:	bf00      	nop

00013320 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13320:	bf30      	wfi
    b z_SysNmiOnReset
   13322:	f7ff bffd 	b.w	13320 <z_SysNmiOnReset>
   13326:	bf00      	nop

00013328 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13328:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1332a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1332c:	4a0b      	ldr	r2, [pc, #44]	; (1335c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1332e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   13330:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13332:	bf1e      	ittt	ne
	movne	r1, #0
   13334:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13336:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
   13338:	f009 f8d9 	blne	1c4ee <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1333c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1333e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13342:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13346:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1334a:	4905      	ldr	r1, [pc, #20]	; (13360 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1334c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1334e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13350:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13352:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13356:	4903      	ldr	r1, [pc, #12]	; (13364 <_isr_wrapper+0x3c>)
	bx r1
   13358:	4708      	bx	r1
   1335a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1335c:	200025f0 	.word	0x200025f0
	ldr r1, =_sw_isr_table
   13360:	0001cecc 	.word	0x0001cecc
	ldr r1, =z_arm_int_exit
   13364:	000133ad 	.word	0x000133ad

00013368 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   13368:	f007 f80b 	bl	1a382 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1336c:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1336e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13372:	4808      	ldr	r0, [pc, #32]	; (13394 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13374:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   13378:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1337a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1337e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13382:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13384:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13386:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1338a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1338e:	f7ff ff4d 	bl	1322c <z_arm_prep_c>
   13392:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   13394:	200046e0 	.word	0x200046e0

00013398 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13398:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1339c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   133a0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   133a2:	4672      	mov	r2, lr
	bl z_arm_fault
   133a4:	f000 f872 	bl	1348c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   133a8:	bd01      	pop	{r0, pc}
   133aa:	bf00      	nop

000133ac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   133ac:	4b04      	ldr	r3, [pc, #16]	; (133c0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   133ae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   133b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   133b2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   133b4:	d003      	beq.n	133be <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   133b6:	4903      	ldr	r1, [pc, #12]	; (133c4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   133b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   133bc:	600a      	str	r2, [r1, #0]

000133be <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   133be:	4770      	bx	lr
	ldr r3, =_kernel
   133c0:	200025f0 	.word	0x200025f0
	ldr r1, =_SCS_ICSR
   133c4:	e000ed04 	.word	0xe000ed04

000133c8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   133c8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   133ca:	4b17      	ldr	r3, [pc, #92]	; (13428 <mem_manage_fault+0x60>)
{
   133cc:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   133ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   133d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   133d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   133d4:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   133d6:	0790      	lsls	r0, r2, #30
   133d8:	d516      	bpl.n	13408 <mem_manage_fault+0x40>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   133da:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   133dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   133de:	0612      	lsls	r2, r2, #24
   133e0:	d504      	bpl.n	133ec <mem_manage_fault+0x24>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   133e2:	b119      	cbz	r1, 133ec <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   133e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   133e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   133ea:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   133ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   133ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   133f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   133f2:	06d2      	lsls	r2, r2, #27
   133f4:	d40b      	bmi.n	1340e <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   133f6:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   133f8:	4a0b      	ldr	r2, [pc, #44]	; (13428 <mem_manage_fault+0x60>)
   133fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   133fc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13400:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   13402:	2300      	movs	r3, #0
   13404:	7023      	strb	r3, [r4, #0]

	return reason;
}
   13406:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   13408:	f06f 0015 	mvn.w	r0, #21
   1340c:	e7ee      	b.n	133ec <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1340e:	685b      	ldr	r3, [r3, #4]
   13410:	051b      	lsls	r3, r3, #20
   13412:	d5f0      	bpl.n	133f6 <mem_manage_fault+0x2e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13414:	4629      	mov	r1, r5
   13416:	f7ff fed5 	bl	131c4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1341a:	2800      	cmp	r0, #0
   1341c:	d0eb      	beq.n	133f6 <mem_manage_fault+0x2e>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1341e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13422:	2002      	movs	r0, #2
   13424:	e7e8      	b.n	133f8 <mem_manage_fault+0x30>
   13426:	bf00      	nop
   13428:	e000ed00 	.word	0xe000ed00

0001342c <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1342c:	4b0d      	ldr	r3, [pc, #52]	; (13464 <bus_fault.isra.0+0x38>)
   1342e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13434:	0592      	lsls	r2, r2, #22
   13436:	d508      	bpl.n	1344a <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   13438:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1343a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1343c:	0412      	lsls	r2, r2, #16
   1343e:	d504      	bpl.n	1344a <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   13440:	b118      	cbz	r0, 1344a <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   13448:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1344a:	4b06      	ldr	r3, [pc, #24]	; (13464 <bus_fault.isra.0+0x38>)
   1344c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1344e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13450:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13452:	bf58      	it	pl
   13454:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13456:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
   13458:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1345a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   1345e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   13460:	7008      	strb	r0, [r1, #0]

	return reason;
}
   13462:	4770      	bx	lr
   13464:	e000ed00 	.word	0xe000ed00

00013468 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13468:	4b07      	ldr	r3, [pc, #28]	; (13488 <usage_fault.isra.0+0x20>)
   1346a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1346c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1346e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13478:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   1347c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   13480:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   13482:	2000      	movs	r0, #0
   13484:	4770      	bx	lr
   13486:	bf00      	nop
   13488:	e000ed00 	.word	0xe000ed00

0001348c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1348c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1348e:	4b37      	ldr	r3, [pc, #220]	; (1356c <z_arm_fault+0xe0>)
   13490:	685b      	ldr	r3, [r3, #4]
{
   13492:	b08a      	sub	sp, #40	; 0x28
   13494:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13496:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1349a:	2500      	movs	r5, #0
   1349c:	f385 8811 	msr	BASEPRI, r5
   134a0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   134a4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   134a8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   134ac:	d111      	bne.n	134d2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   134ae:	f002 010c 	and.w	r1, r2, #12
   134b2:	2908      	cmp	r1, #8
   134b4:	d00d      	beq.n	134d2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   134b6:	0711      	lsls	r1, r2, #28
   134b8:	d401      	bmi.n	134be <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   134ba:	4606      	mov	r6, r0
			*nested_exc = true;
   134bc:	2501      	movs	r5, #1
	*recoverable = false;
   134be:	2200      	movs	r2, #0
   134c0:	3b03      	subs	r3, #3
   134c2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   134c6:	2b03      	cmp	r3, #3
   134c8:	d848      	bhi.n	1355c <z_arm_fault+0xd0>
   134ca:	e8df f003 	tbb	[pc, r3]
   134ce:	3f04      	.short	0x3f04
   134d0:	3c43      	.short	0x3c43
		return NULL;
   134d2:	462e      	mov	r6, r5
   134d4:	e7f3      	b.n	134be <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   134d6:	4b25      	ldr	r3, [pc, #148]	; (1356c <z_arm_fault+0xe0>)
   134d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   134da:	0792      	lsls	r2, r2, #30
   134dc:	d43e      	bmi.n	1355c <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   134de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   134e0:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   134e4:	d009      	beq.n	134fa <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
   134e6:	3328      	adds	r3, #40	; 0x28
   134e8:	781b      	ldrb	r3, [r3, #0]
   134ea:	b1f3      	cbz	r3, 1352a <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
   134ec:	f10d 0207 	add.w	r2, sp, #7
   134f0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   134f2:	4630      	mov	r0, r6
   134f4:	f7ff ff68 	bl	133c8 <mem_manage_fault>
		reason = usage_fault(esf);
   134f8:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   134fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   134fe:	b993      	cbnz	r3, 13526 <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13500:	2220      	movs	r2, #32
   13502:	4631      	mov	r1, r6
   13504:	a802      	add	r0, sp, #8
   13506:	f006 feeb 	bl	1a2e0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1350a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1350c:	b345      	cbz	r5, 13560 <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1350e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13512:	b922      	cbnz	r2, 1351e <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13514:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13518:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1351c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1351e:	a902      	add	r1, sp, #8
   13520:	4620      	mov	r0, r4
   13522:	f006 fea3 	bl	1a26c <z_arm_fatal_error>
}
   13526:	b00a      	add	sp, #40	; 0x28
   13528:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   1352a:	4b11      	ldr	r3, [pc, #68]	; (13570 <z_arm_fault+0xe4>)
   1352c:	781b      	ldrb	r3, [r3, #0]
   1352e:	b12b      	cbz	r3, 1353c <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
   13530:	f10d 0107 	add.w	r1, sp, #7
   13534:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   13536:	f7ff ff79 	bl	1342c <bus_fault.isra.0>
   1353a:	e7dd      	b.n	134f8 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
   1353c:	4b0d      	ldr	r3, [pc, #52]	; (13574 <z_arm_fault+0xe8>)
   1353e:	8818      	ldrh	r0, [r3, #0]
   13540:	b284      	uxth	r4, r0
   13542:	2c00      	cmp	r4, #0
   13544:	d0d9      	beq.n	134fa <z_arm_fault+0x6e>
		reason = usage_fault(esf);
   13546:	f7ff ff8f 	bl	13468 <usage_fault.isra.0>
   1354a:	e7d5      	b.n	134f8 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
   1354c:	f10d 0207 	add.w	r2, sp, #7
   13550:	2100      	movs	r1, #0
   13552:	e7ce      	b.n	134f2 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
   13554:	f10d 0107 	add.w	r1, sp, #7
   13558:	2000      	movs	r0, #0
   1355a:	e7ec      	b.n	13536 <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1355c:	2400      	movs	r4, #0
   1355e:	e7cc      	b.n	134fa <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13560:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13564:	f023 0301 	bic.w	r3, r3, #1
   13568:	e7d8      	b.n	1351c <z_arm_fault+0x90>
   1356a:	bf00      	nop
   1356c:	e000ed00 	.word	0xe000ed00
   13570:	e000ed29 	.word	0xe000ed29
   13574:	e000ed2a 	.word	0xe000ed2a

00013578 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13578:	4a02      	ldr	r2, [pc, #8]	; (13584 <z_arm_fault_init+0xc>)
   1357a:	6953      	ldr	r3, [r2, #20]
   1357c:	f043 0310 	orr.w	r3, r3, #16
   13580:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13582:	4770      	bx	lr
   13584:	e000ed00 	.word	0xe000ed00

00013588 <z_arm_interrupt_init>:
   13588:	4804      	ldr	r0, [pc, #16]	; (1359c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1358a:	2300      	movs	r3, #0
   1358c:	2140      	movs	r1, #64	; 0x40
   1358e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13590:	3301      	adds	r3, #1
   13592:	2b27      	cmp	r3, #39	; 0x27
   13594:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13598:	d1f9      	bne.n	1358e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1359a:	4770      	bx	lr
   1359c:	e000e100 	.word	0xe000e100

000135a0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   135a0:	b508      	push	{r3, lr}
	if (_current == thread) {
   135a2:	4b0e      	ldr	r3, [pc, #56]	; (135dc <z_impl_k_thread_abort+0x3c>)
   135a4:	689b      	ldr	r3, [r3, #8]
   135a6:	4283      	cmp	r3, r0
   135a8:	d107      	bne.n	135ba <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   135aa:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   135ae:	b193      	cbz	r3, 135d6 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   135b0:	4a0b      	ldr	r2, [pc, #44]	; (135e0 <z_impl_k_thread_abort+0x40>)
   135b2:	6853      	ldr	r3, [r2, #4]
   135b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   135b8:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   135ba:	f005 fb29 	bl	18c10 <z_thread_single_abort>
	__asm__ volatile(
   135be:	f04f 0340 	mov.w	r3, #64	; 0x40
   135c2:	f3ef 8011 	mrs	r0, BASEPRI
   135c6:	f383 8811 	msr	BASEPRI, r3
   135ca:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   135ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   135d2:	f009 b8ea 	b.w	1c7aa <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   135d6:	f005 fdc3 	bl	19160 <z_self_abort>
   135da:	bf00      	nop
   135dc:	200025f0 	.word	0x200025f0
   135e0:	e000ed00 	.word	0xe000ed00

000135e4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   135e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   135e6:	4b08      	ldr	r3, [pc, #32]	; (13608 <z_arm_configure_static_mpu_regions+0x24>)
   135e8:	9301      	str	r3, [sp, #4]
   135ea:	4b08      	ldr	r3, [pc, #32]	; (1360c <z_arm_configure_static_mpu_regions+0x28>)
   135ec:	9302      	str	r3, [sp, #8]
   135ee:	4b08      	ldr	r3, [pc, #32]	; (13610 <z_arm_configure_static_mpu_regions+0x2c>)
   135f0:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
   135f2:	ab01      	add	r3, sp, #4
   135f4:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   135f6:	4a07      	ldr	r2, [pc, #28]	; (13614 <z_arm_configure_static_mpu_regions+0x30>)
   135f8:	4b07      	ldr	r3, [pc, #28]	; (13618 <z_arm_configure_static_mpu_regions+0x34>)
   135fa:	2101      	movs	r1, #1
   135fc:	4668      	mov	r0, sp
   135fe:	f000 f8a7 	bl	13750 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13602:	b005      	add	sp, #20
   13604:	f85d fb04 	ldr.w	pc, [sp], #4
   13608:	20000000 	.word	0x20000000
   1360c:	00000000 	.word	0x00000000
   13610:	060b0000 	.word	0x060b0000
   13614:	20000000 	.word	0x20000000
   13618:	20010000 	.word	0x20010000

0001361c <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1361c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT((uint32_t)thread->stack_obj == guard_start,
		"Guard start (0x%x) not beginning at stack object (0x%x)\n",
		guard_start, (uint32_t)thread->stack_obj);
	}
#else
	guard_start = thread->stack_info.start - guard_size;
   1361e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   13620:	3b20      	subs	r3, #32
#endif /* CONFIG_USERSPACE */

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");
	guard = (const struct k_mem_partition)
   13622:	9301      	str	r3, [sp, #4]
   13624:	4b06      	ldr	r3, [pc, #24]	; (13640 <z_arm_configure_dynamic_mpu_regions+0x24>)
   13626:	2220      	movs	r2, #32
   13628:	e9cd 2302 	strd	r2, r3, [sp, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1362c:	2101      	movs	r1, #1
	dynamic_regions[region_num] = &guard;
   1362e:	ab01      	add	r3, sp, #4
	arm_core_mpu_configure_dynamic_mpu_regions(
   13630:	4668      	mov	r0, sp
	dynamic_regions[region_num] = &guard;
   13632:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_dynamic_mpu_regions(
   13634:	f000 f896 	bl	13764 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   13638:	b005      	add	sp, #20
   1363a:	f85d fb04 	ldr.w	pc, [sp], #4
   1363e:	bf00      	nop
   13640:	150b0000 	.word	0x150b0000

00013644 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   13644:	f8df c084 	ldr.w	ip, [pc, #132]	; 136cc <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13648:	b5f0      	push	{r4, r5, r6, r7, lr}
   1364a:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1364c:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
   1364e:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
   13650:	428f      	cmp	r7, r1
   13652:	db00      	blt.n	13656 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   13654:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
   13656:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
   1365a:	f8de 4004 	ldr.w	r4, [lr, #4]
   1365e:	b394      	cbz	r4, 136c6 <mpu_configure_regions+0x82>
		if (do_sanity_check &&
   13660:	b143      	cbz	r3, 13674 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   13662:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   13664:	422c      	tst	r4, r5
   13666:	d119      	bne.n	1369c <mpu_configure_regions+0x58>
		&&
   13668:	2c1f      	cmp	r4, #31
   1366a:	d917      	bls.n	1369c <mpu_configure_regions+0x58>
		((part->start & (part->size - 1U)) == 0U);
   1366c:	f8de 2000 	ldr.w	r2, [lr]
		&&
   13670:	4215      	tst	r5, r2
   13672:	d113      	bne.n	1369c <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   13674:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
   13676:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
   13678:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1367c:	f8de 0008 	ldr.w	r0, [lr, #8]
   13680:	d90f      	bls.n	136a2 <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   13682:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   13686:	d80e      	bhi.n	136a6 <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   13688:	3c01      	subs	r4, #1
   1368a:	fab4 f484 	clz	r4, r4
   1368e:	f1c4 041f 	rsb	r4, r4, #31
   13692:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   13694:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13696:	ea44 0400 	orr.w	r4, r4, r0
   1369a:	d906      	bls.n	136aa <mpu_configure_regions+0x66>
			return -EINVAL;
   1369c:	f06f 0015 	mvn.w	r0, #21
   136a0:	e7d8      	b.n	13654 <mpu_configure_regions+0x10>
		return REGION_32B;
   136a2:	2408      	movs	r4, #8
   136a4:	e7f6      	b.n	13694 <mpu_configure_regions+0x50>
		return REGION_4G;
   136a6:	243e      	movs	r4, #62	; 0x3e
   136a8:	e7f4      	b.n	13694 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   136aa:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   136ae:	4315      	orrs	r5, r2
   136b0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   136b4:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   136b8:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
   136bc:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   136be:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   136c2:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
   136c6:	3701      	adds	r7, #1
   136c8:	e7c2      	b.n	13650 <mpu_configure_regions+0xc>
   136ca:	bf00      	nop
   136cc:	e000ed90 	.word	0xe000ed90

000136d0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   136d0:	4b03      	ldr	r3, [pc, #12]	; (136e0 <arm_core_mpu_enable+0x10>)
   136d2:	2205      	movs	r2, #5
   136d4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   136d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   136da:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   136de:	4770      	bx	lr
   136e0:	e000ed90 	.word	0xe000ed90

000136e4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   136e4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   136e8:	4b01      	ldr	r3, [pc, #4]	; (136f0 <arm_core_mpu_disable+0xc>)
   136ea:	2200      	movs	r2, #0
   136ec:	605a      	str	r2, [r3, #4]
}
   136ee:	4770      	bx	lr
   136f0:	e000ed90 	.word	0xe000ed90

000136f4 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   136f4:	4913      	ldr	r1, [pc, #76]	; (13744 <arm_mpu_init+0x50>)
   136f6:	6808      	ldr	r0, [r1, #0]
   136f8:	2808      	cmp	r0, #8
{
   136fa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   136fc:	d81e      	bhi.n	1373c <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   136fe:	f7ff fff1 	bl	136e4 <arm_core_mpu_disable>
	MPU->RNR = index;
   13702:	4c11      	ldr	r4, [pc, #68]	; (13748 <arm_mpu_init+0x54>)
   13704:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13706:	2200      	movs	r2, #0
   13708:	4290      	cmp	r0, r2
   1370a:	f101 010c 	add.w	r1, r1, #12
   1370e:	d105      	bne.n	1371c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13710:	4b0e      	ldr	r3, [pc, #56]	; (1374c <arm_mpu_init+0x58>)
   13712:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   13714:	f7ff ffdc 	bl	136d0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   13718:	2000      	movs	r0, #0
}
   1371a:	bd10      	pop	{r4, pc}
   1371c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1371e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   13722:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13726:	4313      	orrs	r3, r2
   13728:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1372c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1372e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13732:	f043 0301 	orr.w	r3, r3, #1
   13736:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13738:	3201      	adds	r2, #1
   1373a:	e7e5      	b.n	13708 <arm_mpu_init+0x14>
		return -1;
   1373c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13740:	e7eb      	b.n	1371a <arm_mpu_init+0x26>
   13742:	bf00      	nop
   13744:	0001d12c 	.word	0x0001d12c
   13748:	e000ed90 	.word	0xe000ed90
   1374c:	20002a53 	.word	0x20002a53

00013750 <arm_core_mpu_configure_static_mpu_regions>:
{
   13750:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13752:	4c03      	ldr	r4, [pc, #12]	; (13760 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13754:	2301      	movs	r3, #1
   13756:	7822      	ldrb	r2, [r4, #0]
   13758:	f7ff ff74 	bl	13644 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1375c:	7020      	strb	r0, [r4, #0]
}
   1375e:	bd10      	pop	{r4, pc}
   13760:	20002a53 	.word	0x20002a53

00013764 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   13764:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13766:	4a08      	ldr	r2, [pc, #32]	; (13788 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   13768:	2300      	movs	r3, #0
   1376a:	7812      	ldrb	r2, [r2, #0]
   1376c:	f7ff ff6a 	bl	13644 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13770:	f110 0f16 	cmn.w	r0, #22
   13774:	d003      	beq.n	1377e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   13776:	4b05      	ldr	r3, [pc, #20]	; (1378c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   13778:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1377a:	2807      	cmp	r0, #7
   1377c:	dd00      	ble.n	13780 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
   1377e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   13780:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   13782:	611a      	str	r2, [r3, #16]
   13784:	3001      	adds	r0, #1
   13786:	e7f8      	b.n	1377a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   13788:	20002a53 	.word	0x20002a53
   1378c:	e000ed90 	.word	0xe000ed90

00013790 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13790:	4b01      	ldr	r3, [pc, #4]	; (13798 <__stdout_hook_install+0x8>)
   13792:	6018      	str	r0, [r3, #0]
}
   13794:	4770      	bx	lr
   13796:	bf00      	nop
   13798:	20000524 	.word	0x20000524

0001379c <nordicsemi_nrf52_init>:
   1379c:	f04f 0340 	mov.w	r3, #64	; 0x40
   137a0:	f3ef 8211 	mrs	r2, BASEPRI
   137a4:	f383 8811 	msr	BASEPRI, r3
   137a8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   137ac:	4906      	ldr	r1, [pc, #24]	; (137c8 <nordicsemi_nrf52_init+0x2c>)
   137ae:	2301      	movs	r3, #1
   137b0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   137b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   137b8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   137bc:	f382 8811 	msr	BASEPRI, r2
   137c0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   137c4:	2000      	movs	r0, #0
   137c6:	4770      	bx	lr
   137c8:	4001e000 	.word	0x4001e000

000137cc <sys_arch_reboot>:
    *p_gpregret = val;
   137cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   137d0:	b2c0      	uxtb	r0, r0
   137d2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   137d6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   137da:	4905      	ldr	r1, [pc, #20]	; (137f0 <sys_arch_reboot+0x24>)
   137dc:	4b05      	ldr	r3, [pc, #20]	; (137f4 <sys_arch_reboot+0x28>)
   137de:	68ca      	ldr	r2, [r1, #12]
   137e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   137e4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   137e6:	60cb      	str	r3, [r1, #12]
   137e8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   137ec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   137ee:	e7fd      	b.n	137ec <sys_arch_reboot+0x20>
   137f0:	e000ed00 	.word	0xe000ed00
   137f4:	05fa0004 	.word	0x05fa0004

000137f8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   137f8:	b120      	cbz	r0, 13804 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   137fa:	4b03      	ldr	r3, [pc, #12]	; (13808 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   137fc:	0180      	lsls	r0, r0, #6
   137fe:	f043 0301 	orr.w	r3, r3, #1
   13802:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13804:	4770      	bx	lr
   13806:	bf00      	nop
   13808:	0001d0a0 	.word	0x0001d0a0

0001380c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1380c:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   1380e:	7802      	ldrb	r2, [r0, #0]
   13810:	2a01      	cmp	r2, #1
{
   13812:	4604      	mov	r4, r0
   13814:	460b      	mov	r3, r1
	switch (src->type) {
   13816:	d016      	beq.n	13846 <uuid_to_uuid128+0x3a>
   13818:	2a02      	cmp	r2, #2
   1381a:	d02c      	beq.n	13876 <uuid_to_uuid128+0x6a>
   1381c:	b98a      	cbnz	r2, 13842 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1381e:	4a19      	ldr	r2, [pc, #100]	; (13884 <uuid_to_uuid128+0x78>)
   13820:	460d      	mov	r5, r1
   13822:	f102 0710 	add.w	r7, r2, #16
   13826:	6810      	ldr	r0, [r2, #0]
   13828:	6851      	ldr	r1, [r2, #4]
   1382a:	462e      	mov	r6, r5
   1382c:	c603      	stmia	r6!, {r0, r1}
   1382e:	3208      	adds	r2, #8
   13830:	42ba      	cmp	r2, r7
   13832:	4635      	mov	r5, r6
   13834:	d1f7      	bne.n	13826 <uuid_to_uuid128+0x1a>
   13836:	7812      	ldrb	r2, [r2, #0]
   13838:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1383a:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1383c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1383e:	0a12      	lsrs	r2, r2, #8
   13840:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13842:	bcf0      	pop	{r4, r5, r6, r7}
   13844:	4770      	bx	lr
		*dst = uuid128_base;
   13846:	4a0f      	ldr	r2, [pc, #60]	; (13884 <uuid_to_uuid128+0x78>)
   13848:	460d      	mov	r5, r1
   1384a:	f102 0710 	add.w	r7, r2, #16
   1384e:	6810      	ldr	r0, [r2, #0]
   13850:	6851      	ldr	r1, [r2, #4]
   13852:	462e      	mov	r6, r5
   13854:	c603      	stmia	r6!, {r0, r1}
   13856:	3208      	adds	r2, #8
   13858:	42ba      	cmp	r2, r7
   1385a:	4635      	mov	r5, r6
   1385c:	d1f7      	bne.n	1384e <uuid_to_uuid128+0x42>
   1385e:	7812      	ldrb	r2, [r2, #0]
   13860:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   13862:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   13864:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   13866:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   1386a:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   1386c:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   1386e:	0a12      	lsrs	r2, r2, #8
   13870:	7399      	strb	r1, [r3, #14]
   13872:	741a      	strb	r2, [r3, #16]
}
   13874:	e7e5      	b.n	13842 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   13876:	4601      	mov	r1, r0
}
   13878:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   1387a:	2211      	movs	r2, #17
   1387c:	4618      	mov	r0, r3
   1387e:	f006 bd2f 	b.w	1a2e0 <memcpy>
   13882:	bf00      	nop
   13884:	0001d782 	.word	0x0001d782

00013888 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
   13888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1388a:	4f0a      	ldr	r7, [pc, #40]	; (138b4 <id_find+0x2c>)
{
   1388c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1388e:	2500      	movs	r5, #0
   13890:	79fb      	ldrb	r3, [r7, #7]
   13892:	b2ec      	uxtb	r4, r5
   13894:	42a3      	cmp	r3, r4
   13896:	d802      	bhi.n	1389e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13898:	f06f 0401 	mvn.w	r4, #1
   1389c:	e008      	b.n	138b0 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1389e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   138a2:	4439      	add	r1, r7
   138a4:	4630      	mov	r0, r6
   138a6:	f006 fdff 	bl	1a4a8 <bt_addr_le_cmp>
   138aa:	3501      	adds	r5, #1
   138ac:	2800      	cmp	r0, #0
   138ae:	d1ef      	bne.n	13890 <id_find+0x8>
}
   138b0:	4620      	mov	r0, r4
   138b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   138b4:	200003c8 	.word	0x200003c8

000138b8 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   138b8:	6843      	ldr	r3, [r0, #4]
{
   138ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   138bc:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   138be:	0558      	lsls	r0, r3, #21
   138c0:	d502      	bpl.n	138c8 <valid_adv_param+0x10>
		return false;
   138c2:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   138c4:	b003      	add	sp, #12
   138c6:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   138c8:	6922      	ldr	r2, [r4, #16]
   138ca:	b10a      	cbz	r2, 138d0 <valid_adv_param+0x18>
   138cc:	07d9      	lsls	r1, r3, #31
   138ce:	d5f8      	bpl.n	138c2 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   138d0:	4d17      	ldr	r5, [pc, #92]	; (13930 <valid_adv_param+0x78>)
   138d2:	7820      	ldrb	r0, [r4, #0]
   138d4:	79eb      	ldrb	r3, [r5, #7]
   138d6:	4283      	cmp	r3, r0
   138d8:	d9f3      	bls.n	138c2 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   138da:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   138de:	2300      	movs	r3, #0
   138e0:	4669      	mov	r1, sp
   138e2:	4428      	add	r0, r5
   138e4:	9300      	str	r3, [sp, #0]
   138e6:	f8cd 3003 	str.w	r3, [sp, #3]
   138ea:	f006 fddd 	bl	1a4a8 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
   138ee:	2800      	cmp	r0, #0
   138f0:	d0e7      	beq.n	138c2 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   138f2:	6860      	ldr	r0, [r4, #4]
   138f4:	07c2      	lsls	r2, r0, #31
   138f6:	d406      	bmi.n	13906 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   138f8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   138fc:	2b08      	cmp	r3, #8
   138fe:	d802      	bhi.n	13906 <valid_adv_param+0x4e>
   13900:	68a3      	ldr	r3, [r4, #8]
   13902:	2b9f      	cmp	r3, #159	; 0x9f
   13904:	d9dd      	bls.n	138c2 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   13906:	06c3      	lsls	r3, r0, #27
   13908:	d401      	bmi.n	1390e <valid_adv_param+0x56>
   1390a:	6923      	ldr	r3, [r4, #16]
   1390c:	b943      	cbnz	r3, 13920 <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
   1390e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   13912:	429a      	cmp	r2, r3
   13914:	d8d5      	bhi.n	138c2 <valid_adv_param+0xa>
   13916:	2a1f      	cmp	r2, #31
   13918:	d9d3      	bls.n	138c2 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1391a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1391e:	d8d0      	bhi.n	138c2 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   13920:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   13924:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   13928:	bf18      	it	ne
   1392a:	2001      	movne	r0, #1
   1392c:	e7ca      	b.n	138c4 <valid_adv_param+0xc>
   1392e:	bf00      	nop
   13930:	200003c8 	.word	0x200003c8

00013934 <hci_le_meta_event>:
{
   13934:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   13936:	2101      	movs	r1, #1
{
   13938:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   1393a:	3008      	adds	r0, #8
   1393c:	f008 fb3a 	bl	1bfb4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13940:	4621      	mov	r1, r4
   13942:	4a03      	ldr	r2, [pc, #12]	; (13950 <hci_le_meta_event+0x1c>)
   13944:	7800      	ldrb	r0, [r0, #0]
}
   13946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1394a:	2307      	movs	r3, #7
   1394c:	f006 bd7f 	b.w	1a44e <handle_event>
   13950:	0001d14c 	.word	0x0001d14c

00013954 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13954:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13956:	4c0c      	ldr	r4, [pc, #48]	; (13988 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13958:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1395a:	2205      	movs	r2, #5
   1395c:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   13960:	f001 fce4 	bl	1532c <bt_conn_lookup_state_le>
		if (!conn) {
   13964:	b970      	cbnz	r0, 13984 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   13966:	4b09      	ldr	r3, [pc, #36]	; (1398c <find_pending_connect.part.0+0x38>)
   13968:	6818      	ldr	r0, [r3, #0]
   1396a:	889a      	ldrh	r2, [r3, #4]
   1396c:	9000      	str	r0, [sp, #0]
   1396e:	799b      	ldrb	r3, [r3, #6]
   13970:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13974:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
						       BT_ADDR_LE_NONE,
   13978:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1397c:	2204      	movs	r2, #4
   1397e:	4669      	mov	r1, sp
   13980:	f001 fcd4 	bl	1532c <bt_conn_lookup_state_le>
}
   13984:	b002      	add	sp, #8
   13986:	bd10      	pop	{r4, pc}
   13988:	200003c8 	.word	0x200003c8
   1398c:	0001d088 	.word	0x0001d088

00013990 <hci_rx_thread>:
{
   13990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   13994:	4f3b      	ldr	r7, [pc, #236]	; (13a84 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13996:	f8df 8100 	ldr.w	r8, [pc, #256]	; 13a98 <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1399a:	4e3b      	ldr	r6, [pc, #236]	; (13a88 <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1399c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   139a4:	4638      	mov	r0, r7
   139a6:	f008 fa8d 	bl	1bec4 <net_buf_get>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   139aa:	7d03      	ldrb	r3, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   139ac:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   139ae:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   139b0:	d039      	beq.n	13a26 <hci_rx_thread+0x96>
   139b2:	2b03      	cmp	r3, #3
   139b4:	d120      	bne.n	139f8 <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   139b6:	8983      	ldrh	r3, [r0, #12]
   139b8:	2b03      	cmp	r3, #3
   139ba:	d80c      	bhi.n	139d6 <hci_rx_thread+0x46>
   139bc:	4933      	ldr	r1, [pc, #204]	; (13a8c <hci_rx_thread+0xfc>)
   139be:	4834      	ldr	r0, [pc, #208]	; (13a90 <hci_rx_thread+0x100>)
   139c0:	f240 530a 	movw	r3, #1290	; 0x50a
   139c4:	4632      	mov	r2, r6
   139c6:	f005 fe6a 	bl	1969e <printk>
   139ca:	4040      	eors	r0, r0
   139cc:	f380 8811 	msr	BASEPRI, r0
   139d0:	f04f 0003 	mov.w	r0, #3
   139d4:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   139d6:	2104      	movs	r1, #4
   139d8:	f104 0008 	add.w	r0, r4, #8
   139dc:	f008 faea 	bl	1bfb4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   139e0:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   139e2:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   139e4:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   139e8:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   139ea:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   139ec:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   139f0:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   139f2:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   139f4:	d003      	beq.n	139fe <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   139f6:	4620      	mov	r0, r4
			net_buf_unref(buf);
   139f8:	f003 f9b8 	bl	16d6c <net_buf_unref>
			break;
   139fc:	e010      	b.n	13a20 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   139fe:	f001 fc6d 	bl	152dc <bt_conn_lookup_handle>
	if (!conn) {
   13a02:	4605      	mov	r5, r0
   13a04:	2800      	cmp	r0, #0
   13a06:	d0f6      	beq.n	139f6 <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   13a08:	f001 fe96 	bl	15738 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   13a0c:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   13a10:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   13a12:	4621      	mov	r1, r4
   13a14:	4628      	mov	r0, r5
   13a16:	f007 f842 	bl	1aa9e <bt_conn_recv>
	bt_conn_unref(conn);
   13a1a:	4628      	mov	r0, r5
   13a1c:	f007 f8c7 	bl	1abae <bt_conn_unref>
	z_impl_k_yield();
   13a20:	f005 fa06 	bl	18e30 <z_impl_k_yield>
	while (1) {
   13a24:	e7ba      	b.n	1399c <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13a26:	8983      	ldrh	r3, [r0, #12]
   13a28:	2b01      	cmp	r3, #1
   13a2a:	d80c      	bhi.n	13a46 <hci_rx_thread+0xb6>
   13a2c:	4917      	ldr	r1, [pc, #92]	; (13a8c <hci_rx_thread+0xfc>)
   13a2e:	4818      	ldr	r0, [pc, #96]	; (13a90 <hci_rx_thread+0x100>)
   13a30:	f241 4359 	movw	r3, #5209	; 0x1459
   13a34:	4632      	mov	r2, r6
   13a36:	f005 fe32 	bl	1969e <printk>
   13a3a:	4040      	eors	r0, r0
   13a3c:	f380 8811 	msr	BASEPRI, r0
   13a40:	f04f 0003 	mov.w	r0, #3
   13a44:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   13a46:	2102      	movs	r1, #2
   13a48:	f104 0008 	add.w	r0, r4, #8
   13a4c:	f008 fab2 	bl	1bfb4 <net_buf_simple_pull_mem>
   13a50:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13a52:	7800      	ldrb	r0, [r0, #0]
   13a54:	f006 fce9 	bl	1a42a <bt_hci_evt_get_flags>
   13a58:	0783      	lsls	r3, r0, #30
   13a5a:	d40c      	bmi.n	13a76 <hci_rx_thread+0xe6>
   13a5c:	490d      	ldr	r1, [pc, #52]	; (13a94 <hci_rx_thread+0x104>)
   13a5e:	480c      	ldr	r0, [pc, #48]	; (13a90 <hci_rx_thread+0x100>)
   13a60:	f241 435d 	movw	r3, #5213	; 0x145d
   13a64:	4632      	mov	r2, r6
   13a66:	f005 fe1a 	bl	1969e <printk>
   13a6a:	4040      	eors	r0, r0
   13a6c:	f380 8811 	msr	BASEPRI, r0
   13a70:	f04f 0003 	mov.w	r0, #3
   13a74:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13a76:	7828      	ldrb	r0, [r5, #0]
   13a78:	2304      	movs	r3, #4
   13a7a:	4642      	mov	r2, r8
   13a7c:	4621      	mov	r1, r4
   13a7e:	f006 fce6 	bl	1a44e <handle_event>
   13a82:	e7b8      	b.n	139f6 <hci_rx_thread+0x66>
   13a84:	200004cc 	.word	0x200004cc
   13a88:	0001d793 	.word	0x0001d793
   13a8c:	0001d7c7 	.word	0x0001d7c7
   13a90:	0001d7e0 	.word	0x0001d7e0
   13a94:	0001d7fd 	.word	0x0001d7fd
   13a98:	0001d1c4 	.word	0x0001d1c4

00013a9c <hci_num_completed_packets>:
{
   13a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   13aa0:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   13aa2:	6887      	ldr	r7, [r0, #8]
		k_queue_append(&work_q->queue, work);
   13aa4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 13b90 <hci_num_completed_packets+0xf4>
			tx->pending_no_cb = 0U;
   13aa8:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   13aaa:	783b      	ldrb	r3, [r7, #0]
   13aac:	429d      	cmp	r5, r3
   13aae:	db01      	blt.n	13ab4 <hci_num_completed_packets+0x18>
}
   13ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   13ab4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   13ab8:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   13abc:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
   13ac0:	f04f 0340 	mov.w	r3, #64	; 0x40
   13ac4:	f3ef 8a11 	mrs	sl, BASEPRI
   13ac8:	f383 8811 	msr	BASEPRI, r3
   13acc:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
   13ad0:	f001 fc04 	bl	152dc <bt_conn_lookup_handle>
		if (!conn) {
   13ad4:	4604      	mov	r4, r0
   13ad6:	b928      	cbnz	r0, 13ae4 <hci_num_completed_packets+0x48>
	__asm__ volatile(
   13ad8:	f38a 8811 	msr	BASEPRI, sl
   13adc:	f3bf 8f6f 	isb	sy
	for (i = 0; i < evt->num_handles; i++) {
   13ae0:	3501      	adds	r5, #1
   13ae2:	e7e2      	b.n	13aaa <hci_num_completed_packets+0xe>
   13ae4:	f38a 8811 	msr	BASEPRI, sl
   13ae8:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13aec:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   13af0:	b326      	cbz	r6, 13b3c <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   13af2:	f04f 0340 	mov.w	r3, #64	; 0x40
   13af6:	f3ef 8211 	mrs	r2, BASEPRI
   13afa:	f383 8811 	msr	BASEPRI, r3
   13afe:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   13b02:	69e3      	ldr	r3, [r4, #28]
   13b04:	b16b      	cbz	r3, 13b22 <hci_num_completed_packets+0x86>
				conn->pending_no_cb--;
   13b06:	3b01      	subs	r3, #1
   13b08:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   13b0a:	f382 8811 	msr	BASEPRI, r2
   13b0e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   13b12:	4620      	mov	r0, r4
   13b14:	f001 fab6 	bl	15084 <bt_conn_get_pkts>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13b18:	3e01      	subs	r6, #1
   13b1a:	f005 f9fd 	bl	18f18 <z_impl_k_sem_give>
   13b1e:	b2b6      	uxth	r6, r6
   13b20:	e7e6      	b.n	13af0 <hci_num_completed_packets+0x54>
Z_GENLIST_IS_EMPTY(slist)
   13b22:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13b24:	b12b      	cbz	r3, 13b32 <hci_num_completed_packets+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13b26:	69a1      	ldr	r1, [r4, #24]
   13b28:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   13b2a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13b2c:	428b      	cmp	r3, r1
	list->tail = node;
   13b2e:	bf08      	it	eq
   13b30:	61a0      	streq	r0, [r4, #24]
   13b32:	f382 8811 	msr	BASEPRI, r2
   13b36:	f3bf 8f6f 	isb	sy
			if (!node) {
   13b3a:	b91b      	cbnz	r3, 13b44 <hci_num_completed_packets+0xa8>
		bt_conn_unref(conn);
   13b3c:	4620      	mov	r0, r4
   13b3e:	f007 f836 	bl	1abae <bt_conn_unref>
   13b42:	e7cd      	b.n	13ae0 <hci_num_completed_packets+0x44>
	__asm__ volatile(
   13b44:	f04f 0240 	mov.w	r2, #64	; 0x40
   13b48:	f3ef 8111 	mrs	r1, BASEPRI
   13b4c:	f382 8811 	msr	BASEPRI, r2
   13b50:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   13b54:	68da      	ldr	r2, [r3, #12]
   13b56:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   13b58:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   13b5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   13b5e:	f8c3 800c 	str.w	r8, [r3, #12]
   13b62:	b98a      	cbnz	r2, 13b88 <hci_num_completed_packets+0xec>
	list->head = node;
   13b64:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   13b68:	f381 8811 	msr	BASEPRI, r1
   13b6c:	f3bf 8f6f 	isb	sy
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13b70:	2101      	movs	r1, #1
   13b72:	f104 0030 	add.w	r0, r4, #48	; 0x30
   13b76:	f006 fcd2 	bl	1a51e <atomic_or>
   13b7a:	07c3      	lsls	r3, r0, #31
   13b7c:	d4c9      	bmi.n	13b12 <hci_num_completed_packets+0x76>
		k_queue_append(&work_q->queue, work);
   13b7e:	4651      	mov	r1, sl
   13b80:	4648      	mov	r0, r9
   13b82:	f008 fdb8 	bl	1c6f6 <k_queue_append>
   13b86:	e7c4      	b.n	13b12 <hci_num_completed_packets+0x76>
	parent->next = child;
   13b88:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13b8a:	6263      	str	r3, [r4, #36]	; 0x24
}
   13b8c:	e7ec      	b.n	13b68 <hci_num_completed_packets+0xcc>
   13b8e:	bf00      	nop
   13b90:	20002330 	.word	0x20002330

00013b94 <hci_cmd_done.isra.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   13b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b96:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13b98:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   13b9a:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13b9c:	f003 f82a 	bl	16bf4 <net_buf_pool_get>
   13ba0:	4b19      	ldr	r3, [pc, #100]	; (13c08 <hci_cmd_done.isra.0+0x74>)
   13ba2:	4283      	cmp	r3, r0
   13ba4:	d12e      	bne.n	13c04 <hci_cmd_done.isra.0+0x70>
	if (cmd(buf)->opcode != opcode) {
   13ba6:	4620      	mov	r0, r4
   13ba8:	f003 f82c 	bl	16c04 <net_buf_id>
	if (cmd(buf)->state && !status) {
   13bac:	4620      	mov	r0, r4
   13bae:	f003 f829 	bl	16c04 <net_buf_id>
   13bb2:	4d16      	ldr	r5, [pc, #88]	; (13c0c <hci_cmd_done.isra.0+0x78>)
   13bb4:	270c      	movs	r7, #12
   13bb6:	fb07 5300 	mla	r3, r7, r0, r5
   13bba:	685b      	ldr	r3, [r3, #4]
   13bbc:	b15b      	cbz	r3, 13bd6 <hci_cmd_done.isra.0+0x42>
   13bbe:	b956      	cbnz	r6, 13bd6 <hci_cmd_done.isra.0+0x42>
		struct cmd_state_set *update = cmd(buf)->state;
   13bc0:	4620      	mov	r0, r4
   13bc2:	f003 f81f 	bl	16c04 <net_buf_id>
   13bc6:	fb07 5000 	mla	r0, r7, r0, r5
   13bca:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   13bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
   13bd0:	7a1a      	ldrb	r2, [r3, #8]
   13bd2:	f006 fcc2 	bl	1a55a <atomic_set_bit_to>
	if (cmd(buf)->sync) {
   13bd6:	4620      	mov	r0, r4
   13bd8:	f003 f814 	bl	16c04 <net_buf_id>
   13bdc:	270c      	movs	r7, #12
   13bde:	fb07 5000 	mla	r0, r7, r0, r5
   13be2:	6883      	ldr	r3, [r0, #8]
   13be4:	b173      	cbz	r3, 13c04 <hci_cmd_done.isra.0+0x70>
		cmd(buf)->status = status;
   13be6:	4620      	mov	r0, r4
   13be8:	f003 f80c 	bl	16c04 <net_buf_id>
   13bec:	4378      	muls	r0, r7
   13bee:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   13bf0:	4620      	mov	r0, r4
   13bf2:	f003 f807 	bl	16c04 <net_buf_id>
   13bf6:	fb07 5500 	mla	r5, r7, r0, r5
   13bfa:	68a8      	ldr	r0, [r5, #8]
}
   13bfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   13c00:	f005 b98a 	b.w	18f18 <z_impl_k_sem_give>
   13c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c06:	bf00      	nop
   13c08:	20000840 	.word	0x20000840
   13c0c:	200024f8 	.word	0x200024f8

00013c10 <hci_cmd_complete>:
{
   13c10:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   13c12:	2103      	movs	r1, #3
{
   13c14:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   13c16:	3008      	adds	r0, #8
   13c18:	f008 f9cc 	bl	1bfb4 <net_buf_simple_pull_mem>
	status = buf->data[0];
   13c1c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   13c1e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13c20:	7818      	ldrb	r0, [r3, #0]
   13c22:	4621      	mov	r1, r4
   13c24:	f7ff ffb6 	bl	13b94 <hci_cmd_done.isra.0>
	if (ncmd) {
   13c28:	b125      	cbz	r5, 13c34 <hci_cmd_complete+0x24>
   13c2a:	4803      	ldr	r0, [pc, #12]	; (13c38 <hci_cmd_complete+0x28>)
}
   13c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13c30:	f005 b972 	b.w	18f18 <z_impl_k_sem_give>
   13c34:	bd38      	pop	{r3, r4, r5, pc}
   13c36:	bf00      	nop
   13c38:	200004b0 	.word	0x200004b0

00013c3c <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   13c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13c3e:	4b28      	ldr	r3, [pc, #160]	; (13ce0 <le_adv_start_add_conn+0xa4>)
   13c40:	b085      	sub	sp, #20
   13c42:	4605      	mov	r5, r0
   13c44:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
   13c46:	7801      	ldrb	r1, [r0, #0]
   13c48:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   13c4c:	f006 fc23 	bl	1a496 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   13c50:	f010 0f40 	tst.w	r0, #64	; 0x40
   13c54:	461a      	mov	r2, r3
   13c56:	d008      	beq.n	13c6a <le_adv_start_add_conn+0x2e>
   13c58:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   13c5c:	f006 fc1b 	bl	1a496 <atomic_get>
   13c60:	05c0      	lsls	r0, r0, #23
   13c62:	d502      	bpl.n	13c6a <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   13c64:	7e1b      	ldrb	r3, [r3, #24]
   13c66:	428b      	cmp	r3, r1
   13c68:	d131      	bne.n	13cce <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
   13c6a:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13c6c:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
   13c6e:	f816 3b0b 	ldrb.w	r3, [r6], #11
   13c72:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13c76:	4630      	mov	r0, r6
   13c78:	2300      	movs	r3, #0
   13c7a:	9300      	str	r3, [sp, #0]
   13c7c:	f8cd 3003 	str.w	r3, [sp, #3]
   13c80:	f006 fc12 	bl	1a4a8 <bt_addr_le_cmp>
   13c84:	4604      	mov	r4, r0
   13c86:	7828      	ldrb	r0, [r5, #0]
   13c88:	b164      	cbz	r4, 13ca4 <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   13c8a:	4631      	mov	r1, r6
   13c8c:	f006 ffa4 	bl	1abd8 <bt_conn_exists_le>
   13c90:	4604      	mov	r4, r0
   13c92:	b9f8      	cbnz	r0, 13cd4 <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   13c94:	7828      	ldrb	r0, [r5, #0]
   13c96:	4631      	mov	r1, r6
   13c98:	f001 faf8 	bl	1528c <bt_conn_add_le>
	if (!conn) {
   13c9c:	4605      	mov	r5, r0
   13c9e:	b1e0      	cbz	r0, 13cda <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   13ca0:	2105      	movs	r1, #5
   13ca2:	e00e      	b.n	13cc2 <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   13ca4:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   13ca8:	9302      	str	r3, [sp, #8]
   13caa:	a902      	add	r1, sp, #8
   13cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13cb0:	f8ad 300c 	strh.w	r3, [sp, #12]
   13cb4:	f88d 300e 	strb.w	r3, [sp, #14]
   13cb8:	f001 fae8 	bl	1528c <bt_conn_add_le>
		if (!conn) {
   13cbc:	4605      	mov	r5, r0
   13cbe:	b160      	cbz	r0, 13cda <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   13cc0:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   13cc2:	f001 fb59 	bl	15378 <bt_conn_set_state>
	*out_conn = conn;
   13cc6:	603d      	str	r5, [r7, #0]
	return 0;
}
   13cc8:	4620      	mov	r0, r4
   13cca:	b005      	add	sp, #20
   13ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
   13cce:	f06f 0422 	mvn.w	r4, #34	; 0x22
   13cd2:	e7f9      	b.n	13cc8 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
   13cd4:	f06f 0415 	mvn.w	r4, #21
   13cd8:	e7f6      	b.n	13cc8 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
   13cda:	f06f 040b 	mvn.w	r4, #11
   13cde:	e7f3      	b.n	13cc8 <le_adv_start_add_conn+0x8c>
   13ce0:	200003c8 	.word	0x200003c8

00013ce4 <hci_cmd_status>:
{
   13ce4:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   13ce6:	2104      	movs	r1, #4
{
   13ce8:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   13cea:	3008      	adds	r0, #8
   13cec:	f008 f962 	bl	1bfb4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13cf0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13cf2:	7800      	ldrb	r0, [r0, #0]
   13cf4:	4621      	mov	r1, r4
   13cf6:	f7ff ff4d 	bl	13b94 <hci_cmd_done.isra.0>
	if (ncmd) {
   13cfa:	b125      	cbz	r5, 13d06 <hci_cmd_status+0x22>
   13cfc:	4802      	ldr	r0, [pc, #8]	; (13d08 <hci_cmd_status+0x24>)
}
   13cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13d02:	f005 b909 	b.w	18f18 <z_impl_k_sem_give>
   13d06:	bd38      	pop	{r3, r4, r5, pc}
   13d08:	200004b0 	.word	0x200004b0

00013d0c <bt_hci_cmd_create>:
{
   13d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   13d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   13d18:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   13d1a:	4816      	ldr	r0, [pc, #88]	; (13d74 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   13d1c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13d78 <bt_hci_cmd_create+0x6c>
{
   13d20:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   13d22:	f008 f8ca 	bl	1beba <net_buf_alloc_fixed>
   13d26:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
   13d28:	f100 0b08 	add.w	fp, r0, #8
   13d2c:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
   13d2e:	2700      	movs	r7, #0
   13d30:	4658      	mov	r0, fp
   13d32:	f008 f8e1 	bl	1bef8 <net_buf_simple_reserve>
   13d36:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   13d38:	4620      	mov	r0, r4
   13d3a:	f002 ff63 	bl	16c04 <net_buf_id>
   13d3e:	f04f 0a0c 	mov.w	sl, #12
   13d42:	fb0a 8000 	mla	r0, sl, r0, r8
   13d46:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   13d48:	4620      	mov	r0, r4
   13d4a:	f002 ff5b 	bl	16c04 <net_buf_id>
   13d4e:	fb0a 8000 	mla	r0, sl, r0, r8
   13d52:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   13d54:	4620      	mov	r0, r4
   13d56:	f002 ff55 	bl	16c04 <net_buf_id>
   13d5a:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
   13d5e:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
   13d60:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
   13d62:	4658      	mov	r0, fp
   13d64:	f008 f8ff 	bl	1bf66 <net_buf_simple_add>
	hdr->param_len = param_len;
   13d68:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   13d6a:	8005      	strh	r5, [r0, #0]
}
   13d6c:	4620      	mov	r0, r4
   13d6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d72:	bf00      	nop
   13d74:	20000840 	.word	0x20000840
   13d78:	200024f8 	.word	0x200024f8

00013d7c <bt_hci_cmd_send_sync>:
{
   13d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d7e:	4615      	mov	r5, r2
   13d80:	b087      	sub	sp, #28
	if (!buf) {
   13d82:	460c      	mov	r4, r1
   13d84:	b921      	cbnz	r1, 13d90 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   13d86:	f7ff ffc1 	bl	13d0c <bt_hci_cmd_create>
		if (!buf) {
   13d8a:	4604      	mov	r4, r0
   13d8c:	2800      	cmp	r0, #0
   13d8e:	d048      	beq.n	13e22 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13d90:	2201      	movs	r2, #1
   13d92:	2100      	movs	r1, #0
   13d94:	4668      	mov	r0, sp
   13d96:	f008 fdda 	bl	1c94e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   13d9a:	4620      	mov	r0, r4
   13d9c:	f002 ff32 	bl	16c04 <net_buf_id>
   13da0:	4e21      	ldr	r6, [pc, #132]	; (13e28 <bt_hci_cmd_send_sync+0xac>)
   13da2:	230c      	movs	r3, #12
   13da4:	fb03 6000 	mla	r0, r3, r0, r6
   13da8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   13dac:	4620      	mov	r0, r4
   13dae:	f008 f8b4 	bl	1bf1a <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   13db2:	481e      	ldr	r0, [pc, #120]	; (13e2c <bt_hci_cmd_send_sync+0xb0>)
   13db4:	4621      	mov	r1, r4
   13db6:	f008 f8a3 	bl	1bf00 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13dba:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13dbe:	2300      	movs	r3, #0
   13dc0:	4668      	mov	r0, sp
   13dc2:	f005 f8cf 	bl	18f64 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   13dc6:	4607      	mov	r7, r0
   13dc8:	b180      	cbz	r0, 13dec <bt_hci_cmd_send_sync+0x70>
   13dca:	4a19      	ldr	r2, [pc, #100]	; (13e30 <bt_hci_cmd_send_sync+0xb4>)
   13dcc:	4919      	ldr	r1, [pc, #100]	; (13e34 <bt_hci_cmd_send_sync+0xb8>)
   13dce:	481a      	ldr	r0, [pc, #104]	; (13e38 <bt_hci_cmd_send_sync+0xbc>)
   13dd0:	f44f 73bb 	mov.w	r3, #374	; 0x176
   13dd4:	f005 fc63 	bl	1969e <printk>
   13dd8:	4818      	ldr	r0, [pc, #96]	; (13e3c <bt_hci_cmd_send_sync+0xc0>)
   13dda:	4639      	mov	r1, r7
   13ddc:	f005 fc5f 	bl	1969e <printk>
   13de0:	4040      	eors	r0, r0
   13de2:	f380 8811 	msr	BASEPRI, r0
   13de6:	f04f 0003 	mov.w	r0, #3
   13dea:	df02      	svc	2
	status = cmd(buf)->status;
   13dec:	4620      	mov	r0, r4
   13dee:	f002 ff09 	bl	16c04 <net_buf_id>
   13df2:	230c      	movs	r3, #12
   13df4:	4343      	muls	r3, r0
   13df6:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   13df8:	b156      	cbz	r6, 13e10 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   13dfa:	4620      	mov	r0, r4
   13dfc:	f002 ffb6 	bl	16d6c <net_buf_unref>
			return -EIO;
   13e00:	2e09      	cmp	r6, #9
   13e02:	bf0c      	ite	eq
   13e04:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
   13e08:	f06f 0004 	mvnne.w	r0, #4
}
   13e0c:	b007      	add	sp, #28
   13e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   13e10:	b115      	cbz	r5, 13e18 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   13e12:	602c      	str	r4, [r5, #0]
	return 0;
   13e14:	4630      	mov	r0, r6
   13e16:	e7f9      	b.n	13e0c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   13e18:	4620      	mov	r0, r4
   13e1a:	f002 ffa7 	bl	16d6c <net_buf_unref>
	return 0;
   13e1e:	4628      	mov	r0, r5
   13e20:	e7f4      	b.n	13e0c <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   13e22:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13e26:	e7f1      	b.n	13e0c <bt_hci_cmd_send_sync+0x90>
   13e28:	200024f8 	.word	0x200024f8
   13e2c:	200004e4 	.word	0x200004e4
   13e30:	0001d793 	.word	0x0001d793
   13e34:	0001d82b 	.word	0x0001d82b
   13e38:	0001d7e0 	.word	0x0001d7e0
   13e3c:	0001d834 	.word	0x0001d834

00013e40 <set_random_address>:
{
   13e40:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
   13e42:	4e15      	ldr	r6, [pc, #84]	; (13e98 <set_random_address+0x58>)
   13e44:	2206      	movs	r2, #6
   13e46:	f106 0131 	add.w	r1, r6, #49	; 0x31
   13e4a:	4605      	mov	r5, r0
   13e4c:	f006 fa38 	bl	1a2c0 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   13e50:	4604      	mov	r4, r0
   13e52:	b1e0      	cbz	r0, 13e8e <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   13e54:	2106      	movs	r1, #6
   13e56:	f242 0005 	movw	r0, #8197	; 0x2005
   13e5a:	f7ff ff57 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   13e5e:	4604      	mov	r4, r0
   13e60:	b1b8      	cbz	r0, 13e92 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
   13e62:	2206      	movs	r2, #6
   13e64:	4629      	mov	r1, r5
   13e66:	3008      	adds	r0, #8
   13e68:	f008 f883 	bl	1bf72 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   13e6c:	4621      	mov	r1, r4
   13e6e:	2200      	movs	r2, #0
   13e70:	f242 0005 	movw	r0, #8197	; 0x2005
   13e74:	f7ff ff82 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   13e78:	4604      	mov	r4, r0
   13e7a:	b940      	cbnz	r0, 13e8e <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   13e7c:	2206      	movs	r2, #6
   13e7e:	4629      	mov	r1, r5
   13e80:	f106 0031 	add.w	r0, r6, #49	; 0x31
   13e84:	f006 fa2c 	bl	1a2e0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   13e88:	2301      	movs	r3, #1
   13e8a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   13e8e:	4620      	mov	r0, r4
   13e90:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   13e92:	f06f 0436 	mvn.w	r4, #54	; 0x36
   13e96:	e7fa      	b.n	13e8e <set_random_address+0x4e>
   13e98:	200003c8 	.word	0x200003c8

00013e9c <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   13e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13ea0:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13ea2:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   13ea6:	460e      	mov	r6, r1
   13ea8:	4690      	mov	r8, r2
   13eaa:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13eac:	d027      	beq.n	13efe <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13eae:	4f27      	ldr	r7, [pc, #156]	; (13f4c <le_adv_set_random_addr.isra.0+0xb0>)
   13eb0:	b12a      	cbz	r2, 13ebe <le_adv_set_random_addr.isra.0+0x22>
   13eb2:	0688      	lsls	r0, r1, #26
   13eb4:	d503      	bpl.n	13ebe <le_adv_set_random_addr.isra.0+0x22>
   13eb6:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   13eba:	0659      	lsls	r1, r3, #25
   13ebc:	d542      	bpl.n	13f44 <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13ebe:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13ec2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   13ec6:	5cfb      	ldrb	r3, [r7, r3]
   13ec8:	2b01      	cmp	r3, #1
   13eca:	d008      	beq.n	13ede <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
   13ecc:	eba9 0404 	sub.w	r4, r9, r4
   13ed0:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13ed2:	f1b8 0f00 	cmp.w	r8, #0
   13ed6:	d10d      	bne.n	13ef4 <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13ed8:	702b      	strb	r3, [r5, #0]
	return 0;
   13eda:	2000      	movs	r0, #0
   13edc:	e007      	b.n	13eee <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
   13ede:	2007      	movs	r0, #7
   13ee0:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   13ee4:	4438      	add	r0, r7
   13ee6:	f7ff ffab 	bl	13e40 <set_random_address>
				if (err) {
   13eea:	2800      	cmp	r0, #0
   13eec:	d0ee      	beq.n	13ecc <le_adv_set_random_addr.isra.0+0x30>
}
   13eee:	b003      	add	sp, #12
   13ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13ef4:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13ef6:	bf48      	it	mi
   13ef8:	f043 0302 	orrmi.w	r3, r3, #2
   13efc:	e7ec      	b.n	13ed8 <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13efe:	074b      	lsls	r3, r1, #29
   13f00:	d510      	bpl.n	13f24 <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13f02:	4e12      	ldr	r6, [pc, #72]	; (13f4c <le_adv_set_random_addr.isra.0+0xb0>)
   13f04:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13f08:	00e7      	lsls	r7, r4, #3
   13f0a:	5cf3      	ldrb	r3, [r6, r3]
   13f0c:	2b01      	cmp	r3, #1
   13f0e:	d105      	bne.n	13f1c <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
   13f10:	2007      	movs	r0, #7
   13f12:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   13f16:	4430      	add	r0, r6
   13f18:	f7ff ff92 	bl	13e40 <set_random_address>
			*own_addr_type = id_addr->type;
   13f1c:	1b3c      	subs	r4, r7, r4
   13f1e:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13f20:	702b      	strb	r3, [r5, #0]
		if (err) {
   13f22:	e7e4      	b.n	13eee <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   13f24:	2106      	movs	r1, #6
   13f26:	4668      	mov	r0, sp
   13f28:	f003 ff78 	bl	17e1c <bt_rand>
	if (err) {
   13f2c:	b940      	cbnz	r0, 13f40 <le_adv_set_random_addr.isra.0+0xa4>
	nrpa.val[5] &= 0x3f;
   13f2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   13f32:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   13f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13f38:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   13f3c:	f7ff ff80 	bl	13e40 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13f40:	2301      	movs	r3, #1
   13f42:	e7ed      	b.n	13f20 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
   13f44:	f06f 0022 	mvn.w	r0, #34	; 0x22
   13f48:	e7d1      	b.n	13eee <le_adv_set_random_addr.isra.0+0x52>
   13f4a:	bf00      	nop
   13f4c:	200003c8 	.word	0x200003c8

00013f50 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   13f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f54:	b087      	sub	sp, #28
   13f56:	4606      	mov	r6, r0
   13f58:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   13f5c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   13f60:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   13f64:	460c      	mov	r4, r1
   13f66:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   13f68:	2100      	movs	r1, #0
   13f6a:	2210      	movs	r2, #16
   13f6c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   13f6e:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
   13f70:	f006 f9e1 	bl	1a336 <memset>
	if (use_name) {
   13f74:	f1b8 0f00 	cmp.w	r8, #0
   13f78:	d00e      	beq.n	13f98 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
   13f7a:	bbb4      	cbnz	r4, 13fea <le_adv_update.constprop.0+0x9a>
   13f7c:	2d00      	cmp	r5, #0
   13f7e:	d13f      	bne.n	14000 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
   13f80:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 14034 <le_adv_update.constprop.0+0xe4>
   13f84:	4658      	mov	r0, fp
   13f86:	f006 f988 	bl	1a29a <strlen>
   13f8a:	2309      	movs	r3, #9
   13f8c:	f88d 3000 	strb.w	r3, [sp]
   13f90:	f88d 0001 	strb.w	r0, [sp, #1]
   13f94:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   13f98:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   13f9c:	f1b8 0f00 	cmp.w	r8, #0
   13fa0:	d030      	beq.n	14004 <le_adv_update.constprop.0+0xb4>
   13fa2:	f1ba 0f00 	cmp.w	sl, #0
   13fa6:	d12d      	bne.n	14004 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
   13fa8:	2301      	movs	r3, #1
			d[1].data = &data;
   13faa:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   13fae:	9305      	str	r3, [sp, #20]
			d_len = 2;
   13fb0:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   13fb2:	a902      	add	r1, sp, #8
   13fb4:	f242 0008 	movw	r0, #8200	; 0x2008
   13fb8:	f006 fb33 	bl	1a622 <hci_set_ad>
		if (err) {
   13fbc:	4604      	mov	r4, r0
   13fbe:	b938      	cbnz	r0, 13fd0 <le_adv_update.constprop.0+0x80>
	if (scannable) {
   13fc0:	f1ba 0f00 	cmp.w	sl, #0
   13fc4:	d120      	bne.n	14008 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13fc6:	2104      	movs	r1, #4
   13fc8:	f106 0014 	add.w	r0, r6, #20
   13fcc:	f006 faa7 	bl	1a51e <atomic_or>
}
   13fd0:	4620      	mov	r0, r4
   13fd2:	b007      	add	sp, #28
   13fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   13fd8:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   13fdc:	3a08      	subs	r2, #8
   13fde:	2a01      	cmp	r2, #1
   13fe0:	d925      	bls.n	1402e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   13fe2:	3301      	adds	r3, #1
   13fe4:	429f      	cmp	r7, r3
   13fe6:	d1f7      	bne.n	13fd8 <le_adv_update.constprop.0+0x88>
   13fe8:	e7c8      	b.n	13f7c <le_adv_update.constprop.0+0x2c>
   13fea:	2300      	movs	r3, #0
   13fec:	e7fa      	b.n	13fe4 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   13fee:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   13ff2:	3a08      	subs	r2, #8
   13ff4:	2a01      	cmp	r2, #1
   13ff6:	d91a      	bls.n	1402e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   13ff8:	3301      	adds	r3, #1
   13ffa:	4599      	cmp	r9, r3
   13ffc:	d1f7      	bne.n	13fee <le_adv_update.constprop.0+0x9e>
   13ffe:	e7bf      	b.n	13f80 <le_adv_update.constprop.0+0x30>
   14000:	2300      	movs	r3, #0
   14002:	e7fa      	b.n	13ffa <le_adv_update.constprop.0+0xaa>
		d_len = 1;
   14004:	2201      	movs	r2, #1
   14006:	e7d4      	b.n	13fb2 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
   14008:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
   1400c:	2201      	movs	r2, #1
   1400e:	f1b8 0f00 	cmp.w	r8, #0
   14012:	d003      	beq.n	1401c <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
   14014:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   14016:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   1401a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1401c:	a902      	add	r1, sp, #8
   1401e:	f242 0009 	movw	r0, #8201	; 0x2009
   14022:	f006 fafe 	bl	1a622 <hci_set_ad>
		if (err) {
   14026:	2800      	cmp	r0, #0
   14028:	d0cd      	beq.n	13fc6 <le_adv_update.constprop.0+0x76>
   1402a:	4604      	mov	r4, r0
   1402c:	e7d0      	b.n	13fd0 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
   1402e:	f06f 0415 	mvn.w	r4, #21
   14032:	e7cd      	b.n	13fd0 <le_adv_update.constprop.0+0x80>
   14034:	0001d63b 	.word	0x0001d63b

00014038 <set_le_adv_enable_legacy>:
{
   14038:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1403a:	4606      	mov	r6, r0
   1403c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1403e:	f242 000a 	movw	r0, #8202	; 0x200a
   14042:	2101      	movs	r1, #1
   14044:	f7ff fe62 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   14048:	4604      	mov	r4, r0
   1404a:	b1e8      	cbz	r0, 14088 <set_le_adv_enable_legacy+0x50>
	if (enable) {
   1404c:	3008      	adds	r0, #8
   1404e:	b1cd      	cbz	r5, 14084 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
   14050:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
   14052:	f007 ff97 	bl	1bf84 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
   14056:	3614      	adds	r6, #20
	state->bit = bit;
   14058:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
   1405a:	4620      	mov	r0, r4
	state->bit = bit;
   1405c:	9302      	str	r3, [sp, #8]
	state->target = target;
   1405e:	9601      	str	r6, [sp, #4]
	state->val = val;
   14060:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
   14064:	f002 fdce 	bl	16c04 <net_buf_id>
   14068:	4b09      	ldr	r3, [pc, #36]	; (14090 <set_le_adv_enable_legacy+0x58>)
   1406a:	220c      	movs	r2, #12
   1406c:	fb02 3000 	mla	r0, r2, r0, r3
   14070:	ab01      	add	r3, sp, #4
   14072:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   14074:	2200      	movs	r2, #0
   14076:	4621      	mov	r1, r4
   14078:	f242 000a 	movw	r0, #8202	; 0x200a
   1407c:	f7ff fe7e 	bl	13d7c <bt_hci_cmd_send_sync>
}
   14080:	b004      	add	sp, #16
   14082:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
   14084:	4629      	mov	r1, r5
   14086:	e7e4      	b.n	14052 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
   14088:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1408c:	e7f8      	b.n	14080 <set_le_adv_enable_legacy+0x48>
   1408e:	bf00      	nop
   14090:	200024f8 	.word	0x200024f8

00014094 <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14094:	b530      	push	{r4, r5, lr}
   14096:	4d13      	ldr	r5, [pc, #76]	; (140e4 <id_create.isra.0+0x50>)
   14098:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1409c:	b085      	sub	sp, #20
   1409e:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   140a0:	460c      	mov	r4, r1
   140a2:	b171      	cbz	r1, 140c2 <id_create.isra.0+0x2e>
   140a4:	2300      	movs	r3, #0
   140a6:	4669      	mov	r1, sp
   140a8:	4620      	mov	r0, r4
   140aa:	9300      	str	r3, [sp, #0]
   140ac:	f8cd 3003 	str.w	r3, [sp, #3]
   140b0:	f006 f9fa 	bl	1a4a8 <bt_addr_le_cmp>
   140b4:	b128      	cbz	r0, 140c2 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   140b6:	4621      	mov	r1, r4
   140b8:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   140ba:	f006 f9f2 	bl	1a4a2 <bt_addr_le_copy>
}
   140be:	b005      	add	sp, #20
   140c0:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   140c2:	a802      	add	r0, sp, #8
   140c4:	f006 fb2e 	bl	1a724 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   140c8:	a802      	add	r0, sp, #8
   140ca:	f7ff fbdd 	bl	13888 <id_find>
   140ce:	2800      	cmp	r0, #0
   140d0:	daf7      	bge.n	140c2 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   140d2:	a902      	add	r1, sp, #8
   140d4:	4628      	mov	r0, r5
   140d6:	f006 f9e4 	bl	1a4a2 <bt_addr_le_copy>
		if (addr) {
   140da:	2c00      	cmp	r4, #0
   140dc:	d0ef      	beq.n	140be <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   140de:	4629      	mov	r1, r5
   140e0:	4620      	mov	r0, r4
   140e2:	e7ea      	b.n	140ba <id_create.isra.0+0x26>
   140e4:	200003c8 	.word	0x200003c8

000140e8 <bt_send>:
	return bt_dev.drv->send(buf);
   140e8:	4b02      	ldr	r3, [pc, #8]	; (140f4 <bt_send+0xc>)
   140ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   140ee:	691b      	ldr	r3, [r3, #16]
   140f0:	4718      	bx	r3
   140f2:	bf00      	nop
   140f4:	200003c8 	.word	0x200003c8

000140f8 <bt_hci_cmd_send>:
{
   140f8:	b538      	push	{r3, r4, r5, lr}
   140fa:	4605      	mov	r5, r0
	if (!buf) {
   140fc:	460c      	mov	r4, r1
   140fe:	b919      	cbnz	r1, 14108 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   14100:	f7ff fe04 	bl	13d0c <bt_hci_cmd_create>
		if (!buf) {
   14104:	4604      	mov	r4, r0
   14106:	b198      	cbz	r0, 14130 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   14108:	f640 4335 	movw	r3, #3125	; 0xc35
   1410c:	429d      	cmp	r5, r3
   1410e:	d109      	bne.n	14124 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   14110:	4620      	mov	r0, r4
   14112:	f7ff ffe9 	bl	140e8 <bt_send>
		if (err) {
   14116:	4605      	mov	r5, r0
   14118:	b110      	cbz	r0, 14120 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   1411a:	4620      	mov	r0, r4
   1411c:	f002 fe26 	bl	16d6c <net_buf_unref>
}
   14120:	4628      	mov	r0, r5
   14122:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14124:	4804      	ldr	r0, [pc, #16]	; (14138 <bt_hci_cmd_send+0x40>)
   14126:	4621      	mov	r1, r4
   14128:	f007 feea 	bl	1bf00 <net_buf_put>
	return 0;
   1412c:	2500      	movs	r5, #0
   1412e:	e7f7      	b.n	14120 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   14130:	f06f 0536 	mvn.w	r5, #54	; 0x36
   14134:	e7f4      	b.n	14120 <bt_hci_cmd_send+0x28>
   14136:	bf00      	nop
   14138:	200004e4 	.word	0x200004e4

0001413c <conn_auto_initiate>:
{
   1413c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1413e:	7a83      	ldrb	r3, [r0, #10]
   14140:	2b07      	cmp	r3, #7
{
   14142:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14144:	d11e      	bne.n	14184 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14146:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14148:	4630      	mov	r0, r6
   1414a:	f006 f9a4 	bl	1a496 <atomic_get>
   1414e:	0483      	lsls	r3, r0, #18
   14150:	d41a      	bmi.n	14188 <conn_auto_initiate+0x4c>
   14152:	78e3      	ldrb	r3, [r4, #3]
   14154:	b123      	cbz	r3, 14160 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   14156:	4b25      	ldr	r3, [pc, #148]	; (141ec <conn_auto_initiate+0xb0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   14158:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   1415c:	071d      	lsls	r5, r3, #28
   1415e:	d513      	bpl.n	14188 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   14160:	2102      	movs	r1, #2
   14162:	f242 0016 	movw	r0, #8214	; 0x2016
   14166:	f7ff fdd1 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   1416a:	4605      	mov	r5, r0
   1416c:	b160      	cbz	r0, 14188 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
   1416e:	2102      	movs	r1, #2
   14170:	3008      	adds	r0, #8
   14172:	f007 fef8 	bl	1bf66 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   14176:	8823      	ldrh	r3, [r4, #0]
   14178:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   1417a:	4629      	mov	r1, r5
   1417c:	f242 0016 	movw	r0, #8214	; 0x2016
   14180:	f7ff ffba 	bl	140f8 <bt_hci_cmd_send>
}
   14184:	b004      	add	sp, #16
   14186:	bd70      	pop	{r4, r5, r6, pc}
   14188:	4630      	mov	r0, r6
   1418a:	f006 f984 	bl	1a496 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1418e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   14192:	4d16      	ldr	r5, [pc, #88]	; (141ec <conn_auto_initiate+0xb0>)
   14194:	f3c0 3100 	ubfx	r1, r0, #12, #1
   14198:	d10f      	bne.n	141ba <conn_auto_initiate+0x7e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   1419a:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   1419e:	07d8      	lsls	r0, r3, #31
   141a0:	d50b      	bpl.n	141ba <conn_auto_initiate+0x7e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   141a2:	2302      	movs	r3, #2
   141a4:	9100      	str	r1, [sp, #0]
   141a6:	461a      	mov	r2, r3
   141a8:	4620      	mov	r0, r4
   141aa:	f006 fb00 	bl	1a7ae <bt_le_set_phy>
		if (!err) {
   141ae:	b920      	cbnz	r0, 141ba <conn_auto_initiate+0x7e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   141b0:	2180      	movs	r1, #128	; 0x80
   141b2:	4630      	mov	r0, r6
   141b4:	f006 f9b3 	bl	1a51e <atomic_or>
			return;
   141b8:	e7e4      	b.n	14184 <conn_auto_initiate+0x48>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   141ba:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   141be:	069a      	lsls	r2, r3, #26
   141c0:	d5e0      	bpl.n	14184 <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   141c2:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   141c6:	689b      	ldr	r3, [r3, #8]
   141c8:	079b      	lsls	r3, r3, #30
   141ca:	d5db      	bpl.n	14184 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   141cc:	f10d 010e 	add.w	r1, sp, #14
   141d0:	a803      	add	r0, sp, #12
   141d2:	f006 fa0e 	bl	1a5f2 <hci_le_read_max_data_len>
			if (!err) {
   141d6:	2800      	cmp	r0, #0
   141d8:	d1d4      	bne.n	14184 <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
   141da:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   141de:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   141e2:	4620      	mov	r0, r4
   141e4:	f006 fac6 	bl	1a774 <bt_le_set_data_len>
		}
   141e8:	e7cc      	b.n	14184 <conn_auto_initiate+0x48>
   141ea:	bf00      	nop
   141ec:	200003c8 	.word	0x200003c8

000141f0 <hci_tx_thread>:
{
   141f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   141f4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 142fc <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
   141f8:	f8df a114 	ldr.w	sl, [pc, #276]	; 14310 <hci_tx_thread+0x120>
		events[0].state = K_POLL_STATE_NOT_READY;
   141fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14200:	483d      	ldr	r0, [pc, #244]	; (142f8 <hci_tx_thread+0x108>)
		events[0].state = K_POLL_STATE_NOT_READY;
   14202:	f36f 3310 	bfc	r3, #12, #5
   14206:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1420a:	f001 f801 	bl	15210 <bt_conn_prepare_events>
   1420e:	1c45      	adds	r5, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   14210:	483a      	ldr	r0, [pc, #232]	; (142fc <hci_tx_thread+0x10c>)
   14212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1421a:	4629      	mov	r1, r5
   1421c:	f005 f978 	bl	19510 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   14220:	b160      	cbz	r0, 1423c <hci_tx_thread+0x4c>
   14222:	4937      	ldr	r1, [pc, #220]	; (14300 <hci_tx_thread+0x110>)
   14224:	4837      	ldr	r0, [pc, #220]	; (14304 <hci_tx_thread+0x114>)
   14226:	f241 43cf 	movw	r3, #5327	; 0x14cf
   1422a:	4652      	mov	r2, sl
   1422c:	f005 fa37 	bl	1969e <printk>
   14230:	4040      	eors	r0, r0
   14232:	f380 8811 	msr	BASEPRI, r0
   14236:	f04f 0003 	mov.w	r0, #3
   1423a:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1423c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 14314 <hci_tx_thread+0x124>
{
   14240:	4e2e      	ldr	r6, [pc, #184]	; (142fc <hci_tx_thread+0x10c>)
	return z_impl_k_sem_take(sem, timeout);
   14242:	f5a9 778e 	sub.w	r7, r9, #284	; 0x11c
   14246:	f1a9 0b34 	sub.w	fp, r9, #52	; 0x34
	for (; count; ev++, count--) {
   1424a:	b915      	cbnz	r5, 14252 <hci_tx_thread+0x62>
	z_impl_k_yield();
   1424c:	f004 fdf0 	bl	18e30 <z_impl_k_yield>
	while (1) {
   14250:	e7d4      	b.n	141fc <hci_tx_thread+0xc>
		switch (ev->state) {
   14252:	68f3      	ldr	r3, [r6, #12]
   14254:	f3c3 3304 	ubfx	r3, r3, #12, #5
   14258:	2b04      	cmp	r3, #4
   1425a:	d142      	bne.n	142e2 <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1425c:	7b33      	ldrb	r3, [r6, #12]
   1425e:	2b00      	cmp	r3, #0
   14260:	d142      	bne.n	142e8 <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14262:	2200      	movs	r2, #0
   14264:	2300      	movs	r3, #0
   14266:	4648      	mov	r0, r9
   14268:	f007 fe2c 	bl	1bec4 <net_buf_get>
	BT_ASSERT(buf);
   1426c:	4604      	mov	r4, r0
   1426e:	b960      	cbnz	r0, 1428a <hci_tx_thread+0x9a>
   14270:	4925      	ldr	r1, [pc, #148]	; (14308 <hci_tx_thread+0x118>)
   14272:	4824      	ldr	r0, [pc, #144]	; (14304 <hci_tx_thread+0x114>)
   14274:	f241 436c 	movw	r3, #5228	; 0x146c
   14278:	4652      	mov	r2, sl
   1427a:	f005 fa10 	bl	1969e <printk>
   1427e:	4040      	eors	r0, r0
   14280:	f380 8811 	msr	BASEPRI, r0
   14284:	f04f 0003 	mov.w	r0, #3
   14288:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1428a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1428e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14292:	4658      	mov	r0, fp
   14294:	f004 fe66 	bl	18f64 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14298:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   1429c:	b120      	cbz	r0, 142a8 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   1429e:	f002 fd65 	bl	16d6c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   142a2:	2300      	movs	r3, #0
   142a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
   142a8:	4620      	mov	r0, r4
   142aa:	f007 fe36 	bl	1bf1a <net_buf_ref>
   142ae:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
	err = bt_send(buf);
   142b2:	4620      	mov	r0, r4
   142b4:	f7ff ff18 	bl	140e8 <bt_send>
	if (err) {
   142b8:	b198      	cbz	r0, 142e2 <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
   142ba:	4814      	ldr	r0, [pc, #80]	; (1430c <hci_tx_thread+0x11c>)
   142bc:	f004 fe2c 	bl	18f18 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   142c0:	4620      	mov	r0, r4
   142c2:	f002 fc9f 	bl	16c04 <net_buf_id>
   142c6:	4621      	mov	r1, r4
   142c8:	201f      	movs	r0, #31
   142ca:	f7ff fc63 	bl	13b94 <hci_cmd_done.isra.0>
		net_buf_unref(bt_dev.sent_cmd);
   142ce:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   142d2:	f002 fd4b 	bl	16d6c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   142d6:	2300      	movs	r3, #0
		net_buf_unref(buf);
   142d8:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   142da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		net_buf_unref(buf);
   142de:	f002 fd45 	bl	16d6c <net_buf_unref>
	for (; count; ev++, count--) {
   142e2:	3614      	adds	r6, #20
   142e4:	3d01      	subs	r5, #1
   142e6:	e7b0      	b.n	1424a <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   142e8:	2b01      	cmp	r3, #1
   142ea:	d1fa      	bne.n	142e2 <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
   142ec:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   142ee:	3834      	subs	r0, #52	; 0x34
   142f0:	f001 f9ba 	bl	15668 <bt_conn_process_tx>
   142f4:	e7f5      	b.n	142e2 <hci_tx_thread+0xf2>
   142f6:	bf00      	nop
   142f8:	2000053c 	.word	0x2000053c
   142fc:	20000528 	.word	0x20000528
   14300:	0001d82b 	.word	0x0001d82b
   14304:	0001d7e0 	.word	0x0001d7e0
   14308:	0001d854 	.word	0x0001d854
   1430c:	200004b0 	.word	0x200004b0
   14310:	0001d793 	.word	0x0001d793
   14314:	200004e4 	.word	0x200004e4

00014318 <hci_event_prio>:
{
   14318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1431c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1431e:	f100 0608 	add.w	r6, r0, #8
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   14322:	4630      	mov	r0, r6
   14324:	f007 fe56 	bl	1bfd4 <net_buf_simple_headroom>
	state->len = buf->len;
   14328:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1432c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   14330:	4605      	mov	r5, r0
   14332:	d80c      	bhi.n	1434e <hci_event_prio+0x36>
   14334:	4a1c      	ldr	r2, [pc, #112]	; (143a8 <hci_event_prio+0x90>)
   14336:	491d      	ldr	r1, [pc, #116]	; (143ac <hci_event_prio+0x94>)
   14338:	481d      	ldr	r0, [pc, #116]	; (143b0 <hci_event_prio+0x98>)
   1433a:	f641 1326 	movw	r3, #6438	; 0x1926
   1433e:	f005 f9ae 	bl	1969e <printk>
   14342:	4040      	eors	r0, r0
   14344:	f380 8811 	msr	BASEPRI, r0
   14348:	f04f 0003 	mov.w	r0, #3
   1434c:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1434e:	2102      	movs	r1, #2
   14350:	4630      	mov	r0, r6
   14352:	f007 fe2f 	bl	1bfb4 <net_buf_simple_pull_mem>
   14356:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14358:	7800      	ldrb	r0, [r0, #0]
   1435a:	f006 f866 	bl	1a42a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1435e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14360:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14362:	d40c      	bmi.n	1437e <hci_event_prio+0x66>
   14364:	4a10      	ldr	r2, [pc, #64]	; (143a8 <hci_event_prio+0x90>)
   14366:	4913      	ldr	r1, [pc, #76]	; (143b4 <hci_event_prio+0x9c>)
   14368:	4811      	ldr	r0, [pc, #68]	; (143b0 <hci_event_prio+0x98>)
   1436a:	f641 132a 	movw	r3, #6442	; 0x192a
   1436e:	f005 f996 	bl	1969e <printk>
   14372:	4040      	eors	r0, r0
   14374:	f380 8811 	msr	BASEPRI, r0
   14378:	f04f 0003 	mov.w	r0, #3
   1437c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1437e:	2305      	movs	r3, #5
   14380:	4a0d      	ldr	r2, [pc, #52]	; (143b8 <hci_event_prio+0xa0>)
   14382:	7838      	ldrb	r0, [r7, #0]
   14384:	4621      	mov	r1, r4
   14386:	f006 f862 	bl	1a44e <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1438a:	07b3      	lsls	r3, r6, #30
   1438c:	d507      	bpl.n	1439e <hci_event_prio+0x86>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   1438e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14390:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14394:	fa10 f585 	uxtah	r5, r0, r5
   14398:	60a5      	str	r5, [r4, #8]
}
   1439a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1439e:	4620      	mov	r0, r4
}
   143a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   143a4:	f002 bce2 	b.w	16d6c <net_buf_unref>
   143a8:	0001d793 	.word	0x0001d793
   143ac:	0001d7c7 	.word	0x0001d7c7
   143b0:	0001d7e0 	.word	0x0001d7e0
   143b4:	0001d858 	.word	0x0001d858
   143b8:	0001d1e4 	.word	0x0001d1e4

000143bc <bt_recv>:
{
   143bc:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   143be:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   143c0:	2b01      	cmp	r3, #1
{
   143c2:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   143c4:	d007      	beq.n	143d6 <bt_recv+0x1a>
   143c6:	2b03      	cmp	r3, #3
   143c8:	d113      	bne.n	143f2 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   143ca:	480c      	ldr	r0, [pc, #48]	; (143fc <bt_recv+0x40>)
   143cc:	4629      	mov	r1, r5
   143ce:	f007 fd97 	bl	1bf00 <net_buf_put>
		return 0;
   143d2:	2000      	movs	r0, #0
   143d4:	e00c      	b.n	143f0 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   143d6:	6883      	ldr	r3, [r0, #8]
   143d8:	7818      	ldrb	r0, [r3, #0]
   143da:	f006 f826 	bl	1a42a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   143de:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   143e0:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   143e2:	d502      	bpl.n	143ea <bt_recv+0x2e>
			hci_event_prio(buf);
   143e4:	4628      	mov	r0, r5
   143e6:	f7ff ff97 	bl	14318 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   143ea:	f014 0002 	ands.w	r0, r4, #2
   143ee:	d1ec      	bne.n	143ca <bt_recv+0xe>
}
   143f0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   143f2:	f002 fcbb 	bl	16d6c <net_buf_unref>
		return -EINVAL;
   143f6:	f06f 0015 	mvn.w	r0, #21
   143fa:	e7f9      	b.n	143f0 <bt_recv+0x34>
   143fc:	200004cc 	.word	0x200004cc

00014400 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   14400:	4a08      	ldr	r2, [pc, #32]	; (14424 <bt_hci_driver_register+0x24>)
{
   14402:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   14404:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
   14408:	b930      	cbnz	r0, 14418 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1440a:	68d9      	ldr	r1, [r3, #12]
   1440c:	b139      	cbz	r1, 1441e <bt_hci_driver_register+0x1e>
   1440e:	6919      	ldr	r1, [r3, #16]
   14410:	b129      	cbz	r1, 1441e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   14412:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
   14416:	4770      	bx	lr
		return -EALREADY;
   14418:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1441c:	4770      	bx	lr
		return -EINVAL;
   1441e:	f06f 0015 	mvn.w	r0, #21
}
   14422:	4770      	bx	lr
   14424:	200003c8 	.word	0x200003c8

00014428 <bt_finalize_init>:
   14428:	4801      	ldr	r0, [pc, #4]	; (14430 <bt_finalize_init+0x8>)
   1442a:	2102      	movs	r1, #2
   1442c:	f006 b877 	b.w	1a51e <atomic_or>
   14430:	20000460 	.word	0x20000460

00014434 <bt_get_name>:
}
   14434:	4800      	ldr	r0, [pc, #0]	; (14438 <bt_get_name+0x4>)
   14436:	4770      	bx	lr
   14438:	0001d63b 	.word	0x0001d63b

0001443c <bt_id_create>:
{
   1443c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1443e:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14440:	4605      	mov	r5, r0
   14442:	b918      	cbnz	r0, 1444c <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14444:	b1ec      	cbz	r4, 14482 <bt_id_create+0x46>
		return -EINVAL;
   14446:	f06f 0415 	mvn.w	r4, #21
   1444a:	e017      	b.n	1447c <bt_id_create+0x40>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1444c:	2300      	movs	r3, #0
   1444e:	4669      	mov	r1, sp
   14450:	9300      	str	r3, [sp, #0]
   14452:	f8cd 3003 	str.w	r3, [sp, #3]
   14456:	f006 f827 	bl	1a4a8 <bt_addr_le_cmp>
   1445a:	2800      	cmp	r0, #0
   1445c:	d0f2      	beq.n	14444 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1445e:	782b      	ldrb	r3, [r5, #0]
   14460:	2b01      	cmp	r3, #1
   14462:	d1f0      	bne.n	14446 <bt_id_create+0xa>
   14464:	79ab      	ldrb	r3, [r5, #6]
   14466:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1446a:	2bc0      	cmp	r3, #192	; 0xc0
   1446c:	d1eb      	bne.n	14446 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1446e:	4628      	mov	r0, r5
   14470:	f7ff fa0a 	bl	13888 <id_find>
   14474:	2800      	cmp	r0, #0
   14476:	dbe5      	blt.n	14444 <bt_id_create+0x8>
			return -EALREADY;
   14478:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   1447c:	4620      	mov	r0, r4
   1447e:	b003      	add	sp, #12
   14480:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14482:	4b07      	ldr	r3, [pc, #28]	; (144a0 <bt_id_create+0x64>)
   14484:	79dc      	ldrb	r4, [r3, #7]
   14486:	2c01      	cmp	r4, #1
   14488:	d006      	beq.n	14498 <bt_id_create+0x5c>
	new_id = bt_dev.id_count++;
   1448a:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   1448c:	4629      	mov	r1, r5
   1448e:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   14490:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   14492:	f7ff fdff 	bl	14094 <id_create.isra.0>
	return new_id;
   14496:	e7f1      	b.n	1447c <bt_id_create+0x40>
		return -ENOMEM;
   14498:	f06f 040b 	mvn.w	r4, #11
   1449c:	e7ee      	b.n	1447c <bt_id_create+0x40>
   1449e:	bf00      	nop
   144a0:	200003c8 	.word	0x200003c8

000144a4 <bt_setup_public_id_addr>:
{
   144a4:	b570      	push	{r4, r5, r6, lr}
   144a6:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   144a8:	aa01      	add	r2, sp, #4
   144aa:	2100      	movs	r1, #0
   144ac:	f241 0009 	movw	r0, #4105	; 0x1009
   144b0:	f7ff fc64 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   144b4:	4e1a      	ldr	r6, [pc, #104]	; (14520 <bt_setup_public_id_addr+0x7c>)
   144b6:	4604      	mov	r4, r0
   144b8:	b118      	cbz	r0, 144c2 <bt_setup_public_id_addr+0x1e>
	bt_dev.id_count = bt_read_public_addr(&addr);
   144ba:	2300      	movs	r3, #0
   144bc:	71f3      	strb	r3, [r6, #7]
}
   144be:	b006      	add	sp, #24
   144c0:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   144c2:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   144c4:	689d      	ldr	r5, [r3, #8]
   144c6:	9004      	str	r0, [sp, #16]
   144c8:	3501      	adds	r5, #1
   144ca:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
   144ce:	2206      	movs	r2, #6
   144d0:	a904      	add	r1, sp, #16
   144d2:	4628      	mov	r0, r5
   144d4:	f005 fef4 	bl	1a2c0 <memcmp>
   144d8:	b918      	cbnz	r0, 144e2 <bt_setup_public_id_addr+0x3e>
		net_buf_unref(rsp);
   144da:	9801      	ldr	r0, [sp, #4]
   144dc:	f002 fc46 	bl	16d6c <net_buf_unref>
   144e0:	e7eb      	b.n	144ba <bt_setup_public_id_addr+0x16>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   144e2:	4b10      	ldr	r3, [pc, #64]	; (14524 <bt_setup_public_id_addr+0x80>)
   144e4:	6818      	ldr	r0, [r3, #0]
   144e6:	9002      	str	r0, [sp, #8]
   144e8:	889b      	ldrh	r3, [r3, #4]
   144ea:	f8ad 300c 	strh.w	r3, [sp, #12]
   144ee:	2206      	movs	r2, #6
   144f0:	a902      	add	r1, sp, #8
   144f2:	4628      	mov	r0, r5
   144f4:	f005 fee4 	bl	1a2c0 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   144f8:	2800      	cmp	r0, #0
   144fa:	d0ee      	beq.n	144da <bt_setup_public_id_addr+0x36>
	memcpy(dst, src, sizeof(*dst));
   144fc:	4629      	mov	r1, r5
   144fe:	2206      	movs	r2, #6
   14500:	f10d 0011 	add.w	r0, sp, #17
   14504:	f005 feec 	bl	1a2e0 <memcpy>
	net_buf_unref(rsp);
   14508:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1450a:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   1450e:	f002 fc2d 	bl	16d6c <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   14512:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   14514:	a904      	add	r1, sp, #16
   14516:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
   14518:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   1451a:	f7ff fdbb 	bl	14094 <id_create.isra.0>
   1451e:	e7ce      	b.n	144be <bt_setup_public_id_addr+0x1a>
   14520:	200003c8 	.word	0x200003c8
   14524:	0001d08f 	.word	0x0001d08f

00014528 <bt_read_static_addr>:
{
   14528:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1452c:	4b15      	ldr	r3, [pc, #84]	; (14584 <bt_read_static_addr+0x5c>)
   1452e:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
   14532:	f014 0401 	ands.w	r4, r4, #1
{
   14536:	4607      	mov	r7, r0
   14538:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1453a:	d015      	beq.n	14568 <bt_read_static_addr+0x40>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1453c:	aa01      	add	r2, sp, #4
   1453e:	2100      	movs	r1, #0
   14540:	f64f 4009 	movw	r0, #64521	; 0xfc09
   14544:	f7ff fc1a 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   14548:	4605      	mov	r5, r0
   1454a:	b9c8      	cbnz	r0, 14580 <bt_read_static_addr+0x58>
	rp = (void *)rsp->data;
   1454c:	9b01      	ldr	r3, [sp, #4]
   1454e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   14550:	785c      	ldrb	r4, [r3, #1]
   14552:	42b4      	cmp	r4, r6
   14554:	bf28      	it	cs
   14556:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   14558:	f04f 0816 	mov.w	r8, #22
   1455c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1455e:	42a5      	cmp	r5, r4
   14560:	db06      	blt.n	14570 <bt_read_static_addr+0x48>
	net_buf_unref(rsp);
   14562:	9801      	ldr	r0, [sp, #4]
   14564:	f002 fc02 	bl	16d6c <net_buf_unref>
}
   14568:	4620      	mov	r0, r4
   1456a:	b002      	add	sp, #8
   1456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   14570:	fb08 7005 	mla	r0, r8, r5, r7
   14574:	2216      	movs	r2, #22
   14576:	4631      	mov	r1, r6
   14578:	f005 feb2 	bl	1a2e0 <memcpy>
	for (i = 0; i < cnt; i++) {
   1457c:	3501      	adds	r5, #1
   1457e:	e7ee      	b.n	1455e <bt_read_static_addr+0x36>
		return 0;
   14580:	2400      	movs	r4, #0
   14582:	e7f1      	b.n	14568 <bt_read_static_addr+0x40>
   14584:	200003c8 	.word	0x200003c8

00014588 <bt_setup_random_id_addr>:
{
   14588:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   1458a:	4d14      	ldr	r5, [pc, #80]	; (145dc <bt_setup_random_id_addr+0x54>)
   1458c:	79ec      	ldrb	r4, [r5, #7]
{
   1458e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   14590:	b9f4      	cbnz	r4, 145d0 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   14592:	2101      	movs	r1, #1
   14594:	a802      	add	r0, sp, #8
   14596:	f7ff ffc7 	bl	14528 <bt_read_static_addr>
   1459a:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   1459c:	b1c0      	cbz	r0, 145d0 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1459e:	2716      	movs	r7, #22
   145a0:	e00f      	b.n	145c2 <bt_setup_random_id_addr+0x3a>
   145a2:	ab02      	add	r3, sp, #8
   145a4:	fb07 3106 	mla	r1, r7, r6, r3
   145a8:	2206      	movs	r2, #6
   145aa:	f10d 0001 	add.w	r0, sp, #1
   145ae:	f005 fe97 	bl	1a2e0 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   145b2:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   145b4:	4669      	mov	r1, sp
   145b6:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   145b8:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   145bc:	f7ff fd6a 	bl	14094 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   145c0:	3401      	adds	r4, #1
   145c2:	79eb      	ldrb	r3, [r5, #7]
   145c4:	b2e6      	uxtb	r6, r4
   145c6:	42b3      	cmp	r3, r6
   145c8:	d8eb      	bhi.n	145a2 <bt_setup_random_id_addr+0x1a>
			return 0;
   145ca:	2000      	movs	r0, #0
}
   145cc:	b009      	add	sp, #36	; 0x24
   145ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   145d0:	2100      	movs	r1, #0
   145d2:	4608      	mov	r0, r1
   145d4:	f7ff ff32 	bl	1443c <bt_id_create>
   145d8:	e7f8      	b.n	145cc <bt_setup_random_id_addr+0x44>
   145da:	bf00      	nop
   145dc:	200003c8 	.word	0x200003c8

000145e0 <hci_init>:
{
   145e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   145e2:	4d3b      	ldr	r5, [pc, #236]	; (146d0 <hci_init+0xf0>)
   145e4:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   145e8:	6899      	ldr	r1, [r3, #8]
   145ea:	f011 0101 	ands.w	r1, r1, #1
   145ee:	d11f      	bne.n	14630 <hci_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   145f0:	aa01      	add	r2, sp, #4
   145f2:	f640 4003 	movw	r0, #3075	; 0xc03
   145f6:	f7ff fbc1 	bl	13d7c <bt_hci_cmd_send_sync>
		if (err) {
   145fa:	4604      	mov	r4, r0
   145fc:	2800      	cmp	r0, #0
   145fe:	d164      	bne.n	146ca <hci_init+0xea>
		hci_reset_complete(rsp);
   14600:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   14602:	689b      	ldr	r3, [r3, #8]
	if (status) {
   14604:	781b      	ldrb	r3, [r3, #0]
   14606:	b983      	cbnz	r3, 1462a <hci_init+0x4a>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   14608:	f105 0398 	add.w	r3, r5, #152	; 0x98
   1460c:	4618      	mov	r0, r3
   1460e:	f005 ff42 	bl	1a496 <atomic_get>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14612:	f3bf 8f5b 	dmb	ish
   14616:	f000 0005 	and.w	r0, r0, #5
   1461a:	e853 2f00 	ldrex	r2, [r3]
   1461e:	e843 0100 	strex	r1, r0, [r3]
   14622:	2900      	cmp	r1, #0
   14624:	d1f9      	bne.n	1461a <hci_init+0x3a>
   14626:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1462a:	9801      	ldr	r0, [sp, #4]
   1462c:	f002 fb9e 	bl	16d6c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   14630:	aa01      	add	r2, sp, #4
   14632:	2100      	movs	r1, #0
   14634:	f241 0003 	movw	r0, #4099	; 0x1003
   14638:	f7ff fba0 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   1463c:	4604      	mov	r4, r0
   1463e:	2800      	cmp	r0, #0
   14640:	d143      	bne.n	146ca <hci_init+0xea>
	read_local_features_complete(rsp);
   14642:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   14644:	4823      	ldr	r0, [pc, #140]	; (146d4 <hci_init+0xf4>)
   14646:	6899      	ldr	r1, [r3, #8]
   14648:	2208      	movs	r2, #8
   1464a:	3101      	adds	r1, #1
   1464c:	f005 fe48 	bl	1a2e0 <memcpy>
	net_buf_unref(rsp);
   14650:	9801      	ldr	r0, [sp, #4]
   14652:	f002 fb8b 	bl	16d6c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   14656:	4621      	mov	r1, r4
   14658:	aa01      	add	r2, sp, #4
   1465a:	f241 0001 	movw	r0, #4097	; 0x1001
   1465e:	f7ff fb8d 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   14662:	4604      	mov	r4, r0
   14664:	2800      	cmp	r0, #0
   14666:	d130      	bne.n	146ca <hci_init+0xea>
	read_local_ver_complete(rsp);
   14668:	9801      	ldr	r0, [sp, #4]
   1466a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1466c:	785a      	ldrb	r2, [r3, #1]
   1466e:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   14672:	78d9      	ldrb	r1, [r3, #3]
   14674:	789a      	ldrb	r2, [r3, #2]
   14676:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1467a:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
   1467c:	791a      	ldrb	r2, [r3, #4]
   1467e:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   14682:	7a19      	ldrb	r1, [r3, #8]
   14684:	79da      	ldrb	r2, [r3, #7]
   14686:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1468a:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1468c:	795a      	ldrb	r2, [r3, #5]
   1468e:	799b      	ldrb	r3, [r3, #6]
   14690:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   14694:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
   14696:	f002 fb69 	bl	16d6c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1469a:	4621      	mov	r1, r4
   1469c:	aa01      	add	r2, sp, #4
   1469e:	f241 0002 	movw	r0, #4098	; 0x1002
   146a2:	f7ff fb6b 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   146a6:	4604      	mov	r4, r0
   146a8:	b978      	cbnz	r0, 146ca <hci_init+0xea>
	read_supported_commands_complete(rsp);
   146aa:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   146ac:	480a      	ldr	r0, [pc, #40]	; (146d8 <hci_init+0xf8>)
   146ae:	6899      	ldr	r1, [r3, #8]
   146b0:	2240      	movs	r2, #64	; 0x40
   146b2:	3101      	adds	r1, #1
   146b4:	f005 fe14 	bl	1a2e0 <memcpy>
	net_buf_unref(rsp);
   146b8:	9801      	ldr	r0, [sp, #4]
   146ba:	f002 fb57 	bl	16d6c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   146be:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   146c2:	065e      	lsls	r6, r3, #25
   146c4:	d40a      	bmi.n	146dc <hci_init+0xfc>
		return -ENODEV;
   146c6:	f06f 0412 	mvn.w	r4, #18
}
   146ca:	4620      	mov	r0, r4
   146cc:	b002      	add	sp, #8
   146ce:	bd70      	pop	{r4, r5, r6, pc}
   146d0:	200003c8 	.word	0x200003c8
   146d4:	20000408 	.word	0x20000408
   146d8:	20000410 	.word	0x20000410
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   146dc:	4621      	mov	r1, r4
   146de:	aa01      	add	r2, sp, #4
   146e0:	f242 0003 	movw	r0, #8195	; 0x2003
   146e4:	f7ff fb4a 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   146e8:	4604      	mov	r4, r0
   146ea:	2800      	cmp	r0, #0
   146ec:	d1ed      	bne.n	146ca <hci_init+0xea>
	read_le_features_complete(rsp);
   146ee:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   146f0:	489f      	ldr	r0, [pc, #636]	; (14970 <hci_init+0x390>)
   146f2:	6899      	ldr	r1, [r3, #8]
   146f4:	2208      	movs	r2, #8
   146f6:	3101      	adds	r1, #1
   146f8:	f005 fdf2 	bl	1a2e0 <memcpy>
	net_buf_unref(rsp);
   146fc:	9801      	ldr	r0, [sp, #4]
   146fe:	f002 fb35 	bl	16d6c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   14702:	4621      	mov	r1, r4
   14704:	aa01      	add	r2, sp, #4
   14706:	f242 0002 	movw	r0, #8194	; 0x2002
   1470a:	f7ff fb37 	bl	13d7c <bt_hci_cmd_send_sync>
		if (err) {
   1470e:	4604      	mov	r4, r0
   14710:	2800      	cmp	r0, #0
   14712:	d1da      	bne.n	146ca <hci_init+0xea>
		le_read_buffer_size_complete(rsp);
   14714:	9b01      	ldr	r3, [sp, #4]
   14716:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   14718:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1471c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
   14720:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   14722:	b121      	cbz	r1, 1472e <hci_init+0x14e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   14724:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   14726:	4893      	ldr	r0, [pc, #588]	; (14974 <hci_init+0x394>)
   14728:	4611      	mov	r1, r2
   1472a:	f008 f910 	bl	1c94e <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1472e:	9801      	ldr	r0, [sp, #4]
   14730:	f002 fb1c 	bl	16d6c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14734:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
   14738:	f016 0620 	ands.w	r6, r6, #32
   1473c:	f000 80fb 	beq.w	14936 <hci_init+0x356>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   14740:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   14744:	071c      	lsls	r4, r3, #28
   14746:	d511      	bpl.n	1476c <hci_init+0x18c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   14748:	aa01      	add	r2, sp, #4
   1474a:	2100      	movs	r1, #0
   1474c:	f242 001c 	movw	r0, #8220	; 0x201c
   14750:	f7ff fb14 	bl	13d7c <bt_hci_cmd_send_sync>
		if (err) {
   14754:	4604      	mov	r4, r0
   14756:	2800      	cmp	r0, #0
   14758:	d1b7      	bne.n	146ca <hci_init+0xea>
		le_read_supp_states_complete(rsp);
   1475a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1475c:	6883      	ldr	r3, [r0, #8]
   1475e:	f853 2f01 	ldr.w	r2, [r3, #1]!
   14762:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   14764:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
   14768:	f002 fb00 	bl	16d6c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1476c:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   14770:	0698      	lsls	r0, r3, #26
   14772:	d523      	bpl.n	147bc <hci_init+0x1dc>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14774:	f10d 0102 	add.w	r1, sp, #2
   14778:	4668      	mov	r0, sp
   1477a:	f005 ff3a 	bl	1a5f2 <hci_le_read_max_data_len>
		if (err) {
   1477e:	4604      	mov	r4, r0
   14780:	2800      	cmp	r0, #0
   14782:	d1a2      	bne.n	146ca <hci_init+0xea>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14784:	2104      	movs	r1, #4
   14786:	f242 0024 	movw	r0, #8228	; 0x2024
   1478a:	f7ff fabf 	bl	13d0c <bt_hci_cmd_create>
		if (!buf) {
   1478e:	4606      	mov	r6, r0
   14790:	2800      	cmp	r0, #0
   14792:	f000 80d7 	beq.w	14944 <hci_init+0x364>
		cp = net_buf_add(buf, sizeof(*cp));
   14796:	2104      	movs	r1, #4
   14798:	3008      	adds	r0, #8
   1479a:	f007 fbe4 	bl	1bf66 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1479e:	f8bd 3000 	ldrh.w	r3, [sp]
   147a2:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   147a4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   147a8:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   147aa:	4622      	mov	r2, r4
   147ac:	4631      	mov	r1, r6
   147ae:	f242 0024 	movw	r0, #8228	; 0x2024
   147b2:	f7ff fae3 	bl	13d7c <bt_hci_cmd_send_sync>
		if (err) {
   147b6:	4604      	mov	r4, r0
   147b8:	2800      	cmp	r0, #0
   147ba:	d186      	bne.n	146ca <hci_init+0xea>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   147bc:	2108      	movs	r1, #8
   147be:	f242 0001 	movw	r0, #8193	; 0x2001
   147c2:	f7ff faa3 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   147c6:	4604      	mov	r4, r0
   147c8:	2800      	cmp	r0, #0
   147ca:	f000 80bb 	beq.w	14944 <hci_init+0x364>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
   147ce:	2108      	movs	r1, #8
   147d0:	4408      	add	r0, r1
   147d2:	f007 fbc8 	bl	1bf66 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   147d6:	f895 20a0 	ldrb.w	r2, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   147da:	f012 0f02 	tst.w	r2, #2
   147de:	bf14      	ite	ne
   147e0:	232f      	movne	r3, #47	; 0x2f
   147e2:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   147e4:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   147e6:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   147ea:	bf48      	it	mi
   147ec:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   147f0:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   147f4:	bf18      	it	ne
   147f6:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   147fa:	2200      	movs	r2, #0
   147fc:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   147fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14802:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   14804:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   14806:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   14808:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1480a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1480c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1480e:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14810:	4621      	mov	r1, r4
   14812:	f242 0001 	movw	r0, #8193	; 0x2001
   14816:	f7ff fab1 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   1481a:	4604      	mov	r4, r0
   1481c:	2800      	cmp	r0, #0
   1481e:	f47f af54 	bne.w	146ca <hci_init+0xea>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14822:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   14826:	069a      	lsls	r2, r3, #26
   14828:	d41e      	bmi.n	14868 <hci_init+0x288>
	if (bt_dev.le.acl_mtu) {
   1482a:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
   1482e:	b9d9      	cbnz	r1, 14868 <hci_init+0x288>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   14830:	aa01      	add	r2, sp, #4
   14832:	f241 0005 	movw	r0, #4101	; 0x1005
   14836:	f7ff faa1 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   1483a:	4604      	mov	r4, r0
   1483c:	2800      	cmp	r0, #0
   1483e:	f47f af44 	bne.w	146ca <hci_init+0xea>
	if (bt_dev.le.acl_mtu) {
   14842:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
   14846:	b963      	cbnz	r3, 14862 <hci_init+0x282>
	read_buffer_size_complete(rsp);
   14848:	9b01      	ldr	r3, [sp, #4]
   1484a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1484c:	785a      	ldrb	r2, [r3, #1]
   1484e:	7899      	ldrb	r1, [r3, #2]
   14850:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14854:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   14858:	889a      	ldrh	r2, [r3, #4]
   1485a:	4846      	ldr	r0, [pc, #280]	; (14974 <hci_init+0x394>)
   1485c:	4611      	mov	r1, r2
   1485e:	f008 f876 	bl	1c94e <z_impl_k_sem_init>
	net_buf_unref(rsp);
   14862:	9801      	ldr	r0, [sp, #4]
   14864:	f002 fa82 	bl	16d6c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   14868:	2108      	movs	r1, #8
   1486a:	f640 4001 	movw	r0, #3073	; 0xc01
   1486e:	f7ff fa4d 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   14872:	4604      	mov	r4, r0
   14874:	2800      	cmp	r0, #0
   14876:	d065      	beq.n	14944 <hci_init+0x364>
	ev = net_buf_add(buf, sizeof(*ev));
   14878:	2108      	movs	r1, #8
   1487a:	4408      	add	r0, r1
   1487c:	f007 fb73 	bl	1bf66 <net_buf_simple_add>
	dst[0] = val;
   14880:	2310      	movs	r3, #16
   14882:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14884:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   14886:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   14888:	7043      	strb	r3, [r0, #1]
   1488a:	2602      	movs	r6, #2
   1488c:	2320      	movs	r3, #32
	dst[0] = val;
   1488e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   14890:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   14892:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14894:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14896:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14898:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1489a:	4621      	mov	r1, r4
   1489c:	f640 4001 	movw	r0, #3073	; 0xc01
   148a0:	f7ff fa6c 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   148a4:	4604      	mov	r4, r0
   148a6:	2800      	cmp	r0, #0
   148a8:	f47f af0f 	bne.w	146ca <hci_init+0xea>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   148ac:	4601      	mov	r1, r0
   148ae:	aa01      	add	r2, sp, #4
   148b0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   148b4:	f7ff fa62 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   148b8:	bb40      	cbnz	r0, 1490c <hci_init+0x32c>
	net_buf_unref(rsp);
   148ba:	9801      	ldr	r0, [sp, #4]
   148bc:	f002 fa56 	bl	16d6c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   148c0:	aa01      	add	r2, sp, #4
   148c2:	4621      	mov	r1, r4
   148c4:	f64f 4002 	movw	r0, #64514	; 0xfc02
   148c8:	f7ff fa58 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   148cc:	b9f0      	cbnz	r0, 1490c <hci_init+0x32c>
	rp.cmds = (void *)rsp->data;
   148ce:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   148d0:	4829      	ldr	r0, [pc, #164]	; (14978 <hci_init+0x398>)
   148d2:	6899      	ldr	r1, [r3, #8]
   148d4:	4632      	mov	r2, r6
   148d6:	3101      	adds	r1, #1
   148d8:	f005 fd02 	bl	1a2e0 <memcpy>
	net_buf_unref(rsp);
   148dc:	9801      	ldr	r0, [sp, #4]
   148de:	f002 fa45 	bl	16d6c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   148e2:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
   148e6:	075b      	lsls	r3, r3, #29
   148e8:	d510      	bpl.n	1490c <hci_init+0x32c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   148ea:	aa01      	add	r2, sp, #4
   148ec:	4621      	mov	r1, r4
   148ee:	f64f 4003 	movw	r0, #64515	; 0xfc03
   148f2:	f7ff fa43 	bl	13d7c <bt_hci_cmd_send_sync>
		if (err) {
   148f6:	b948      	cbnz	r0, 1490c <hci_init+0x32c>
		rp.feat = (void *)rsp->data;
   148f8:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   148fa:	4820      	ldr	r0, [pc, #128]	; (1497c <hci_init+0x39c>)
   148fc:	6899      	ldr	r1, [r3, #8]
   148fe:	2201      	movs	r2, #1
   14900:	4411      	add	r1, r2
   14902:	f005 fced 	bl	1a2e0 <memcpy>
		net_buf_unref(rsp);
   14906:	9801      	ldr	r0, [sp, #4]
   14908:	f002 fa30 	bl	16d6c <net_buf_unref>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1490c:	79eb      	ldrb	r3, [r5, #7]
   1490e:	2b00      	cmp	r3, #0
   14910:	f47f aedb 	bne.w	146ca <hci_init+0xea>
		bt_setup_public_id_addr();
   14914:	f7ff fdc6 	bl	144a4 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14918:	79eb      	ldrb	r3, [r5, #7]
   1491a:	2b00      	cmp	r3, #0
   1491c:	f47f aed5 	bne.w	146ca <hci_init+0xea>
		err = bt_setup_random_id_addr();
   14920:	f7ff fe32 	bl	14588 <bt_setup_random_id_addr>
		if (err) {
   14924:	4604      	mov	r4, r0
   14926:	2800      	cmp	r0, #0
   14928:	f47f aecf 	bne.w	146ca <hci_init+0xea>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1492c:	4814      	ldr	r0, [pc, #80]	; (14980 <hci_init+0x3a0>)
   1492e:	f7ff fa87 	bl	13e40 <set_random_address>
   14932:	4604      	mov	r4, r0
		if (err) {
   14934:	e6c9      	b.n	146ca <hci_init+0xea>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14936:	2102      	movs	r1, #2
   14938:	f640 406d 	movw	r0, #3181	; 0xc6d
   1493c:	f7ff f9e6 	bl	13d0c <bt_hci_cmd_create>
		if (!buf) {
   14940:	4604      	mov	r4, r0
   14942:	b910      	cbnz	r0, 1494a <hci_init+0x36a>
		return -ENOBUFS;
   14944:	f06f 0436 	mvn.w	r4, #54	; 0x36
   14948:	e6bf      	b.n	146ca <hci_init+0xea>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
   1494a:	2102      	movs	r1, #2
   1494c:	3008      	adds	r0, #8
   1494e:	f007 fb0a 	bl	1bf66 <net_buf_simple_add>
		cp_le->le = 0x01;
   14952:	2301      	movs	r3, #1
   14954:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   14956:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   14958:	4621      	mov	r1, r4
   1495a:	4632      	mov	r2, r6
   1495c:	f640 406d 	movw	r0, #3181	; 0xc6d
   14960:	f7ff fa0c 	bl	13d7c <bt_hci_cmd_send_sync>
		if (err) {
   14964:	4604      	mov	r4, r0
   14966:	2800      	cmp	r0, #0
   14968:	f43f aeea 	beq.w	14740 <hci_init+0x160>
   1496c:	e6ad      	b.n	146ca <hci_init+0xea>
   1496e:	bf00      	nop
   14970:	20000468 	.word	0x20000468
   14974:	20000498 	.word	0x20000498
   14978:	20000451 	.word	0x20000451
   1497c:	20000450 	.word	0x20000450
   14980:	200003c9 	.word	0x200003c9

00014984 <bt_enable>:
{
   14984:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   14988:	4d32      	ldr	r5, [pc, #200]	; (14a54 <bt_enable+0xd0>)
   1498a:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
   1498e:	b088      	sub	sp, #32
   14990:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   14992:	2b00      	cmp	r3, #0
   14994:	d057      	beq.n	14a46 <bt_enable+0xc2>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14996:	2101      	movs	r1, #1
   14998:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1499c:	f005 fdbf 	bl	1a51e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   149a0:	f010 0401 	ands.w	r4, r0, #1
   149a4:	d152      	bne.n	14a4c <bt_enable+0xc8>
	ready_cb = cb;
   149a6:	4b2c      	ldr	r3, [pc, #176]	; (14a58 <bt_enable+0xd4>)
   149a8:	f04f 0800 	mov.w	r8, #0
   149ac:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   149ae:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   149b2:	f06f 0308 	mvn.w	r3, #8
   149b6:	e9cd 4302 	strd	r4, r3, [sp, #8]
   149ba:	e9cd 8906 	strd	r8, r9, [sp, #24]
   149be:	e9cd 4400 	strd	r4, r4, [sp]
   149c2:	4b26      	ldr	r3, [pc, #152]	; (14a5c <bt_enable+0xd8>)
   149c4:	4926      	ldr	r1, [pc, #152]	; (14a60 <bt_enable+0xdc>)
   149c6:	9404      	str	r4, [sp, #16]
   149c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   149cc:	4825      	ldr	r0, [pc, #148]	; (14a64 <bt_enable+0xe0>)
   149ce:	f004 fb3d 	bl	1904c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   149d2:	4925      	ldr	r1, [pc, #148]	; (14a68 <bt_enable+0xe4>)
   149d4:	4823      	ldr	r0, [pc, #140]	; (14a64 <bt_enable+0xe0>)
   149d6:	f007 ffd4 	bl	1c982 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   149da:	f06f 0307 	mvn.w	r3, #7
   149de:	e9cd 4302 	strd	r4, r3, [sp, #8]
   149e2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   149e6:	e9cd 4400 	strd	r4, r4, [sp]
   149ea:	4b20      	ldr	r3, [pc, #128]	; (14a6c <bt_enable+0xe8>)
   149ec:	4920      	ldr	r1, [pc, #128]	; (14a70 <bt_enable+0xec>)
   149ee:	9404      	str	r4, [sp, #16]
   149f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   149f4:	481f      	ldr	r0, [pc, #124]	; (14a74 <bt_enable+0xf0>)
   149f6:	f004 fb29 	bl	1904c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   149fa:	491f      	ldr	r1, [pc, #124]	; (14a78 <bt_enable+0xf4>)
   149fc:	481d      	ldr	r0, [pc, #116]	; (14a74 <bt_enable+0xf0>)
   149fe:	f007 ffc0 	bl	1c982 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   14a02:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   14a06:	68db      	ldr	r3, [r3, #12]
   14a08:	4798      	blx	r3
	if (err) {
   14a0a:	4604      	mov	r4, r0
   14a0c:	b950      	cbnz	r0, 14a24 <bt_enable+0xa0>
	if (!cb) {
   14a0e:	b96e      	cbnz	r6, 14a2c <bt_enable+0xa8>
	err = hci_init();
   14a10:	f7ff fde6 	bl	145e0 <hci_init>
	if (err) {
   14a14:	4604      	mov	r4, r0
   14a16:	b928      	cbnz	r0, 14a24 <bt_enable+0xa0>
		err = bt_conn_init();
   14a18:	f000 fe9a 	bl	15750 <bt_conn_init>
		if (err) {
   14a1c:	4604      	mov	r4, r0
   14a1e:	b908      	cbnz	r0, 14a24 <bt_enable+0xa0>
	bt_finalize_init();
   14a20:	f7ff fd02 	bl	14428 <bt_finalize_init>
}
   14a24:	4620      	mov	r0, r4
   14a26:	b008      	add	sp, #32
   14a28:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   14a2c:	2101      	movs	r1, #1
   14a2e:	f105 0094 	add.w	r0, r5, #148	; 0x94
   14a32:	f005 fd74 	bl	1a51e <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14a36:	07c3      	lsls	r3, r0, #31
   14a38:	d4f4      	bmi.n	14a24 <bt_enable+0xa0>
		k_queue_append(&work_q->queue, work);
   14a3a:	4810      	ldr	r0, [pc, #64]	; (14a7c <bt_enable+0xf8>)
   14a3c:	f105 018c 	add.w	r1, r5, #140	; 0x8c
   14a40:	f007 fe59 	bl	1c6f6 <k_queue_append>
   14a44:	e7ee      	b.n	14a24 <bt_enable+0xa0>
		return -ENODEV;
   14a46:	f06f 0412 	mvn.w	r4, #18
   14a4a:	e7eb      	b.n	14a24 <bt_enable+0xa0>
		return -EALREADY;
   14a4c:	f06f 0444 	mvn.w	r4, #68	; 0x44
   14a50:	e7e8      	b.n	14a24 <bt_enable+0xa0>
   14a52:	bf00      	nop
   14a54:	200003c8 	.word	0x200003c8
   14a58:	20002510 	.word	0x20002510
   14a5c:	000141f1 	.word	0x000141f1
   14a60:	20003300 	.word	0x20003300
   14a64:	20001dd8 	.word	0x20001dd8
   14a68:	0001d871 	.word	0x0001d871
   14a6c:	00013991 	.word	0x00013991
   14a70:	20002ee0 	.word	0x20002ee0
   14a74:	20001d50 	.word	0x20001d50
   14a78:	0001d877 	.word	0x0001d877
   14a7c:	20002330 	.word	0x20002330

00014a80 <init_work>:
{
   14a80:	b510      	push	{r4, lr}
	err = hci_init();
   14a82:	f7ff fdad 	bl	145e0 <hci_init>
	if (err) {
   14a86:	4604      	mov	r4, r0
   14a88:	b928      	cbnz	r0, 14a96 <init_work+0x16>
		err = bt_conn_init();
   14a8a:	f000 fe61 	bl	15750 <bt_conn_init>
		if (err) {
   14a8e:	4604      	mov	r4, r0
   14a90:	b908      	cbnz	r0, 14a96 <init_work+0x16>
	bt_finalize_init();
   14a92:	f7ff fcc9 	bl	14428 <bt_finalize_init>
	if (ready_cb) {
   14a96:	4b04      	ldr	r3, [pc, #16]	; (14aa8 <init_work+0x28>)
   14a98:	681b      	ldr	r3, [r3, #0]
   14a9a:	b11b      	cbz	r3, 14aa4 <init_work+0x24>
		ready_cb(err);
   14a9c:	4620      	mov	r0, r4
}
   14a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   14aa2:	4718      	bx	r3
}
   14aa4:	bd10      	pop	{r4, pc}
   14aa6:	bf00      	nop
   14aa8:	20002510 	.word	0x20002510

00014aac <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   14aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   14ab0:	690d      	ldr	r5, [r1, #16]
{
   14ab2:	b08f      	sub	sp, #60	; 0x3c
   14ab4:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   14ab6:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   14ab8:	ebb5 0b03 	subs.w	fp, r5, r3
{
   14abc:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14abe:	487e      	ldr	r0, [pc, #504]	; (14cb8 <bt_le_adv_start_legacy+0x20c>)
	struct bt_conn *conn = NULL;
   14ac0:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   14ac2:	bf18      	it	ne
   14ac4:	f04f 0b01 	movne.w	fp, #1
{
   14ac8:	460c      	mov	r4, r1
   14aca:	4691      	mov	r9, r2
   14acc:	f005 fce3 	bl	1a496 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14ad0:	0787      	lsls	r7, r0, #30
   14ad2:	f140 80e3 	bpl.w	14c9c <bt_le_adv_start_legacy+0x1f0>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   14ad6:	4608      	mov	r0, r1
   14ad8:	f7fe feee 	bl	138b8 <valid_adv_param>
   14adc:	4607      	mov	r7, r0
   14ade:	2800      	cmp	r0, #0
   14ae0:	f000 80df 	beq.w	14ca2 <bt_le_adv_start_legacy+0x1f6>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14ae4:	f106 0814 	add.w	r8, r6, #20
   14ae8:	4640      	mov	r0, r8
   14aea:	f005 fcd4 	bl	1a496 <atomic_get>
   14aee:	f3c0 1180 	ubfx	r1, r0, #6, #1
   14af2:	0640      	lsls	r0, r0, #25
   14af4:	f100 80d8 	bmi.w	14ca8 <bt_le_adv_start_legacy+0x1fc>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   14af8:	220f      	movs	r2, #15
   14afa:	a80a      	add	r0, sp, #40	; 0x28
   14afc:	9105      	str	r1, [sp, #20]
   14afe:	f005 fc1a 	bl	1a336 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14b02:	68a3      	ldr	r3, [r4, #8]
   14b04:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   14b08:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14b0a:	68e3      	ldr	r3, [r4, #12]
   14b0c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   14b10:	f005 fcb2 	bl	1a478 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   14b14:	7832      	ldrb	r2, [r6, #0]
   14b16:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   14b18:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14b1a:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   14b1e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   14b20:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   14b24:	d004      	beq.n	14b30 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14b26:	4864      	ldr	r0, [pc, #400]	; (14cb8 <bt_le_adv_start_legacy+0x20c>)
   14b28:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14b2c:	f005 fd06 	bl	1a53c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
   14b30:	4b62      	ldr	r3, [pc, #392]	; (14cbc <bt_le_adv_start_legacy+0x210>)
	adv->id = param->id;
   14b32:	7820      	ldrb	r0, [r4, #0]
   14b34:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   14b36:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   14b3a:	465a      	mov	r2, fp
   14b3c:	6861      	ldr	r1, [r4, #4]
   14b3e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   14b42:	f7ff f9ab 	bl	13e9c <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   14b46:	4683      	mov	fp, r0
   14b48:	2800      	cmp	r0, #0
   14b4a:	d166      	bne.n	14c1a <bt_le_adv_start_legacy+0x16e>
		return err;
	}

	if (dir_adv) {
   14b4c:	f106 000b 	add.w	r0, r6, #11
   14b50:	2d00      	cmp	r5, #0
   14b52:	d03f      	beq.n	14bd4 <bt_le_adv_start_legacy+0x128>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   14b54:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   14b56:	f005 fca4 	bl	1a4a2 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14b5a:	6860      	ldr	r0, [r4, #4]
   14b5c:	07c1      	lsls	r1, r0, #31
   14b5e:	d541      	bpl.n	14be4 <bt_le_adv_start_legacy+0x138>
		scannable = true;

		if (dir_adv) {
   14b60:	2d00      	cmp	r5, #0
   14b62:	d03c      	beq.n	14bde <bt_le_adv_start_legacy+0x132>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   14b64:	f010 0f10 	tst.w	r0, #16
   14b68:	bf14      	ite	ne
   14b6a:	2304      	movne	r3, #4
   14b6c:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   14b6e:	6921      	ldr	r1, [r4, #16]
   14b70:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   14b74:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   14b78:	f005 fc93 	bl	1a4a2 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   14b7c:	210f      	movs	r1, #15
   14b7e:	f242 0006 	movw	r0, #8198	; 0x2006
   14b82:	f7ff f8c3 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   14b86:	4683      	mov	fp, r0
   14b88:	2800      	cmp	r0, #0
   14b8a:	f000 8090 	beq.w	14cae <bt_le_adv_start_legacy+0x202>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
   14b8e:	220f      	movs	r2, #15
   14b90:	a90a      	add	r1, sp, #40	; 0x28
   14b92:	3008      	adds	r0, #8
   14b94:	f007 f9ed 	bl	1bf72 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   14b98:	2200      	movs	r2, #0
   14b9a:	4659      	mov	r1, fp
   14b9c:	f242 0006 	movw	r0, #8198	; 0x2006
   14ba0:	f7ff f8ec 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   14ba4:	2800      	cmp	r0, #0
   14ba6:	f040 8085 	bne.w	14cb4 <bt_le_adv_start_legacy+0x208>
		return err;
	}

	if (!dir_adv) {
   14baa:	b335      	cbz	r5, 14bfa <bt_le_adv_start_legacy+0x14e>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14bac:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14bae:	07da      	lsls	r2, r3, #31
   14bb0:	d437      	bmi.n	14c22 <bt_le_adv_start_legacy+0x176>
	return set_le_adv_enable_legacy(adv, enable);
   14bb2:	2101      	movs	r1, #1
   14bb4:	4630      	mov	r0, r6
   14bb6:	f7ff fa3f 	bl	14038 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   14bba:	4683      	mov	fp, r0
   14bbc:	9807      	ldr	r0, [sp, #28]
   14bbe:	f1bb 0f00 	cmp.w	fp, #0
   14bc2:	d065      	beq.n	14c90 <bt_le_adv_start_legacy+0x1e4>
		BT_ERR("Failed to start advertiser");
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14bc4:	b348      	cbz	r0, 14c1a <bt_le_adv_start_legacy+0x16e>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14bc6:	2100      	movs	r1, #0
   14bc8:	f000 fbd6 	bl	15378 <bt_conn_set_state>
			bt_conn_unref(conn);
   14bcc:	9807      	ldr	r0, [sp, #28]
   14bce:	f005 ffee 	bl	1abae <bt_conn_unref>
   14bd2:	e022      	b.n	14c1a <bt_le_adv_start_legacy+0x16e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   14bd4:	9508      	str	r5, [sp, #32]
   14bd6:	a908      	add	r1, sp, #32
   14bd8:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   14bdc:	e7bb      	b.n	14b56 <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
   14bde:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   14be2:	e7cb      	b.n	14b7c <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   14be4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14be6:	b933      	cbnz	r3, 14bf6 <bt_le_adv_start_legacy+0x14a>
   14be8:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   14bec:	f1c7 0303 	rsb	r3, r7, #3
   14bf0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   14bf4:	e7c2      	b.n	14b7c <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   14bf6:	2701      	movs	r7, #1
   14bf8:	e7f8      	b.n	14bec <bt_le_adv_start_legacy+0x140>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   14bfa:	6863      	ldr	r3, [r4, #4]
   14bfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   14c00:	e9cd 7301 	strd	r7, r3, [sp, #4]
   14c04:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14c06:	9300      	str	r3, [sp, #0]
   14c08:	4652      	mov	r2, sl
   14c0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14c0c:	4649      	mov	r1, r9
   14c0e:	4630      	mov	r0, r6
   14c10:	f7ff f99e 	bl	13f50 <le_adv_update.constprop.0>
		if (err) {
   14c14:	4683      	mov	fp, r0
   14c16:	2800      	cmp	r0, #0
   14c18:	d0c8      	beq.n	14bac <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   14c1a:	4658      	mov	r0, fp
   14c1c:	b00f      	add	sp, #60	; 0x3c
   14c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   14c22:	a907      	add	r1, sp, #28
   14c24:	4630      	mov	r0, r6
   14c26:	f7ff f809 	bl	13c3c <le_adv_start_add_conn>
		if (err) {
   14c2a:	4683      	mov	fp, r0
   14c2c:	2800      	cmp	r0, #0
   14c2e:	d0c0      	beq.n	14bb2 <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
   14c30:	f110 0f0c 	cmn.w	r0, #12
   14c34:	d1f1      	bne.n	14c1a <bt_le_adv_start_legacy+0x16e>
   14c36:	2d00      	cmp	r5, #0
   14c38:	d1ef      	bne.n	14c1a <bt_le_adv_start_legacy+0x16e>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   14c3a:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   14c3c:	079b      	lsls	r3, r3, #30
   14c3e:	d4ec      	bmi.n	14c1a <bt_le_adv_start_legacy+0x16e>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14c40:	6860      	ldr	r0, [r4, #4]
   14c42:	f080 0002 	eor.w	r0, r0, #2
   14c46:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   14c4a:	f00b 0201 	and.w	r2, fp, #1
   14c4e:	210c      	movs	r1, #12
   14c50:	4640      	mov	r0, r8
   14c52:	f005 fc82 	bl	1a55a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   14c56:	6862      	ldr	r2, [r4, #4]
   14c58:	2107      	movs	r1, #7
   14c5a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   14c5e:	4640      	mov	r0, r8
   14c60:	f005 fc7b 	bl	1a55a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   14c64:	6862      	ldr	r2, [r4, #4]
   14c66:	2108      	movs	r1, #8
   14c68:	f002 0201 	and.w	r2, r2, #1
   14c6c:	4640      	mov	r0, r8
   14c6e:	f005 fc74 	bl	1a55a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   14c72:	463a      	mov	r2, r7
   14c74:	2109      	movs	r1, #9
   14c76:	4640      	mov	r0, r8
   14c78:	f005 fc6f 	bl	1a55a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   14c7c:	6862      	ldr	r2, [r4, #4]
   14c7e:	210b      	movs	r1, #11
   14c80:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14c84:	4640      	mov	r0, r8
   14c86:	f005 fc68 	bl	1a55a <atomic_set_bit_to>
	return 0;
   14c8a:	f04f 0b00 	mov.w	fp, #0
   14c8e:	e7c4      	b.n	14c1a <bt_le_adv_start_legacy+0x16e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14c90:	b108      	cbz	r0, 14c96 <bt_le_adv_start_legacy+0x1ea>
		bt_conn_unref(conn);
   14c92:	f005 ff8c 	bl	1abae <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14c96:	2d00      	cmp	r5, #0
   14c98:	d1d7      	bne.n	14c4a <bt_le_adv_start_legacy+0x19e>
   14c9a:	e7d1      	b.n	14c40 <bt_le_adv_start_legacy+0x194>
		return -EAGAIN;
   14c9c:	f06f 0b0a 	mvn.w	fp, #10
   14ca0:	e7bb      	b.n	14c1a <bt_le_adv_start_legacy+0x16e>
		return -EINVAL;
   14ca2:	f06f 0b15 	mvn.w	fp, #21
   14ca6:	e7b8      	b.n	14c1a <bt_le_adv_start_legacy+0x16e>
		return -EALREADY;
   14ca8:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   14cac:	e7b5      	b.n	14c1a <bt_le_adv_start_legacy+0x16e>
		return -ENOBUFS;
   14cae:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   14cb2:	e7b2      	b.n	14c1a <bt_le_adv_start_legacy+0x16e>
   14cb4:	4683      	mov	fp, r0
   14cb6:	e7b0      	b.n	14c1a <bt_le_adv_start_legacy+0x16e>
   14cb8:	20000460 	.word	0x20000460
   14cbc:	200003c8 	.word	0x200003c8

00014cc0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   14cc0:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14cc2:	9c04      	ldr	r4, [sp, #16]
   14cc4:	e9cd 3400 	strd	r3, r4, [sp]
   14cc8:	4613      	mov	r3, r2
   14cca:	460a      	mov	r2, r1
   14ccc:	4601      	mov	r1, r0
   14cce:	4802      	ldr	r0, [pc, #8]	; (14cd8 <bt_le_adv_start+0x18>)
   14cd0:	f7ff feec 	bl	14aac <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   14cd4:	b002      	add	sp, #8
   14cd6:	bd10      	pop	{r4, pc}
   14cd8:	200003e0 	.word	0x200003e0

00014cdc <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   14cdc:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14cde:	4818      	ldr	r0, [pc, #96]	; (14d40 <bt_le_adv_resume+0x64>)
   14ce0:	f005 fbd9 	bl	1a496 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   14ce4:	04c1      	lsls	r1, r0, #19
   14ce6:	d529      	bpl.n	14d3c <bt_le_adv_resume+0x60>
   14ce8:	4815      	ldr	r0, [pc, #84]	; (14d40 <bt_le_adv_resume+0x64>)
   14cea:	f005 fbd4 	bl	1a496 <atomic_get>
   14cee:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14cf0:	f3c0 1480 	ubfx	r4, r0, #6, #1
   14cf4:	d422      	bmi.n	14d3c <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14cf6:	4812      	ldr	r0, [pc, #72]	; (14d40 <bt_le_adv_resume+0x64>)
   14cf8:	f005 fbcd 	bl	1a496 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   14cfc:	05c3      	lsls	r3, r0, #23
   14cfe:	d51d      	bpl.n	14d3c <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   14d00:	4810      	ldr	r0, [pc, #64]	; (14d44 <bt_le_adv_resume+0x68>)
   14d02:	a901      	add	r1, sp, #4
   14d04:	f7fe ff9a 	bl	13c3c <le_adv_start_add_conn>
	if (err) {
   14d08:	b9c0      	cbnz	r0, 14d3c <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   14d0a:	480e      	ldr	r0, [pc, #56]	; (14d44 <bt_le_adv_resume+0x68>)
   14d0c:	2101      	movs	r1, #1
   14d0e:	f7ff f993 	bl	14038 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   14d12:	b150      	cbz	r0, 14d2a <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14d14:	4621      	mov	r1, r4
   14d16:	9801      	ldr	r0, [sp, #4]
   14d18:	f000 fb2e 	bl	15378 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14d1c:	4808      	ldr	r0, [pc, #32]	; (14d40 <bt_le_adv_resume+0x64>)
   14d1e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14d22:	f005 fc0b 	bl	1a53c <atomic_and>
	return (old & mask) != 0;
   14d26:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   14d2a:	9801      	ldr	r0, [sp, #4]
   14d2c:	f005 ff3f 	bl	1abae <bt_conn_unref>
	if (persist_paused) {
   14d30:	b124      	cbz	r4, 14d3c <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14d32:	4803      	ldr	r0, [pc, #12]	; (14d40 <bt_le_adv_resume+0x64>)
   14d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   14d38:	f005 fbf1 	bl	1a51e <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   14d3c:	b002      	add	sp, #8
   14d3e:	bd10      	pop	{r4, pc}
   14d40:	200003f4 	.word	0x200003f4
   14d44:	200003e0 	.word	0x200003e0

00014d48 <enh_conn_complete>:
{
   14d48:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
   14d4a:	7805      	ldrb	r5, [r0, #0]
{
   14d4c:	b085      	sub	sp, #20
   14d4e:	4604      	mov	r4, r0
	if (evt->status) {
   14d50:	b19d      	cbz	r5, 14d7a <enh_conn_complete+0x32>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14d52:	2d3c      	cmp	r5, #60	; 0x3c
   14d54:	d140      	bne.n	14dd8 <enh_conn_complete+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14d56:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14d5a:	4843      	ldr	r0, [pc, #268]	; (14e68 <enh_conn_complete+0x120>)
   14d5c:	f005 fbee 	bl	1a53c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   14d60:	2000      	movs	r0, #0
   14d62:	f7fe fdf7 	bl	13954 <find_pending_connect.part.0>
		if (!conn) {
   14d66:	4604      	mov	r4, r0
   14d68:	b3b0      	cbz	r0, 14dd8 <enh_conn_complete+0x90>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   14d6a:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14d6c:	2100      	movs	r1, #0
   14d6e:	f000 fb03 	bl	15378 <bt_conn_set_state>
		bt_conn_unref(conn);
   14d72:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   14d74:	f005 ff1b 	bl	1abae <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14d78:	e02e      	b.n	14dd8 <enh_conn_complete+0x90>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14d7a:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14d7c:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14d80:	3b02      	subs	r3, #2
   14d82:	1d05      	adds	r5, r0, #4
   14d84:	2b01      	cmp	r3, #1
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14d86:	b2b7      	uxth	r7, r6
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14d88:	4629      	mov	r1, r5
   14d8a:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14d8c:	d826      	bhi.n	14ddc <enh_conn_complete+0x94>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14d8e:	f005 fb88 	bl	1a4a2 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   14d92:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14d96:	2206      	movs	r2, #6
   14d98:	3b02      	subs	r3, #2
   14d9a:	f104 0111 	add.w	r1, r4, #17
   14d9e:	f10d 0001 	add.w	r0, sp, #1
   14da2:	f88d 3008 	strb.w	r3, [sp, #8]
   14da6:	f005 fa9b 	bl	1a2e0 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   14daa:	2301      	movs	r3, #1
   14dac:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   14db0:	78e3      	ldrb	r3, [r4, #3]
   14db2:	2b01      	cmp	r3, #1
   14db4:	d10c      	bne.n	14dd0 <enh_conn_complete+0x88>
   14db6:	a802      	add	r0, sp, #8
   14db8:	f7fe fdcc 	bl	13954 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14dbc:	78e3      	ldrb	r3, [r4, #3]
   14dbe:	2b01      	cmp	r3, #1
   14dc0:	4605      	mov	r5, r0
   14dc2:	d104      	bne.n	14dce <enh_conn_complete+0x86>
   14dc4:	4828      	ldr	r0, [pc, #160]	; (14e68 <enh_conn_complete+0x120>)
   14dc6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14dca:	f005 fbb7 	bl	1a53c <atomic_and>
	if (!conn) {
   14dce:	b965      	cbnz	r5, 14dea <enh_conn_complete+0xa2>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   14dd0:	211f      	movs	r1, #31
   14dd2:	4638      	mov	r0, r7
   14dd4:	f005 fcb4 	bl	1a740 <bt_hci_disconnect>
}
   14dd8:	b005      	add	sp, #20
   14dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&id_addr,
   14ddc:	f005 fb61 	bl	1a4a2 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   14de0:	4629      	mov	r1, r5
   14de2:	4668      	mov	r0, sp
   14de4:	f005 fb5d 	bl	1a4a2 <bt_addr_le_copy>
   14de8:	e7e2      	b.n	14db0 <enh_conn_complete+0x68>
	conn->handle = handle;
   14dea:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   14dec:	a902      	add	r1, sp, #8
	conn->handle = handle;
   14dee:	f820 6b88 	strh.w	r6, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   14df2:	f005 fb56 	bl	1a4a2 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   14df6:	7e22      	ldrb	r2, [r4, #24]
   14df8:	7de3      	ldrb	r3, [r4, #23]
   14dfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14dfe:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   14e02:	7ea2      	ldrb	r2, [r4, #26]
   14e04:	7e63      	ldrb	r3, [r4, #25]
   14e06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14e0a:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14e0e:	7ee3      	ldrb	r3, [r4, #27]
   14e10:	7f22      	ldrb	r2, [r4, #28]
   14e12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14e16:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   14e1a:	78e3      	ldrb	r3, [r4, #3]
   14e1c:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   14e1e:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14e20:	2b01      	cmp	r3, #1
	conn->err = 0U;
   14e22:	726c      	strb	r4, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14e24:	d116      	bne.n	14e54 <enh_conn_complete+0x10c>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   14e26:	4669      	mov	r1, sp
   14e28:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   14e2c:	f005 fb39 	bl	1a4a2 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   14e30:	7a29      	ldrb	r1, [r5, #8]
   14e32:	4e0e      	ldr	r6, [pc, #56]	; (14e6c <enh_conn_complete+0x124>)
   14e34:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   14e38:	4431      	add	r1, r6
   14e3a:	f105 0096 	add.w	r0, r5, #150	; 0x96
   14e3e:	f005 fb30 	bl	1a4a2 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   14e42:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
   14e46:	4622      	mov	r2, r4
   14e48:	f001 0340 	and.w	r3, r1, #64	; 0x40
   14e4c:	4313      	orrs	r3, r2
   14e4e:	d001      	beq.n	14e54 <enh_conn_complete+0x10c>
			bt_le_adv_resume();
   14e50:	f7ff ff44 	bl	14cdc <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14e54:	2107      	movs	r1, #7
   14e56:	4628      	mov	r0, r5
   14e58:	f000 fa8e 	bl	15378 <bt_conn_set_state>
	conn_auto_initiate(conn);
   14e5c:	4628      	mov	r0, r5
   14e5e:	f7ff f96d 	bl	1413c <conn_auto_initiate>
	bt_conn_unref(conn);
   14e62:	4628      	mov	r0, r5
   14e64:	e786      	b.n	14d74 <enh_conn_complete+0x2c>
   14e66:	bf00      	nop
   14e68:	200003f4 	.word	0x200003f4
   14e6c:	200003c8 	.word	0x200003c8

00014e70 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   14e70:	b538      	push	{r3, r4, r5, lr}
   14e72:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
   14e74:	4805      	ldr	r0, [pc, #20]	; (14e8c <bt_buf_get_rx+0x1c>)
   14e76:	f007 f820 	bl	1beba <net_buf_alloc_fixed>
#endif

	if (buf) {
   14e7a:	4604      	mov	r4, r0
   14e7c:	b120      	cbz	r0, 14e88 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
   14e7e:	2100      	movs	r1, #0
   14e80:	3008      	adds	r0, #8
   14e82:	f007 f839 	bl	1bef8 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
   14e86:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   14e88:	4620      	mov	r0, r4
   14e8a:	bd38      	pop	{r3, r4, r5, pc}
   14e8c:	20000868 	.word	0x20000868

00014e90 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   14e90:	b570      	push	{r4, r5, r6, lr}
   14e92:	4602      	mov	r2, r0
   14e94:	460b      	mov	r3, r1
	__asm__ volatile(
   14e96:	f04f 0140 	mov.w	r1, #64	; 0x40
   14e9a:	f3ef 8511 	mrs	r5, BASEPRI
   14e9e:	f381 8811 	msr	BASEPRI, r1
   14ea2:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   14ea6:	480c      	ldr	r0, [pc, #48]	; (14ed8 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   14ea8:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   14eaa:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
   14eae:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
   14eb2:	f385 8811 	msr	BASEPRI, r5
   14eb6:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   14eba:	b924      	cbnz	r4, 14ec6 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   14ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14ec0:	2001      	movs	r0, #1
   14ec2:	f7ff bfd5 	b.w	14e70 <bt_buf_get_rx>
   14ec6:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
   14ec8:	f104 0008 	add.w	r0, r4, #8
   14ecc:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   14ece:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
   14ed0:	f007 f812 	bl	1bef8 <net_buf_simple_reserve>
}
   14ed4:	4620      	mov	r0, r4
   14ed6:	bd70      	pop	{r4, r5, r6, pc}
   14ed8:	200003c8 	.word	0x200003c8

00014edc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
   14edc:	b570      	push	{r4, r5, r6, lr}
   14ede:	4604      	mov	r4, r0
	switch (evt) {
   14ee0:	2c0f      	cmp	r4, #15
{
   14ee2:	460d      	mov	r5, r1
   14ee4:	4610      	mov	r0, r2
   14ee6:	4619      	mov	r1, r3
	switch (evt) {
   14ee8:	d805      	bhi.n	14ef6 <bt_buf_get_evt+0x1a>
   14eea:	2c0d      	cmp	r4, #13
   14eec:	d912      	bls.n	14f14 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   14eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   14ef2:	f7ff bfcd 	b.w	14e90 <bt_buf_get_cmd_complete>
	switch (evt) {
   14ef6:	2c13      	cmp	r4, #19
   14ef8:	d10c      	bne.n	14f14 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
   14efa:	480b      	ldr	r0, [pc, #44]	; (14f28 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
   14efc:	f006 ffdd 	bl	1beba <net_buf_alloc_fixed>
			if (buf) {
   14f00:	4604      	mov	r4, r0
   14f02:	b128      	cbz	r0, 14f10 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
   14f04:	2100      	movs	r1, #0
   14f06:	3008      	adds	r0, #8
   14f08:	f006 fff6 	bl	1bef8 <net_buf_simple_reserve>
   14f0c:	2301      	movs	r3, #1
   14f0e:	7523      	strb	r3, [r4, #20]
}
   14f10:	4620      	mov	r0, r4
   14f12:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
   14f14:	4602      	mov	r2, r0
   14f16:	460b      	mov	r3, r1
		if (discardable) {
   14f18:	b10d      	cbz	r5, 14f1e <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
   14f1a:	4804      	ldr	r0, [pc, #16]	; (14f2c <bt_buf_get_evt+0x50>)
   14f1c:	e7ee      	b.n	14efc <bt_buf_get_evt+0x20>
}
   14f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14f22:	2001      	movs	r0, #1
   14f24:	f7ff bfa4 	b.w	14e70 <bt_buf_get_rx>
   14f28:	20000890 	.word	0x20000890
   14f2c:	200007f0 	.word	0x200007f0

00014f30 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   14f30:	2300      	movs	r3, #0
	tx->user_data = NULL;
   14f32:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   14f36:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   14f38:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   14f3a:	4801      	ldr	r0, [pc, #4]	; (14f40 <tx_free+0x10>)
   14f3c:	f007 bbdb 	b.w	1c6f6 <k_queue_append>
   14f40:	200007b0 	.word	0x200007b0

00014f44 <notify_connected>:
{
   14f44:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   14f46:	4b09      	ldr	r3, [pc, #36]	; (14f6c <notify_connected+0x28>)
   14f48:	681d      	ldr	r5, [r3, #0]
{
   14f4a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   14f4c:	7a61      	ldrb	r1, [r4, #9]
   14f4e:	b92d      	cbnz	r5, 14f5c <notify_connected+0x18>
	if (!conn->err) {
   14f50:	b951      	cbnz	r1, 14f68 <notify_connected+0x24>
		bt_gatt_connected(conn);
   14f52:	4620      	mov	r0, r4
}
   14f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   14f58:	f001 bdd8 	b.w	16b0c <bt_gatt_connected>
		if (cb->connected) {
   14f5c:	682b      	ldr	r3, [r5, #0]
   14f5e:	b10b      	cbz	r3, 14f64 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   14f60:	4620      	mov	r0, r4
   14f62:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14f64:	692d      	ldr	r5, [r5, #16]
   14f66:	e7f1      	b.n	14f4c <notify_connected+0x8>
}
   14f68:	bd38      	pop	{r3, r4, r5, pc}
   14f6a:	bf00      	nop
   14f6c:	20002514 	.word	0x20002514

00014f70 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   14f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   14f74:	694d      	ldr	r5, [r1, #20]
{
   14f76:	4604      	mov	r4, r0
   14f78:	460e      	mov	r6, r1
   14f7a:	4690      	mov	r8, r2
   14f7c:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   14f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14f82:	483f      	ldr	r0, [pc, #252]	; (15080 <send_frag+0x110>)
   14f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14f88:	f003 ffec 	bl	18f64 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   14f8c:	7aa3      	ldrb	r3, [r4, #10]
   14f8e:	2b07      	cmp	r3, #7
   14f90:	d146      	bne.n	15020 <send_frag+0xb0>
	__asm__ volatile(
   14f92:	f04f 0340 	mov.w	r3, #64	; 0x40
   14f96:	f3ef 8211 	mrs	r2, BASEPRI
   14f9a:	f383 8811 	msr	BASEPRI, r3
   14f9e:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   14fa2:	2d00      	cmp	r5, #0
   14fa4:	d04e      	beq.n	15044 <send_frag+0xd4>
	parent->next = child;
   14fa6:	2300      	movs	r3, #0
   14fa8:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   14faa:	69a3      	ldr	r3, [r4, #24]
   14fac:	2b00      	cmp	r3, #0
   14fae:	d146      	bne.n	1503e <send_frag+0xce>
	list->head = node;
   14fb0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14fb4:	f382 8811 	msr	BASEPRI, r2
   14fb8:	f3bf 8f6f 	isb	sy
	hdr = net_buf_push(buf, sizeof(*hdr));
   14fbc:	2104      	movs	r1, #4
   14fbe:	f106 0008 	add.w	r0, r6, #8
   14fc2:	f006 ffe7 	bl	1bf94 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14fc6:	8823      	ldrh	r3, [r4, #0]
   14fc8:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   14fcc:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14fd0:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14fd2:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14fd6:	3b04      	subs	r3, #4
   14fd8:	8043      	strh	r3, [r0, #2]
   14fda:	2302      	movs	r3, #2
   14fdc:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   14fde:	4630      	mov	r0, r6
   14fe0:	f7ff f882 	bl	140e8 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   14fe4:	2800      	cmp	r0, #0
   14fe6:	d049      	beq.n	1507c <send_frag+0x10c>
	__asm__ volatile(
   14fe8:	f04f 0340 	mov.w	r3, #64	; 0x40
   14fec:	f3ef 8111 	mrs	r1, BASEPRI
   14ff0:	f383 8811 	msr	BASEPRI, r3
   14ff4:	f3bf 8f6f 	isb	sy
		BT_ERR("Unable to send to driver (err %d)", err);
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   14ff8:	2d00      	cmp	r5, #0
   14ffa:	d039      	beq.n	15070 <send_frag+0x100>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14ffc:	6963      	ldr	r3, [r4, #20]
   14ffe:	2200      	movs	r2, #0
   15000:	b153      	cbz	r3, 15018 <send_frag+0xa8>
   15002:	429d      	cmp	r5, r3
   15004:	d131      	bne.n	1506a <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   15006:	682b      	ldr	r3, [r5, #0]
   15008:	bb4a      	cbnz	r2, 1505e <send_frag+0xee>
   1500a:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   1500c:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1500e:	4295      	cmp	r5, r2
   15010:	d100      	bne.n	15014 <send_frag+0xa4>
	list->tail = node;
   15012:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   15014:	2300      	movs	r3, #0
   15016:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   15018:	f381 8811 	msr	BASEPRI, r1
   1501c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   15020:	4817      	ldr	r0, [pc, #92]	; (15080 <send_frag+0x110>)
   15022:	f003 ff79 	bl	18f18 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   15026:	b115      	cbz	r5, 1502e <send_frag+0xbe>
		tx_free(tx);
   15028:	4628      	mov	r0, r5
   1502a:	f7ff ff81 	bl	14f30 <tx_free>
	}

	if (always_consume) {
   1502e:	b11f      	cbz	r7, 15038 <send_frag+0xc8>
		net_buf_unref(buf);
   15030:	4630      	mov	r0, r6
   15032:	f001 fe9b 	bl	16d6c <net_buf_unref>
	}
	return false;
   15036:	2700      	movs	r7, #0
}
   15038:	4638      	mov	r0, r7
   1503a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1503e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15040:	61a5      	str	r5, [r4, #24]
}
   15042:	e7b7      	b.n	14fb4 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   15044:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   15046:	b133      	cbz	r3, 15056 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   15048:	f103 090c 	add.w	r9, r3, #12
   1504c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1504e:	3301      	adds	r3, #1
   15050:	f8c9 3000 	str.w	r3, [r9]
   15054:	e7ae      	b.n	14fb4 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   15056:	69e3      	ldr	r3, [r4, #28]
   15058:	f104 091c 	add.w	r9, r4, #28
   1505c:	e7f7      	b.n	1504e <send_frag+0xde>
	parent->next = child;
   1505e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   15060:	69a3      	ldr	r3, [r4, #24]
   15062:	429d      	cmp	r5, r3
	list->tail = node;
   15064:	bf08      	it	eq
   15066:	61a2      	streq	r2, [r4, #24]
}
   15068:	e7d4      	b.n	15014 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1506a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1506c:	681b      	ldr	r3, [r3, #0]
   1506e:	e7c7      	b.n	15000 <send_frag+0x90>
			(*pending_no_cb)--;
   15070:	f8d9 3000 	ldr.w	r3, [r9]
   15074:	3b01      	subs	r3, #1
   15076:	f8c9 3000 	str.w	r3, [r9]
   1507a:	e7cd      	b.n	15018 <send_frag+0xa8>
	return true;
   1507c:	2701      	movs	r7, #1
   1507e:	e7db      	b.n	15038 <send_frag+0xc8>
   15080:	20000498 	.word	0x20000498

00015084 <bt_conn_get_pkts>:
}
   15084:	4800      	ldr	r0, [pc, #0]	; (15088 <bt_conn_get_pkts+0x4>)
   15086:	4770      	bx	lr
   15088:	20000498 	.word	0x20000498

0001508c <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1508c:	1d03      	adds	r3, r0, #4
{
   1508e:	b570      	push	{r4, r5, r6, lr}
   15090:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15092:	4618      	mov	r0, r3
   15094:	f005 fc98 	bl	1a9c8 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   15098:	0582      	lsls	r2, r0, #22
   1509a:	d519      	bpl.n	150d0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   1509c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   150a0:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   150a4:	4291      	cmp	r1, r2
   150a6:	d813      	bhi.n	150d0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   150a8:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   150ac:	4291      	cmp	r1, r2
   150ae:	d30f      	bcc.n	150d0 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
   150b0:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   150b4:	4291      	cmp	r1, r2
   150b6:	d10b      	bne.n	150d0 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   150b8:	f3bf 8f5b 	dmb	ish
   150bc:	e853 2f00 	ldrex	r2, [r3]
   150c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   150c4:	e843 2100 	strex	r1, r2, [r3]
   150c8:	2900      	cmp	r1, #0
   150ca:	d1f7      	bne.n	150bc <notify_le_param_updated+0x30>
   150cc:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   150d0:	4b07      	ldr	r3, [pc, #28]	; (150f0 <notify_le_param_updated+0x64>)
   150d2:	681d      	ldr	r5, [r3, #0]
   150d4:	b905      	cbnz	r5, 150d8 <notify_le_param_updated+0x4c>
}
   150d6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   150d8:	68ee      	ldr	r6, [r5, #12]
   150da:	b13e      	cbz	r6, 150ec <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
   150dc:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   150e0:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   150e4:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   150e8:	4620      	mov	r0, r4
   150ea:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   150ec:	692d      	ldr	r5, [r5, #16]
   150ee:	e7f1      	b.n	150d4 <notify_le_param_updated+0x48>
   150f0:	20002514 	.word	0x20002514

000150f4 <le_param_req>:
{
   150f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150f6:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   150f8:	4608      	mov	r0, r1
{
   150fa:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   150fc:	f005 faf2 	bl	1a6e4 <bt_le_conn_params_valid>
   15100:	4604      	mov	r4, r0
   15102:	b910      	cbnz	r0, 1510a <le_param_req+0x16>
		return false;
   15104:	2400      	movs	r4, #0
}
   15106:	4620      	mov	r0, r4
   15108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1510a:	4b09      	ldr	r3, [pc, #36]	; (15130 <le_param_req+0x3c>)
   1510c:	681e      	ldr	r6, [r3, #0]
   1510e:	2e00      	cmp	r6, #0
   15110:	d0f9      	beq.n	15106 <le_param_req+0x12>
		if (!cb->le_param_req) {
   15112:	68b3      	ldr	r3, [r6, #8]
   15114:	b90b      	cbnz	r3, 1511a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   15116:	6936      	ldr	r6, [r6, #16]
   15118:	e7f9      	b.n	1510e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1511a:	4629      	mov	r1, r5
   1511c:	4638      	mov	r0, r7
   1511e:	4798      	blx	r3
   15120:	2800      	cmp	r0, #0
   15122:	d0ef      	beq.n	15104 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   15124:	4628      	mov	r0, r5
   15126:	f005 fadd 	bl	1a6e4 <bt_le_conn_params_valid>
   1512a:	2800      	cmp	r0, #0
   1512c:	d1f3      	bne.n	15116 <le_param_req+0x22>
   1512e:	e7e9      	b.n	15104 <le_param_req+0x10>
   15130:	20002514 	.word	0x20002514

00015134 <bt_conn_cb_register>:
	cb->_next = callback_list;
   15134:	4b02      	ldr	r3, [pc, #8]	; (15140 <bt_conn_cb_register+0xc>)
   15136:	681a      	ldr	r2, [r3, #0]
   15138:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1513a:	6018      	str	r0, [r3, #0]
}
   1513c:	4770      	bx	lr
   1513e:	bf00      	nop
   15140:	20002514 	.word	0x20002514

00015144 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   15144:	b570      	push	{r4, r5, r6, lr}
   15146:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   15148:	f100 0634 	add.w	r6, r0, #52	; 0x34
   1514c:	2200      	movs	r2, #0
   1514e:	2300      	movs	r3, #0
   15150:	4630      	mov	r0, r6
   15152:	f006 feb7 	bl	1bec4 <net_buf_get>
   15156:	4605      	mov	r5, r0
   15158:	b958      	cbnz	r0, 15172 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
   1515a:	4620      	mov	r0, r4
   1515c:	f005 fc96 	bl	1aa8c <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15160:	f104 0158 	add.w	r1, r4, #88	; 0x58
   15164:	4807      	ldr	r0, [pc, #28]	; (15184 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   15166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1516a:	2200      	movs	r2, #0
   1516c:	2300      	movs	r3, #0
   1516e:	f004 b831 	b.w	191d4 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   15172:	6968      	ldr	r0, [r5, #20]
   15174:	b108      	cbz	r0, 1517a <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
   15176:	f7ff fedb 	bl	14f30 <tx_free>
		net_buf_unref(buf);
   1517a:	4628      	mov	r0, r5
   1517c:	f001 fdf6 	bl	16d6c <net_buf_unref>
   15180:	e7e4      	b.n	1514c <conn_cleanup+0x8>
   15182:	bf00      	nop
   15184:	20002330 	.word	0x20002330

00015188 <bt_conn_send_cb>:
{
   15188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1518c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1518e:	7a83      	ldrb	r3, [r0, #10]
   15190:	2b07      	cmp	r3, #7
{
   15192:	4606      	mov	r6, r0
   15194:	460d      	mov	r5, r1
   15196:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   15198:	d005      	beq.n	151a6 <bt_conn_send_cb+0x1e>
		net_buf_unref(buf);
   1519a:	4608      	mov	r0, r1
   1519c:	f001 fde6 	bl	16d6c <net_buf_unref>
			return -ENOTCONN;
   151a0:	f06f 0038 	mvn.w	r0, #56	; 0x38
   151a4:	e015      	b.n	151d2 <bt_conn_send_cb+0x4a>
	if (cb) {
   151a6:	b362      	cbz	r2, 15202 <bt_conn_send_cb+0x7a>
	return z_impl_k_current_get();
   151a8:	f003 feb0 	bl	18f0c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   151ac:	4b16      	ldr	r3, [pc, #88]	; (15208 <bt_conn_send_cb+0x80>)
   151ae:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   151b0:	4816      	ldr	r0, [pc, #88]	; (1520c <bt_conn_send_cb+0x84>)
   151b2:	bf07      	ittee	eq
   151b4:	2200      	moveq	r2, #0
   151b6:	2300      	moveq	r3, #0
   151b8:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   151bc:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   151c0:	f003 fb2a 	bl	18818 <z_impl_k_queue_get>
   151c4:	4604      	mov	r4, r0
		if (!tx) {
   151c6:	b930      	cbnz	r0, 151d6 <bt_conn_send_cb+0x4e>
			net_buf_unref(buf);
   151c8:	4628      	mov	r0, r5
   151ca:	f001 fdcf 	bl	16d6c <net_buf_unref>
			return -ENOBUFS;
   151ce:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   151d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   151d6:	7ab3      	ldrb	r3, [r6, #10]
   151d8:	2b07      	cmp	r3, #7
   151da:	d006      	beq.n	151ea <bt_conn_send_cb+0x62>
			net_buf_unref(buf);
   151dc:	4628      	mov	r0, r5
   151de:	f001 fdc5 	bl	16d6c <net_buf_unref>
			tx_free(tx);
   151e2:	4620      	mov	r0, r4
   151e4:	f7ff fea4 	bl	14f30 <tx_free>
   151e8:	e7da      	b.n	151a0 <bt_conn_send_cb+0x18>
		tx->pending_no_cb = 0U;
   151ea:	2300      	movs	r3, #0
		tx->user_data = user_data;
   151ec:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   151f0:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   151f2:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   151f4:	f106 0034 	add.w	r0, r6, #52	; 0x34
   151f8:	4629      	mov	r1, r5
   151fa:	f006 fe81 	bl	1bf00 <net_buf_put>
	return 0;
   151fe:	2000      	movs	r0, #0
   15200:	e7e7      	b.n	151d2 <bt_conn_send_cb+0x4a>
		tx_data(buf)->tx = NULL;
   15202:	614a      	str	r2, [r1, #20]
   15204:	e7f6      	b.n	151f4 <bt_conn_send_cb+0x6c>
   15206:	bf00      	nop
   15208:	20002348 	.word	0x20002348
   1520c:	200007b0 	.word	0x200007b0

00015210 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   15210:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   15212:	4b1b      	ldr	r3, [pc, #108]	; (15280 <bt_conn_prepare_events+0x70>)
   15214:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15216:	2101      	movs	r1, #1
{
   15218:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   1521a:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1521c:	f007 fdd6 	bl	1cdcc <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   15220:	4b18      	ldr	r3, [pc, #96]	; (15284 <bt_conn_prepare_events+0x74>)
   15222:	f103 0054 	add.w	r0, r3, #84	; 0x54
   15226:	f005 fbcf 	bl	1a9c8 <atomic_get>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   1522a:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   1522e:	4619      	mov	r1, r3
   15230:	b908      	cbnz	r0, 15236 <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   15232:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   15234:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15236:	7a9a      	ldrb	r2, [r3, #10]
   15238:	b99a      	cbnz	r2, 15262 <bt_conn_prepare_events+0x52>
   1523a:	f3bf 8f5b 	dmb	ish
   1523e:	1d1a      	adds	r2, r3, #4
   15240:	e852 0f00 	ldrex	r0, [r2]
   15244:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   15248:	e842 ce00 	strex	lr, ip, [r2]
   1524c:	f1be 0f00 	cmp.w	lr, #0
   15250:	d1f6      	bne.n	15240 <bt_conn_prepare_events+0x30>
   15252:	f3bf 8f5b 	dmb	ish
   15256:	0642      	lsls	r2, r0, #25
   15258:	d503      	bpl.n	15262 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   1525a:	4618      	mov	r0, r3
   1525c:	f7ff ff72 	bl	15144 <conn_cleanup>
   15260:	e7e7      	b.n	15232 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   15262:	7a8b      	ldrb	r3, [r1, #10]
   15264:	2b07      	cmp	r3, #7
   15266:	d1e4      	bne.n	15232 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   15268:	4b07      	ldr	r3, [pc, #28]	; (15288 <bt_conn_prepare_events+0x78>)
   1526a:	4628      	mov	r0, r5
   1526c:	2200      	movs	r2, #0
   1526e:	2104      	movs	r1, #4
   15270:	f007 fdac 	bl	1cdcc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   15274:	2301      	movs	r3, #1
   15276:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1527a:	2002      	movs	r0, #2
	return ev_count;
   1527c:	e7da      	b.n	15234 <bt_conn_prepare_events+0x24>
   1527e:	bf00      	nop
   15280:	20000564 	.word	0x20000564
   15284:	20001e60 	.word	0x20001e60
   15288:	20001e94 	.word	0x20001e94

0001528c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1528c:	b570      	push	{r4, r5, r6, lr}
   1528e:	4606      	mov	r6, r0
   15290:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   15292:	480e      	ldr	r0, [pc, #56]	; (152cc <bt_conn_add_le+0x40>)
   15294:	2101      	movs	r1, #1
   15296:	f005 fbd0 	bl	1aa3a <bt_conn_new>
	if (!conn) {
   1529a:	4604      	mov	r4, r0
   1529c:	b1a0      	cbz	r0, 152c8 <bt_conn_add_le+0x3c>
	k_delayed_work_init(&conn->deferred_work, deferred_work);
   1529e:	490c      	ldr	r1, [pc, #48]	; (152d0 <bt_conn_add_le+0x44>)
   152a0:	3058      	adds	r0, #88	; 0x58
   152a2:	f007 fbd4 	bl	1ca4e <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   152a6:	4a0b      	ldr	r2, [pc, #44]	; (152d4 <bt_conn_add_le+0x48>)

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   152a8:	7226      	strb	r6, [r4, #8]
   152aa:	2300      	movs	r3, #0
   152ac:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   152b0:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   152b2:	2207      	movs	r2, #7
   152b4:	4629      	mov	r1, r5
   152b6:	f104 0088 	add.w	r0, r4, #136	; 0x88
   152ba:	f005 f811 	bl	1a2e0 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   152be:	2301      	movs	r3, #1
   152c0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   152c2:	4b05      	ldr	r3, [pc, #20]	; (152d8 <bt_conn_add_le+0x4c>)
   152c4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   152c8:	4620      	mov	r0, r4
   152ca:	bd70      	pop	{r4, r5, r6, pc}
   152cc:	20001e60 	.word	0x20001e60
   152d0:	00015531 	.word	0x00015531
   152d4:	0001aa35 	.word	0x0001aa35
   152d8:	00280018 	.word	0x00280018

000152dc <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   152dc:	4602      	mov	r2, r0
   152de:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   152e0:	2101      	movs	r1, #1
   152e2:	4803      	ldr	r0, [pc, #12]	; (152f0 <bt_conn_lookup_handle+0x14>)
   152e4:	f005 fc22 	bl	1ab2c <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   152e8:	2800      	cmp	r0, #0
   152ea:	bf38      	it	cc
   152ec:	2000      	movcc	r0, #0
   152ee:	bd08      	pop	{r3, pc}
   152f0:	20001e60 	.word	0x20001e60

000152f4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   152f4:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		if (!atomic_get(&acl_conns[i].ref)) {
   152f6:	4c0c      	ldr	r4, [pc, #48]	; (15328 <bt_conn_lookup_addr_le+0x34>)
{
   152f8:	4603      	mov	r3, r0
		if (!atomic_get(&acl_conns[i].ref)) {
   152fa:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
   152fe:	460a      	mov	r2, r1
		if (!atomic_get(&acl_conns[i].ref)) {
   15300:	f005 fb62 	bl	1a9c8 <atomic_get>
   15304:	b908      	cbnz	r0, 1530a <bt_conn_lookup_addr_le+0x16>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
			return bt_conn_ref(&acl_conns[i]);
		}
	}

	return NULL;
   15306:	2000      	movs	r0, #0
}
   15308:	bd10      	pop	{r4, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
   1530a:	78a1      	ldrb	r1, [r4, #2]
   1530c:	2901      	cmp	r1, #1
   1530e:	d1fa      	bne.n	15306 <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   15310:	4619      	mov	r1, r3
   15312:	4620      	mov	r0, r4
   15314:	f005 fc2b 	bl	1ab6e <bt_conn_is_peer_addr_le>
   15318:	2800      	cmp	r0, #0
   1531a:	d0f4      	beq.n	15306 <bt_conn_lookup_addr_le+0x12>
#endif /* defined(CONFIG_BT_ISO) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
   1531c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   15320:	f005 fb58 	bl	1a9d4 <atomic_inc>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   15324:	4620      	mov	r0, r4
			return bt_conn_ref(&acl_conns[i]);
   15326:	e7ef      	b.n	15308 <bt_conn_lookup_addr_le+0x14>
   15328:	20001e60 	.word	0x20001e60

0001532c <bt_conn_lookup_state_le>:
{
   1532c:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&acl_conns[i].ref)) {
   1532e:	4c10      	ldr	r4, [pc, #64]	; (15370 <bt_conn_lookup_state_le+0x44>)
{
   15330:	4605      	mov	r5, r0
		if (!atomic_get(&acl_conns[i].ref)) {
   15332:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
   15336:	4616      	mov	r6, r2
		if (!atomic_get(&acl_conns[i].ref)) {
   15338:	f005 fb46 	bl	1a9c8 <atomic_get>
   1533c:	b908      	cbnz	r0, 15342 <bt_conn_lookup_state_le+0x16>
	return NULL;
   1533e:	2000      	movs	r0, #0
}
   15340:	bd70      	pop	{r4, r5, r6, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
   15342:	78a3      	ldrb	r3, [r4, #2]
   15344:	2b01      	cmp	r3, #1
   15346:	d1fa      	bne.n	1533e <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   15348:	b951      	cbnz	r1, 15360 <bt_conn_lookup_state_le+0x34>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
   1534a:	7aa3      	ldrb	r3, [r4, #10]
   1534c:	42b3      	cmp	r3, r6
   1534e:	d1f6      	bne.n	1533e <bt_conn_lookup_state_le+0x12>
   15350:	7a23      	ldrb	r3, [r4, #8]
   15352:	42ab      	cmp	r3, r5
   15354:	d1f3      	bne.n	1533e <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
   15356:	4807      	ldr	r0, [pc, #28]	; (15374 <bt_conn_lookup_state_le+0x48>)
   15358:	f005 fb3c 	bl	1a9d4 <atomic_inc>
			return bt_conn_ref(&acl_conns[i]);
   1535c:	4804      	ldr	r0, [pc, #16]	; (15370 <bt_conn_lookup_state_le+0x44>)
   1535e:	e7ef      	b.n	15340 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   15360:	460a      	mov	r2, r1
   15362:	4620      	mov	r0, r4
   15364:	4629      	mov	r1, r5
   15366:	f005 fc02 	bl	1ab6e <bt_conn_is_peer_addr_le>
   1536a:	2800      	cmp	r0, #0
   1536c:	d1ed      	bne.n	1534a <bt_conn_lookup_state_le+0x1e>
   1536e:	e7e6      	b.n	1533e <bt_conn_lookup_state_le+0x12>
   15370:	20001e60 	.word	0x20001e60
   15374:	20001eb4 	.word	0x20001eb4

00015378 <bt_conn_set_state>:
{
   15378:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1537a:	7a85      	ldrb	r5, [r0, #10]
   1537c:	428d      	cmp	r5, r1
{
   1537e:	4604      	mov	r4, r0
	if (conn->state == state) {
   15380:	f000 80a1 	beq.w	154c6 <bt_conn_set_state+0x14e>
	conn->state = state;
   15384:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   15386:	b915      	cbnz	r5, 1538e <bt_conn_set_state+0x16>
	atomic_val_t old = atomic_inc(&conn->ref);
   15388:	3054      	adds	r0, #84	; 0x54
   1538a:	f005 fb23 	bl	1a9d4 <atomic_inc>
	switch (conn->state) {
   1538e:	7aa3      	ldrb	r3, [r4, #10]
   15390:	2b01      	cmp	r3, #1
   15392:	d116      	bne.n	153c2 <bt_conn_set_state+0x4a>
	z_impl_k_sem_give(sem);
   15394:	4d4c      	ldr	r5, [pc, #304]	; (154c8 <bt_conn_set_state+0x150>)
		tx->pending_no_cb = 0U;
   15396:	2600      	movs	r6, #0
	__asm__ volatile(
   15398:	f04f 0340 	mov.w	r3, #64	; 0x40
   1539c:	f3ef 8211 	mrs	r2, BASEPRI
   153a0:	f383 8811 	msr	BASEPRI, r3
   153a4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   153a8:	69e3      	ldr	r3, [r4, #28]
   153aa:	2b00      	cmp	r3, #0
   153ac:	d06c      	beq.n	15488 <bt_conn_set_state+0x110>
			conn->pending_no_cb--;
   153ae:	3b01      	subs	r3, #1
   153b0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   153b2:	f382 8811 	msr	BASEPRI, r2
   153b6:	f3bf 8f6f 	isb	sy
   153ba:	4628      	mov	r0, r5
   153bc:	f003 fdac 	bl	18f18 <z_impl_k_sem_give>
}
   153c0:	e7ea      	b.n	15398 <bt_conn_set_state+0x20>
	switch (conn->state) {
   153c2:	2b07      	cmp	r3, #7
   153c4:	d009      	beq.n	153da <bt_conn_set_state+0x62>
   153c6:	2b00      	cmp	r3, #0
   153c8:	d17d      	bne.n	154c6 <bt_conn_set_state+0x14e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   153ca:	78a3      	ldrb	r3, [r4, #2]
   153cc:	2b04      	cmp	r3, #4
   153ce:	d125      	bne.n	1541c <bt_conn_set_state+0xa4>
			bt_conn_unref(conn);
   153d0:	4620      	mov	r0, r4
}
   153d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   153d6:	f005 bbea 	b.w	1abae <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   153da:	78a3      	ldrb	r3, [r4, #2]
   153dc:	2b04      	cmp	r3, #4
   153de:	d072      	beq.n	154c6 <bt_conn_set_state+0x14e>
	z_impl_k_queue_init(queue);
   153e0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   153e4:	f007 f97b 	bl	1c6de <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   153e8:	2100      	movs	r1, #0
   153ea:	4838      	ldr	r0, [pc, #224]	; (154cc <bt_conn_set_state+0x154>)
   153ec:	f004 f8ec 	bl	195c8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   153f0:	2300      	movs	r3, #0
	list->tail = NULL;
   153f2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
   153f6:	4620      	mov	r0, r4
   153f8:	f000 f9d8 	bl	157ac <bt_l2cap_connected>
		notify_connected(conn);
   153fc:	4620      	mov	r0, r4
   153fe:	f7ff fda1 	bl	14f44 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15402:	78e3      	ldrb	r3, [r4, #3]
   15404:	2b01      	cmp	r3, #1
   15406:	d15e      	bne.n	154c6 <bt_conn_set_state+0x14e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15408:	f104 0158 	add.w	r1, r4, #88	; 0x58
   1540c:	4830      	ldr	r0, [pc, #192]	; (154d0 <bt_conn_set_state+0x158>)
}
   1540e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15412:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   15416:	2300      	movs	r3, #0
   15418:	f003 bedc 	b.w	191d4 <k_delayed_work_submit_to_queue>
		switch (old_state) {
   1541c:	3d01      	subs	r5, #1
   1541e:	2d05      	cmp	r5, #5
   15420:	d851      	bhi.n	154c6 <bt_conn_set_state+0x14e>
   15422:	a301      	add	r3, pc, #4	; (adr r3, 15428 <bt_conn_set_state+0xb0>)
   15424:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   15428:	00015441 	.word	0x00015441
   1542c:	0001547b 	.word	0x0001547b
   15430:	000153d1 	.word	0x000153d1
   15434:	000153d1 	.word	0x000153d1
   15438:	0001547b 	.word	0x0001547b
   1543c:	0001547b 	.word	0x0001547b
			tx_notify(conn);
   15440:	4620      	mov	r0, r4
   15442:	f005 fad4 	bl	1a9ee <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   15446:	78a3      	ldrb	r3, [r4, #2]
   15448:	2b01      	cmp	r3, #1
   1544a:	d103      	bne.n	15454 <bt_conn_set_state+0xdc>
				k_delayed_work_cancel(&conn->deferred_work);
   1544c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15450:	f007 fb05 	bl	1ca5e <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15454:	f3bf 8f5b 	dmb	ish
   15458:	3404      	adds	r4, #4
   1545a:	e854 3f00 	ldrex	r3, [r4]
   1545e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15462:	e844 3200 	strex	r2, r3, [r4]
   15466:	2a00      	cmp	r2, #0
   15468:	d1f7      	bne.n	1545a <bt_conn_set_state+0xe2>
   1546a:	f3bf 8f5b 	dmb	ish
   1546e:	4817      	ldr	r0, [pc, #92]	; (154cc <bt_conn_set_state+0x154>)
}
   15470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15474:	2100      	movs	r1, #0
   15476:	f004 b8a7 	b.w	195c8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1547a:	7a63      	ldrb	r3, [r4, #9]
   1547c:	2b00      	cmp	r3, #0
   1547e:	d0a7      	beq.n	153d0 <bt_conn_set_state+0x58>
				notify_connected(conn);
   15480:	4620      	mov	r0, r4
   15482:	f7ff fd5f 	bl	14f44 <notify_connected>
   15486:	e7a3      	b.n	153d0 <bt_conn_set_state+0x58>
Z_GENLIST_IS_EMPTY(slist)
   15488:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1548a:	b128      	cbz	r0, 15498 <bt_conn_set_state+0x120>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1548c:	69a1      	ldr	r1, [r4, #24]
   1548e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   15490:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15492:	4288      	cmp	r0, r1
	list->tail = node;
   15494:	bf08      	it	eq
   15496:	61a3      	streq	r3, [r4, #24]
   15498:	f382 8811 	msr	BASEPRI, r2
   1549c:	f3bf 8f6f 	isb	sy
		if (!node) {
   154a0:	b188      	cbz	r0, 154c6 <bt_conn_set_state+0x14e>
	__asm__ volatile(
   154a2:	f04f 0240 	mov.w	r2, #64	; 0x40
   154a6:	f3ef 8311 	mrs	r3, BASEPRI
   154aa:	f382 8811 	msr	BASEPRI, r2
   154ae:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   154b2:	68c2      	ldr	r2, [r0, #12]
   154b4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   154b6:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   154b8:	f383 8811 	msr	BASEPRI, r3
   154bc:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   154c0:	f7ff fd36 	bl	14f30 <tx_free>
   154c4:	e779      	b.n	153ba <bt_conn_set_state+0x42>
}
   154c6:	bd70      	pop	{r4, r5, r6, pc}
   154c8:	20000498 	.word	0x20000498
   154cc:	20000564 	.word	0x20000564
   154d0:	20002330 	.word	0x20002330

000154d4 <send_conn_le_param_update>:
{
   154d4:	b538      	push	{r3, r4, r5, lr}
   154d6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   154d8:	4608      	mov	r0, r1
{
   154da:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   154dc:	f005 f902 	bl	1a6e4 <bt_le_conn_params_valid>
   154e0:	b308      	cbz	r0, 15526 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   154e2:	4b12      	ldr	r3, [pc, #72]	; (1552c <send_conn_le_param_update+0x58>)
   154e4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   154e8:	0799      	lsls	r1, r3, #30
   154ea:	d407      	bmi.n	154fc <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   154ec:	78e3      	ldrb	r3, [r4, #3]
   154ee:	b173      	cbz	r3, 1550e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   154f0:	4629      	mov	r1, r5
   154f2:	4620      	mov	r0, r4
}
   154f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   154f8:	f000 b9b4 	b.w	15864 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   154fc:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   15500:	079a      	lsls	r2, r3, #30
   15502:	d5f3      	bpl.n	154ec <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15504:	1d20      	adds	r0, r4, #4
   15506:	f005 fa5f 	bl	1a9c8 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1550a:	0543      	lsls	r3, r0, #21
   1550c:	d4ee      	bmi.n	154ec <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1550e:	4629      	mov	r1, r5
   15510:	4620      	mov	r0, r4
   15512:	f005 fb69 	bl	1abe8 <bt_conn_le_conn_update>
		if (rc == 0) {
   15516:	b928      	cbnz	r0, 15524 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   15518:	88ab      	ldrh	r3, [r5, #4]
   1551a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1551e:	88eb      	ldrh	r3, [r5, #6]
   15520:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   15524:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15526:	f06f 0015 	mvn.w	r0, #21
   1552a:	e7fb      	b.n	15524 <send_conn_le_param_update+0x50>
   1552c:	200003c8 	.word	0x200003c8

00015530 <deferred_work>:
{
   15530:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   15532:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   15536:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   15538:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1553c:	b993      	cbnz	r3, 15564 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   1553e:	4630      	mov	r0, r6
   15540:	f005 fbd5 	bl	1acee <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15544:	4b1f      	ldr	r3, [pc, #124]	; (155c4 <deferred_work+0x94>)
   15546:	681d      	ldr	r5, [r3, #0]
   15548:	b925      	cbnz	r5, 15554 <deferred_work+0x24>
		bt_conn_unref(conn);
   1554a:	4630      	mov	r0, r6
   1554c:	f005 fb2f 	bl	1abae <bt_conn_unref>
}
   15550:	b002      	add	sp, #8
   15552:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   15554:	686b      	ldr	r3, [r5, #4]
   15556:	b11b      	cbz	r3, 15560 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   15558:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   1555c:	4630      	mov	r0, r6
   1555e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15560:	692d      	ldr	r5, [r5, #16]
   15562:	e7f1      	b.n	15548 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   15564:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   15568:	2b01      	cmp	r3, #1
   1556a:	d1f1      	bne.n	15550 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1556c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   15570:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   15574:	e855 3f00 	ldrex	r3, [r5]
   15578:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1557c:	e845 2100 	strex	r1, r2, [r5]
   15580:	2900      	cmp	r1, #0
   15582:	d1f7      	bne.n	15574 <deferred_work+0x44>
   15584:	f3bf 8f5b 	dmb	ish
   15588:	059b      	lsls	r3, r3, #22
   1558a:	d514      	bpl.n	155b6 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1558c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1558e:	9300      	str	r3, [sp, #0]
   15590:	6d23      	ldr	r3, [r4, #80]	; 0x50
   15592:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   15594:	4669      	mov	r1, sp
   15596:	4630      	mov	r0, r6
   15598:	f7ff ff9c 	bl	154d4 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1559c:	f3bf 8f5b 	dmb	ish
   155a0:	e855 3f00 	ldrex	r3, [r5]
   155a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   155a8:	e845 3200 	strex	r2, r3, [r5]
   155ac:	2a00      	cmp	r2, #0
   155ae:	d1f7      	bne.n	155a0 <deferred_work+0x70>
   155b0:	f3bf 8f5b 	dmb	ish
   155b4:	e7cc      	b.n	15550 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   155b6:	4a04      	ldr	r2, [pc, #16]	; (155c8 <deferred_work+0x98>)
   155b8:	6810      	ldr	r0, [r2, #0]
   155ba:	6851      	ldr	r1, [r2, #4]
   155bc:	466b      	mov	r3, sp
   155be:	c303      	stmia	r3!, {r0, r1}
   155c0:	e7e8      	b.n	15594 <deferred_work+0x64>
   155c2:	bf00      	nop
   155c4:	20002514 	.word	0x20002514
   155c8:	0001d080 	.word	0x0001d080

000155cc <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   155cc:	b538      	push	{r3, r4, r5, lr}
   155ce:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
   155d0:	4906      	ldr	r1, [pc, #24]	; (155ec <bt_conn_create_pdu_timeout+0x20>)
   155d2:	2800      	cmp	r0, #0
   155d4:	bf08      	it	eq
   155d6:	4608      	moveq	r0, r1
   155d8:	f006 fc6f 	bl	1beba <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
   155dc:	4604      	mov	r4, r0
   155de:	b118      	cbz	r0, 155e8 <bt_conn_create_pdu_timeout+0x1c>
		BT_WARN("Unable to allocate buffer within timeout");
		return NULL;
	}

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);
   155e0:	1d29      	adds	r1, r5, #4
   155e2:	3008      	adds	r0, #8
   155e4:	f006 fc88 	bl	1bef8 <net_buf_simple_reserve>

	return buf;
}
   155e8:	4620      	mov	r0, r4
   155ea:	bd38      	pop	{r3, r4, r5, pc}
   155ec:	200007c8 	.word	0x200007c8

000155f0 <bt_conn_create_frag_timeout>:
{
   155f0:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   155f2:	4801      	ldr	r0, [pc, #4]	; (155f8 <bt_conn_create_frag_timeout+0x8>)
   155f4:	f7ff bfea 	b.w	155cc <bt_conn_create_pdu_timeout>
   155f8:	20000818 	.word	0x20000818

000155fc <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   155fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15600:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   15602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1560a:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1560c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1560e:	f7ff ffef 	bl	155f0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   15612:	7833      	ldrb	r3, [r6, #0]
   15614:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   15616:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15618:	f04f 0600 	mov.w	r6, #0
   1561c:	d005      	beq.n	1562a <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   1561e:	f001 fba5 	bl	16d6c <net_buf_unref>
		return NULL;
   15622:	4635      	mov	r5, r6
}
   15624:	4628      	mov	r0, r5
   15626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1562a:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1562c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   15630:	4e0c      	ldr	r6, [pc, #48]	; (15664 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15632:	4638      	mov	r0, r7
   15634:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   15638:	f006 fcd0 	bl	1bfdc <net_buf_simple_tailroom>
   1563c:	4580      	cmp	r8, r0
   1563e:	d20c      	bcs.n	1565a <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   15640:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	net_buf_add_mem(frag, buf->data, frag_len);
   15644:	f854 1f08 	ldr.w	r1, [r4, #8]!
   15648:	4632      	mov	r2, r6
   1564a:	4638      	mov	r0, r7
   1564c:	f006 fc91 	bl	1bf72 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
   15650:	4631      	mov	r1, r6
   15652:	4620      	mov	r0, r4
   15654:	f006 fca6 	bl	1bfa4 <net_buf_simple_pull>
	return frag;
   15658:	e7e4      	b.n	15624 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1565a:	4638      	mov	r0, r7
   1565c:	f006 fcbe 	bl	1bfdc <net_buf_simple_tailroom>
   15660:	b286      	uxth	r6, r0
   15662:	e7ef      	b.n	15644 <create_frag.isra.0+0x48>
   15664:	200003c8 	.word	0x200003c8

00015668 <bt_conn_process_tx>:
{
   15668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1566a:	7a83      	ldrb	r3, [r0, #10]
{
   1566c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1566e:	b993      	cbnz	r3, 15696 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15670:	f3bf 8f5b 	dmb	ish
   15674:	1d03      	adds	r3, r0, #4
   15676:	e853 2f00 	ldrex	r2, [r3]
   1567a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1567e:	e843 1400 	strex	r4, r1, [r3]
   15682:	2c00      	cmp	r4, #0
   15684:	d1f7      	bne.n	15676 <bt_conn_process_tx+0xe>
   15686:	f3bf 8f5b 	dmb	ish
   1568a:	0653      	lsls	r3, r2, #25
   1568c:	d503      	bpl.n	15696 <bt_conn_process_tx+0x2e>
}
   1568e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   15692:	f7ff bd57 	b.w	15144 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15696:	2200      	movs	r2, #0
   15698:	2300      	movs	r3, #0
   1569a:	f105 0034 	add.w	r0, r5, #52	; 0x34
   1569e:	f006 fc11 	bl	1bec4 <net_buf_get>
	BT_ASSERT(buf);
   156a2:	4604      	mov	r4, r0
   156a4:	b960      	cbnz	r0, 156c0 <bt_conn_process_tx+0x58>
   156a6:	4a20      	ldr	r2, [pc, #128]	; (15728 <bt_conn_process_tx+0xc0>)
   156a8:	4920      	ldr	r1, [pc, #128]	; (1572c <bt_conn_process_tx+0xc4>)
   156aa:	4821      	ldr	r0, [pc, #132]	; (15730 <bt_conn_process_tx+0xc8>)
   156ac:	f240 5355 	movw	r3, #1365	; 0x555
   156b0:	f003 fff5 	bl	1969e <printk>
   156b4:	4040      	eors	r0, r0
   156b6:	f380 8811 	msr	BASEPRI, r0
   156ba:	f04f 0003 	mov.w	r0, #3
   156be:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   156c0:	4f1c      	ldr	r7, [pc, #112]	; (15734 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   156c2:	89a1      	ldrh	r1, [r4, #12]
   156c4:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   156c8:	4291      	cmp	r1, r2
   156ca:	d807      	bhi.n	156dc <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   156cc:	2300      	movs	r3, #0
   156ce:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   156d0:	4621      	mov	r1, r4
   156d2:	4628      	mov	r0, r5
   156d4:	f7ff fc4c 	bl	14f70 <send_frag>
	if (!send_buf(conn, buf)) {
   156d8:	b140      	cbz	r0, 156ec <bt_conn_process_tx+0x84>
}
   156da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   156dc:	f105 060a 	add.w	r6, r5, #10
   156e0:	4621      	mov	r1, r4
   156e2:	4630      	mov	r0, r6
   156e4:	f7ff ff8a 	bl	155fc <create_frag.isra.0>
	if (!frag) {
   156e8:	4601      	mov	r1, r0
   156ea:	b920      	cbnz	r0, 156f6 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   156ec:	4620      	mov	r0, r4
}
   156ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   156f2:	f001 bb3b 	b.w	16d6c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   156f6:	2301      	movs	r3, #1
   156f8:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   156fa:	4628      	mov	r0, r5
   156fc:	f7ff fc38 	bl	14f70 <send_frag>
   15700:	2800      	cmp	r0, #0
   15702:	d0f3      	beq.n	156ec <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   15704:	89a2      	ldrh	r2, [r4, #12]
   15706:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   1570a:	429a      	cmp	r2, r3
   1570c:	d802      	bhi.n	15714 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   1570e:	2300      	movs	r3, #0
   15710:	2203      	movs	r2, #3
   15712:	e7dd      	b.n	156d0 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   15714:	4621      	mov	r1, r4
   15716:	4630      	mov	r0, r6
   15718:	f7ff ff70 	bl	155fc <create_frag.isra.0>
		if (!frag) {
   1571c:	4601      	mov	r1, r0
   1571e:	2800      	cmp	r0, #0
   15720:	d0e4      	beq.n	156ec <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15722:	2301      	movs	r3, #1
   15724:	461a      	mov	r2, r3
   15726:	e7e8      	b.n	156fa <bt_conn_process_tx+0x92>
   15728:	0001d87d 	.word	0x0001d87d
   1572c:	0001d854 	.word	0x0001d854
   15730:	0001d7e0 	.word	0x0001d7e0
   15734:	200003c8 	.word	0x200003c8

00015738 <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   15738:	4b03      	ldr	r3, [pc, #12]	; (15748 <bt_conn_index+0x10>)
   1573a:	1ac0      	subs	r0, r0, r3
   1573c:	4b03      	ldr	r3, [pc, #12]	; (1574c <bt_conn_index+0x14>)
   1573e:	10c0      	asrs	r0, r0, #3
   15740:	4358      	muls	r0, r3
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
   15742:	b2c0      	uxtb	r0, r0
   15744:	4770      	bx	lr
   15746:	bf00      	nop
   15748:	20001e60 	.word	0x20001e60
   1574c:	e9bd37a7 	.word	0xe9bd37a7

00015750 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
   15750:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15752:	490b      	ldr	r1, [pc, #44]	; (15780 <bt_conn_init+0x30>)
   15754:	480b      	ldr	r0, [pc, #44]	; (15784 <bt_conn_init+0x34>)
   15756:	f006 ffce 	bl	1c6f6 <k_queue_append>
   1575a:	490b      	ldr	r1, [pc, #44]	; (15788 <bt_conn_init+0x38>)
   1575c:	4809      	ldr	r0, [pc, #36]	; (15784 <bt_conn_init+0x34>)
   1575e:	f006 ffca 	bl	1c6f6 <k_queue_append>
   15762:	490a      	ldr	r1, [pc, #40]	; (1578c <bt_conn_init+0x3c>)
   15764:	4807      	ldr	r0, [pc, #28]	; (15784 <bt_conn_init+0x34>)
   15766:	f006 ffc6 	bl	1c6f6 <k_queue_append>
	}

	bt_att_init();
   1576a:	f005 ff4e 	bl	1b60a <bt_att_init>

	err = bt_smp_init();
   1576e:	f006 fba1 	bl	1beb4 <bt_smp_init>
	if (err) {
   15772:	4604      	mov	r4, r0
   15774:	b908      	cbnz	r0, 1577a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   15776:	f005 fb54 	bl	1ae22 <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
   1577a:	4620      	mov	r0, r4
   1577c:	bd10      	pop	{r4, pc}
   1577e:	bf00      	nop
   15780:	20002518 	.word	0x20002518
   15784:	200007b0 	.word	0x200007b0
   15788:	20002528 	.word	0x20002528
   1578c:	20002538 	.word	0x20002538

00015790 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   15790:	4b04      	ldr	r3, [pc, #16]	; (157a4 <l2cap_accept+0x14>)
   15792:	6818      	ldr	r0, [r3, #0]
   15794:	b918      	cbnz	r0, 1579e <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   15796:	4a04      	ldr	r2, [pc, #16]	; (157a8 <l2cap_accept+0x18>)
   15798:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1579a:	600b      	str	r3, [r1, #0]

		return 0;
   1579c:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   1579e:	f06f 000b 	mvn.w	r0, #11
}
   157a2:	4770      	bx	lr
   157a4:	20001f18 	.word	0x20001f18
   157a8:	0001d22c 	.word	0x0001d22c

000157ac <bt_l2cap_connected>:
{
   157ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   157b0:	4e29      	ldr	r6, [pc, #164]	; (15858 <bt_l2cap_connected+0xac>)
   157b2:	4f2a      	ldr	r7, [pc, #168]	; (1585c <bt_l2cap_connected+0xb0>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   157b4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 15860 <bt_l2cap_connected+0xb4>
{
   157b8:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   157ba:	42be      	cmp	r6, r7
   157bc:	d302      	bcc.n	157c4 <bt_l2cap_connected+0x18>
}
   157be:	b003      	add	sp, #12
   157c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   157c4:	6873      	ldr	r3, [r6, #4]
   157c6:	a901      	add	r1, sp, #4
   157c8:	4620      	mov	r0, r4
   157ca:	4798      	blx	r3
   157cc:	2800      	cmp	r0, #0
   157ce:	db3d      	blt.n	1584c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   157d0:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   157d2:	8833      	ldrh	r3, [r6, #0]
   157d4:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   157d8:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   157dc:	4641      	mov	r1, r8
   157de:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   157e2:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   157e6:	f007 f932 	bl	1ca4e <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   157ea:	f3bf 8f5b 	dmb	ish
   157ee:	f105 0340 	add.w	r3, r5, #64	; 0x40
   157f2:	2200      	movs	r2, #0
   157f4:	e853 1f00 	ldrex	r1, [r3]
   157f8:	e843 2000 	strex	r0, r2, [r3]
   157fc:	2800      	cmp	r0, #0
   157fe:	d1f9      	bne.n	157f4 <bt_l2cap_connected+0x48>
   15800:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   15804:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   15806:	6d22      	ldr	r2, [r4, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
   15808:	f105 0308 	add.w	r3, r5, #8
   1580c:	bb02      	cbnz	r2, 15850 <bt_l2cap_connected+0xa4>
	list->head = node;
   1580e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		if (chan->ops->connected) {
   15812:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   15814:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   15816:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   15818:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   1581c:	681b      	ldr	r3, [r3, #0]
   1581e:	b103      	cbz	r3, 15822 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   15820:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15822:	9b01      	ldr	r3, [sp, #4]
   15824:	f3bf 8f5b 	dmb	ish
   15828:	3340      	adds	r3, #64	; 0x40
   1582a:	e853 2f00 	ldrex	r2, [r3]
   1582e:	f042 0201 	orr.w	r2, r2, #1
   15832:	e843 2100 	strex	r1, r2, [r3]
   15836:	2900      	cmp	r1, #0
   15838:	d1f7      	bne.n	1582a <bt_l2cap_connected+0x7e>
   1583a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1583e:	9801      	ldr	r0, [sp, #4]
   15840:	6843      	ldr	r3, [r0, #4]
   15842:	699b      	ldr	r3, [r3, #24]
   15844:	b113      	cbz	r3, 1584c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   15846:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1584a:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1584c:	360c      	adds	r6, #12
   1584e:	e7b4      	b.n	157ba <bt_l2cap_connected+0xe>
	parent->next = child;
   15850:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15852:	6523      	str	r3, [r4, #80]	; 0x50
}
   15854:	e7dd      	b.n	15812 <bt_l2cap_connected+0x66>
   15856:	bf00      	nop
   15858:	0001d004 	.word	0x0001d004
   1585c:	0001d028 	.word	0x0001d028
   15860:	0001acd7 	.word	0x0001acd7

00015864 <bt_l2cap_update_conn_param>:
{
   15864:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   15866:	4b15      	ldr	r3, [pc, #84]	; (158bc <bt_l2cap_update_conn_param+0x58>)
   15868:	781a      	ldrb	r2, [r3, #0]
   1586a:	3201      	adds	r2, #1
	if (!ident) {
   1586c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   15870:	bf08      	it	eq
   15872:	2201      	moveq	r2, #1
   15874:	701a      	strb	r2, [r3, #0]
{
   15876:	4605      	mov	r5, r0
   15878:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1587a:	2208      	movs	r2, #8
   1587c:	7819      	ldrb	r1, [r3, #0]
   1587e:	2012      	movs	r0, #18
   15880:	f005 f9db 	bl	1ac3a <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   15884:	4606      	mov	r6, r0
   15886:	b1b0      	cbz	r0, 158b6 <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
   15888:	2108      	movs	r1, #8
   1588a:	4408      	add	r0, r1
   1588c:	f006 fb6b 	bl	1bf66 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15890:	8822      	ldrh	r2, [r4, #0]
   15892:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15894:	8862      	ldrh	r2, [r4, #2]
   15896:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15898:	88a2      	ldrh	r2, [r4, #4]
   1589a:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1589c:	88e2      	ldrh	r2, [r4, #6]
   1589e:	80c2      	strh	r2, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   158a0:	2400      	movs	r4, #0
   158a2:	9400      	str	r4, [sp, #0]
   158a4:	4623      	mov	r3, r4
   158a6:	4632      	mov	r2, r6
   158a8:	2105      	movs	r1, #5
   158aa:	4628      	mov	r0, r5
   158ac:	f005 fa38 	bl	1ad20 <bt_l2cap_send_cb>
	return 0;
   158b0:	4620      	mov	r0, r4
}
   158b2:	b002      	add	sp, #8
   158b4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   158b6:	f06f 000b 	mvn.w	r0, #11
   158ba:	e7fa      	b.n	158b2 <bt_l2cap_update_conn_param+0x4e>
   158bc:	20002a54 	.word	0x20002a54

000158c0 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   158c0:	4b02      	ldr	r3, [pc, #8]	; (158cc <att_cfm_sent+0xc>)
   158c2:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   158c6:	f005 bada 	b.w	1ae7e <att_sent>
   158ca:	bf00      	nop
   158cc:	0001b269 	.word	0x0001b269

000158d0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   158d0:	4b02      	ldr	r3, [pc, #8]	; (158dc <att_rsp_sent+0xc>)
   158d2:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   158d6:	f005 bad2 	b.w	1ae7e <att_sent>
   158da:	bf00      	nop
   158dc:	0001b24d 	.word	0x0001b24d

000158e0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   158e0:	4b02      	ldr	r3, [pc, #8]	; (158ec <att_req_sent+0xc>)
   158e2:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   158e6:	f005 baca 	b.w	1ae7e <att_sent>
   158ea:	bf00      	nop
   158ec:	00015b29 	.word	0x00015b29

000158f0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   158f0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   158f2:	3808      	subs	r0, #8
   158f4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   158f6:	a901      	add	r1, sp, #4
   158f8:	4802      	ldr	r0, [pc, #8]	; (15904 <bt_att_released+0x14>)
   158fa:	f002 ff63 	bl	187c4 <k_mem_slab_free>
}
   158fe:	b003      	add	sp, #12
   15900:	f85d fb04 	ldr.w	pc, [sp], #4
   15904:	20000730 	.word	0x20000730

00015908 <read_group_cb>:
{
   15908:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1590c:	4606      	mov	r6, r0
   1590e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15910:	f04f 0800 	mov.w	r8, #0
   15914:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15918:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1591a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1591c:	f88d 8008 	strb.w	r8, [sp, #8]
   15920:	a902      	add	r1, sp, #8
{
   15922:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15924:	f8ad 300a 	strh.w	r3, [sp, #10]
   15928:	f004 fd2d 	bl	1a386 <bt_uuid_cmp>
   1592c:	b1a0      	cbz	r0, 15958 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1592e:	f642 0301 	movw	r3, #10241	; 0x2801
   15932:	6830      	ldr	r0, [r6, #0]
   15934:	f88d 800c 	strb.w	r8, [sp, #12]
   15938:	a903      	add	r1, sp, #12
   1593a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1593e:	f004 fd22 	bl	1a386 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15942:	b148      	cbz	r0, 15958 <read_group_cb+0x50>
		if (data->group &&
   15944:	6923      	ldr	r3, [r4, #16]
   15946:	b11b      	cbz	r3, 15950 <read_group_cb+0x48>
   15948:	885a      	ldrh	r2, [r3, #2]
   1594a:	42aa      	cmp	r2, r5
   1594c:	d200      	bcs.n	15950 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1594e:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15950:	2001      	movs	r0, #1
}
   15952:	b004      	add	sp, #16
   15954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15958:	6861      	ldr	r1, [r4, #4]
   1595a:	6830      	ldr	r0, [r6, #0]
   1595c:	f004 fd13 	bl	1a386 <bt_uuid_cmp>
   15960:	b110      	cbz	r0, 15968 <read_group_cb+0x60>
		data->group = NULL;
   15962:	2300      	movs	r3, #0
   15964:	6123      	str	r3, [r4, #16]
   15966:	e7f3      	b.n	15950 <read_group_cb+0x48>
	if (data->rsp->len &&
   15968:	68e3      	ldr	r3, [r4, #12]
   1596a:	68a0      	ldr	r0, [r4, #8]
   1596c:	781a      	ldrb	r2, [r3, #0]
   1596e:	b13a      	cbz	r2, 15980 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15970:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   15974:	8981      	ldrh	r1, [r0, #12]
   15976:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   15978:	4293      	cmp	r3, r2
   1597a:	da01      	bge.n	15980 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1597c:	2000      	movs	r0, #0
   1597e:	e7e8      	b.n	15952 <read_group_cb+0x4a>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   15980:	2104      	movs	r1, #4
   15982:	3008      	adds	r0, #8
   15984:	f006 faef 	bl	1bf66 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15988:	4b09      	ldr	r3, [pc, #36]	; (159b0 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1598a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1598c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1598e:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15990:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15992:	4631      	mov	r1, r6
   15994:	9300      	str	r3, [sp, #0]
   15996:	9401      	str	r4, [sp, #4]
   15998:	2300      	movs	r3, #0
   1599a:	4638      	mov	r0, r7
   1599c:	f005 fabf 	bl	1af1e <att_chan_read>
	if (read < 0) {
   159a0:	2800      	cmp	r0, #0
   159a2:	dbeb      	blt.n	1597c <read_group_cb+0x74>
	if (!data->group) {
   159a4:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   159a6:	3800      	subs	r0, #0
   159a8:	bf18      	it	ne
   159aa:	2001      	movne	r0, #1
   159ac:	e7d1      	b.n	15952 <read_group_cb+0x4a>
   159ae:	bf00      	nop
   159b0:	0001b1f5 	.word	0x0001b1f5

000159b4 <read_type_cb>:
{
   159b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   159b8:	f8d2 8000 	ldr.w	r8, [r2]
{
   159bc:	4606      	mov	r6, r0
   159be:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   159c0:	6800      	ldr	r0, [r0, #0]
   159c2:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   159c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   159c8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   159ca:	f004 fcdc 	bl	1a386 <bt_uuid_cmp>
   159ce:	4607      	mov	r7, r0
   159d0:	2800      	cmp	r0, #0
   159d2:	d13e      	bne.n	15a52 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   159d4:	4628      	mov	r0, r5
   159d6:	2215      	movs	r2, #21
   159d8:	4631      	mov	r1, r6
   159da:	f006 f9f0 	bl	1bdbe <bt_gatt_check_perm>
   159de:	4605      	mov	r5, r0
   159e0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   159e2:	b148      	cbz	r0, 159f8 <read_type_cb+0x44>
		if (data->rsp->len) {
   159e4:	68e3      	ldr	r3, [r4, #12]
   159e6:	781b      	ldrb	r3, [r3, #0]
   159e8:	b923      	cbnz	r3, 159f4 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   159ea:	2500      	movs	r5, #0
}
   159ec:	4628      	mov	r0, r5
   159ee:	b003      	add	sp, #12
   159f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   159f4:	7527      	strb	r7, [r4, #20]
   159f6:	e7f8      	b.n	159ea <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   159f8:	68a0      	ldr	r0, [r4, #8]
   159fa:	f006 fa92 	bl	1bf22 <net_buf_frag_last>
   159fe:	2102      	movs	r1, #2
   15a00:	3008      	adds	r0, #8
   15a02:	f006 fab0 	bl	1bf66 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15a06:	4b14      	ldr	r3, [pc, #80]	; (15a58 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15a08:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15a0a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   15a0c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15a10:	4631      	mov	r1, r6
   15a12:	9300      	str	r3, [sp, #0]
   15a14:	9401      	str	r4, [sp, #4]
   15a16:	462b      	mov	r3, r5
   15a18:	4640      	mov	r0, r8
   15a1a:	f005 fa80 	bl	1af1e <att_chan_read>
	if (read < 0) {
   15a1e:	2800      	cmp	r0, #0
   15a20:	da07      	bge.n	15a32 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   15a22:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   15a26:	bf26      	itte	cs
   15a28:	4240      	negcs	r0, r0
   15a2a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   15a2c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   15a2e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   15a30:	e7dc      	b.n	159ec <read_type_cb+0x38>
	if (!data->item) {
   15a32:	6923      	ldr	r3, [r4, #16]
   15a34:	2b00      	cmp	r3, #0
   15a36:	d0d8      	beq.n	159ea <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15a38:	68a0      	ldr	r0, [r4, #8]
   15a3a:	f005 fa18 	bl	1ae6e <net_buf_frags_len>
   15a3e:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15a42:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15a44:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15a46:	7818      	ldrb	r0, [r3, #0]
   15a48:	4285      	cmp	r5, r0
   15a4a:	bf94      	ite	ls
   15a4c:	2500      	movls	r5, #0
   15a4e:	2501      	movhi	r5, #1
   15a50:	e7cc      	b.n	159ec <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   15a52:	2501      	movs	r5, #1
   15a54:	e7ca      	b.n	159ec <read_type_cb+0x38>
   15a56:	bf00      	nop
   15a58:	0001ae8b 	.word	0x0001ae8b

00015a5c <chan_send>:
{
   15a5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15a60:	688b      	ldr	r3, [r1, #8]
   15a62:	781b      	ldrb	r3, [r3, #0]
   15a64:	2bd2      	cmp	r3, #210	; 0xd2
{
   15a66:	4605      	mov	r5, r0
   15a68:	460c      	mov	r4, r1
   15a6a:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15a6c:	d10c      	bne.n	15a88 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   15a6e:	6803      	ldr	r3, [r0, #0]
   15a70:	6818      	ldr	r0, [r3, #0]
   15a72:	f006 fa1c 	bl	1beae <bt_smp_sign>
		if (err) {
   15a76:	4606      	mov	r6, r0
   15a78:	b130      	cbz	r0, 15a88 <chan_send+0x2c>
		net_buf_unref(buf);
   15a7a:	4620      	mov	r0, r4
   15a7c:	f001 f976 	bl	16d6c <net_buf_unref>
}
   15a80:	4630      	mov	r0, r6
   15a82:	b003      	add	sp, #12
   15a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15a88:	f104 0008 	add.w	r0, r4, #8
   15a8c:	f006 faa2 	bl	1bfd4 <net_buf_simple_headroom>
	state->len = buf->len;
   15a90:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   15a94:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   15a96:	f1b9 0f00 	cmp.w	r9, #0
   15a9a:	d10a      	bne.n	15ab2 <chan_send+0x56>
	switch (att_op_get_type(buf->data[0])) {
   15a9c:	68a3      	ldr	r3, [r4, #8]
   15a9e:	7818      	ldrb	r0, [r3, #0]
   15aa0:	f005 fa05 	bl	1aeae <att_op_get_type>
   15aa4:	1e43      	subs	r3, r0, #1
   15aa6:	b2db      	uxtb	r3, r3
   15aa8:	2b04      	cmp	r3, #4
   15aaa:	bf9c      	itt	ls
   15aac:	4a16      	ldrls	r2, [pc, #88]	; (15b08 <chan_send+0xac>)
   15aae:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15ab2:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   15ab4:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15ab8:	4620      	mov	r0, r4
   15aba:	681e      	ldr	r6, [r3, #0]
   15abc:	f006 fa2d 	bl	1bf1a <net_buf_ref>
   15ac0:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
   15ac4:	4b11      	ldr	r3, [pc, #68]	; (15b0c <chan_send+0xb0>)
   15ac6:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15ac8:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   15aca:	d019      	beq.n	15b00 <chan_send+0xa4>
	} else if (cb == chan_cfm_sent) {
   15acc:	4b10      	ldr	r3, [pc, #64]	; (15b10 <chan_send+0xb4>)
   15ace:	4299      	cmp	r1, r3
   15ad0:	d018      	beq.n	15b04 <chan_send+0xa8>
		return att_sent;
   15ad2:	f8df c050 	ldr.w	ip, [pc, #80]	; 15b24 <chan_send+0xc8>
   15ad6:	4b0f      	ldr	r3, [pc, #60]	; (15b14 <chan_send+0xb8>)
   15ad8:	480f      	ldr	r0, [pc, #60]	; (15b18 <chan_send+0xbc>)
   15ada:	4561      	cmp	r1, ip
   15adc:	bf18      	it	ne
   15ade:	4603      	movne	r3, r0
				&chan->chan.chan);
   15ae0:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15ae2:	4630      	mov	r0, r6
   15ae4:	9500      	str	r5, [sp, #0]
   15ae6:	2104      	movs	r1, #4
   15ae8:	f005 f91a 	bl	1ad20 <bt_l2cap_send_cb>
	if (!err) {
   15aec:	4606      	mov	r6, r0
   15aee:	2800      	cmp	r0, #0
   15af0:	d0c3      	beq.n	15a7a <chan_send+0x1e>
	buf->data = buf->__buf + state->offset;
   15af2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15af4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15af8:	fa10 f787 	uxtah	r7, r0, r7
   15afc:	60a7      	str	r7, [r4, #8]
}
   15afe:	e7bf      	b.n	15a80 <chan_send+0x24>
		return att_rsp_sent;
   15b00:	4b06      	ldr	r3, [pc, #24]	; (15b1c <chan_send+0xc0>)
   15b02:	e7ed      	b.n	15ae0 <chan_send+0x84>
		return att_cfm_sent;
   15b04:	4b06      	ldr	r3, [pc, #24]	; (15b20 <chan_send+0xc4>)
   15b06:	e7eb      	b.n	15ae0 <chan_send+0x84>
   15b08:	0001d24c 	.word	0x0001d24c
   15b0c:	0001b24d 	.word	0x0001b24d
   15b10:	0001b269 	.word	0x0001b269
   15b14:	000158e1 	.word	0x000158e1
   15b18:	0001ae7f 	.word	0x0001ae7f
   15b1c:	000158d1 	.word	0x000158d1
   15b20:	000158c1 	.word	0x000158c1
   15b24:	00015b29 	.word	0x00015b29

00015b28 <chan_req_sent>:
	if (chan->req) {
   15b28:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   15b2c:	b13b      	cbz	r3, 15b3e <chan_req_sent+0x16>
   15b2e:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   15b32:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15b36:	4802      	ldr	r0, [pc, #8]	; (15b40 <chan_req_sent+0x18>)
   15b38:	2300      	movs	r3, #0
   15b3a:	f003 bb4b 	b.w	191d4 <k_delayed_work_submit_to_queue>
}
   15b3e:	4770      	bx	lr
   15b40:	20002330 	.word	0x20002330

00015b44 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   15b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15b46:	2300      	movs	r3, #0
{
   15b48:	4607      	mov	r7, r0
   15b4a:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15b4c:	4822      	ldr	r0, [pc, #136]	; (15bd8 <bt_att_accept+0x94>)
   15b4e:	2200      	movs	r2, #0
   15b50:	4669      	mov	r1, sp
   15b52:	f002 fe05 	bl	18760 <k_mem_slab_alloc>
   15b56:	4604      	mov	r4, r0
   15b58:	b120      	cbz	r0, 15b64 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   15b5a:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   15b5e:	4620      	mov	r0, r4
   15b60:	b003      	add	sp, #12
   15b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   15b64:	4601      	mov	r1, r0
   15b66:	222c      	movs	r2, #44	; 0x2c
   15b68:	9800      	ldr	r0, [sp, #0]
   15b6a:	f004 fbe4 	bl	1a336 <memset>
	att->conn = conn;
   15b6e:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15b70:	481a      	ldr	r0, [pc, #104]	; (15bdc <bt_att_accept+0x98>)
	list->tail = NULL;
   15b72:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   15b74:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   15b78:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   15b7c:	2200      	movs	r2, #0
   15b7e:	2300      	movs	r3, #0
   15b80:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   15b82:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15b84:	f002 fdec 	bl	18760 <k_mem_slab_alloc>
   15b88:	4604      	mov	r4, r0
   15b8a:	2800      	cmp	r0, #0
   15b8c:	d1e5      	bne.n	15b5a <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   15b8e:	4601      	mov	r1, r0
   15b90:	f44f 7298 	mov.w	r2, #304	; 0x130
   15b94:	9801      	ldr	r0, [sp, #4]
   15b96:	f004 fbce 	bl	1a336 <memset>
	chan->chan.chan.ops = &ops;
   15b9a:	9801      	ldr	r0, [sp, #4]
   15b9c:	4b10      	ldr	r3, [pc, #64]	; (15be0 <bt_att_accept+0x9c>)
   15b9e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   15ba0:	30c8      	adds	r0, #200	; 0xc8
   15ba2:	f006 fd9c 	bl	1c6de <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   15ba6:	9801      	ldr	r0, [sp, #4]
   15ba8:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
   15bac:	2203      	movs	r2, #3
   15bae:	4611      	mov	r1, r2
   15bb0:	f006 fecd 	bl	1c94e <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15bb4:	9b01      	ldr	r3, [sp, #4]
   15bb6:	f3bf 8f5b 	dmb	ish
   15bba:	33c0      	adds	r3, #192	; 0xc0
   15bbc:	e853 2f00 	ldrex	r2, [r3]
   15bc0:	e843 4100 	strex	r1, r4, [r3]
   15bc4:	2900      	cmp	r1, #0
   15bc6:	d1f9      	bne.n	15bbc <bt_att_accept+0x78>
   15bc8:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   15bcc:	9b01      	ldr	r3, [sp, #4]
   15bce:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   15bd2:	6033      	str	r3, [r6, #0]
	return 0;
   15bd4:	e7c3      	b.n	15b5e <bt_att_accept+0x1a>
   15bd6:	bf00      	nop
   15bd8:	20000714 	.word	0x20000714
   15bdc:	20000730 	.word	0x20000730
   15be0:	20000574 	.word	0x20000574

00015be4 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15be4:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   15be6:	4a07      	ldr	r2, [pc, #28]	; (15c04 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15be8:	4604      	mov	r4, r0
   15bea:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   15bec:	f7ff ff36 	bl	15a5c <chan_send>
	if (err) {
   15bf0:	b130      	cbz	r0, 15c00 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   15bf2:	4629      	mov	r1, r5
   15bf4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   15bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   15bfc:	f006 b980 	b.w	1bf00 <net_buf_put>
}
   15c00:	bd38      	pop	{r3, r4, r5, pc}
   15c02:	bf00      	nop
   15c04:	0001b24d 	.word	0x0001b24d

00015c08 <bt_att_connected>:
{
   15c08:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15c0a:	2104      	movs	r1, #4
{
   15c0c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15c0e:	6800      	ldr	r0, [r0, #0]
   15c10:	f005 f8cc 	bl	1adac <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   15c14:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   15c18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15c1a:	b91b      	cbnz	r3, 15c24 <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
   15c1c:	f105 000c 	add.w	r0, r5, #12
   15c20:	f006 fd5d 	bl	1c6de <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   15c24:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   15c26:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
   15c2a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   15c2c:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
   15c30:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   15c32:	b902      	cbnz	r2, 15c36 <bt_att_connected+0x2e>
	list->tail = node;
   15c34:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15c36:	f3bf 8f5b 	dmb	ish
   15c3a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   15c3e:	4908      	ldr	r1, [pc, #32]	; (15c60 <bt_att_connected+0x58>)
   15c40:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   15c44:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15c46:	bf5e      	ittt	pl
   15c48:	2317      	movpl	r3, #23
   15c4a:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15c4e:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   15c52:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
}
   15c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   15c5a:	f006 bef8 	b.w	1ca4e <k_delayed_work_init>
   15c5e:	bf00      	nop
   15c60:	0001b6ad 	.word	0x0001b6ad

00015c64 <att_write_cmd>:
{
   15c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c66:	4604      	mov	r4, r0
   15c68:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
   15c6a:	f101 0008 	add.w	r0, r1, #8
{
   15c6e:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
   15c70:	f006 f9a8 	bl	1bfc4 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15c74:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   15c76:	68af      	ldr	r7, [r5, #8]
   15c78:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
   15c7a:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15c7c:	2100      	movs	r1, #0
   15c7e:	6818      	ldr	r0, [r3, #0]
   15c80:	f006 f8c0 	bl	1be04 <bt_gatt_change_aware>
   15c84:	b320      	cbz	r0, 15cd0 <att_write_cmd+0x6c>
	if (!handle) {
   15c86:	b32e      	cbz	r6, 15cd4 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   15c88:	2218      	movs	r2, #24
   15c8a:	2100      	movs	r1, #0
   15c8c:	4668      	mov	r0, sp
   15c8e:	f004 fb52 	bl	1a336 <memset>
	data.conn = chan->att->conn;
   15c92:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15c94:	4a10      	ldr	r2, [pc, #64]	; (15cd8 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   15c96:	681b      	ldr	r3, [r3, #0]
   15c98:	9300      	str	r3, [sp, #0]
	data.req = req;
   15c9a:	2300      	movs	r3, #0
   15c9c:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   15ca0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15ca4:	2301      	movs	r3, #1
   15ca6:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15caa:	4631      	mov	r1, r6
   15cac:	466b      	mov	r3, sp
   15cae:	4630      	mov	r0, r6
	data.value = value;
   15cb0:	9703      	str	r7, [sp, #12]
	data.len = len;
   15cb2:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15cb6:	f005 f927 	bl	1af08 <bt_gatt_foreach_attr>
	if (data.err) {
   15cba:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15cbe:	b923      	cbnz	r3, 15cca <att_write_cmd+0x66>
	if (data.buf) {
   15cc0:	9901      	ldr	r1, [sp, #4]
   15cc2:	b111      	cbz	r1, 15cca <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15cc4:	4620      	mov	r0, r4
   15cc6:	f7ff ff8d 	bl	15be4 <bt_att_chan_send_rsp.constprop.0>
   15cca:	2000      	movs	r0, #0
}
   15ccc:	b007      	add	sp, #28
   15cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15cd0:	2012      	movs	r0, #18
   15cd2:	e7fb      	b.n	15ccc <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   15cd4:	2001      	movs	r0, #1
   15cd6:	e7f9      	b.n	15ccc <att_write_cmd+0x68>
   15cd8:	0001b377 	.word	0x0001b377

00015cdc <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   15cdc:	898b      	ldrh	r3, [r1, #12]
{
   15cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ce2:	4604      	mov	r4, r0
   15ce4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   15ce6:	2b00      	cmp	r3, #0
   15ce8:	d05a      	beq.n	15da0 <bt_att_recv+0xc4>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   15cea:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15cec:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   15cf0:	f105 0008 	add.w	r0, r5, #8
   15cf4:	f006 f95e 	bl	1bfb4 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
   15cf8:	4a2d      	ldr	r2, [pc, #180]	; (15db0 <bt_att_recv+0xd4>)
   15cfa:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   15cfc:	4607      	mov	r7, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15cfe:	2300      	movs	r3, #0
   15d00:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   15d02:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   15d06:	4288      	cmp	r0, r1
   15d08:	d11a      	bne.n	15d40 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   15d0a:	00d9      	lsls	r1, r3, #3
   15d0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15d10:	f893 8002 	ldrb.w	r8, [r3, #2]
   15d14:	f1b8 0f01 	cmp.w	r8, #1
   15d18:	d020      	beq.n	15d5c <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
   15d1a:	f1b8 0f05 	cmp.w	r8, #5
   15d1e:	d12d      	bne.n	15d7c <bt_att_recv+0xa0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15d20:	f3bf 8f5b 	dmb	ish
   15d24:	34b8      	adds	r4, #184	; 0xb8
   15d26:	e854 2f00 	ldrex	r2, [r4]
   15d2a:	f042 0302 	orr.w	r3, r2, #2
   15d2e:	e844 3000 	strex	r0, r3, [r4]
   15d32:	2800      	cmp	r0, #0
   15d34:	d1f7      	bne.n	15d26 <bt_att_recv+0x4a>
   15d36:	f3bf 8f5b 	dmb	ish
   15d3a:	f012 0f02 	tst.w	r2, #2
   15d3e:	e01c      	b.n	15d7a <bt_att_recv+0x9e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15d40:	3301      	adds	r3, #1
   15d42:	2b0d      	cmp	r3, #13
   15d44:	d1dd      	bne.n	15d02 <bt_att_recv+0x26>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   15d46:	4608      	mov	r0, r1
   15d48:	f005 f8b1 	bl	1aeae <att_op_get_type>
   15d4c:	b340      	cbz	r0, 15da0 <bt_att_recv+0xc4>
	if (!req) {
   15d4e:	b339      	cbz	r1, 15da0 <bt_att_recv+0xc4>
   15d50:	2306      	movs	r3, #6
   15d52:	2200      	movs	r2, #0
   15d54:	4630      	mov	r0, r6
   15d56:	f005 fbcc 	bl	1b4f2 <send_err_rsp.part.0>
   15d5a:	e021      	b.n	15da0 <bt_att_recv+0xc4>
   15d5c:	34b8      	adds	r4, #184	; 0xb8
   15d5e:	f3bf 8f5b 	dmb	ish
   15d62:	e854 3f00 	ldrex	r3, [r4]
   15d66:	f043 0201 	orr.w	r2, r3, #1
   15d6a:	e844 2000 	strex	r0, r2, [r4]
   15d6e:	2800      	cmp	r0, #0
   15d70:	d1f7      	bne.n	15d62 <bt_att_recv+0x86>
   15d72:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   15d76:	f013 0f01 	tst.w	r3, #1
   15d7a:	d111      	bne.n	15da0 <bt_att_recv+0xc4>
	if (buf->len < handler->expect_len) {
   15d7c:	eb0c 0301 	add.w	r3, ip, r1
   15d80:	89a9      	ldrh	r1, [r5, #12]
   15d82:	785a      	ldrb	r2, [r3, #1]
   15d84:	4291      	cmp	r1, r2
   15d86:	d30e      	bcc.n	15da6 <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
   15d88:	685b      	ldr	r3, [r3, #4]
   15d8a:	4629      	mov	r1, r5
   15d8c:	4630      	mov	r0, r6
   15d8e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   15d90:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   15d94:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   15d96:	d103      	bne.n	15da0 <bt_att_recv+0xc4>
   15d98:	b110      	cbz	r0, 15da0 <bt_att_recv+0xc4>
		send_err_rsp(att_chan, hdr->code, 0, err);
   15d9a:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   15d9c:	2900      	cmp	r1, #0
   15d9e:	d1d8      	bne.n	15d52 <bt_att_recv+0x76>
}
   15da0:	2000      	movs	r0, #0
   15da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   15da6:	f1b8 0f01 	cmp.w	r8, #1
   15daa:	d1f9      	bne.n	15da0 <bt_att_recv+0xc4>
		err = BT_ATT_ERR_INVALID_PDU;
   15dac:	2304      	movs	r3, #4
   15dae:	e7f4      	b.n	15d9a <bt_att_recv+0xbe>
   15db0:	0001d260 	.word	0x0001d260

00015db4 <att_write_req>:
{
   15db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15db8:	4604      	mov	r4, r0
   15dba:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
   15dbc:	f101 0008 	add.w	r0, r1, #8
{
   15dc0:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
   15dc2:	f006 f8ff 	bl	1bfc4 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15dc6:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   15dc8:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   15dcc:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
   15dce:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15dd0:	2101      	movs	r1, #1
   15dd2:	6818      	ldr	r0, [r3, #0]
   15dd4:	f006 f816 	bl	1be04 <bt_gatt_change_aware>
   15dd8:	2800      	cmp	r0, #0
   15dda:	d03f      	beq.n	15e5c <att_write_req+0xa8>
	if (!handle) {
   15ddc:	2e00      	cmp	r6, #0
   15dde:	d03f      	beq.n	15e60 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   15de0:	2218      	movs	r2, #24
   15de2:	2100      	movs	r1, #0
   15de4:	4668      	mov	r0, sp
   15de6:	f004 faa6 	bl	1a336 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   15dea:	2200      	movs	r2, #0
   15dec:	2113      	movs	r1, #19
   15dee:	4620      	mov	r0, r4
   15df0:	f005 fb5a 	bl	1b4a8 <bt_att_chan_create_pdu>
   15df4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   15df6:	b378      	cbz	r0, 15e58 <att_write_req+0xa4>
	data.conn = chan->att->conn;
   15df8:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15dfa:	4a1a      	ldr	r2, [pc, #104]	; (15e64 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   15dfc:	681b      	ldr	r3, [r3, #0]
   15dfe:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15e00:	2301      	movs	r3, #1
   15e02:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   15e06:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   15e0a:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15e0c:	466b      	mov	r3, sp
   15e0e:	4631      	mov	r1, r6
   15e10:	4630      	mov	r0, r6
	data.len = len;
   15e12:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   15e16:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   15e1a:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   15e1e:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15e22:	f005 f871 	bl	1af08 <bt_gatt_foreach_attr>
	if (data.err) {
   15e26:	f89d 5014 	ldrb.w	r5, [sp, #20]
   15e2a:	b175      	cbz	r5, 15e4a <att_write_req+0x96>
			net_buf_unref(data.buf);
   15e2c:	9801      	ldr	r0, [sp, #4]
   15e2e:	f000 ff9d 	bl	16d6c <net_buf_unref>
	if (!req) {
   15e32:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15e36:	4632      	mov	r2, r6
   15e38:	4641      	mov	r1, r8
   15e3a:	4620      	mov	r0, r4
   15e3c:	f005 fb59 	bl	1b4f2 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   15e40:	463d      	mov	r5, r7
}
   15e42:	4628      	mov	r0, r5
   15e44:	b007      	add	sp, #28
   15e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   15e4a:	9901      	ldr	r1, [sp, #4]
   15e4c:	2900      	cmp	r1, #0
   15e4e:	d0f8      	beq.n	15e42 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15e50:	4620      	mov	r0, r4
   15e52:	f7ff fec7 	bl	15be4 <bt_att_chan_send_rsp.constprop.0>
   15e56:	e7f4      	b.n	15e42 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   15e58:	250e      	movs	r5, #14
   15e5a:	e7f2      	b.n	15e42 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15e5c:	2512      	movs	r5, #18
   15e5e:	e7f0      	b.n	15e42 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   15e60:	2501      	movs	r5, #1
   15e62:	e7ee      	b.n	15e42 <att_write_req+0x8e>
   15e64:	0001b377 	.word	0x0001b377

00015e68 <att_read_group_req>:
{
   15e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15e6c:	7b0c      	ldrb	r4, [r1, #12]
   15e6e:	3c04      	subs	r4, #4
   15e70:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   15e72:	2c02      	cmp	r4, #2
{
   15e74:	4605      	mov	r5, r0
   15e76:	b08c      	sub	sp, #48	; 0x30
   15e78:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   15e7a:	d001      	beq.n	15e80 <att_read_group_req+0x18>
   15e7c:	2c10      	cmp	r4, #16
   15e7e:	d16e      	bne.n	15f5e <att_read_group_req+0xf6>
	req = net_buf_pull_mem(buf, sizeof(*req));
   15e80:	2104      	movs	r1, #4
   15e82:	3008      	adds	r0, #8
   15e84:	f006 f896 	bl	1bfb4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15e88:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   15e8c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15e8e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15e90:	1d01      	adds	r1, r0, #4
   15e92:	4622      	mov	r2, r4
   15e94:	4640      	mov	r0, r8
   15e96:	f004 faa0 	bl	1a3da <bt_uuid_create>
   15e9a:	2800      	cmp	r0, #0
   15e9c:	d061      	beq.n	15f62 <att_read_group_req+0xfa>
	if (!start || !end) {
   15e9e:	2e00      	cmp	r6, #0
   15ea0:	d03a      	beq.n	15f18 <att_read_group_req+0xb0>
   15ea2:	2400      	movs	r4, #0
   15ea4:	2f00      	cmp	r7, #0
   15ea6:	d036      	beq.n	15f16 <att_read_group_req+0xae>
	if (start > end) {
   15ea8:	42be      	cmp	r6, r7
   15eaa:	d835      	bhi.n	15f18 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15eac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15eb0:	a901      	add	r1, sp, #4
   15eb2:	4640      	mov	r0, r8
   15eb4:	f88d 4004 	strb.w	r4, [sp, #4]
   15eb8:	f8ad 3006 	strh.w	r3, [sp, #6]
   15ebc:	f004 fa63 	bl	1a386 <bt_uuid_cmp>
   15ec0:	2800      	cmp	r0, #0
   15ec2:	d134      	bne.n	15f2e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   15ec4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15ec6:	2214      	movs	r2, #20
   15ec8:	2100      	movs	r1, #0
   15eca:	a807      	add	r0, sp, #28
   15ecc:	f004 fa33 	bl	1a336 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   15ed0:	2201      	movs	r2, #1
   15ed2:	2111      	movs	r1, #17
   15ed4:	4620      	mov	r0, r4
   15ed6:	f005 fb29 	bl	1b52c <bt_att_create_pdu>
   15eda:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   15edc:	2800      	cmp	r0, #0
   15ede:	d040      	beq.n	15f62 <att_read_group_req+0xfa>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15ee0:	2101      	movs	r1, #1
   15ee2:	3008      	adds	r0, #8
	data.uuid = uuid;
   15ee4:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15ee8:	f006 f83d 	bl	1bf66 <net_buf_simple_add>
	data.rsp->len = 0U;
   15eec:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15ef0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15ef2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   15ef4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15ef8:	4a1b      	ldr	r2, [pc, #108]	; (15f68 <att_read_group_req+0x100>)
	data.group = NULL;
   15efa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15efe:	4639      	mov	r1, r7
   15f00:	4630      	mov	r0, r6
   15f02:	f005 f801 	bl	1af08 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   15f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15f08:	781c      	ldrb	r4, [r3, #0]
   15f0a:	bb1c      	cbnz	r4, 15f54 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   15f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
   15f0e:	f000 ff2d 	bl	16d6c <net_buf_unref>
	if (!req) {
   15f12:	230a      	movs	r3, #10
   15f14:	e018      	b.n	15f48 <att_read_group_req+0xe0>
			*err = 0U;
   15f16:	463e      	mov	r6, r7
	if (!req) {
   15f18:	2301      	movs	r3, #1
   15f1a:	4632      	mov	r2, r6
   15f1c:	2110      	movs	r1, #16
   15f1e:	4628      	mov	r0, r5
   15f20:	f005 fae7 	bl	1b4f2 <send_err_rsp.part.0>
		return 0;
   15f24:	2400      	movs	r4, #0
}
   15f26:	4620      	mov	r0, r4
   15f28:	b00c      	add	sp, #48	; 0x30
   15f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   15f2e:	f642 0301 	movw	r3, #10241	; 0x2801
   15f32:	a907      	add	r1, sp, #28
   15f34:	4640      	mov	r0, r8
   15f36:	f88d 401c 	strb.w	r4, [sp, #28]
   15f3a:	f8ad 301e 	strh.w	r3, [sp, #30]
   15f3e:	f004 fa22 	bl	1a386 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15f42:	2800      	cmp	r0, #0
   15f44:	d0be      	beq.n	15ec4 <att_read_group_req+0x5c>
	if (!req) {
   15f46:	2310      	movs	r3, #16
   15f48:	4632      	mov	r2, r6
   15f4a:	2110      	movs	r1, #16
   15f4c:	4628      	mov	r0, r5
   15f4e:	f005 fad0 	bl	1b4f2 <send_err_rsp.part.0>
		return 0;
   15f52:	e7e8      	b.n	15f26 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15f54:	9909      	ldr	r1, [sp, #36]	; 0x24
   15f56:	4628      	mov	r0, r5
   15f58:	f7ff fe44 	bl	15be4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15f5c:	e7e2      	b.n	15f24 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   15f5e:	2404      	movs	r4, #4
   15f60:	e7e1      	b.n	15f26 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   15f62:	240e      	movs	r4, #14
   15f64:	e7df      	b.n	15f26 <att_read_group_req+0xbe>
   15f66:	bf00      	nop
   15f68:	00015909 	.word	0x00015909

00015f6c <att_read_mult_req>:
{
   15f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15f70:	6886      	ldr	r6, [r0, #8]
{
   15f72:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   15f74:	2210      	movs	r2, #16
{
   15f76:	4604      	mov	r4, r0
   15f78:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   15f7a:	4668      	mov	r0, sp
   15f7c:	2100      	movs	r1, #0
   15f7e:	f004 f9da 	bl	1a336 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   15f82:	2200      	movs	r2, #0
   15f84:	210f      	movs	r1, #15
   15f86:	4630      	mov	r0, r6
   15f88:	f005 fad0 	bl	1b52c <bt_att_create_pdu>
   15f8c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15f8e:	b358      	cbz	r0, 15fe8 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15f90:	f8df 9058 	ldr.w	r9, [pc, #88]	; 15fec <att_read_mult_req+0x80>
	data.chan = chan;
   15f94:	9400      	str	r4, [sp, #0]
		handle = net_buf_pull_le16(buf);
   15f96:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15f9a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   15f9e:	89ab      	ldrh	r3, [r5, #12]
   15fa0:	2b01      	cmp	r3, #1
   15fa2:	d804      	bhi.n	15fae <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15fa4:	9902      	ldr	r1, [sp, #8]
   15fa6:	4620      	mov	r0, r4
   15fa8:	f7ff fe1c 	bl	15be4 <bt_att_chan_send_rsp.constprop.0>
   15fac:	e018      	b.n	15fe0 <att_read_mult_req+0x74>
		handle = net_buf_pull_le16(buf);
   15fae:	4638      	mov	r0, r7
   15fb0:	f006 f808 	bl	1bfc4 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15fb4:	466b      	mov	r3, sp
   15fb6:	464a      	mov	r2, r9
   15fb8:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
   15fba:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15fbc:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15fc0:	f004 ffa2 	bl	1af08 <bt_gatt_foreach_attr>
		if (data.err) {
   15fc4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15fc8:	2b00      	cmp	r3, #0
   15fca:	d0e8      	beq.n	15f9e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   15fcc:	9802      	ldr	r0, [sp, #8]
   15fce:	f000 fecd 	bl	16d6c <net_buf_unref>
	if (!req) {
   15fd2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15fd6:	4632      	mov	r2, r6
   15fd8:	210e      	movs	r1, #14
   15fda:	4620      	mov	r0, r4
   15fdc:	f005 fa89 	bl	1b4f2 <send_err_rsp.part.0>
	return 0;
   15fe0:	2000      	movs	r0, #0
}
   15fe2:	b005      	add	sp, #20
   15fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   15fe8:	200e      	movs	r0, #14
   15fea:	e7fa      	b.n	15fe2 <att_read_mult_req+0x76>
   15fec:	0001b455 	.word	0x0001b455

00015ff0 <att_read_rsp>:
{
   15ff0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15ff4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   15ff8:	4605      	mov	r5, r0
   15ffa:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15ffc:	4640      	mov	r0, r8
   15ffe:	2101      	movs	r1, #1
{
   16000:	4614      	mov	r4, r2
   16002:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   16004:	f005 fefe 	bl	1be04 <bt_gatt_change_aware>
   16008:	b388      	cbz	r0, 1606e <att_read_rsp+0x7e>
	if (!handle) {
   1600a:	b396      	cbz	r6, 16072 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   1600c:	2210      	movs	r2, #16
   1600e:	2100      	movs	r1, #0
   16010:	4668      	mov	r0, sp
   16012:	f004 f990 	bl	1a336 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   16016:	2200      	movs	r2, #0
   16018:	4621      	mov	r1, r4
   1601a:	4640      	mov	r0, r8
   1601c:	f005 fa86 	bl	1b52c <bt_att_create_pdu>
   16020:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16022:	b340      	cbz	r0, 16076 <att_read_rsp+0x86>
	data.offset = offset;
   16024:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16028:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1602c:	2301      	movs	r3, #1
   1602e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16032:	4a12      	ldr	r2, [pc, #72]	; (1607c <att_read_rsp+0x8c>)
	data.chan = chan;
   16034:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16036:	466b      	mov	r3, sp
   16038:	4631      	mov	r1, r6
   1603a:	4630      	mov	r0, r6
   1603c:	f004 ff64 	bl	1af08 <bt_gatt_foreach_attr>
	if (data.err) {
   16040:	f89d 400c 	ldrb.w	r4, [sp, #12]
   16044:	b174      	cbz	r4, 16064 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   16046:	9802      	ldr	r0, [sp, #8]
   16048:	f000 fe90 	bl	16d6c <net_buf_unref>
	if (!req) {
   1604c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16050:	4632      	mov	r2, r6
   16052:	4639      	mov	r1, r7
   16054:	4628      	mov	r0, r5
   16056:	f005 fa4c 	bl	1b4f2 <send_err_rsp.part.0>
		return 0;
   1605a:	2400      	movs	r4, #0
}
   1605c:	4620      	mov	r0, r4
   1605e:	b004      	add	sp, #16
   16060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16064:	9902      	ldr	r1, [sp, #8]
   16066:	4628      	mov	r0, r5
   16068:	f7ff fdbc 	bl	15be4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1606c:	e7f6      	b.n	1605c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1606e:	2412      	movs	r4, #18
   16070:	e7f4      	b.n	1605c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16072:	2401      	movs	r4, #1
   16074:	e7f2      	b.n	1605c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   16076:	240e      	movs	r4, #14
   16078:	e7f0      	b.n	1605c <att_read_rsp+0x6c>
   1607a:	bf00      	nop
   1607c:	0001b455 	.word	0x0001b455

00016080 <att_read_type_req>:
{
   16080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16084:	7b0c      	ldrb	r4, [r1, #12]
   16086:	3c04      	subs	r4, #4
   16088:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1608a:	2c02      	cmp	r4, #2
{
   1608c:	4605      	mov	r5, r0
   1608e:	b08c      	sub	sp, #48	; 0x30
   16090:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   16092:	d001      	beq.n	16098 <att_read_type_req+0x18>
   16094:	2c10      	cmp	r4, #16
   16096:	d14f      	bne.n	16138 <att_read_type_req+0xb8>
	req = net_buf_pull_mem(buf, sizeof(*req));
   16098:	2104      	movs	r1, #4
   1609a:	3008      	adds	r0, #8
   1609c:	f005 ff8a 	bl	1bfb4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   160a0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   160a4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   160a6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   160a8:	1d01      	adds	r1, r0, #4
   160aa:	4622      	mov	r2, r4
   160ac:	4640      	mov	r0, r8
   160ae:	f004 f994 	bl	1a3da <bt_uuid_create>
   160b2:	b188      	cbz	r0, 160d8 <att_read_type_req+0x58>
	if (!start || !end) {
   160b4:	b19e      	cbz	r6, 160de <att_read_type_req+0x5e>
   160b6:	b18f      	cbz	r7, 160dc <att_read_type_req+0x5c>
	if (start > end) {
   160b8:	42b7      	cmp	r7, r6
   160ba:	d310      	bcc.n	160de <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   160bc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   160be:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   160c0:	2100      	movs	r1, #0
   160c2:	eb0d 0002 	add.w	r0, sp, r2
   160c6:	f004 f936 	bl	1a336 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   160ca:	2201      	movs	r2, #1
   160cc:	2109      	movs	r1, #9
   160ce:	4620      	mov	r0, r4
   160d0:	f005 fa2c 	bl	1b52c <bt_att_create_pdu>
   160d4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   160d6:	b968      	cbnz	r0, 160f4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   160d8:	240e      	movs	r4, #14
   160da:	e007      	b.n	160ec <att_read_type_req+0x6c>
			*err = 0U;
   160dc:	463e      	mov	r6, r7
	if (!req) {
   160de:	2301      	movs	r3, #1
   160e0:	4632      	mov	r2, r6
   160e2:	2108      	movs	r1, #8
   160e4:	4628      	mov	r0, r5
   160e6:	f005 fa04 	bl	1b4f2 <send_err_rsp.part.0>
		return 0;
   160ea:	2400      	movs	r4, #0
}
   160ec:	4620      	mov	r0, r4
   160ee:	b00c      	add	sp, #48	; 0x30
   160f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   160f4:	2101      	movs	r1, #1
   160f6:	3008      	adds	r0, #8
	data.uuid = uuid;
   160f8:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   160fc:	f005 ff33 	bl	1bf66 <net_buf_simple_add>
	data.rsp->len = 0U;
   16100:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16104:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16106:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16108:	4a0c      	ldr	r2, [pc, #48]	; (1613c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   1610a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1610e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16110:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16114:	4630      	mov	r0, r6
   16116:	ab06      	add	r3, sp, #24
   16118:	f004 fef6 	bl	1af08 <bt_gatt_foreach_attr>
	if (data.err) {
   1611c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   16120:	b12c      	cbz	r4, 1612e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   16122:	9808      	ldr	r0, [sp, #32]
   16124:	f000 fe22 	bl	16d6c <net_buf_unref>
	if (!req) {
   16128:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1612c:	e7d8      	b.n	160e0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1612e:	9908      	ldr	r1, [sp, #32]
   16130:	4628      	mov	r0, r5
   16132:	f7ff fd57 	bl	15be4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   16136:	e7d9      	b.n	160ec <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   16138:	2404      	movs	r4, #4
   1613a:	e7d7      	b.n	160ec <att_read_type_req+0x6c>
   1613c:	000159b5 	.word	0x000159b5

00016140 <att_find_type_req>:
{
   16140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16144:	4688      	mov	r8, r1
   16146:	b086      	sub	sp, #24
   16148:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
   1614a:	2106      	movs	r1, #6
   1614c:	f108 0008 	add.w	r0, r8, #8
   16150:	f005 ff30 	bl	1bfb4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16154:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   16156:	b317      	cbz	r7, 1619e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   16158:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1615c:	f1b9 0f00 	cmp.w	r9, #0
   16160:	d01c      	beq.n	1619c <att_find_type_req+0x5c>
	if (start > end) {
   16162:	454f      	cmp	r7, r9
   16164:	d81b      	bhi.n	1619e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   16166:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16168:	f8ad 3002 	strh.w	r3, [sp, #2]
   1616c:	2400      	movs	r4, #0
   1616e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16172:	a901      	add	r1, sp, #4
   16174:	4668      	mov	r0, sp
	value = buf->data;
   16176:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1617a:	f88d 4000 	strb.w	r4, [sp]
   1617e:	f88d 4004 	strb.w	r4, [sp, #4]
   16182:	f8ad 3006 	strh.w	r3, [sp, #6]
   16186:	f004 f8fe 	bl	1a386 <bt_uuid_cmp>
   1618a:	4606      	mov	r6, r0
   1618c:	b190      	cbz	r0, 161b4 <att_find_type_req+0x74>
	if (!req) {
   1618e:	230a      	movs	r3, #10
   16190:	463a      	mov	r2, r7
   16192:	2106      	movs	r1, #6
   16194:	4628      	mov	r0, r5
   16196:	f005 f9ac 	bl	1b4f2 <send_err_rsp.part.0>
		return 0;
   1619a:	e007      	b.n	161ac <att_find_type_req+0x6c>
			*err = 0U;
   1619c:	464f      	mov	r7, r9
	if (!req) {
   1619e:	2301      	movs	r3, #1
   161a0:	463a      	mov	r2, r7
   161a2:	2106      	movs	r1, #6
   161a4:	4628      	mov	r0, r5
   161a6:	f005 f9a4 	bl	1b4f2 <send_err_rsp.part.0>
		return 0;
   161aa:	2400      	movs	r4, #0
}
   161ac:	4620      	mov	r0, r4
   161ae:	b006      	add	sp, #24
   161b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   161b4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   161b8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   161bc:	4601      	mov	r1, r0
   161be:	2214      	movs	r2, #20
   161c0:	a801      	add	r0, sp, #4
   161c2:	f004 f8b8 	bl	1a336 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   161c6:	4632      	mov	r2, r6
   161c8:	2107      	movs	r1, #7
   161ca:	4640      	mov	r0, r8
   161cc:	f005 f9ae 	bl	1b52c <bt_att_create_pdu>
   161d0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   161d2:	b1d8      	cbz	r0, 1620c <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   161d4:	230a      	movs	r3, #10
   161d6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   161da:	4a0d      	ldr	r2, [pc, #52]	; (16210 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   161dc:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   161e0:	ab01      	add	r3, sp, #4
   161e2:	4649      	mov	r1, r9
   161e4:	4638      	mov	r0, r7
	data.value = value;
   161e6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   161ea:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   161ec:	f004 fe8c 	bl	1af08 <bt_gatt_foreach_attr>
	if (data.err) {
   161f0:	f89d 4015 	ldrb.w	r4, [sp, #21]
   161f4:	b12c      	cbz	r4, 16202 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   161f6:	9802      	ldr	r0, [sp, #8]
   161f8:	f000 fdb8 	bl	16d6c <net_buf_unref>
	if (!req) {
   161fc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16200:	e7ce      	b.n	161a0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16202:	9902      	ldr	r1, [sp, #8]
   16204:	4628      	mov	r0, r5
   16206:	f7ff fced 	bl	15be4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1620a:	e7cf      	b.n	161ac <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1620c:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1620e:	e7cd      	b.n	161ac <att_find_type_req+0x6c>
   16210:	0001b035 	.word	0x0001b035

00016214 <att_find_info_req>:
{
   16214:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16216:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   16218:	881e      	ldrh	r6, [r3, #0]
{
   1621a:	b085      	sub	sp, #20
   1621c:	4605      	mov	r5, r0
	if (!start || !end) {
   1621e:	b19e      	cbz	r6, 16248 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   16220:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   16222:	b184      	cbz	r4, 16246 <att_find_info_req+0x32>
	if (start > end) {
   16224:	42b4      	cmp	r4, r6
   16226:	d30f      	bcc.n	16248 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16228:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1622a:	2210      	movs	r2, #16
   1622c:	2100      	movs	r1, #0
   1622e:	4668      	mov	r0, sp
   16230:	f004 f881 	bl	1a336 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16234:	2200      	movs	r2, #0
   16236:	2105      	movs	r1, #5
   16238:	4638      	mov	r0, r7
   1623a:	f005 f977 	bl	1b52c <bt_att_create_pdu>
   1623e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16240:	b958      	cbnz	r0, 1625a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16242:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16244:	e007      	b.n	16256 <att_find_info_req+0x42>
			*err = 0U;
   16246:	4626      	mov	r6, r4
	if (!req) {
   16248:	2301      	movs	r3, #1
   1624a:	4632      	mov	r2, r6
   1624c:	2104      	movs	r1, #4
   1624e:	4628      	mov	r0, r5
   16250:	f005 f94f 	bl	1b4f2 <send_err_rsp.part.0>
	return 0;
   16254:	2000      	movs	r0, #0
}
   16256:	b005      	add	sp, #20
   16258:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1625a:	4621      	mov	r1, r4
   1625c:	4a08      	ldr	r2, [pc, #32]	; (16280 <att_find_info_req+0x6c>)
	data.chan = chan;
   1625e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16260:	466b      	mov	r3, sp
   16262:	4630      	mov	r0, r6
   16264:	f004 fe50 	bl	1af08 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16268:	9c02      	ldr	r4, [sp, #8]
   1626a:	b924      	cbnz	r4, 16276 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   1626c:	9801      	ldr	r0, [sp, #4]
   1626e:	f000 fd7d 	bl	16d6c <net_buf_unref>
	if (!req) {
   16272:	230a      	movs	r3, #10
   16274:	e7e9      	b.n	1624a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16276:	9901      	ldr	r1, [sp, #4]
   16278:	4628      	mov	r0, r5
   1627a:	f7ff fcb3 	bl	15be4 <bt_att_chan_send_rsp.constprop.0>
   1627e:	e7e9      	b.n	16254 <att_find_info_req+0x40>
   16280:	0001b15d 	.word	0x0001b15d

00016284 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   16284:	b513      	push	{r0, r1, r4, lr}
   16286:	4602      	mov	r2, r0
   16288:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1628a:	4808      	ldr	r0, [pc, #32]	; (162ac <bt_att_req_alloc+0x28>)
   1628c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   1628e:	2400      	movs	r4, #0
   16290:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16292:	f002 fa65 	bl	18760 <k_mem_slab_alloc>
   16296:	4601      	mov	r1, r0
   16298:	b930      	cbnz	r0, 162a8 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1629a:	9801      	ldr	r0, [sp, #4]
   1629c:	2218      	movs	r2, #24
   1629e:	f004 f84a 	bl	1a336 <memset>

	return req;
   162a2:	9801      	ldr	r0, [sp, #4]
}
   162a4:	b002      	add	sp, #8
   162a6:	bd10      	pop	{r4, pc}
		return NULL;
   162a8:	4620      	mov	r0, r4
   162aa:	e7fb      	b.n	162a4 <bt_att_req_alloc+0x20>
   162ac:	2000074c 	.word	0x2000074c

000162b0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   162b0:	b507      	push	{r0, r1, r2, lr}
   162b2:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   162b4:	a901      	add	r1, sp, #4
   162b6:	4803      	ldr	r0, [pc, #12]	; (162c4 <bt_att_req_free+0x14>)
   162b8:	f002 fa84 	bl	187c4 <k_mem_slab_free>
}
   162bc:	b003      	add	sp, #12
   162be:	f85d fb04 	ldr.w	pc, [sp], #4
   162c2:	bf00      	nop
   162c4:	2000074c 	.word	0x2000074c

000162c8 <att_handle_rsp>:
{
   162c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162cc:	4604      	mov	r4, r0
   162ce:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
   162d0:	30e0      	adds	r0, #224	; 0xe0
{
   162d2:	4689      	mov	r9, r1
   162d4:	4692      	mov	sl, r2
   162d6:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
   162d8:	f006 fbc1 	bl	1ca5e <k_delayed_work_cancel>
	if (!chan->req) {
   162dc:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
   162e0:	2600      	movs	r6, #0
   162e2:	b12d      	cbz	r5, 162f0 <att_handle_rsp+0x28>
	if (chan->req == &cancel) {
   162e4:	4b2b      	ldr	r3, [pc, #172]	; (16394 <att_handle_rsp+0xcc>)
   162e6:	429d      	cmp	r5, r3
   162e8:	d123      	bne.n	16332 <att_handle_rsp+0x6a>
		chan->req = NULL;
   162ea:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
	bt_att_func_t func = NULL;
   162ee:	4635      	mov	r5, r6
	att_process(chan->att);
   162f0:	f8d4 b000 	ldr.w	fp, [r4]
	node = sys_slist_get(&att->reqs);
   162f4:	f10b 0004 	add.w	r0, fp, #4
   162f8:	f004 fd94 	bl	1ae24 <sys_slist_get>
	if (!node) {
   162fc:	4607      	mov	r7, r0
   162fe:	b380      	cbz	r0, 16362 <att_handle_rsp+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16300:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
   16304:	b152      	cbz	r2, 1631c <att_handle_rsp+0x54>
   16306:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
   1630a:	d007      	beq.n	1631c <att_handle_rsp+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1630c:	6816      	ldr	r6, [r2, #0]
   1630e:	b10e      	cbz	r6, 16314 <att_handle_rsp+0x4c>
   16310:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   16314:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
   16318:	b1f2      	cbz	r2, 16358 <att_handle_rsp+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1631a:	bb7e      	cbnz	r6, 1637c <att_handle_rsp+0xb4>
Z_GENLIST_PREPEND(slist, snode)
   1631c:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
   16320:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   16322:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
   16326:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
   1632a:	b9d2      	cbnz	r2, 16362 <att_handle_rsp+0x9a>
	list->tail = node;
   1632c:	f8cb 7008 	str.w	r7, [fp, #8]
}
   16330:	e017      	b.n	16362 <att_handle_rsp+0x9a>
	if (chan->req->buf) {
   16332:	6928      	ldr	r0, [r5, #16]
   16334:	b120      	cbz	r0, 16340 <att_handle_rsp+0x78>
		net_buf_unref(chan->req->buf);
   16336:	f000 fd19 	bl	16d6c <net_buf_unref>
		chan->req->buf = NULL;
   1633a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1633e:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
   16340:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
	chan->req->func = NULL;
   16344:	2600      	movs	r6, #0
	func = chan->req->func;
   16346:	6845      	ldr	r5, [r0, #4]
	params = chan->req->user_data;
   16348:	6943      	ldr	r3, [r0, #20]
	chan->req->func = NULL;
   1634a:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   1634c:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
   1634e:	f005 f95e 	bl	1b60e <att_req_destroy>
	chan->req = NULL;
   16352:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
   16356:	e7cb      	b.n	162f0 <att_handle_rsp+0x28>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   16358:	4639      	mov	r1, r7
   1635a:	f004 ffcf 	bl	1b2fc <bt_att_chan_req_send>
   1635e:	2800      	cmp	r0, #0
   16360:	dbdb      	blt.n	1631a <att_handle_rsp+0x52>
	if (func) {
   16362:	b13d      	cbz	r5, 16374 <att_handle_rsp+0xac>
		func(chan->att->conn, err, pdu, len, params);
   16364:	9b03      	ldr	r3, [sp, #12]
   16366:	6820      	ldr	r0, [r4, #0]
   16368:	9300      	str	r3, [sp, #0]
   1636a:	6800      	ldr	r0, [r0, #0]
   1636c:	4653      	mov	r3, sl
   1636e:	464a      	mov	r2, r9
   16370:	4641      	mov	r1, r8
   16372:	47a8      	blx	r5
}
   16374:	2000      	movs	r0, #0
   16376:	b005      	add	sp, #20
   16378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1637c:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
   16380:	d004      	beq.n	1638c <att_handle_rsp+0xc4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16382:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16386:	b10a      	cbz	r2, 1638c <att_handle_rsp+0xc4>
   16388:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
   1638c:	4630      	mov	r0, r6
   1638e:	4616      	mov	r6, r2
   16390:	e7c0      	b.n	16314 <att_handle_rsp+0x4c>
   16392:	bf00      	nop
   16394:	20002548 	.word	0x20002548

00016398 <att_reset>:
{
   16398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1639a:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1639c:	9803      	ldr	r0, [sp, #12]
   1639e:	2200      	movs	r2, #0
   163a0:	2300      	movs	r3, #0
   163a2:	300c      	adds	r0, #12
   163a4:	f005 fd8e 	bl	1bec4 <net_buf_get>
   163a8:	b948      	cbnz	r0, 163be <att_reset+0x26>
	att->conn = NULL;
   163aa:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   163ac:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
   163ae:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   163b0:	b945      	cbnz	r5, 163c4 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   163b2:	4811      	ldr	r0, [pc, #68]	; (163f8 <att_reset+0x60>)
   163b4:	a903      	add	r1, sp, #12
   163b6:	f002 fa05 	bl	187c4 <k_mem_slab_free>
}
   163ba:	b004      	add	sp, #16
   163bc:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   163be:	f000 fcd5 	bl	16d6c <net_buf_unref>
   163c2:	e7eb      	b.n	1639c <att_reset+0x4>
	return node->next;
   163c4:	682c      	ldr	r4, [r5, #0]
   163c6:	2c00      	cmp	r4, #0
   163c8:	bf38      	it	cc
   163ca:	2400      	movcc	r4, #0
		if (req->func) {
   163cc:	686e      	ldr	r6, [r5, #4]
   163ce:	b136      	cbz	r6, 163de <att_reset+0x46>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   163d0:	696b      	ldr	r3, [r5, #20]
   163d2:	9300      	str	r3, [sp, #0]
   163d4:	2300      	movs	r3, #0
   163d6:	461a      	mov	r2, r3
   163d8:	210e      	movs	r1, #14
   163da:	4618      	mov	r0, r3
   163dc:	47b0      	blx	r6
		att_req_destroy(req);
   163de:	4628      	mov	r0, r5
   163e0:	f005 f915 	bl	1b60e <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   163e4:	2c00      	cmp	r4, #0
   163e6:	d0e4      	beq.n	163b2 <att_reset+0x1a>
   163e8:	6823      	ldr	r3, [r4, #0]
   163ea:	2b00      	cmp	r3, #0
   163ec:	bf38      	it	cc
   163ee:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   163f0:	4625      	mov	r5, r4
   163f2:	461c      	mov	r4, r3
   163f4:	e7ea      	b.n	163cc <att_reset+0x34>
   163f6:	bf00      	nop
   163f8:	20000714 	.word	0x20000714

000163fc <find_sc_cfg>:
#endif
static struct gatt_sc_cfg sc_cfg[SC_CFG_MAX];
BUILD_ASSERT(sizeof(struct sc_data) == sizeof(sc_cfg[0].data));

static struct gatt_sc_cfg *find_sc_cfg(uint8_t id, bt_addr_le_t *addr)
{
   163fc:	b510      	push	{r4, lr}
	BT_DBG("id: %u, addr: %s", id, bt_addr_le_str(addr));

	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
		if (id == sc_cfg[i].id &&
   163fe:	4c06      	ldr	r4, [pc, #24]	; (16418 <find_sc_cfg+0x1c>)
   16400:	7823      	ldrb	r3, [r4, #0]
   16402:	4283      	cmp	r3, r0
   16404:	d104      	bne.n	16410 <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
   16406:	2207      	movs	r2, #7
   16408:	1c60      	adds	r0, r4, #1
   1640a:	f003 ff59 	bl	1a2c0 <memcmp>
   1640e:	b108      	cbz	r0, 16414 <find_sc_cfg+0x18>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
			return &sc_cfg[i];
		}
	}

	return NULL;
   16410:	2000      	movs	r0, #0
}
   16412:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   16414:	4620      	mov	r0, r4
   16416:	e7fc      	b.n	16412 <find_sc_cfg+0x16>
   16418:	20002636 	.word	0x20002636

0001641c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1641c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1641e:	4d0d      	ldr	r5, [pc, #52]	; (16454 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16420:	4604      	mov	r4, r0
   16422:	b968      	cbnz	r0, 16440 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16424:	9000      	str	r0, [sp, #0]
   16426:	2207      	movs	r2, #7
   16428:	f8cd 0003 	str.w	r0, [sp, #3]
   1642c:	4669      	mov	r1, sp
   1642e:	1c68      	adds	r0, r5, #1
   16430:	f003 ff46 	bl	1a2c0 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16434:	2800      	cmp	r0, #0
   16436:	bf08      	it	eq
   16438:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1643a:	4620      	mov	r0, r4
   1643c:	b003      	add	sp, #12
   1643e:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16440:	462a      	mov	r2, r5
   16442:	f812 1b01 	ldrb.w	r1, [r2], #1
   16446:	f004 fb92 	bl	1ab6e <bt_conn_is_peer_addr_le>
   1644a:	2800      	cmp	r0, #0
	return NULL;
   1644c:	bf14      	ite	ne
   1644e:	462c      	movne	r4, r5
   16450:	2400      	moveq	r4, #0
   16452:	e7f2      	b.n	1643a <find_cf_cfg+0x1e>
   16454:	20002560 	.word	0x20002560

00016458 <sc_indicate_rsp>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static void sc_indicate_rsp(struct bt_conn *conn,
			    struct bt_gatt_indicate_params *params, uint8_t err)
{
   16458:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1645a:	4915      	ldr	r1, [pc, #84]	; (164b0 <sc_indicate_rsp+0x58>)
   1645c:	f3bf 8f5b 	dmb	ish
   16460:	4604      	mov	r4, r0
   16462:	f101 0350 	add.w	r3, r1, #80	; 0x50
   16466:	e853 2f00 	ldrex	r2, [r3]
   1646a:	f022 0202 	bic.w	r2, r2, #2
   1646e:	e843 2000 	strex	r0, r2, [r3]
   16472:	2800      	cmp	r0, #0
   16474:	d1f7      	bne.n	16466 <sc_indicate_rsp+0xe>
   16476:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1647a:	f3bf 8f5b 	dmb	ish
   1647e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   16480:	f3bf 8f5b 	dmb	ish
	BT_DBG("err 0x%02x", err);

	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	/* Check if there is new change in the meantime */
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   16484:	07da      	lsls	r2, r3, #31
   16486:	d505      	bpl.n	16494 <sc_indicate_rsp+0x3c>
   16488:	480a      	ldr	r0, [pc, #40]	; (164b4 <sc_indicate_rsp+0x5c>)
   1648a:	2200      	movs	r2, #0
   1648c:	2300      	movs	r3, #0
   1648e:	3120      	adds	r1, #32
   16490:	f002 fea0 	bl	191d4 <k_delayed_work_submit_to_queue>
	/* BLUETOOTH CORE SPECIFICATION Version 5.1 | Vol 3, Part G page 2347:
	 * 2.5.2.1 Robust Caching
	 * A connected client becomes change-aware when...
	 * The client receives and confirms a Service Changed indication.
	 */
	cfg = find_cf_cfg(conn);
   16494:	4620      	mov	r0, r4
   16496:	f7ff ffc1 	bl	1641c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1649a:	b140      	cbz	r0, 164ae <sc_indicate_rsp+0x56>
   1649c:	7a03      	ldrb	r3, [r0, #8]
   1649e:	07db      	lsls	r3, r3, #31
   164a0:	d505      	bpl.n	164ae <sc_indicate_rsp+0x56>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
		BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
	}
#endif
}
   164a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   164a6:	2100      	movs	r1, #0
   164a8:	300c      	adds	r0, #12
   164aa:	f005 ba11 	b.w	1b8d0 <atomic_set_bit>
}
   164ae:	bd10      	pop	{r4, pc}
   164b0:	20002000 	.word	0x20002000
   164b4:	20002330 	.word	0x20002330

000164b8 <read_ppcp>:
{
   164b8:	b513      	push	{r0, r1, r4, lr}
   164ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   164be:	4c0b      	ldr	r4, [pc, #44]	; (164ec <read_ppcp+0x34>)
{
   164c0:	4610      	mov	r0, r2
			  void *buf, uint16_t buf_len, uint16_t offset,
			  const void *value, uint16_t value_len)
{
	uint16_t len;

	if (offset > value_len) {
   164c2:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   164c4:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   164c8:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   164cc:	d80b      	bhi.n	164e6 <read_ppcp+0x2e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	len = MIN(buf_len, value_len - offset);
   164ce:	f1c1 0408 	rsb	r4, r1, #8
   164d2:	429c      	cmp	r4, r3
   164d4:	bfa8      	it	ge
   164d6:	461c      	movge	r4, r3

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, (uint8_t *)value + offset, len);
   164d8:	4622      	mov	r2, r4
   164da:	4469      	add	r1, sp
   164dc:	f003 ff00 	bl	1a2e0 <memcpy>
}
   164e0:	4620      	mov	r0, r4
   164e2:	b002      	add	sp, #8
   164e4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   164e6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   164ea:	e7f9      	b.n	164e0 <read_ppcp+0x28>
   164ec:	00280018 	.word	0x00280018

000164f0 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
   164f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   164f4:	4615      	mov	r5, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
   164f6:	8a92      	ldrh	r2, [r2, #20]
{
   164f8:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   164fa:	3202      	adds	r2, #2
   164fc:	211d      	movs	r1, #29
{
   164fe:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   16500:	f005 f814 	bl	1b52c <bt_att_create_pdu>
	if (!buf) {
   16504:	4606      	mov	r6, r0
   16506:	b308      	cbz	r0, 1654c <gatt_indicate+0x5c>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	ind = net_buf_add(buf, sizeof(*ind));
   16508:	f100 0808 	add.w	r8, r0, #8
   1650c:	2102      	movs	r1, #2
   1650e:	4640      	mov	r0, r8
   16510:	f005 fd29 	bl	1bf66 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   16514:	4604      	mov	r4, r0

	net_buf_add(buf, params->len);
   16516:	8aa9      	ldrh	r1, [r5, #20]
	ind->handle = sys_cpu_to_le16(handle);
   16518:	f824 9b02 	strh.w	r9, [r4], #2
	net_buf_add(buf, params->len);
   1651c:	4640      	mov	r0, r8
   1651e:	f005 fd22 	bl	1bf66 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   16522:	8aaa      	ldrh	r2, [r5, #20]
   16524:	6929      	ldr	r1, [r5, #16]
   16526:	4620      	mov	r0, r4
   16528:	f003 feda 	bl	1a2e0 <memcpy>

	if (!params->func) {
   1652c:	68ab      	ldr	r3, [r5, #8]
   1652e:	b933      	cbnz	r3, 1653e <gatt_indicate+0x4e>
		err = bt_att_send(conn, buf, NULL, NULL);
   16530:	4631      	mov	r1, r6
   16532:	4638      	mov	r0, r7
   16534:	461a      	mov	r2, r3
		return gatt_send(conn, buf, NULL, NULL, NULL);
	}

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
   16536:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		err = bt_att_send(conn, buf, NULL, NULL);
   1653a:	f005 b8c9 	b.w	1b6d0 <bt_att_send>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1653e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   16542:	2100      	movs	r1, #0
   16544:	f7ff fe9e 	bl	16284 <bt_att_req_alloc>
		if (!req) {
   16548:	4604      	mov	r4, r0
   1654a:	b910      	cbnz	r0, 16552 <gatt_indicate+0x62>
		return -ENOMEM;
   1654c:	f06f 050b 	mvn.w	r5, #11
   16550:	e00e      	b.n	16570 <gatt_indicate+0x80>
		req->func = func;
   16552:	4b09      	ldr	r3, [pc, #36]	; (16578 <gatt_indicate+0x88>)
   16554:	6043      	str	r3, [r0, #4]
		req->destroy = destroy;
   16556:	2300      	movs	r3, #0
		req->user_data = params;
   16558:	6145      	str	r5, [r0, #20]
		req->buf = buf;
   1655a:	6106      	str	r6, [r0, #16]
		req->destroy = destroy;
   1655c:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   1655e:	4601      	mov	r1, r0
   16560:	4638      	mov	r0, r7
   16562:	f005 f909 	bl	1b778 <bt_att_req_send>
		if (err) {
   16566:	4605      	mov	r5, r0
   16568:	b110      	cbz	r0, 16570 <gatt_indicate+0x80>
			bt_att_req_free(req);
   1656a:	4620      	mov	r0, r4
   1656c:	f7ff fea0 	bl	162b0 <bt_att_req_free>
}
   16570:	4628      	mov	r0, r5
   16572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16576:	bf00      	nop
   16578:	0001b7f9 	.word	0x0001b7f9

0001657c <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
   1657c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1657e:	4b2e      	ldr	r3, [pc, #184]	; (16638 <notify_cb+0xbc>)
{
   16580:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16582:	6882      	ldr	r2, [r0, #8]
   16584:	429a      	cmp	r2, r3
{
   16586:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16588:	d12e      	bne.n	165e8 <notify_cb+0x6c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1658a:	68c7      	ldr	r7, [r0, #12]

	/* Save Service Changed data if peer is not connected */
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1658c:	4b2b      	ldr	r3, [pc, #172]	; (1663c <notify_cb+0xc0>)
   1658e:	429f      	cmp	r7, r3
   16590:	d11a      	bne.n	165c8 <notify_cb+0x4c>
   16592:	4d2b      	ldr	r5, [pc, #172]	; (16640 <notify_cb+0xc4>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
			struct gatt_sc_cfg *cfg = &sc_cfg[i];
			struct bt_conn *conn;

			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16594:	2300      	movs	r3, #0
   16596:	2207      	movs	r2, #7
   16598:	4669      	mov	r1, sp
   1659a:	1c68      	adds	r0, r5, #1
   1659c:	9300      	str	r3, [sp, #0]
   1659e:	f8cd 3003 	str.w	r3, [sp, #3]
   165a2:	f003 fe8d 	bl	1a2c0 <memcmp>
   165a6:	b178      	cbz	r0, 165c8 <notify_cb+0x4c>
				continue;
			}

			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   165a8:	4629      	mov	r1, r5
   165aa:	2207      	movs	r2, #7
   165ac:	f811 0b01 	ldrb.w	r0, [r1], #1
   165b0:	f7fe febc 	bl	1532c <bt_conn_lookup_state_le>
						       BT_CONN_CONNECTED);
			if (!conn) {
   165b4:	b9d8      	cbnz	r0, 165ee <notify_cb+0x72>
				struct sc_data *sc;

				sc = (struct sc_data *)data->ind_params->data;
   165b6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   165b8:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   165ba:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   165bc:	f811 0b01 	ldrb.w	r0, [r1], #1
   165c0:	8853      	ldrh	r3, [r2, #2]
   165c2:	8812      	ldrh	r2, [r2, #0]
   165c4:	f005 fb55 	bl	1bc72 <sc_save>
		int err;

		/* Check if config value matches data type since consolidated
		 * value may be for a different peer.
		 */
		if (cfg->value != data->type) {
   165c8:	893a      	ldrh	r2, [r7, #8]
   165ca:	89a3      	ldrh	r3, [r4, #12]
   165cc:	429a      	cmp	r2, r3
   165ce:	d10b      	bne.n	165e8 <notify_cb+0x6c>
			continue;
		}

		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   165d0:	4639      	mov	r1, r7
   165d2:	f811 0b01 	ldrb.w	r0, [r1], #1
   165d6:	f7fe fe8d 	bl	152f4 <bt_conn_lookup_addr_le>
		if (!conn) {
   165da:	4605      	mov	r5, r0
   165dc:	b120      	cbz	r0, 165e8 <notify_cb+0x6c>
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
   165de:	7a83      	ldrb	r3, [r0, #10]
   165e0:	2b07      	cmp	r3, #7
   165e2:	d007      	beq.n	165f4 <notify_cb+0x78>
			continue;
		}

		/* Confirm match if cfg is managed by application */
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
			bt_conn_unref(conn);
   165e4:	f004 fae3 	bl	1abae <bt_conn_unref>
		}

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
   165e8:	2001      	movs	r0, #1
}
   165ea:	b003      	add	sp, #12
   165ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   165ee:	f004 fade 	bl	1abae <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   165f2:	e7e9      	b.n	165c8 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   165f4:	697b      	ldr	r3, [r7, #20]
   165f6:	b123      	cbz	r3, 16602 <notify_cb+0x86>
   165f8:	4631      	mov	r1, r6
   165fa:	4798      	blx	r3
   165fc:	b908      	cbnz	r0, 16602 <notify_cb+0x86>
			bt_conn_unref(conn);
   165fe:	4628      	mov	r0, r5
   16600:	e7f0      	b.n	165e4 <notify_cb+0x68>
		if (data->type == BT_GATT_CCC_INDICATE) {
   16602:	89a3      	ldrh	r3, [r4, #12]
   16604:	88a1      	ldrh	r1, [r4, #4]
   16606:	6922      	ldr	r2, [r4, #16]
   16608:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1660a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1660c:	d110      	bne.n	16630 <notify_cb+0xb4>
			err = gatt_indicate(conn, data->handle,
   1660e:	f7ff ff6f 	bl	164f0 <gatt_indicate>
			if (err == 0) {
   16612:	4606      	mov	r6, r0
   16614:	b918      	cbnz	r0, 1661e <notify_cb+0xa2>
				data->ind_params->_ref++;
   16616:	6922      	ldr	r2, [r4, #16]
   16618:	7d93      	ldrb	r3, [r2, #22]
   1661a:	3301      	adds	r3, #1
   1661c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1661e:	4628      	mov	r0, r5
   16620:	f004 fac5 	bl	1abae <bt_conn_unref>
		if (err < 0) {
   16624:	2e00      	cmp	r6, #0
   16626:	f04f 0000 	mov.w	r0, #0
   1662a:	dbde      	blt.n	165ea <notify_cb+0x6e>
		data->err = 0;
   1662c:	60a0      	str	r0, [r4, #8]
   1662e:	e7db      	b.n	165e8 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   16630:	f005 f95c 	bl	1b8ec <gatt_notify>
   16634:	4606      	mov	r6, r0
   16636:	e7f2      	b.n	1661e <notify_cb+0xa2>
   16638:	0001b991 	.word	0x0001b991
   1663c:	200005c4 	.word	0x200005c4
   16640:	20002636 	.word	0x20002636

00016644 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   16644:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16648:	4b24      	ldr	r3, [pc, #144]	; (166dc <disconnected_cb+0x98>)
{
   1664a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1664c:	6882      	ldr	r2, [r0, #8]
   1664e:	429a      	cmp	r2, r3
{
   16650:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16652:	d102      	bne.n	1665a <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   16654:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   16656:	8963      	ldrh	r3, [r4, #10]
   16658:	bb13      	cbnz	r3, 166a0 <disconnected_cb+0x5c>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1665a:	2001      	movs	r0, #1
   1665c:	b002      	add	sp, #8
   1665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16662:	f105 0888 	add.w	r8, r5, #136	; 0x88
   16666:	7a28      	ldrb	r0, [r5, #8]
   16668:	4641      	mov	r1, r8
   1666a:	f004 f970 	bl	1a94e <bt_addr_le_is_bonded>
   1666e:	b988      	cbnz	r0, 16694 <disconnected_cb+0x50>
				if (ccc == &sc_ccc) {
   16670:	4b1b      	ldr	r3, [pc, #108]	; (166e0 <disconnected_cb+0x9c>)
   16672:	429c      	cmp	r4, r3
   16674:	d102      	bne.n	1667c <disconnected_cb+0x38>
					sc_clear(conn);
   16676:	4628      	mov	r0, r5
   16678:	f005 fb23 	bl	1bcc2 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1667c:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   1667e:	2207      	movs	r2, #7
   16680:	4669      	mov	r1, sp
   16682:	4630      	mov	r0, r6
   16684:	9500      	str	r5, [sp, #0]
   16686:	f8cd 5003 	str.w	r5, [sp, #3]
   1668a:	f003 fe29 	bl	1a2e0 <memcpy>
	cfg->id = 0U;
   1668e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   16690:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   16692:	e01a      	b.n	166ca <disconnected_cb+0x86>
   16694:	2207      	movs	r2, #7
   16696:	4641      	mov	r1, r8
   16698:	4630      	mov	r0, r6
   1669a:	f003 fe21 	bl	1a2e0 <memcpy>
   1669e:	e014      	b.n	166ca <disconnected_cb+0x86>
		if (!cfg->value) {
   166a0:	8923      	ldrh	r3, [r4, #8]
   166a2:	b193      	cbz	r3, 166ca <disconnected_cb+0x86>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   166a4:	4626      	mov	r6, r4
   166a6:	4628      	mov	r0, r5
   166a8:	f816 1b01 	ldrb.w	r1, [r6], #1
   166ac:	4632      	mov	r2, r6
   166ae:	f004 fa5e 	bl	1ab6e <bt_conn_is_peer_addr_le>
   166b2:	2800      	cmp	r0, #0
   166b4:	d1d5      	bne.n	16662 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   166b6:	7820      	ldrb	r0, [r4, #0]
   166b8:	4631      	mov	r1, r6
   166ba:	f7fe fe1b 	bl	152f4 <bt_conn_lookup_addr_le>
			if (tmp) {
   166be:	b120      	cbz	r0, 166ca <disconnected_cb+0x86>
				if (tmp->state == BT_CONN_CONNECTED) {
   166c0:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   166c2:	f004 fa74 	bl	1abae <bt_conn_unref>
	if (!value_used) {
   166c6:	2d07      	cmp	r5, #7
   166c8:	d0c7      	beq.n	1665a <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   166ca:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   166cc:	2100      	movs	r1, #0
   166ce:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   166d0:	2b00      	cmp	r3, #0
   166d2:	d0c2      	beq.n	1665a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   166d4:	4638      	mov	r0, r7
   166d6:	4798      	blx	r3
   166d8:	e7bf      	b.n	1665a <disconnected_cb+0x16>
   166da:	bf00      	nop
   166dc:	0001b991 	.word	0x0001b991
   166e0:	200005c4 	.word	0x200005c4

000166e4 <bt_gatt_init>:
{
   166e4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   166e6:	4b1f      	ldr	r3, [pc, #124]	; (16764 <bt_gatt_init+0x80>)
   166e8:	f3bf 8f5b 	dmb	ish
   166ec:	2201      	movs	r2, #1
   166ee:	e853 1f00 	ldrex	r1, [r3]
   166f2:	2900      	cmp	r1, #0
   166f4:	d103      	bne.n	166fe <bt_gatt_init+0x1a>
   166f6:	e843 2000 	strex	r0, r2, [r3]
   166fa:	2800      	cmp	r0, #0
   166fc:	d1f7      	bne.n	166ee <bt_gatt_init+0xa>
   166fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   16702:	d12d      	bne.n	16760 <bt_gatt_init+0x7c>
   16704:	f3bf 8f5b 	dmb	ish
   16708:	4b17      	ldr	r3, [pc, #92]	; (16768 <bt_gatt_init+0x84>)
   1670a:	e853 1f00 	ldrex	r1, [r3]
   1670e:	2900      	cmp	r1, #0
   16710:	d103      	bne.n	1671a <bt_gatt_init+0x36>
   16712:	e843 2000 	strex	r0, r2, [r3]
   16716:	2800      	cmp	r0, #0
   16718:	d1f7      	bne.n	1670a <bt_gatt_init+0x26>
   1671a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1671e:	d108      	bne.n	16732 <bt_gatt_init+0x4e>
   16720:	4a12      	ldr	r2, [pc, #72]	; (1676c <bt_gatt_init+0x88>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16722:	4913      	ldr	r1, [pc, #76]	; (16770 <bt_gatt_init+0x8c>)
   16724:	8813      	ldrh	r3, [r2, #0]
   16726:	4c13      	ldr	r4, [pc, #76]	; (16774 <bt_gatt_init+0x90>)
	if (!atomic_cas(&service_init, 0, 1)) {
   16728:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1672a:	42a1      	cmp	r1, r4
   1672c:	d312      	bcc.n	16754 <bt_gatt_init+0x70>
   1672e:	b100      	cbz	r0, 16732 <bt_gatt_init+0x4e>
   16730:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
   16732:	4911      	ldr	r1, [pc, #68]	; (16778 <bt_gatt_init+0x94>)
   16734:	4811      	ldr	r0, [pc, #68]	; (1677c <bt_gatt_init+0x98>)
   16736:	f006 f98a 	bl	1ca4e <k_delayed_work_init>
   1673a:	4910      	ldr	r1, [pc, #64]	; (1677c <bt_gatt_init+0x98>)
   1673c:	4810      	ldr	r0, [pc, #64]	; (16780 <bt_gatt_init+0x9c>)
   1673e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16742:	2300      	movs	r3, #0
   16744:	f002 fd46 	bl	191d4 <k_delayed_work_submit_to_queue>
}
   16748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
   1674c:	490d      	ldr	r1, [pc, #52]	; (16784 <bt_gatt_init+0xa0>)
   1674e:	480e      	ldr	r0, [pc, #56]	; (16788 <bt_gatt_init+0xa4>)
   16750:	f006 b97d 	b.w	1ca4e <k_delayed_work_init>
		last_static_handle += svc->attr_count;
   16754:	6848      	ldr	r0, [r1, #4]
   16756:	4403      	add	r3, r0
   16758:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1675a:	3108      	adds	r1, #8
   1675c:	2001      	movs	r0, #1
   1675e:	e7e4      	b.n	1672a <bt_gatt_init+0x46>
}
   16760:	bd10      	pop	{r4, pc}
   16762:	bf00      	nop
   16764:	20002570 	.word	0x20002570
   16768:	2000258c 	.word	0x2000258c
   1676c:	20002634 	.word	0x20002634
   16770:	0001d028 	.word	0x0001d028
   16774:	0001d040 	.word	0x0001d040
   16778:	0001bdbb 	.word	0x0001bdbb
   1677c:	20001fd0 	.word	0x20001fd0
   16780:	20002330 	.word	0x20002330
   16784:	000169ed 	.word	0x000169ed
   16788:	20002020 	.word	0x20002020

0001678c <bt_gatt_attr_get_handle>:
{
   1678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   16790:	4603      	mov	r3, r0
   16792:	b148      	cbz	r0, 167a8 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   16794:	8a00      	ldrh	r0, [r0, #16]
   16796:	b938      	cbnz	r0, 167a8 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16798:	4912      	ldr	r1, [pc, #72]	; (167e4 <bt_gatt_attr_get_handle+0x58>)
   1679a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 167e8 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1679e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   167a0:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   167a4:	4571      	cmp	r1, lr
   167a6:	d301      	bcc.n	167ac <bt_gatt_attr_get_handle+0x20>
}
   167a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   167ac:	e9d1 7600 	ldrd	r7, r6, [r1]
   167b0:	42bb      	cmp	r3, r7
   167b2:	d304      	bcc.n	167be <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   167b4:	fb0c 7206 	mla	r2, ip, r6, r7
   167b8:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   167ba:	4293      	cmp	r3, r2
   167bc:	d90e      	bls.n	167dc <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   167be:	19a2      	adds	r2, r4, r6
   167c0:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   167c2:	3108      	adds	r1, #8
   167c4:	4614      	mov	r4, r2
   167c6:	e7ed      	b.n	167a4 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   167c8:	fb0c 7805 	mla	r8, ip, r5, r7
   167cc:	4543      	cmp	r3, r8
   167ce:	d007      	beq.n	167e0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   167d0:	3501      	adds	r5, #1
   167d2:	1962      	adds	r2, r4, r5
   167d4:	42b5      	cmp	r5, r6
   167d6:	b292      	uxth	r2, r2
   167d8:	d1f6      	bne.n	167c8 <bt_gatt_attr_get_handle+0x3c>
   167da:	e7f2      	b.n	167c2 <bt_gatt_attr_get_handle+0x36>
   167dc:	2500      	movs	r5, #0
   167de:	e7f8      	b.n	167d2 <bt_gatt_attr_get_handle+0x46>
   167e0:	4610      	mov	r0, r2
   167e2:	e7e1      	b.n	167a8 <bt_gatt_attr_get_handle+0x1c>
   167e4:	0001d028 	.word	0x0001d028
   167e8:	0001d040 	.word	0x0001d040

000167ec <bt_gatt_foreach_attr_type>:
{
   167ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167f0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   167f4:	9100      	str	r1, [sp, #0]
   167f6:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   167f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   167fc:	2d00      	cmp	r5, #0
   167fe:	bf08      	it	eq
   16800:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   16802:	4b24      	ldr	r3, [pc, #144]	; (16894 <bt_gatt_foreach_attr_type+0xa8>)
   16804:	881b      	ldrh	r3, [r3, #0]
   16806:	4283      	cmp	r3, r0
{
   16808:	4607      	mov	r7, r0
   1680a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1680c:	d23c      	bcs.n	16888 <bt_gatt_foreach_attr_type+0x9c>
}
   1680e:	b003      	add	sp, #12
   16810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   16814:	6873      	ldr	r3, [r6, #4]
   16816:	4423      	add	r3, r4
   16818:	42bb      	cmp	r3, r7
   1681a:	d232      	bcs.n	16882 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1681c:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1681e:	3608      	adds	r6, #8
   16820:	4b1d      	ldr	r3, [pc, #116]	; (16898 <bt_gatt_foreach_attr_type+0xac>)
   16822:	429e      	cmp	r6, r3
   16824:	d3f6      	bcc.n	16814 <bt_gatt_foreach_attr_type+0x28>
   16826:	e7f2      	b.n	1680e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16828:	5889      	ldr	r1, [r1, r2]
   1682a:	9301      	str	r3, [sp, #4]
   1682c:	4640      	mov	r0, r8
   1682e:	f003 fdaa 	bl	1a386 <bt_uuid_cmp>
   16832:	9b01      	ldr	r3, [sp, #4]
   16834:	b190      	cbz	r0, 1685c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16836:	3401      	adds	r4, #1
   16838:	f10a 0a01 	add.w	sl, sl, #1
   1683c:	b2a4      	uxth	r4, r4
   1683e:	6873      	ldr	r3, [r6, #4]
   16840:	4553      	cmp	r3, sl
   16842:	d9ec      	bls.n	1681e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   16844:	9b00      	ldr	r3, [sp, #0]
   16846:	429c      	cmp	r4, r3
   16848:	d8e1      	bhi.n	1680e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1684a:	42bc      	cmp	r4, r7
   1684c:	d3f3      	bcc.n	16836 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1684e:	6831      	ldr	r1, [r6, #0]
   16850:	fb0b f20a 	mul.w	r2, fp, sl
   16854:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16856:	f1b8 0f00 	cmp.w	r8, #0
   1685a:	d1e5      	bne.n	16828 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1685c:	f1b9 0f00 	cmp.w	r9, #0
   16860:	d10b      	bne.n	1687a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   16862:	3d01      	subs	r5, #1
   16864:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   16866:	4618      	mov	r0, r3
   16868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1686a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1686c:	4621      	mov	r1, r4
   1686e:	4798      	blx	r3
	if (!*num_matches) {
   16870:	2d00      	cmp	r5, #0
   16872:	d0cc      	beq.n	1680e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16874:	2800      	cmp	r0, #0
   16876:	d1de      	bne.n	16836 <bt_gatt_foreach_attr_type+0x4a>
   16878:	e7c9      	b.n	1680e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1687a:	68da      	ldr	r2, [r3, #12]
   1687c:	4591      	cmp	r9, r2
   1687e:	d1da      	bne.n	16836 <bt_gatt_foreach_attr_type+0x4a>
   16880:	e7ef      	b.n	16862 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16882:	f04f 0a00 	mov.w	sl, #0
   16886:	e7da      	b.n	1683e <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16888:	4e04      	ldr	r6, [pc, #16]	; (1689c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1688a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1688c:	f04f 0b14 	mov.w	fp, #20
   16890:	e7c6      	b.n	16820 <bt_gatt_foreach_attr_type+0x34>
   16892:	bf00      	nop
   16894:	20002634 	.word	0x20002634
   16898:	0001d040 	.word	0x0001d040
   1689c:	0001d028 	.word	0x0001d028

000168a0 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   168a0:	b510      	push	{r4, lr}
   168a2:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   168a4:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   168a6:	aa1c      	add	r2, sp, #112	; 0x70
   168a8:	4669      	mov	r1, sp
   168aa:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   168ac:	e9cd 3300 	strd	r3, r3, [sp]
   168b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   168b4:	f003 fc0a 	bl	1a0cc <tc_cmac_setup>
   168b8:	b1b8      	cbz	r0, 168ea <db_hash_gen.isra.0+0x4a>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   168ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   168be:	2001      	movs	r0, #1
   168c0:	4a0b      	ldr	r2, [pc, #44]	; (168f0 <db_hash_gen.isra.0+0x50>)
   168c2:	ab04      	add	r3, sp, #16
   168c4:	f005 fa6e 	bl	1bda4 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   168c8:	480a      	ldr	r0, [pc, #40]	; (168f4 <db_hash_gen.isra.0+0x54>)
   168ca:	a904      	add	r1, sp, #16
   168cc:	f003 fc95 	bl	1a1fa <tc_cmac_final>
   168d0:	b158      	cbz	r0, 168ea <db_hash_gen.isra.0+0x4a>
   168d2:	4b08      	ldr	r3, [pc, #32]	; (168f4 <db_hash_gen.isra.0+0x54>)
   168d4:	2208      	movs	r2, #8
   168d6:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   168da:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   168dc:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   168e0:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   168e4:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   168e6:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   168e8:	d1f7      	bne.n	168da <db_hash_gen.isra.0+0x3a>
}
   168ea:	b048      	add	sp, #288	; 0x120
   168ec:	bd10      	pop	{r4, pc}
   168ee:	bf00      	nop
   168f0:	0001b825 	.word	0x0001b825
   168f4:	20002a55 	.word	0x20002a55

000168f8 <bt_gatt_indicate>:
{
   168f8:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   168fa:	4b39      	ldr	r3, [pc, #228]	; (169e0 <bt_gatt_indicate+0xe8>)
   168fc:	f3bf 8f5b 	dmb	ish
   16900:	681b      	ldr	r3, [r3, #0]
   16902:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16906:	079a      	lsls	r2, r3, #30
{
   16908:	b08b      	sub	sp, #44	; 0x2c
   1690a:	4604      	mov	r4, r0
   1690c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1690e:	d561      	bpl.n	169d4 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   16910:	6848      	ldr	r0, [r1, #4]
   16912:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16914:	b114      	cbz	r4, 1691c <bt_gatt_indicate+0x24>
   16916:	7aa3      	ldrb	r3, [r4, #10]
   16918:	2b07      	cmp	r3, #7
   1691a:	d15e      	bne.n	169da <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1691c:	f7ff ff36 	bl	1678c <bt_gatt_attr_get_handle>
   16920:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   16924:	b918      	cbnz	r0, 1692e <bt_gatt_indicate+0x36>
		return -ENOENT;
   16926:	f06f 0001 	mvn.w	r0, #1
}
   1692a:	b00b      	add	sp, #44	; 0x2c
   1692c:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1692e:	682a      	ldr	r2, [r5, #0]
   16930:	b9ba      	cbnz	r2, 16962 <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16932:	9b05      	ldr	r3, [sp, #20]
   16934:	6818      	ldr	r0, [r3, #0]
   16936:	2300      	movs	r3, #0
   16938:	f88d 3010 	strb.w	r3, [sp, #16]
   1693c:	a904      	add	r1, sp, #16
   1693e:	f642 0303 	movw	r3, #10243	; 0x2803
   16942:	f8ad 3012 	strh.w	r3, [sp, #18]
   16946:	f003 fd1e 	bl	1a386 <bt_uuid_cmp>
   1694a:	b1d0      	cbz	r0, 16982 <bt_gatt_indicate+0x8a>
	if (conn) {
   1694c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   16950:	b324      	cbz	r4, 1699c <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   16952:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   16954:	4601      	mov	r1, r0
		params->_ref = 1;
   16956:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   16958:	462a      	mov	r2, r5
   1695a:	4620      	mov	r0, r4
   1695c:	f7ff fdc8 	bl	164f0 <gatt_indicate>
   16960:	e7e3      	b.n	1692a <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16962:	a905      	add	r1, sp, #20
   16964:	9102      	str	r1, [sp, #8]
   16966:	491f      	ldr	r1, [pc, #124]	; (169e4 <bt_gatt_indicate+0xec>)
   16968:	9101      	str	r1, [sp, #4]
   1696a:	2101      	movs	r1, #1
	found->attr = NULL;
   1696c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1696e:	9100      	str	r1, [sp, #0]
   16970:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16974:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16976:	f7ff ff39 	bl	167ec <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1697a:	9b05      	ldr	r3, [sp, #20]
   1697c:	2b00      	cmp	r3, #0
   1697e:	d1d8      	bne.n	16932 <bt_gatt_indicate+0x3a>
   16980:	e7d1      	b.n	16926 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16982:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   16984:	68c3      	ldr	r3, [r0, #12]
   16986:	799b      	ldrb	r3, [r3, #6]
   16988:	069b      	lsls	r3, r3, #26
   1698a:	d402      	bmi.n	16992 <bt_gatt_indicate+0x9a>
			return -EINVAL;
   1698c:	f06f 0015 	mvn.w	r0, #21
   16990:	e7cb      	b.n	1692a <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16992:	f005 f9b9 	bl	1bd08 <bt_gatt_attr_value_handle>
   16996:	f8ad 0018 	strh.w	r0, [sp, #24]
   1699a:	e7d7      	b.n	1694c <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
   1699c:	f06f 0338 	mvn.w	r3, #56	; 0x38
   169a0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   169a2:	2302      	movs	r3, #2
   169a4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   169a8:	f642 1302 	movw	r3, #10498	; 0x2902
   169ac:	f8ad 3012 	strh.w	r3, [sp, #18]
   169b0:	ab05      	add	r3, sp, #20
   169b2:	9302      	str	r3, [sp, #8]
   169b4:	4b0c      	ldr	r3, [pc, #48]	; (169e8 <bt_gatt_indicate+0xf0>)
   169b6:	9301      	str	r3, [sp, #4]
   169b8:	2301      	movs	r3, #1
   169ba:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   169bc:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   169be:	4623      	mov	r3, r4
   169c0:	aa04      	add	r2, sp, #16
   169c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   169c6:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   169c8:	f88d 4010 	strb.w	r4, [sp, #16]
   169cc:	f7ff ff0e 	bl	167ec <bt_gatt_foreach_attr_type>
	return data.err;
   169d0:	9807      	ldr	r0, [sp, #28]
   169d2:	e7aa      	b.n	1692a <bt_gatt_indicate+0x32>
		return -EAGAIN;
   169d4:	f06f 000a 	mvn.w	r0, #10
   169d8:	e7a7      	b.n	1692a <bt_gatt_indicate+0x32>
		return -ENOTCONN;
   169da:	f06f 0038 	mvn.w	r0, #56	; 0x38
   169de:	e7a4      	b.n	1692a <bt_gatt_indicate+0x32>
   169e0:	20000460 	.word	0x20000460
   169e4:	0001b81d 	.word	0x0001b81d
   169e8:	0001657d 	.word	0x0001657d

000169ec <sc_process>:
{
   169ec:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   169ee:	f850 2c08 	ldr.w	r2, [r0, #-8]
   169f2:	9201      	str	r2, [sp, #4]
{
   169f4:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   169f6:	f1a0 0120 	sub.w	r1, r0, #32
   169fa:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   169fe:	f3bf 8f5b 	dmb	ish
   16a02:	e854 2f00 	ldrex	r2, [r4]
   16a06:	f022 0201 	bic.w	r2, r2, #1
   16a0a:	e844 2000 	strex	r0, r2, [r4]
   16a0e:	2800      	cmp	r0, #0
   16a10:	d1f7      	bne.n	16a02 <sc_process+0x16>
   16a12:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16a16:	4a0d      	ldr	r2, [pc, #52]	; (16a4c <sc_process+0x60>)
   16a18:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   16a1c:	4a0c      	ldr	r2, [pc, #48]	; (16a50 <sc_process+0x64>)
   16a1e:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16a22:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   16a24:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   16a26:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   16a2a:	2204      	movs	r2, #4
	sc->start = 0U;
   16a2c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   16a30:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   16a34:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16a38:	f7ff ff5e 	bl	168f8 <bt_gatt_indicate>
   16a3c:	b918      	cbnz	r0, 16a46 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   16a3e:	2101      	movs	r1, #1
   16a40:	4620      	mov	r0, r4
   16a42:	f004 ff45 	bl	1b8d0 <atomic_set_bit>
}
   16a46:	b002      	add	sp, #8
   16a48:	bd10      	pop	{r4, pc}
   16a4a:	bf00      	nop
   16a4c:	0001d2f0 	.word	0x0001d2f0
   16a50:	00016459 	.word	0x00016459

00016a54 <update_ccc>:
{
   16a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16a56:	4b28      	ldr	r3, [pc, #160]	; (16af8 <update_ccc+0xa4>)
	struct bt_conn *conn = data->conn;
   16a58:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   16a5a:	6882      	ldr	r2, [r0, #8]
   16a5c:	429a      	cmp	r2, r3
{
   16a5e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16a60:	d146      	bne.n	16af0 <update_ccc+0x9c>
	ccc = attr->user_data;
   16a62:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   16a64:	8933      	ldrh	r3, [r6, #8]
   16a66:	2b00      	cmp	r3, #0
   16a68:	d042      	beq.n	16af0 <update_ccc+0x9c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16a6a:	4632      	mov	r2, r6
   16a6c:	4628      	mov	r0, r5
   16a6e:	f812 1b01 	ldrb.w	r1, [r2], #1
   16a72:	f004 f87c 	bl	1ab6e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   16a76:	2800      	cmp	r0, #0
   16a78:	d03a      	beq.n	16af0 <update_ccc+0x9c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   16a7a:	222a      	movs	r2, #42	; 0x2a
   16a7c:	4621      	mov	r1, r4
   16a7e:	4628      	mov	r0, r5
   16a80:	f005 f99d 	bl	1bdbe <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   16a84:	2803      	cmp	r0, #3
   16a86:	d033      	beq.n	16af0 <update_ccc+0x9c>
		gatt_ccc_changed(attr, ccc);
   16a88:	4631      	mov	r1, r6
   16a8a:	4620      	mov	r0, r4
   16a8c:	f004 feaa 	bl	1b7e4 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   16a90:	4b1a      	ldr	r3, [pc, #104]	; (16afc <update_ccc+0xa8>)
   16a92:	429e      	cmp	r6, r3
   16a94:	d12c      	bne.n	16af0 <update_ccc+0x9c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   16a96:	7a28      	ldrb	r0, [r5, #8]
   16a98:	f105 0188 	add.w	r1, r5, #136	; 0x88
   16a9c:	f7ff fcae 	bl	163fc <find_sc_cfg>
	if (!cfg) {
   16aa0:	4604      	mov	r4, r0
   16aa2:	b328      	cbz	r0, 16af0 <update_ccc+0x9c>
	if (!(cfg->data.start || cfg->data.end)) {
   16aa4:	8902      	ldrh	r2, [r0, #8]
   16aa6:	8943      	ldrh	r3, [r0, #10]
   16aa8:	ea53 0102 	orrs.w	r1, r3, r2
   16aac:	d020      	beq.n	16af0 <update_ccc+0x9c>
	index = bt_conn_index(conn);
   16aae:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   16ab0:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   16ab4:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   16ab8:	f7fe fe3e 	bl	15738 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16abc:	4910      	ldr	r1, [pc, #64]	; (16b00 <update_ccc+0xac>)
   16abe:	4a11      	ldr	r2, [pc, #68]	; (16b04 <update_ccc+0xb0>)
   16ac0:	2318      	movs	r3, #24
   16ac2:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].len = sizeof(sc_range);
   16ac6:	2604      	movs	r6, #4
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16ac8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   16aca:	4a0f      	ldr	r2, [pc, #60]	; (16b08 <update_ccc+0xb4>)
   16acc:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   16ace:	aa01      	add	r2, sp, #4
   16ad0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   16ad2:	829e      	strh	r6, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16ad4:	b203      	sxth	r3, r0
   16ad6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16ada:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   16ade:	4628      	mov	r0, r5
   16ae0:	f7ff ff0a 	bl	168f8 <bt_gatt_indicate>
	memset(&cfg->data, 0, sizeof(cfg->data));
   16ae4:	4632      	mov	r2, r6
   16ae6:	2100      	movs	r1, #0
   16ae8:	f104 0008 	add.w	r0, r4, #8
   16aec:	f003 fc23 	bl	1a336 <memset>
}
   16af0:	2001      	movs	r0, #1
   16af2:	b002      	add	sp, #8
   16af4:	bd70      	pop	{r4, r5, r6, pc}
   16af6:	bf00      	nop
   16af8:	0001b991 	.word	0x0001b991
   16afc:	200005c4 	.word	0x200005c4
   16b00:	20002574 	.word	0x20002574
   16b04:	0001d2f0 	.word	0x0001d2f0
   16b08:	0001b975 	.word	0x0001b975

00016b0c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   16b0c:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16b0e:	4a06      	ldr	r2, [pc, #24]	; (16b28 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   16b10:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16b12:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   16b14:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16b16:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   16b1a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16b1e:	f005 f941 	bl	1bda4 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   16b22:	b003      	add	sp, #12
   16b24:	f85d fb04 	ldr.w	pc, [sp], #4
   16b28:	00016a55 	.word	0x00016a55

00016b2c <db_hash_read>:
{
   16b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b2e:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   16b30:	480f      	ldr	r0, [pc, #60]	; (16b70 <db_hash_read+0x44>)
{
   16b32:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   16b36:	4615      	mov	r5, r2
   16b38:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
   16b3a:	f005 ff90 	bl	1ca5e <k_delayed_work_cancel>
	if (!err) {
   16b3e:	b908      	cbnz	r0, 16b44 <db_hash_read+0x18>
		db_hash_gen(true);
   16b40:	f7ff feae 	bl	168a0 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   16b44:	2101      	movs	r1, #1
   16b46:	4620      	mov	r0, r4
   16b48:	f005 f95c 	bl	1be04 <bt_gatt_change_aware>
	if (offset > value_len) {
   16b4c:	2e10      	cmp	r6, #16
   16b4e:	d80c      	bhi.n	16b6a <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
   16b50:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   16b54:	4907      	ldr	r1, [pc, #28]	; (16b74 <db_hash_read+0x48>)
	len = MIN(buf_len, value_len - offset);
   16b56:	42bc      	cmp	r4, r7
   16b58:	bfa8      	it	ge
   16b5a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   16b5c:	4622      	mov	r2, r4
   16b5e:	4431      	add	r1, r6
   16b60:	4628      	mov	r0, r5
   16b62:	f003 fbbd 	bl	1a2e0 <memcpy>
}
   16b66:	4620      	mov	r0, r4
   16b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16b6a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   16b6e:	e7fa      	b.n	16b66 <db_hash_read+0x3a>
   16b70:	20001fd0 	.word	0x20001fd0
   16b74:	20002a55 	.word	0x20002a55

00016b78 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   16b78:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   16b7a:	4603      	mov	r3, r0
   16b7c:	4a15      	ldr	r2, [pc, #84]	; (16bd4 <bt_gatt_disconnected+0x5c>)
{
   16b7e:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   16b80:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16b84:	2001      	movs	r0, #1
   16b86:	f005 f90d 	bl	1bda4 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   16b8a:	4628      	mov	r0, r5
   16b8c:	f7ff fc46 	bl	1641c <find_cf_cfg>
	if (!cfg) {
   16b90:	4604      	mov	r4, r0
   16b92:	b1e8      	cbz	r0, 16bd0 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16b94:	f105 0688 	add.w	r6, r5, #136	; 0x88
   16b98:	7a28      	ldrb	r0, [r5, #8]
   16b9a:	4631      	mov	r1, r6
   16b9c:	f003 fed7 	bl	1a94e <bt_addr_le_is_bonded>
   16ba0:	b920      	cbnz	r0, 16bac <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   16ba2:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   16ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   16ba8:	f004 bf4d 	b.w	1ba46 <clear_cf_cfg>
   16bac:	1c60      	adds	r0, r4, #1
   16bae:	2207      	movs	r2, #7
   16bb0:	4631      	mov	r1, r6
   16bb2:	340c      	adds	r4, #12
   16bb4:	f003 fb94 	bl	1a2e0 <memcpy>
   16bb8:	f3bf 8f5b 	dmb	ish
   16bbc:	e854 3f00 	ldrex	r3, [r4]
   16bc0:	f023 0302 	bic.w	r3, r3, #2
   16bc4:	e844 3200 	strex	r2, r3, [r4]
   16bc8:	2a00      	cmp	r2, #0
   16bca:	d1f7      	bne.n	16bbc <bt_gatt_disconnected+0x44>
   16bcc:	f3bf 8f5b 	dmb	ish
}
   16bd0:	bd70      	pop	{r4, r5, r6, pc}
   16bd2:	bf00      	nop
   16bd4:	00016645 	.word	0x00016645

00016bd8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   16bd8:	4b04      	ldr	r3, [pc, #16]	; (16bec <bt_smp_accept+0x14>)
   16bda:	6818      	ldr	r0, [r3, #0]
   16bdc:	b918      	cbnz	r0, 16be6 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   16bde:	4a04      	ldr	r2, [pc, #16]	; (16bf0 <bt_smp_accept+0x18>)
   16be0:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   16be2:	600b      	str	r3, [r1, #0]

		return 0;
   16be4:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   16be6:	f06f 000b 	mvn.w	r0, #11
}
   16bea:	4770      	bx	lr
   16bec:	20002058 	.word	0x20002058
   16bf0:	0001d3f4 	.word	0x0001d3f4

00016bf4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   16bf4:	4b02      	ldr	r3, [pc, #8]	; (16c00 <net_buf_pool_get+0xc>)
   16bf6:	2228      	movs	r2, #40	; 0x28
   16bf8:	fb02 3000 	mla	r0, r2, r0, r3
   16bfc:	4770      	bx	lr
   16bfe:	bf00      	nop
   16c00:	200007c8 	.word	0x200007c8

00016c04 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16c04:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   16c06:	4a05      	ldr	r2, [pc, #20]	; (16c1c <net_buf_id+0x18>)
   16c08:	2128      	movs	r1, #40	; 0x28
   16c0a:	fb01 2303 	mla	r3, r1, r3, r2
   16c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16c10:	1ac0      	subs	r0, r0, r3
}
   16c12:	4b03      	ldr	r3, [pc, #12]	; (16c20 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   16c14:	10c0      	asrs	r0, r0, #3
}
   16c16:	4358      	muls	r0, r3
   16c18:	4770      	bx	lr
   16c1a:	bf00      	nop
   16c1c:	200007c8 	.word	0x200007c8
   16c20:	aaaaaaab 	.word	0xaaaaaaab

00016c24 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   16c24:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16c26:	4a0a      	ldr	r2, [pc, #40]	; (16c50 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16c28:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16c2a:	2428      	movs	r4, #40	; 0x28
   16c2c:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   16c30:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16c32:	6a1b      	ldr	r3, [r3, #32]
   16c34:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   16c36:	6823      	ldr	r3, [r4, #0]
   16c38:	429a      	cmp	r2, r3
   16c3a:	bf94      	ite	ls
   16c3c:	600a      	strls	r2, [r1, #0]
   16c3e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   16c40:	f7ff ffe0 	bl	16c04 <net_buf_id>
   16c44:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   16c48:	fb02 3000 	mla	r0, r2, r0, r3
   16c4c:	bd10      	pop	{r4, pc}
   16c4e:	bf00      	nop
   16c50:	200007c8 	.word	0x200007c8

00016c54 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   16c54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16c58:	4605      	mov	r5, r0
   16c5a:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   16c5c:	4610      	mov	r0, r2
   16c5e:	4619      	mov	r1, r3
{
   16c60:	4616      	mov	r6, r2
   16c62:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   16c64:	f005 ff54 	bl	1cb10 <z_timeout_end_calc>
   16c68:	4680      	mov	r8, r0
   16c6a:	4689      	mov	r9, r1
	__asm__ volatile(
   16c6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   16c70:	f3ef 8a11 	mrs	sl, BASEPRI
   16c74:	f383 8811 	msr	BASEPRI, r3
   16c78:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   16c7c:	8b6b      	ldrh	r3, [r5, #26]
   16c7e:	2b00      	cmp	r3, #0
   16c80:	d054      	beq.n	16d2c <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   16c82:	8b2a      	ldrh	r2, [r5, #24]
   16c84:	429a      	cmp	r2, r3
   16c86:	d93d      	bls.n	16d04 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   16c88:	2200      	movs	r2, #0
   16c8a:	2300      	movs	r3, #0
   16c8c:	4628      	mov	r0, r5
   16c8e:	f001 fdc3 	bl	18818 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   16c92:	4604      	mov	r4, r0
   16c94:	2800      	cmp	r0, #0
   16c96:	d035      	beq.n	16d04 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   16c98:	f38a 8811 	msr	BASEPRI, sl
   16c9c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   16ca0:	9b01      	ldr	r3, [sp, #4]
   16ca2:	2b00      	cmp	r3, #0
   16ca4:	d052      	beq.n	16d4c <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   16ca6:	ea56 0307 	orrs.w	r3, r6, r7
   16caa:	d010      	beq.n	16cce <net_buf_alloc_len+0x7a>
   16cac:	1c7b      	adds	r3, r7, #1
   16cae:	bf08      	it	eq
   16cb0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   16cb4:	d00b      	beq.n	16cce <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   16cb6:	f002 fc11 	bl	194dc <z_tick_get>
   16cba:	ebb8 0600 	subs.w	r6, r8, r0
   16cbe:	eb69 0701 	sbc.w	r7, r9, r1
   16cc2:	2e00      	cmp	r6, #0
   16cc4:	f177 0300 	sbcs.w	r3, r7, #0
   16cc8:	bfbc      	itt	lt
   16cca:	2600      	movlt	r6, #0
   16ccc:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16cce:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   16cd0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 16d64 <net_buf_alloc_len+0x110>
   16cd4:	2228      	movs	r2, #40	; 0x28
   16cd6:	fb02 8303 	mla	r3, r2, r3, r8
   16cda:	a901      	add	r1, sp, #4
   16cdc:	6a1b      	ldr	r3, [r3, #32]
   16cde:	681b      	ldr	r3, [r3, #0]
   16ce0:	4632      	mov	r2, r6
   16ce2:	681d      	ldr	r5, [r3, #0]
   16ce4:	4620      	mov	r0, r4
   16ce6:	463b      	mov	r3, r7
   16ce8:	47a8      	blx	r5
   16cea:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   16cec:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   16cee:	bb70      	cbnz	r0, 16d4e <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   16cf0:	79a0      	ldrb	r0, [r4, #6]
   16cf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16cf6:	4621      	mov	r1, r4
   16cf8:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   16cfc:	f005 fd06 	bl	1c70c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   16d00:	462c      	mov	r4, r5
}
   16d02:	e01f      	b.n	16d44 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   16d04:	8b68      	ldrh	r0, [r5, #26]
   16d06:	1e43      	subs	r3, r0, #1
   16d08:	836b      	strh	r3, [r5, #26]
   16d0a:	f38a 8811 	msr	BASEPRI, sl
   16d0e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   16d12:	8b2c      	ldrh	r4, [r5, #24]
   16d14:	1a24      	subs	r4, r4, r0
   16d16:	6a68      	ldr	r0, [r5, #36]	; 0x24
   16d18:	2318      	movs	r3, #24
   16d1a:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   16d1e:	4811      	ldr	r0, [pc, #68]	; (16d64 <net_buf_alloc_len+0x110>)
   16d20:	4b11      	ldr	r3, [pc, #68]	; (16d68 <net_buf_alloc_len+0x114>)
   16d22:	1a2d      	subs	r5, r5, r0
   16d24:	10ed      	asrs	r5, r5, #3
   16d26:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   16d28:	71a5      	strb	r5, [r4, #6]
		goto success;
   16d2a:	e7b9      	b.n	16ca0 <net_buf_alloc_len+0x4c>
   16d2c:	f38a 8811 	msr	BASEPRI, sl
   16d30:	f3bf 8f6f 	isb	sy
   16d34:	4632      	mov	r2, r6
   16d36:	463b      	mov	r3, r7
   16d38:	4628      	mov	r0, r5
   16d3a:	f001 fd6d 	bl	18818 <z_impl_k_queue_get>
	if (!buf) {
   16d3e:	4604      	mov	r4, r0
   16d40:	2800      	cmp	r0, #0
   16d42:	d1ad      	bne.n	16ca0 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   16d44:	4620      	mov	r0, r4
   16d46:	b002      	add	sp, #8
   16d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   16d4c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   16d4e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   16d50:	2201      	movs	r2, #1
	buf->frags = NULL;
   16d52:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   16d54:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   16d56:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   16d58:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   16d5a:	6923      	ldr	r3, [r4, #16]
   16d5c:	81e2      	strh	r2, [r4, #14]
   16d5e:	60a3      	str	r3, [r4, #8]
	return buf;
   16d60:	e7f0      	b.n	16d44 <net_buf_alloc_len+0xf0>
   16d62:	bf00      	nop
   16d64:	200007c8 	.word	0x200007c8
   16d68:	cccccccd 	.word	0xcccccccd

00016d6c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d70:	4d17      	ldr	r5, [pc, #92]	; (16dd0 <net_buf_unref+0x64>)
   16d72:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16d74:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   16d76:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   16d78:	b90c      	cbnz	r4, 16d7e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   16d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   16d7e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   16d80:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   16d84:	3b01      	subs	r3, #1
   16d86:	b2db      	uxtb	r3, r3
   16d88:	7123      	strb	r3, [r4, #4]
   16d8a:	2b00      	cmp	r3, #0
   16d8c:	d1f5      	bne.n	16d7a <net_buf_unref+0xe>
		if (buf->__buf) {
   16d8e:	6921      	ldr	r1, [r4, #16]
   16d90:	b159      	cbz	r1, 16daa <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   16d92:	7963      	ldrb	r3, [r4, #5]
   16d94:	079b      	lsls	r3, r3, #30
   16d96:	d407      	bmi.n	16da8 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   16d98:	79a3      	ldrb	r3, [r4, #6]
   16d9a:	fb07 5303 	mla	r3, r7, r3, r5
   16d9e:	4620      	mov	r0, r4
   16da0:	6a1b      	ldr	r3, [r3, #32]
   16da2:	681b      	ldr	r3, [r3, #0]
   16da4:	689b      	ldr	r3, [r3, #8]
   16da6:	4798      	blx	r3
			buf->__buf = NULL;
   16da8:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   16daa:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16dac:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   16dae:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   16db2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   16db4:	69db      	ldr	r3, [r3, #28]
   16db6:	b11b      	cbz	r3, 16dc0 <net_buf_unref+0x54>
			pool->destroy(buf);
   16db8:	4620      	mov	r0, r4
   16dba:	4798      	blx	r3
{
   16dbc:	4644      	mov	r4, r8
   16dbe:	e7db      	b.n	16d78 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   16dc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16dc4:	4621      	mov	r1, r4
   16dc6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   16dca:	f005 fc9f 	bl	1c70c <k_queue_prepend>
}
   16dce:	e7f5      	b.n	16dbc <net_buf_unref+0x50>
   16dd0:	200007c8 	.word	0x200007c8

00016dd4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   16dd4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   16dd6:	4b09      	ldr	r3, [pc, #36]	; (16dfc <gpio_nrfx_init+0x28>)
   16dd8:	781a      	ldrb	r2, [r3, #0]
   16dda:	b96a      	cbnz	r2, 16df8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   16ddc:	2101      	movs	r1, #1
   16dde:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   16de0:	2006      	movs	r0, #6
   16de2:	2105      	movs	r1, #5
   16de4:	f7fc f9aa 	bl	1313c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   16de8:	2006      	movs	r0, #6
   16dea:	f7fc f997 	bl	1311c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   16dee:	4b04      	ldr	r3, [pc, #16]	; (16e00 <gpio_nrfx_init+0x2c>)
   16df0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16df4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   16df8:	2000      	movs	r0, #0
   16dfa:	bd08      	pop	{r3, pc}
   16dfc:	20002a65 	.word	0x20002a65
   16e00:	40006000 	.word	0x40006000

00016e04 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16e04:	4b2a      	ldr	r3, [pc, #168]	; (16eb0 <gpio_nrfx_config+0xac>)
{
   16e06:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16e08:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16e0a:	482a      	ldr	r0, [pc, #168]	; (16eb4 <gpio_nrfx_config+0xb0>)
   16e0c:	4013      	ands	r3, r2
   16e0e:	4283      	cmp	r3, r0
   16e10:	d03e      	beq.n	16e90 <gpio_nrfx_config+0x8c>
   16e12:	d80d      	bhi.n	16e30 <gpio_nrfx_config+0x2c>
   16e14:	2b06      	cmp	r3, #6
   16e16:	d015      	beq.n	16e44 <gpio_nrfx_config+0x40>
   16e18:	d805      	bhi.n	16e26 <gpio_nrfx_config+0x22>
   16e1a:	b19b      	cbz	r3, 16e44 <gpio_nrfx_config+0x40>
   16e1c:	2b02      	cmp	r3, #2
   16e1e:	d039      	beq.n	16e94 <gpio_nrfx_config+0x90>
   16e20:	f06f 0015 	mvn.w	r0, #21
   16e24:	e033      	b.n	16e8e <gpio_nrfx_config+0x8a>
   16e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16e2a:	d1f9      	bne.n	16e20 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   16e2c:	2301      	movs	r3, #1
   16e2e:	e009      	b.n	16e44 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16e30:	4821      	ldr	r0, [pc, #132]	; (16eb8 <gpio_nrfx_config+0xb4>)
   16e32:	4283      	cmp	r3, r0
   16e34:	d030      	beq.n	16e98 <gpio_nrfx_config+0x94>
   16e36:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   16e3a:	d02f      	beq.n	16e9c <gpio_nrfx_config+0x98>
   16e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   16e40:	d1ee      	bne.n	16e20 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   16e42:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   16e44:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   16e46:	bf54      	ite	pl
   16e48:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   16e4c:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16e4e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   16e52:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   16e56:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16e5a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   16e5e:	d007      	beq.n	16e70 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16e60:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16e64:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16e66:	d01b      	beq.n	16ea0 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   16e68:	2201      	movs	r2, #1
   16e6a:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   16e6c:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   16e70:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   16e74:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   16e78:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16e7c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   16e80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   16e84:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16e88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   16e8c:	2000      	movs	r0, #0
}
   16e8e:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   16e90:	2307      	movs	r3, #7
   16e92:	e7d7      	b.n	16e44 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   16e94:	2304      	movs	r3, #4
   16e96:	e7d5      	b.n	16e44 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   16e98:	2305      	movs	r3, #5
   16e9a:	e7d3      	b.n	16e44 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   16e9c:	2303      	movs	r3, #3
   16e9e:	e7d1      	b.n	16e44 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   16ea0:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   16ea2:	bf42      	ittt	mi
   16ea4:	2201      	movmi	r2, #1
   16ea6:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   16ea8:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   16eac:	e7e0      	b.n	16e70 <gpio_nrfx_config+0x6c>
   16eae:	bf00      	nop
   16eb0:	00f00006 	.word	0x00f00006
   16eb4:	00100006 	.word	0x00100006
   16eb8:	00400002 	.word	0x00400002

00016ebc <gpio_nrfx_pin_interrupt_configure>:
{
   16ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ebe:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16ec0:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   16ec2:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16ec4:	7a08      	ldrb	r0, [r1, #8]
   16ec6:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   16eca:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   16ece:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
   16ed2:	d10c      	bne.n	16eee <gpio_nrfx_pin_interrupt_configure+0x32>
    *p_pin = pin_number & 0x1F;
   16ed4:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16ed8:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   16edc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   16ee0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   16ee4:	07cf      	lsls	r7, r1, #31
   16ee6:	d507      	bpl.n	16ef8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   16ee8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   16eec:	e0bd      	b.n	1706a <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16eee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   16ef2:	68f1      	ldr	r1, [r6, #12]
   16ef4:	f000 80aa 	beq.w	1704c <gpio_nrfx_pin_interrupt_configure+0x190>
   16ef8:	68f0      	ldr	r0, [r6, #12]
   16efa:	2101      	movs	r1, #1
   16efc:	40a1      	lsls	r1, r4
   16efe:	4301      	orrs	r1, r0
   16f00:	6970      	ldr	r0, [r6, #20]
   16f02:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16f04:	2101      	movs	r1, #1
   16f06:	40a1      	lsls	r1, r4
   16f08:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   16f0c:	69b2      	ldr	r2, [r6, #24]
   16f0e:	bf0c      	ite	eq
   16f10:	4308      	orreq	r0, r1
   16f12:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   16f14:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   16f18:	bf0c      	ite	eq
   16f1a:	430a      	orreq	r2, r1
   16f1c:	438a      	bicne	r2, r1
   16f1e:	61b2      	str	r2, [r6, #24]
   16f20:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16f22:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   16f24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   16f28:	bf0c      	ite	eq
   16f2a:	4311      	orreq	r1, r2
   16f2c:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   16f30:	4a54      	ldr	r2, [pc, #336]	; (17084 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
   16f32:	6131      	str	r1, [r6, #16]
   16f34:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16f38:	2300      	movs	r3, #0
   16f3a:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16f3c:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   16f40:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   16f44:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   16f48:	4285      	cmp	r5, r0
   16f4a:	f040 8084 	bne.w	17056 <gpio_nrfx_pin_interrupt_configure+0x19a>
		    && (intenset & BIT(i))) {
   16f4e:	fa21 f003 	lsr.w	r0, r1, r3
   16f52:	07c0      	lsls	r0, r0, #31
   16f54:	d57f      	bpl.n	17056 <gpio_nrfx_pin_interrupt_configure+0x19a>
			(void)atomic_and(mask, ~BIT(i));
   16f56:	2101      	movs	r1, #1
   16f58:	4099      	lsls	r1, r3
   16f5a:	484b      	ldr	r0, [pc, #300]	; (17088 <gpio_nrfx_pin_interrupt_configure+0x1cc>)
   16f5c:	f3bf 8f5b 	dmb	ish
   16f60:	43cf      	mvns	r7, r1
   16f62:	e850 cf00 	ldrex	ip, [r0]
   16f66:	ea0c 0c07 	and.w	ip, ip, r7
   16f6a:	e840 ce00 	strex	lr, ip, [r0]
   16f6e:	f1be 0f00 	cmp.w	lr, #0
   16f72:	d1f6      	bne.n	16f62 <gpio_nrfx_pin_interrupt_configure+0xa6>
   16f74:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   16f78:	009b      	lsls	r3, r3, #2
   16f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16f7e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   16f82:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   16f86:	f020 0001 	bic.w	r0, r0, #1
   16f8a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   16f8e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16f92:	2100      	movs	r1, #0
   16f94:	4628      	mov	r0, r5
   16f96:	f005 f829 	bl	1bfec <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   16f9a:	68f3      	ldr	r3, [r6, #12]
   16f9c:	40e3      	lsrs	r3, r4
   16f9e:	f013 0301 	ands.w	r3, r3, #1
   16fa2:	d051      	beq.n	17048 <gpio_nrfx_pin_interrupt_configure+0x18c>
		if (data->trig_edge & BIT(pin)) {
   16fa4:	6973      	ldr	r3, [r6, #20]
   16fa6:	40e3      	lsrs	r3, r4
   16fa8:	f013 0201 	ands.w	r2, r3, #1
   16fac:	d05e      	beq.n	1706c <gpio_nrfx_pin_interrupt_configure+0x1b0>
			if (data->double_edge & BIT(pin)) {
   16fae:	69b3      	ldr	r3, [r6, #24]
   16fb0:	40e3      	lsrs	r3, r4
   16fb2:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16fb4:	bf5f      	itttt	pl
   16fb6:	6931      	ldrpl	r1, [r6, #16]
   16fb8:	fa21 f404 	lsrpl.w	r4, r1, r4
   16fbc:	f004 0401 	andpl.w	r4, r4, #1
   16fc0:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16fc4:	4930      	ldr	r1, [pc, #192]	; (17088 <gpio_nrfx_pin_interrupt_configure+0x1cc>)
   16fc6:	bf54      	ite	pl
   16fc8:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   16fca:	2403      	movmi	r4, #3
   16fcc:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   16fce:	2701      	movs	r7, #1
   16fd0:	fa07 f602 	lsl.w	r6, r7, r2
   16fd4:	f3bf 8f5b 	dmb	ish
   16fd8:	e851 0f00 	ldrex	r0, [r1]
   16fdc:	ea40 0306 	orr.w	r3, r0, r6
   16fe0:	e841 3c00 	strex	ip, r3, [r1]
   16fe4:	f1bc 0f00 	cmp.w	ip, #0
   16fe8:	d1f6      	bne.n	16fd8 <gpio_nrfx_pin_interrupt_configure+0x11c>
   16fea:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   16fee:	40d0      	lsrs	r0, r2
   16ff0:	f010 0301 	ands.w	r3, r0, #1
   16ff4:	d134      	bne.n	17060 <gpio_nrfx_pin_interrupt_configure+0x1a4>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16ff6:	0091      	lsls	r1, r2, #2
   16ff8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   16ffc:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   17000:	3240      	adds	r2, #64	; 0x40
   17002:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   17006:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   1700a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1700e:	0092      	lsls	r2, r2, #2
   17010:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17014:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
   17016:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17018:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1701c:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   17020:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17024:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17028:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1702c:	4305      	orrs	r5, r0
   1702e:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17032:	6013      	str	r3, [r2, #0]
   17034:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   17036:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   1703a:	f042 0201 	orr.w	r2, r2, #1
   1703e:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   17042:	4a10      	ldr	r2, [pc, #64]	; (17084 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
   17044:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
   17048:	4618      	mov	r0, r3
   1704a:	e00e      	b.n	1706a <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1704c:	2001      	movs	r0, #1
   1704e:	40a0      	lsls	r0, r4
   17050:	ea21 0100 	bic.w	r1, r1, r0
   17054:	e754      	b.n	16f00 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17056:	3301      	adds	r3, #1
   17058:	2b08      	cmp	r3, #8
   1705a:	f47f af6f 	bne.w	16f3c <gpio_nrfx_pin_interrupt_configure+0x80>
   1705e:	e798      	b.n	16f92 <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   17060:	3201      	adds	r2, #1
   17062:	2a08      	cmp	r2, #8
   17064:	d1b4      	bne.n	16fd0 <gpio_nrfx_pin_interrupt_configure+0x114>
	return -ENODEV;
   17066:	f06f 0012 	mvn.w	r0, #18
}
   1706a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1706c:	6931      	ldr	r1, [r6, #16]
   1706e:	40e1      	lsrs	r1, r4
   17070:	f001 0101 	and.w	r1, r1, #1
   17074:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   17078:	4628      	mov	r0, r5
   1707a:	b2c9      	uxtb	r1, r1
   1707c:	f004 ffb6 	bl	1bfec <nrf_gpio_cfg_sense_set>
	int res = 0;
   17080:	4610      	mov	r0, r2
   17082:	e7f2      	b.n	1706a <gpio_nrfx_pin_interrupt_configure+0x1ae>
   17084:	40006000 	.word	0x40006000
   17088:	200025ac 	.word	0x200025ac

0001708c <gpiote_event_handler>:
{
   1708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17090:	4d3f      	ldr	r5, [pc, #252]	; (17190 <gpiote_event_handler+0x104>)
   17092:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
   17094:	2e00      	cmp	r6, #0
   17096:	d04e      	beq.n	17136 <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
   17098:	4b3e      	ldr	r3, [pc, #248]	; (17194 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   1709a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   1709e:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   170a0:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   170a2:	4301      	orrs	r1, r0
   170a4:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
   170a8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
   170ac:	2701      	movs	r7, #1
   170ae:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   170b2:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   170b4:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
   170b8:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
   170bc:	bb72      	cbnz	r2, 1711c <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   170be:	602a      	str	r2, [r5, #0]
   170c0:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   170c2:	4835      	ldr	r0, [pc, #212]	; (17198 <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   170c4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   170c6:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   170c8:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   170ca:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   170ce:	fa05 f103 	lsl.w	r1, r5, r3
   170d2:	4211      	tst	r1, r2
   170d4:	d011      	beq.n	170fa <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   170d6:	009a      	lsls	r2, r3, #2
   170d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   170dc:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   170e0:	6811      	ldr	r1, [r2, #0]
   170e2:	b151      	cbz	r1, 170fa <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   170e4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   170e8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   170ec:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   170ee:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   170f2:	fa05 f101 	lsl.w	r1, r5, r1
   170f6:	6812      	ldr	r2, [r2, #0]
   170f8:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   170fa:	3301      	adds	r3, #1
   170fc:	2b08      	cmp	r3, #8
   170fe:	d1e4      	bne.n	170ca <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   17100:	b9dc      	cbnz	r4, 1713a <gpiote_event_handler+0xae>
	if (port_event) {
   17102:	b14e      	cbz	r6, 17118 <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
   17104:	4c23      	ldr	r4, [pc, #140]	; (17194 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   17106:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
   1710a:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1710c:	4301      	orrs	r1, r0
   1710e:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
   17112:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   17114:	2600      	movs	r6, #0
	while (level_pins) {
   17116:	bb42      	cbnz	r2, 1716a <gpiote_event_handler+0xde>
}
   17118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1711c:	423a      	tst	r2, r7
   1711e:	d006      	beq.n	1712e <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   17120:	2100      	movs	r1, #0
   17122:	f008 001f 	and.w	r0, r8, #31
   17126:	f004 ff61 	bl	1bfec <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1712a:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
   1712e:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   17132:	007f      	lsls	r7, r7, #1
   17134:	e7c2      	b.n	170bc <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   17136:	4634      	mov	r4, r6
   17138:	e7c3      	b.n	170c2 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1713a:	4b16      	ldr	r3, [pc, #88]	; (17194 <gpiote_event_handler+0x108>)
   1713c:	6859      	ldr	r1, [r3, #4]
   1713e:	2900      	cmp	r1, #0
   17140:	d0df      	beq.n	17102 <gpiote_event_handler+0x76>
	return node->next;
   17142:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   17144:	4f15      	ldr	r7, [pc, #84]	; (1719c <gpiote_event_handler+0x110>)
   17146:	2d00      	cmp	r5, #0
   17148:	bf38      	it	cc
   1714a:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   1714c:	688a      	ldr	r2, [r1, #8]
   1714e:	4022      	ands	r2, r4
   17150:	d002      	beq.n	17158 <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
   17152:	684b      	ldr	r3, [r1, #4]
   17154:	4638      	mov	r0, r7
   17156:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17158:	2d00      	cmp	r5, #0
   1715a:	d0d2      	beq.n	17102 <gpiote_event_handler+0x76>
   1715c:	682b      	ldr	r3, [r5, #0]
   1715e:	2b00      	cmp	r3, #0
   17160:	bf38      	it	cc
   17162:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17164:	4629      	mov	r1, r5
   17166:	461d      	mov	r5, r3
   17168:	e7f0      	b.n	1714c <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
   1716a:	4215      	tst	r5, r2
   1716c:	d00c      	beq.n	17188 <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1716e:	6921      	ldr	r1, [r4, #16]
   17170:	40f1      	lsrs	r1, r6
   17172:	f001 0101 	and.w	r1, r1, #1
   17176:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1717a:	b2c9      	uxtb	r1, r1
   1717c:	f006 001f 	and.w	r0, r6, #31
   17180:	f004 ff34 	bl	1bfec <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   17184:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   17188:	3601      	adds	r6, #1
		bit <<= 1;
   1718a:	006d      	lsls	r5, r5, #1
   1718c:	e7c3      	b.n	17116 <gpiote_event_handler+0x8a>
   1718e:	bf00      	nop
   17190:	4000617c 	.word	0x4000617c
   17194:	20002590 	.word	0x20002590
   17198:	40006000 	.word	0x40006000
   1719c:	200006f0 	.word	0x200006f0

000171a0 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   171a0:	4802      	ldr	r0, [pc, #8]	; (171ac <pwm_nrfx_get_cycles_per_sec+0xc>)
   171a2:	2100      	movs	r1, #0
   171a4:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   171a8:	2000      	movs	r0, #0
   171aa:	4770      	bx	lr
   171ac:	00f42400 	.word	0x00f42400

000171b0 <pwm_nrfx_init>:
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
	const struct pwm_nrfx_config *config = dev->config;
   171b0:	6840      	ldr	r0, [r0, #4]
{
   171b2:	b508      	push	{r3, lr}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   171b4:	2300      	movs	r3, #0
   171b6:	461a      	mov	r2, r3
   171b8:	f100 0108 	add.w	r1, r0, #8
   171bc:	f001 f85e 	bl	1827c <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   171c0:	4b03      	ldr	r3, [pc, #12]	; (171d0 <pwm_nrfx_init+0x20>)
   171c2:	4298      	cmp	r0, r3
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

	return 0;
}
   171c4:	bf14      	ite	ne
   171c6:	f06f 000f 	mvnne.w	r0, #15
   171ca:	2000      	moveq	r0, #0
   171cc:	bd08      	pop	{r3, pc}
   171ce:	bf00      	nop
   171d0:	0bad0000 	.word	0x0bad0000

000171d4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   171d4:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   171d6:	794b      	ldrb	r3, [r1, #5]
   171d8:	2b01      	cmp	r3, #1
   171da:	d123      	bne.n	17224 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   171dc:	798b      	ldrb	r3, [r1, #6]
   171de:	2b03      	cmp	r3, #3
   171e0:	d120      	bne.n	17224 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   171e2:	79ca      	ldrb	r2, [r1, #7]
   171e4:	b122      	cbz	r2, 171f0 <uarte_nrfx_configure+0x1c>
   171e6:	2a01      	cmp	r2, #1
   171e8:	d11c      	bne.n	17224 <uarte_nrfx_configure+0x50>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   171ea:	6843      	ldr	r3, [r0, #4]
   171ec:	791b      	ldrb	r3, [r3, #4]
   171ee:	b1cb      	cbz	r3, 17224 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   171f0:	790c      	ldrb	r4, [r1, #4]
   171f2:	b114      	cbz	r4, 171fa <uarte_nrfx_configure+0x26>
   171f4:	2c02      	cmp	r4, #2
   171f6:	d115      	bne.n	17224 <uarte_nrfx_configure+0x50>
   171f8:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   171fa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   171fc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   171fe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   17202:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   17204:	d062      	beq.n	172cc <uarte_nrfx_configure+0xf8>
   17206:	d82b      	bhi.n	17260 <uarte_nrfx_configure+0x8c>
   17208:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1720c:	d061      	beq.n	172d2 <uarte_nrfx_configure+0xfe>
   1720e:	d814      	bhi.n	1723a <uarte_nrfx_configure+0x66>
   17210:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   17214:	d05f      	beq.n	172d6 <uarte_nrfx_configure+0x102>
   17216:	d808      	bhi.n	1722a <uarte_nrfx_configure+0x56>
   17218:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1721c:	d05e      	beq.n	172dc <uarte_nrfx_configure+0x108>
   1721e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   17222:	d05e      	beq.n	172e2 <uarte_nrfx_configure+0x10e>
   17224:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17228:	e04f      	b.n	172ca <uarte_nrfx_configure+0xf6>
   1722a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1722e:	d05b      	beq.n	172e8 <uarte_nrfx_configure+0x114>
   17230:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   17234:	d1f6      	bne.n	17224 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   17236:	4b37      	ldr	r3, [pc, #220]	; (17314 <uarte_nrfx_configure+0x140>)
   17238:	e03c      	b.n	172b4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   1723a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1723e:	d056      	beq.n	172ee <uarte_nrfx_configure+0x11a>
   17240:	d807      	bhi.n	17252 <uarte_nrfx_configure+0x7e>
   17242:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   17246:	d054      	beq.n	172f2 <uarte_nrfx_configure+0x11e>
   17248:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1724c:	d1ea      	bne.n	17224 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1724e:	4b32      	ldr	r3, [pc, #200]	; (17318 <uarte_nrfx_configure+0x144>)
   17250:	e030      	b.n	172b4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   17252:	f647 2612 	movw	r6, #31250	; 0x7a12
   17256:	42b3      	cmp	r3, r6
   17258:	d1e4      	bne.n	17224 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1725a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1725e:	e029      	b.n	172b4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   17260:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   17264:	d047      	beq.n	172f6 <uarte_nrfx_configure+0x122>
   17266:	d813      	bhi.n	17290 <uarte_nrfx_configure+0xbc>
   17268:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1726c:	d046      	beq.n	172fc <uarte_nrfx_configure+0x128>
   1726e:	d809      	bhi.n	17284 <uarte_nrfx_configure+0xb0>
   17270:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   17274:	42b3      	cmp	r3, r6
   17276:	d043      	beq.n	17300 <uarte_nrfx_configure+0x12c>
   17278:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1727c:	d1d2      	bne.n	17224 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1727e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   17282:	e017      	b.n	172b4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   17284:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   17288:	d1cc      	bne.n	17224 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1728a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1728e:	e011      	b.n	172b4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   17290:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   17294:	d037      	beq.n	17306 <uarte_nrfx_configure+0x132>
   17296:	d808      	bhi.n	172aa <uarte_nrfx_configure+0xd6>
   17298:	4e20      	ldr	r6, [pc, #128]	; (1731c <uarte_nrfx_configure+0x148>)
   1729a:	42b3      	cmp	r3, r6
   1729c:	d036      	beq.n	1730c <uarte_nrfx_configure+0x138>
   1729e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   172a2:	d1bf      	bne.n	17224 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   172a4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   172a8:	e004      	b.n	172b4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   172aa:	4e1d      	ldr	r6, [pc, #116]	; (17320 <uarte_nrfx_configure+0x14c>)
   172ac:	42b3      	cmp	r3, r6
   172ae:	d1b9      	bne.n	17224 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   172b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   172b4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   172b8:	68c3      	ldr	r3, [r0, #12]
   172ba:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   172bc:	4322      	orrs	r2, r4
   172be:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   172c0:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   172c4:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   172c8:	2000      	movs	r0, #0
}
   172ca:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   172cc:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   172d0:	e7f0      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   172d2:	4b14      	ldr	r3, [pc, #80]	; (17324 <uarte_nrfx_configure+0x150>)
   172d4:	e7ee      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   172d6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   172da:	e7eb      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
   172dc:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   172e0:	e7e8      	b.n	172b4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   172e2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   172e6:	e7e5      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   172e8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   172ec:	e7e2      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   172ee:	4b0e      	ldr	r3, [pc, #56]	; (17328 <uarte_nrfx_configure+0x154>)
   172f0:	e7e0      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   172f2:	4b0e      	ldr	r3, [pc, #56]	; (1732c <uarte_nrfx_configure+0x158>)
   172f4:	e7de      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   172f6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   172fa:	e7db      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   172fc:	4b0c      	ldr	r3, [pc, #48]	; (17330 <uarte_nrfx_configure+0x15c>)
   172fe:	e7d9      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   17300:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   17304:	e7d6      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   17306:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1730a:	e7d3      	b.n	172b4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1730c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17310:	e7d0      	b.n	172b4 <uarte_nrfx_configure+0xe0>
   17312:	bf00      	nop
   17314:	0013b000 	.word	0x0013b000
   17318:	004ea000 	.word	0x004ea000
   1731c:	0003d090 	.word	0x0003d090
   17320:	000f4240 	.word	0x000f4240
   17324:	00275000 	.word	0x00275000
   17328:	0075c000 	.word	0x0075c000
   1732c:	003af000 	.word	0x003af000
   17330:	013a9000 	.word	0x013a9000

00017334 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   17334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   17338:	68c7      	ldr	r7, [r0, #12]
{
   1733a:	4606      	mov	r6, r0
   1733c:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1733e:	f005 fb16 	bl	1c96e <k_is_in_isr>
   17342:	b9b8      	cbnz	r0, 17374 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   17344:	4b28      	ldr	r3, [pc, #160]	; (173e8 <uarte_nrfx_poll_out+0xb4>)
   17346:	781b      	ldrb	r3, [r3, #0]
   17348:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1734c:	6872      	ldr	r2, [r6, #4]
   1734e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   17350:	b193      	cbz	r3, 17378 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   17352:	f04f 0340 	mov.w	r3, #64	; 0x40
   17356:	f3ef 8411 	mrs	r4, BASEPRI
   1735a:	f383 8811 	msr	BASEPRI, r3
   1735e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   17362:	4630      	mov	r0, r6
   17364:	f004 ff98 	bl	1c298 <is_tx_ready>
   17368:	bb38      	cbnz	r0, 173ba <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1736a:	f384 8811 	msr	BASEPRI, r4
   1736e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   17372:	e7ee      	b.n	17352 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17374:	2301      	movs	r3, #1
   17376:	e7e9      	b.n	1734c <uarte_nrfx_poll_out+0x18>
   17378:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1737a:	4630      	mov	r0, r6
   1737c:	f004 ff8c 	bl	1c298 <is_tx_ready>
   17380:	b970      	cbnz	r0, 173a0 <uarte_nrfx_poll_out+0x6c>
   17382:	2001      	movs	r0, #1
   17384:	f005 f85d 	bl	1c442 <nrfx_busy_wait>
   17388:	3c01      	subs	r4, #1
   1738a:	d1f6      	bne.n	1737a <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1738c:	2100      	movs	r1, #0
   1738e:	2021      	movs	r0, #33	; 0x21
   17390:	f001 fd9c 	bl	18ecc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17394:	e7f0      	b.n	17378 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   17396:	f384 8811 	msr	BASEPRI, r4
   1739a:	f3bf 8f6f 	isb	sy
}
   1739e:	e7f5      	b.n	1738c <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   173a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   173a4:	f3ef 8411 	mrs	r4, BASEPRI
   173a8:	f383 8811 	msr	BASEPRI, r3
   173ac:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
   173b0:	4630      	mov	r0, r6
   173b2:	f004 ff71 	bl	1c298 <is_tx_ready>
   173b6:	2800      	cmp	r0, #0
   173b8:	d0ed      	beq.n	17396 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   173ba:	f807 8f0c 	strb.w	r8, [r7, #12]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   173be:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173c0:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   173c2:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   173c6:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173ca:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   173ce:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   173d2:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   173d6:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   173da:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   173dc:	f384 8811 	msr	BASEPRI, r4
   173e0:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   173e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   173e8:	20002ec3 	.word	0x20002ec3

000173ec <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   173ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173ee:	2200      	movs	r2, #0
   173f0:	4605      	mov	r5, r0
   173f2:	2101      	movs	r1, #1
   173f4:	2002      	movs	r0, #2
   173f6:	f7fb fea1 	bl	1313c <z_arm_irq_priority_set>
   173fa:	2002      	movs	r0, #2
   173fc:	f7fb fe8e 	bl	1311c <arch_irq_enable>
	return config->uarte_regs;
   17400:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   17402:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   17404:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   17406:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1740a:	2200      	movs	r2, #0
   1740c:	2140      	movs	r1, #64	; 0x40
   1740e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSEL.TXD = pseltxd;
   17412:	2006      	movs	r0, #6
	data->dev = dev;
   17414:	6035      	str	r5, [r6, #0]
   17416:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1741a:	2103      	movs	r1, #3
   1741c:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   17420:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   17424:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   17428:	2008      	movs	r0, #8
   1742a:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
   1742e:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
   17432:	2220      	movs	r2, #32
   17434:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   17438:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1743c:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.RTS = pselrts;
   1743e:	2305      	movs	r3, #5
   17440:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   17444:	2307      	movs	r3, #7
   17446:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1744a:	3104      	adds	r1, #4
   1744c:	4628      	mov	r0, r5
   1744e:	f7ff fec1 	bl	171d4 <uarte_nrfx_configure>
	if (err) {
   17452:	4607      	mov	r7, r0
   17454:	2800      	cmp	r0, #0
   17456:	d13c      	bne.n	174d2 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   17458:	686b      	ldr	r3, [r5, #4]
   1745a:	799b      	ldrb	r3, [r3, #6]
   1745c:	b1cb      	cbz	r3, 17492 <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1745e:	f106 000e 	add.w	r0, r6, #14
   17462:	f000 fed1 	bl	18208 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   17466:	4b1d      	ldr	r3, [pc, #116]	; (174dc <uarte_0_init+0xf0>)
   17468:	4298      	cmp	r0, r3
   1746a:	d134      	bne.n	174d6 <uarte_0_init+0xea>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1746c:	7bb0      	ldrb	r0, [r6, #14]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1746e:	00c3      	lsls	r3, r0, #3
   17470:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17474:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   17478:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1747c:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17480:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17484:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   17488:	4a15      	ldr	r2, [pc, #84]	; (174e0 <uarte_0_init+0xf4>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1748a:	2301      	movs	r3, #1
   1748c:	4083      	lsls	r3, r0
   1748e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17492:	2308      	movs	r3, #8
   17494:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17498:	2300      	movs	r3, #0
   1749a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1749e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   174a2:	f106 030d 	add.w	r3, r6, #13

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   174a6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   174aa:	2301      	movs	r3, #1
   174ac:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   174b0:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   174b2:	686b      	ldr	r3, [r5, #4]
   174b4:	799b      	ldrb	r3, [r3, #6]
   174b6:	b91b      	cbnz	r3, 174c0 <uarte_0_init+0xd4>
    p_reg->INTENSET = mask;
   174b8:	f44f 7380 	mov.w	r3, #256	; 0x100
   174bc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   174c0:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   174c2:	360c      	adds	r6, #12
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   174c4:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   174c8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   174cc:	2301      	movs	r3, #1
   174ce:	60a3      	str	r3, [r4, #8]
   174d0:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   174d2:	4638      	mov	r0, r7
   174d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
   174d6:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   174da:	e7fa      	b.n	174d2 <uarte_0_init+0xe6>
   174dc:	0bad0000 	.word	0x0bad0000
   174e0:	4001f000 	.word	0x4001f000

000174e4 <rng_driver_isr>:
		return errcode;
	}
}

static void rng_driver_isr(void *param)
{
   174e4:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	sdc_RNG_IRQHandler();
   174e6:	f7f7 fb08 	bl	eafa <sdc_RNG_IRQHandler>
	z_impl_k_sem_give(sem);
   174ea:	4802      	ldr	r0, [pc, #8]	; (174f4 <rng_driver_isr+0x10>)

	/* This sema wakes up the pending client buffer to fill it with new
	 * random values.
	 */
	k_sem_give(&rng_data.sem_sync);
}
   174ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   174f0:	f001 bd12 	b.w	18f18 <z_impl_k_sem_give>
   174f4:	200025b0 	.word	0x200025b0

000174f8 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   174f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   174fc:	4e13      	ldr	r6, [pc, #76]	; (1754c <dk_set_leds_state.part.0+0x54>)
   174fe:	4f14      	ldr	r7, [pc, #80]	; (17550 <dk_set_leds_state.part.0+0x58>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   17500:	4604      	mov	r4, r0
   17502:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   17504:	f04f 0900 	mov.w	r9, #0
   17508:	f04f 0801 	mov.w	r8, #1
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1750c:	fa24 f209 	lsr.w	r2, r4, r9
   17510:	fa25 f309 	lsr.w	r3, r5, r9
   17514:	4313      	orrs	r3, r2
   17516:	07d9      	lsls	r1, r3, #31
   17518:	d407      	bmi.n	1752a <dk_set_leds_state.part.0+0x32>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1751a:	f109 0901 	add.w	r9, r9, #1
   1751e:	f1b9 0f04 	cmp.w	r9, #4
   17522:	d1f3      	bne.n	1750c <dk_set_leds_state.part.0+0x14>
				return err;
			}
		}
	}

	return 0;
   17524:	2000      	movs	r0, #0
}
   17526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			int err = gpio_pin_set_raw(led_devs[i],
   1752a:	eb07 03c9 	add.w	r3, r7, r9, lsl #3
   1752e:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
   17532:	7919      	ldrb	r1, [r3, #4]
   17534:	07d3      	lsls	r3, r2, #31
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&port, *(uintptr_t *)&pins, K_SYSCALL_GPIO_PORT_SET_BITS_RAW);
	}
#endif
	compiler_barrier();
   17536:	fa08 f101 	lsl.w	r1, r8, r1
	return api->port_set_bits_raw(port, pins);
   1753a:	6883      	ldr	r3, [r0, #8]
   1753c:	bf54      	ite	pl
   1753e:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   17540:	691b      	ldrmi	r3, [r3, #16]
   17542:	4798      	blx	r3
			if (err) {
   17544:	2800      	cmp	r0, #0
   17546:	d0e8      	beq.n	1751a <dk_set_leds_state.part.0+0x22>
   17548:	e7ed      	b.n	17526 <dk_set_leds_state.part.0+0x2e>
   1754a:	bf00      	nop
   1754c:	200025c8 	.word	0x200025c8
   17550:	0001d4a4 	.word	0x0001d4a4

00017554 <dk_leds_init>:
{
   17554:	b570      	push	{r4, r5, r6, lr}
   17556:	4c0f      	ldr	r4, [pc, #60]	; (17594 <dk_leds_init+0x40>)
   17558:	4e0f      	ldr	r6, [pc, #60]	; (17598 <dk_leds_init+0x44>)
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1755a:	2500      	movs	r5, #0
		led_devs[i] = device_get_binding(led_pins[i].port);
   1755c:	6820      	ldr	r0, [r4, #0]
   1755e:	f000 ff9d 	bl	1849c <z_impl_device_get_binding>
   17562:	f846 0b04 	str.w	r0, [r6], #4
		if (!led_devs[i]) {
   17566:	b180      	cbz	r0, 1758a <dk_leds_init+0x36>
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   17568:	7921      	ldrb	r1, [r4, #4]
   1756a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1756e:	f004 ff0d 	bl	1c38c <gpio_pin_configure>
		if (err) {
   17572:	4603      	mov	r3, r0
   17574:	b958      	cbnz	r0, 1758e <dk_leds_init+0x3a>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   17576:	3501      	adds	r5, #1
   17578:	2d04      	cmp	r5, #4
   1757a:	f104 0408 	add.w	r4, r4, #8
   1757e:	d1ed      	bne.n	1755c <dk_leds_init+0x8>
}
   17580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17584:	210f      	movs	r1, #15
   17586:	f7ff bfb7 	b.w	174f8 <dk_set_leds_state.part.0>
			return -ENODEV;
   1758a:	f06f 0312 	mvn.w	r3, #18
}
   1758e:	4618      	mov	r0, r3
   17590:	bd70      	pop	{r4, r5, r6, pc}
   17592:	bf00      	nop
   17594:	0001d4a4 	.word	0x0001d4a4
   17598:	200025c8 	.word	0x200025c8

0001759c <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   1759c:	2804      	cmp	r0, #4
{
   1759e:	4603      	mov	r3, r0
   175a0:	460a      	mov	r2, r1
	if (led_idx > ARRAY_SIZE(led_pins)) {
   175a2:	d810      	bhi.n	175c6 <dk_set_led+0x2a>
		LOG_ERR("LED index out of the range");
		return -EINVAL;
	}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   175a4:	4909      	ldr	r1, [pc, #36]	; (175cc <dk_set_led+0x30>)
   175a6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   175aa:	4909      	ldr	r1, [pc, #36]	; (175d0 <dk_set_led+0x34>)
   175ac:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   175b0:	7919      	ldrb	r1, [r3, #4]
   175b2:	2301      	movs	r3, #1
   175b4:	fa03 f101 	lsl.w	r1, r3, r1
	if (value != 0)	{
   175b8:	b912      	cbnz	r2, 175c0 <dk_set_led+0x24>
	return api->port_set_bits_raw(port, pins);
   175ba:	6883      	ldr	r3, [r0, #8]
   175bc:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   175be:	4718      	bx	r3
   175c0:	6883      	ldr	r3, [r0, #8]
   175c2:	691b      	ldr	r3, [r3, #16]
   175c4:	e7fb      	b.n	175be <dk_set_led+0x22>
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   175c6:	f06f 0015 	mvn.w	r0, #21
   175ca:	4770      	bx	lr
   175cc:	200025c8 	.word	0x200025c8
   175d0:	0001d4a4 	.word	0x0001d4a4

000175d4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_SEM_DEFINE(mpsl_lock, 1, 1);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   175d4:	4602      	mov	r2, r0
   175d6:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   175d8:	4801      	ldr	r0, [pc, #4]	; (175e0 <multithreading_lock_acquire+0xc>)
   175da:	f001 bcc3 	b.w	18f64 <z_impl_k_sem_take>
   175de:	bf00      	nop
   175e0:	20000768 	.word	0x20000768

000175e4 <multithreading_lock_release>:
	z_impl_k_sem_give(sem);
   175e4:	4801      	ldr	r0, [pc, #4]	; (175ec <multithreading_lock_release+0x8>)
   175e6:	f001 bc97 	b.w	18f18 <z_impl_k_sem_give>
   175ea:	bf00      	nop
   175ec:	20000768 	.word	0x20000768

000175f0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   175f0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   175f2:	4804      	ldr	r0, [pc, #16]	; (17604 <hci_driver_init+0x14>)
   175f4:	f7fc ff04 	bl	14400 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   175f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   175fc:	4802      	ldr	r0, [pc, #8]	; (17608 <hci_driver_init+0x18>)
   175fe:	f7ec ba79 	b.w	3af4 <sdc_init>
   17602:	bf00      	nop
   17604:	0001d4c4 	.word	0x0001d4c4
   17608:	0001c3bf 	.word	0x0001c3bf

0001760c <recv_thread>:
{
   1760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   1760e:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   17610:	4f34      	ldr	r7, [pc, #208]	; (176e4 <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   17612:	4c35      	ldr	r4, [pc, #212]	; (176e8 <recv_thread+0xdc>)
	bool received_evt = false;
   17614:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   17616:	b93e      	cbnz	r6, 17628 <recv_thread+0x1c>
   17618:	b935      	cbnz	r5, 17628 <recv_thread+0x1c>
   1761a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1761e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17622:	4638      	mov	r0, r7
   17624:	f001 fc9e 	bl	18f64 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   17628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1762c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17630:	f7ff ffd0 	bl	175d4 <multithreading_lock_acquire>
	if (!errcode) {
   17634:	b158      	cbz	r0, 1764e <recv_thread+0x42>
		return false;
   17636:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   17638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1763c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17640:	f7ff ffc8 	bl	175d4 <multithreading_lock_acquire>
	if (!errcode) {
   17644:	b380      	cbz	r0, 176a8 <recv_thread+0x9c>
		return false;
   17646:	2500      	movs	r5, #0
	z_impl_k_yield();
   17648:	f001 fbf2 	bl	18e30 <z_impl_k_yield>
}
   1764c:	e7e3      	b.n	17616 <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1764e:	4826      	ldr	r0, [pc, #152]	; (176e8 <recv_thread+0xdc>)
   17650:	f000 fbd2 	bl	17df8 <hci_internal_evt_get>
   17654:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   17656:	f7ff ffc5 	bl	175e4 <multithreading_lock_release>
	if (errcode) {
   1765a:	2d00      	cmp	r5, #0
   1765c:	d1eb      	bne.n	17636 <recv_thread+0x2a>
	switch (hdr->evt) {
   1765e:	7820      	ldrb	r0, [r4, #0]
   17660:	283e      	cmp	r0, #62	; 0x3e
   17662:	d007      	beq.n	17674 <recv_thread+0x68>
   17664:	28ff      	cmp	r0, #255	; 0xff
   17666:	d01c      	beq.n	176a2 <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   17668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1766c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17670:	2100      	movs	r1, #0
   17672:	e007      	b.n	17684 <recv_thread+0x78>
		switch (me->subevent) {
   17674:	78a3      	ldrb	r3, [r4, #2]
   17676:	2b02      	cmp	r3, #2
   17678:	d001      	beq.n	1767e <recv_thread+0x72>
   1767a:	2b0d      	cmp	r3, #13
		switch (subevent) {
   1767c:	d1f4      	bne.n	17668 <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1767e:	2200      	movs	r2, #0
   17680:	2300      	movs	r3, #0
   17682:	2101      	movs	r1, #1
   17684:	f7fd fc2a 	bl	14edc <bt_buf_get_evt>
	if (!evt_buf) {
   17688:	4605      	mov	r5, r0
   1768a:	b140      	cbz	r0, 1769e <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1768c:	7862      	ldrb	r2, [r4, #1]
   1768e:	4621      	mov	r1, r4
   17690:	3202      	adds	r2, #2
   17692:	3008      	adds	r0, #8
   17694:	f004 fc6d 	bl	1bf72 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   17698:	4628      	mov	r0, r5
   1769a:	f7fc fe8f 	bl	143bc <bt_recv>
	return true;
   1769e:	2601      	movs	r6, #1
   176a0:	e7ca      	b.n	17638 <recv_thread+0x2c>
		switch (subevent) {
   176a2:	78a3      	ldrb	r3, [r4, #2]
   176a4:	2b80      	cmp	r3, #128	; 0x80
   176a6:	e7e9      	b.n	1767c <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   176a8:	480f      	ldr	r0, [pc, #60]	; (176e8 <recv_thread+0xdc>)
   176aa:	f7f7 fd30 	bl	f10e <sdc_hci_data_get>
   176ae:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   176b0:	f7ff ff98 	bl	175e4 <multithreading_lock_release>
	if (errcode) {
   176b4:	2d00      	cmp	r5, #0
   176b6:	d1c6      	bne.n	17646 <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   176b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   176bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   176c0:	2003      	movs	r0, #3
   176c2:	f7fd fbd5 	bl	14e70 <bt_buf_get_rx>
	if (!data_buf) {
   176c6:	4605      	mov	r5, r0
   176c8:	b908      	cbnz	r0, 176ce <recv_thread+0xc2>
	return true;
   176ca:	2501      	movs	r5, #1
   176cc:	e7bc      	b.n	17648 <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   176ce:	8862      	ldrh	r2, [r4, #2]
   176d0:	4621      	mov	r1, r4
   176d2:	3204      	adds	r2, #4
   176d4:	3008      	adds	r0, #8
   176d6:	f004 fc4c 	bl	1bf72 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   176da:	4628      	mov	r0, r5
   176dc:	f7fc fe6e 	bl	143bc <bt_recv>
   176e0:	e7f3      	b.n	176ca <recv_thread+0xbe>
   176e2:	bf00      	nop
   176e4:	20000780 	.word	0x20000780
   176e8:	20002a66 	.word	0x20002a66

000176ec <hci_driver_open>:
{
   176ec:	b510      	push	{r4, lr}
   176ee:	b08e      	sub	sp, #56	; 0x38
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   176f0:	2200      	movs	r2, #0
   176f2:	2300      	movs	r3, #0
   176f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   176f8:	2400      	movs	r4, #0
   176fa:	f06f 0309 	mvn.w	r3, #9
   176fe:	e9cd 3403 	strd	r3, r4, [sp, #12]
   17702:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17706:	4b33      	ldr	r3, [pc, #204]	; (177d4 <hci_driver_open+0xe8>)
   17708:	4933      	ldr	r1, [pc, #204]	; (177d8 <hci_driver_open+0xec>)
   1770a:	9400      	str	r4, [sp, #0]
   1770c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17710:	4832      	ldr	r0, [pc, #200]	; (177dc <hci_driver_open+0xf0>)
   17712:	f001 fc9b 	bl	1904c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   17716:	4932      	ldr	r1, [pc, #200]	; (177e0 <hci_driver_open+0xf4>)
   17718:	4830      	ldr	r0, [pc, #192]	; (177dc <hci_driver_open+0xf0>)
   1771a:	f005 f932 	bl	1c982 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1771e:	a809      	add	r0, sp, #36	; 0x24
   17720:	f7ec f98c 	bl	3a3c <sdc_build_revision_get>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17724:	aa08      	add	r2, sp, #32
   17726:	2101      	movs	r1, #1
   17728:	4620      	mov	r0, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   1772a:	f88d 4020 	strb.w	r4, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1772e:	f7ec f993 	bl	3a58 <sdc_cfg_set>
	if (required_memory < 0) {
   17732:	2800      	cmp	r0, #0
   17734:	db27      	blt.n	17786 <hci_driver_open+0x9a>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   17736:	2301      	movs	r3, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17738:	aa08      	add	r2, sp, #32
   1773a:	2102      	movs	r1, #2
   1773c:	4620      	mov	r0, r4
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1773e:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17742:	f7ec f989 	bl	3a58 <sdc_cfg_set>
	if (required_memory < 0) {
   17746:	2800      	cmp	r0, #0
   17748:	db1d      	blt.n	17786 <hci_driver_open+0x9a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1774a:	4b26      	ldr	r3, [pc, #152]	; (177e4 <hci_driver_open+0xf8>)
   1774c:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1774e:	aa08      	add	r2, sp, #32
   17750:	2103      	movs	r1, #3
   17752:	4620      	mov	r0, r4
   17754:	f7ec f980 	bl	3a58 <sdc_cfg_set>
	if (required_memory < 0) {
   17758:	2800      	cmp	r0, #0
   1775a:	db14      	blt.n	17786 <hci_driver_open+0x9a>
	cfg.event_length.event_length_us =
   1775c:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17760:	aa08      	add	r2, sp, #32
   17762:	2104      	movs	r1, #4
   17764:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   17766:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17768:	f7ec f976 	bl	3a58 <sdc_cfg_set>
	if (required_memory < 0) {
   1776c:	2800      	cmp	r0, #0
   1776e:	db0a      	blt.n	17786 <hci_driver_open+0x9a>
	if (required_memory > sizeof(sdc_mempool)) {
   17770:	f5b0 7f71 	cmp.w	r0, #964	; 0x3c4
   17774:	dd09      	ble.n	1778a <hci_driver_open+0x9e>
		k_panic();
   17776:	4040      	eors	r0, r0
   17778:	f380 8811 	msr	BASEPRI, r0
   1777c:	f04f 0004 	mov.w	r0, #4
   17780:	df02      	svc	2
		return -ENOMEM;
   17782:	f06f 000b 	mvn.w	r0, #11
}
   17786:	b00e      	add	sp, #56	; 0x38
   17788:	bd10      	pop	{r4, pc}
			err = sdc_support_adv();
   1778a:	f7f7 f9b8 	bl	eafe <sdc_support_adv>
			if (err) {
   1778e:	b110      	cbz	r0, 17796 <hci_driver_open+0xaa>
				return -ENOTSUP;
   17790:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17794:	e7f7      	b.n	17786 <hci_driver_open+0x9a>
		err = sdc_support_slave();
   17796:	f7f7 f9c1 	bl	eb1c <sdc_support_slave>
		if (err) {
   1779a:	2800      	cmp	r0, #0
   1779c:	d1f8      	bne.n	17790 <hci_driver_open+0xa4>
		err = sdc_support_dle();
   1779e:	f7f7 f9b3 	bl	eb08 <sdc_support_dle>
		if (err) {
   177a2:	2800      	cmp	r0, #0
   177a4:	d1f4      	bne.n	17790 <hci_driver_open+0xa4>
		err = sdc_support_le_2m_phy();
   177a6:	f7f7 f9b4 	bl	eb12 <sdc_support_le_2m_phy>
		if (err) {
   177aa:	2800      	cmp	r0, #0
   177ac:	d1f0      	bne.n	17790 <hci_driver_open+0xa4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   177ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   177b6:	f7ff ff0d 	bl	175d4 <multithreading_lock_acquire>
	if (!err) {
   177ba:	4604      	mov	r4, r0
   177bc:	b930      	cbnz	r0, 177cc <hci_driver_open+0xe0>
		err = sdc_enable(host_signal, sdc_mempool);
   177be:	490a      	ldr	r1, [pc, #40]	; (177e8 <hci_driver_open+0xfc>)
   177c0:	480a      	ldr	r0, [pc, #40]	; (177ec <hci_driver_open+0x100>)
   177c2:	f7ec f975 	bl	3ab0 <sdc_enable>
   177c6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   177c8:	f7ff ff0c 	bl	175e4 <multithreading_lock_release>
	if (err < 0) {
   177cc:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   177d0:	e7d9      	b.n	17786 <hci_driver_open+0x9a>
   177d2:	bf00      	nop
   177d4:	0001760d 	.word	0x0001760d
   177d8:	20003920 	.word	0x20003920
   177dc:	20002110 	.word	0x20002110
   177e0:	0001d8b8 	.word	0x0001d8b8
   177e4:	03031b1b 	.word	0x03031b1b
   177e8:	20002ab2 	.word	0x20002ab2
   177ec:	000177f1 	.word	0x000177f1

000177f0 <host_signal>:
	z_impl_k_sem_give(sem);
   177f0:	4801      	ldr	r0, [pc, #4]	; (177f8 <host_signal+0x8>)
   177f2:	f001 bb91 	b.w	18f18 <z_impl_k_sem_give>
   177f6:	bf00      	nop
   177f8:	20000780 	.word	0x20000780

000177fc <hci_driver_send>:
{
   177fc:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   177fe:	8983      	ldrh	r3, [r0, #12]
{
   17800:	4605      	mov	r5, r0
	if (!buf->len) {
   17802:	b383      	cbz	r3, 17866 <hci_driver_send+0x6a>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   17804:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   17806:	b1ab      	cbz	r3, 17834 <hci_driver_send+0x38>
   17808:	2b02      	cmp	r3, #2
   1780a:	d12c      	bne.n	17866 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1780c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17810:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17814:	f7ff fede 	bl	175d4 <multithreading_lock_acquire>
	if (!errcode) {
   17818:	4604      	mov	r4, r0
   1781a:	b948      	cbnz	r0, 17830 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1781c:	68a8      	ldr	r0, [r5, #8]
   1781e:	f7f7 fc83 	bl	f128 <sdc_hci_data_put>
   17822:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17824:	f7ff fede 	bl	175e4 <multithreading_lock_release>
		if (errcode) {
   17828:	b1c4      	cbz	r4, 1785c <hci_driver_send+0x60>
   1782a:	4810      	ldr	r0, [pc, #64]	; (1786c <hci_driver_send+0x70>)
   1782c:	f001 fb74 	bl	18f18 <z_impl_k_sem_give>
}
   17830:	4620      	mov	r0, r4
   17832:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   17834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1783c:	f7ff feca 	bl	175d4 <multithreading_lock_acquire>
	if (!errcode) {
   17840:	4604      	mov	r4, r0
   17842:	2800      	cmp	r0, #0
   17844:	d1f4      	bne.n	17830 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   17846:	68a8      	ldr	r0, [r5, #8]
   17848:	f000 f812 	bl	17870 <hci_internal_cmd_put>
   1784c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1784e:	f7ff fec9 	bl	175e4 <multithreading_lock_release>
	if (errcode) {
   17852:	2c00      	cmp	r4, #0
   17854:	d1ec      	bne.n	17830 <hci_driver_send+0x34>
   17856:	4805      	ldr	r0, [pc, #20]	; (1786c <hci_driver_send+0x70>)
   17858:	f001 fb5e 	bl	18f18 <z_impl_k_sem_give>
		net_buf_unref(buf);
   1785c:	4628      	mov	r0, r5
   1785e:	f7ff fa85 	bl	16d6c <net_buf_unref>
   17862:	2400      	movs	r4, #0
   17864:	e7e4      	b.n	17830 <hci_driver_send+0x34>
	switch (type) {
   17866:	f06f 0415 	mvn.w	r4, #21
   1786a:	e7e1      	b.n	17830 <hci_driver_send+0x34>
   1786c:	20000780 	.word	0x20000780

00017870 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   17870:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   17872:	4c8a      	ldr	r4, [pc, #552]	; (17a9c <hci_internal_cmd_put+0x22c>)
   17874:	7823      	ldrb	r3, [r4, #0]
   17876:	2b00      	cmp	r3, #0
   17878:	f040 82b8 	bne.w	17dec <hci_internal_cmd_put+0x57c>
	return ((uint16_t)src[1] << 8) | src[0];
   1787c:	7843      	ldrb	r3, [r0, #1]
   1787e:	7805      	ldrb	r5, [r0, #0]
   17880:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   17884:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   17888:	b22e      	sxth	r6, r5
   1788a:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1788e:	d20d      	bcs.n	178ac <hci_internal_cmd_put+0x3c>
   17890:	b17b      	cbz	r3, 178b2 <hci_internal_cmd_put+0x42>
   17892:	3b01      	subs	r3, #1
   17894:	2b07      	cmp	r3, #7
   17896:	d80c      	bhi.n	178b2 <hci_internal_cmd_put+0x42>
   17898:	e8df f013 	tbh	[pc, r3, lsl #1]
   1789c:	000b000e 	.word	0x000b000e
   178a0:	0060002c 	.word	0x0060002c
   178a4:	000b000b 	.word	0x000b000b
   178a8:	0104000b 	.word	0x0104000b
   178ac:	2b3f      	cmp	r3, #63	; 0x3f
   178ae:	f000 821d 	beq.w	17cec <hci_internal_cmd_put+0x47c>
   178b2:	2304      	movs	r3, #4
   178b4:	2001      	movs	r0, #1
   178b6:	e254      	b.n	17d62 <hci_internal_cmd_put+0x4f2>
	switch (opcode)	{
   178b8:	f240 4306 	movw	r3, #1030	; 0x406
   178bc:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   178be:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   178c2:	d005      	beq.n	178d0 <hci_internal_cmd_put+0x60>
   178c4:	f240 431d 	movw	r3, #1053	; 0x41d
   178c8:	429e      	cmp	r6, r3
   178ca:	d010      	beq.n	178ee <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   178cc:	2001      	movs	r0, #1
   178ce:	e001      	b.n	178d4 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   178d0:	f7f7 fd3d 	bl	f34e <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   178d4:	230f      	movs	r3, #15
   178d6:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   178d8:	2304      	movs	r3, #4
   178da:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   178dc:	2301      	movs	r3, #1
	evt_data->status = status_code;
   178de:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   178e0:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   178e2:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   178e6:	2301      	movs	r3, #1
   178e8:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   178ea:	2000      	movs	r0, #0
}
   178ec:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   178ee:	f7f7 fd30 	bl	f352 <sdc_hci_cmd_lc_read_remote_version_information>
   178f2:	e7ef      	b.n	178d4 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   178f4:	f640 4363 	movw	r3, #3171	; 0xc63
   178f8:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   178fa:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   178fe:	d025      	beq.n	1794c <hci_internal_cmd_put+0xdc>
   17900:	dc0f      	bgt.n	17922 <hci_internal_cmd_put+0xb2>
   17902:	f640 4303 	movw	r3, #3075	; 0xc03
   17906:	429e      	cmp	r6, r3
   17908:	d018      	beq.n	1793c <hci_internal_cmd_put+0xcc>
   1790a:	f640 432d 	movw	r3, #3117	; 0xc2d
   1790e:	429e      	cmp	r6, r3
   17910:	d017      	beq.n	17942 <hci_internal_cmd_put+0xd2>
   17912:	f640 4301 	movw	r3, #3073	; 0xc01
   17916:	429e      	cmp	r6, r3
   17918:	d1d8      	bne.n	178cc <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1791a:	f7f7 fc21 	bl	f160 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out +=
   1791e:	2304      	movs	r3, #4
   17920:	e0b8      	b.n	17a94 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   17922:	f640 437b 	movw	r3, #3195	; 0xc7b
   17926:	429e      	cmp	r6, r3
   17928:	d013      	beq.n	17952 <hci_internal_cmd_put+0xe2>
   1792a:	f640 437c 	movw	r3, #3196	; 0xc7c
   1792e:	429e      	cmp	r6, r3
   17930:	d1cc      	bne.n	178cc <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   17932:	495b      	ldr	r1, [pc, #364]	; (17aa0 <hci_internal_cmd_put+0x230>)
   17934:	f7f7 fc1e 	bl	f174 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   17938:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1793a:	e0ab      	b.n	17a94 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1793c:	f7ec fa76 	bl	3e2c <sdc_hci_cmd_cb_reset>
   17940:	e7ed      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   17942:	4957      	ldr	r1, [pc, #348]	; (17aa0 <hci_internal_cmd_put+0x230>)
   17944:	f7f7 fc0a 	bl	f15c <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   17948:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1794a:	e0a3      	b.n	17a94 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1794c:	f7f7 fc0d 	bl	f16a <sdc_hci_cmd_cb_set_event_mask_page_2>
   17950:	e7e5      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   17952:	4953      	ldr	r1, [pc, #332]	; (17aa0 <hci_internal_cmd_put+0x230>)
   17954:	f7f7 fc00 	bl	f158 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   17958:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1795a:	e09b      	b.n	17a94 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1795c:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   17960:	3e01      	subs	r6, #1
   17962:	2e08      	cmp	r6, #8
   17964:	d8b2      	bhi.n	178cc <hci_internal_cmd_put+0x5c>
   17966:	a301      	add	r3, pc, #4	; (adr r3, 1796c <hci_internal_cmd_put+0xfc>)
   17968:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1796c:	00017991 	.word	0x00017991
   17970:	0001799b 	.word	0x0001799b
   17974:	00017a85 	.word	0x00017a85
   17978:	000178cd 	.word	0x000178cd
   1797c:	000178cd 	.word	0x000178cd
   17980:	000178cd 	.word	0x000178cd
   17984:	000178cd 	.word	0x000178cd
   17988:	000178cd 	.word	0x000178cd
   1798c:	00017a8d 	.word	0x00017a8d
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   17990:	4843      	ldr	r0, [pc, #268]	; (17aa0 <hci_internal_cmd_put+0x230>)
   17992:	f7f7 fc8f 	bl	f2b4 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   17996:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   17998:	e07c      	b.n	17a94 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1799a:	4841      	ldr	r0, [pc, #260]	; (17aa0 <hci_internal_cmd_put+0x230>)
   1799c:	222e      	movs	r2, #46	; 0x2e
   1799e:	2100      	movs	r1, #0
   179a0:	f002 fcc9 	bl	1a336 <memset>
	cmds->hci_disconnect = 1;
   179a4:	79e3      	ldrb	r3, [r4, #7]
   179a6:	f043 0320 	orr.w	r3, r3, #32
   179aa:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   179ac:	7a63      	ldrb	r3, [r4, #9]
   179ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   179b2:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   179b4:	7b23      	ldrb	r3, [r4, #12]
   179b6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   179ba:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   179bc:	7c63      	ldrb	r3, [r4, #17]
   179be:	f043 0304 	orr.w	r3, r3, #4
   179c2:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   179c4:	7d63      	ldrb	r3, [r4, #21]
   179c6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   179ca:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   179ce:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   179d0:	7da3      	ldrb	r3, [r4, #22]
   179d2:	f043 0302 	orr.w	r3, r3, #2
   179d6:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   179d8:	7f63      	ldrb	r3, [r4, #29]
   179da:	f043 0304 	orr.w	r3, r3, #4
   179de:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   179e0:	f894 3020 	ldrb.w	r3, [r4, #32]
   179e4:	f063 0308 	orn	r3, r3, #8
   179e8:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   179ec:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   179f0:	f063 033c 	orn	r3, r3, #60	; 0x3c
   179f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   179f8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   179fc:	f063 030c 	orn	r3, r3, #12
   17a00:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   17a04:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   17a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   17a0c:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   17a10:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   17a14:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   17a18:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   17a1c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   17a20:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   17a24:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   17a28:	f063 033f 	orn	r3, r3, #63	; 0x3f
   17a2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   17a30:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   17a34:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   17a38:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   17a3c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   17a40:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   17a44:	f063 0301 	orn	r3, r3, #1
   17a48:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   17a4c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   17a50:	f043 0301 	orr.w	r3, r3, #1
   17a54:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   17a58:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   17a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17a60:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   17a64:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   17a68:	f043 0304 	orr.w	r3, r3, #4
   17a6c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   17a70:	2344      	movs	r3, #68	; 0x44
		return 0;
   17a72:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   17a74:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   17a76:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   17a78:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   17a7a:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   17a7c:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   17a7e:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   17a80:	71a0      	strb	r0, [r4, #6]
}
   17a82:	e730      	b.n	178e6 <hci_internal_cmd_put+0x76>
		return sdc_hci_cmd_ip_read_local_supported_features((void *)event_out_params);
   17a84:	4806      	ldr	r0, [pc, #24]	; (17aa0 <hci_internal_cmd_put+0x230>)
   17a86:	f7f7 fc13 	bl	f2b0 <sdc_hci_cmd_ip_read_local_supported_features>
   17a8a:	e784      	b.n	17996 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   17a8c:	4804      	ldr	r0, [pc, #16]	; (17aa0 <hci_internal_cmd_put+0x230>)
   17a8e:	f7f7 fc0d 	bl	f2ac <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   17a92:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   17a94:	2801      	cmp	r0, #1
   17a96:	d1ed      	bne.n	17a74 <hci_internal_cmd_put+0x204>
   17a98:	e71c      	b.n	178d4 <hci_internal_cmd_put+0x64>
   17a9a:	bf00      	nop
   17a9c:	20002e76 	.word	0x20002e76
   17aa0:	20002e7d 	.word	0x20002e7d
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17aa4:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   17aa8:	3e01      	subs	r6, #1
   17aaa:	3003      	adds	r0, #3
	switch (opcode)	{
   17aac:	2e4d      	cmp	r6, #77	; 0x4d
   17aae:	f63f af0d 	bhi.w	178cc <hci_internal_cmd_put+0x5c>
   17ab2:	a301      	add	r3, pc, #4	; (adr r3, 17ab8 <hci_internal_cmd_put+0x248>)
   17ab4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17ab8:	00017bf1 	.word	0x00017bf1
   17abc:	00017bf7 	.word	0x00017bf7
   17ac0:	00017bff 	.word	0x00017bff
   17ac4:	000178cd 	.word	0x000178cd
   17ac8:	00017c07 	.word	0x00017c07
   17acc:	00017c0d 	.word	0x00017c0d
   17ad0:	00017c13 	.word	0x00017c13
   17ad4:	00017c1d 	.word	0x00017c1d
   17ad8:	00017c23 	.word	0x00017c23
   17adc:	00017c29 	.word	0x00017c29
   17ae0:	000178cd 	.word	0x000178cd
   17ae4:	000178cd 	.word	0x000178cd
   17ae8:	000178cd 	.word	0x000178cd
   17aec:	000178cd 	.word	0x000178cd
   17af0:	00017c2f 	.word	0x00017c2f
   17af4:	00017c37 	.word	0x00017c37
   17af8:	00017c3d 	.word	0x00017c3d
   17afc:	00017c43 	.word	0x00017c43
   17b00:	000178cd 	.word	0x000178cd
   17b04:	000178cd 	.word	0x000178cd
   17b08:	00017c49 	.word	0x00017c49
   17b0c:	00017c53 	.word	0x00017c53
   17b10:	00017c59 	.word	0x00017c59
   17b14:	00017c63 	.word	0x00017c63
   17b18:	000178cd 	.word	0x000178cd
   17b1c:	00017c6b 	.word	0x00017c6b
   17b20:	00017c73 	.word	0x00017c73
   17b24:	00017c7b 	.word	0x00017c7b
   17b28:	000178cd 	.word	0x000178cd
   17b2c:	000178cd 	.word	0x000178cd
   17b30:	000178cd 	.word	0x000178cd
   17b34:	000178cd 	.word	0x000178cd
   17b38:	000178cd 	.word	0x000178cd
   17b3c:	00017c87 	.word	0x00017c87
   17b40:	00017c8f 	.word	0x00017c8f
   17b44:	00017c97 	.word	0x00017c97
   17b48:	000178cd 	.word	0x000178cd
   17b4c:	000178cd 	.word	0x000178cd
   17b50:	00017c9d 	.word	0x00017c9d
   17b54:	00017ca3 	.word	0x00017ca3
   17b58:	00017ca9 	.word	0x00017ca9
   17b5c:	00017caf 	.word	0x00017caf
   17b60:	000178cd 	.word	0x000178cd
   17b64:	000178cd 	.word	0x000178cd
   17b68:	00017cb7 	.word	0x00017cb7
   17b6c:	00017cbd 	.word	0x00017cbd
   17b70:	00017cc3 	.word	0x00017cc3
   17b74:	00017ccb 	.word	0x00017ccb
   17b78:	00017cd3 	.word	0x00017cd3
   17b7c:	00017cd9 	.word	0x00017cd9
   17b80:	000178cd 	.word	0x000178cd
   17b84:	000178cd 	.word	0x000178cd
   17b88:	000178cd 	.word	0x000178cd
   17b8c:	000178cd 	.word	0x000178cd
   17b90:	000178cd 	.word	0x000178cd
   17b94:	000178cd 	.word	0x000178cd
   17b98:	000178cd 	.word	0x000178cd
   17b9c:	000178cd 	.word	0x000178cd
   17ba0:	000178cd 	.word	0x000178cd
   17ba4:	000178cd 	.word	0x000178cd
   17ba8:	000178cd 	.word	0x000178cd
   17bac:	000178cd 	.word	0x000178cd
   17bb0:	000178cd 	.word	0x000178cd
   17bb4:	000178cd 	.word	0x000178cd
   17bb8:	000178cd 	.word	0x000178cd
   17bbc:	000178cd 	.word	0x000178cd
   17bc0:	000178cd 	.word	0x000178cd
   17bc4:	000178cd 	.word	0x000178cd
   17bc8:	000178cd 	.word	0x000178cd
   17bcc:	000178cd 	.word	0x000178cd
   17bd0:	000178cd 	.word	0x000178cd
   17bd4:	000178cd 	.word	0x000178cd
   17bd8:	000178cd 	.word	0x000178cd
   17bdc:	000178cd 	.word	0x000178cd
   17be0:	00017cdf 	.word	0x00017cdf
   17be4:	000178cd 	.word	0x000178cd
   17be8:	000178cd 	.word	0x000178cd
   17bec:	00017ce7 	.word	0x00017ce7
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   17bf0:	f7f7 fb9c 	bl	f32c <sdc_hci_cmd_le_set_event_mask>
   17bf4:	e693      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   17bf6:	487f      	ldr	r0, [pc, #508]	; (17df4 <hci_internal_cmd_put+0x584>)
   17bf8:	f7f7 fb74 	bl	f2e4 <sdc_hci_cmd_le_read_buffer_size>
   17bfc:	e6a4      	b.n	17948 <hci_internal_cmd_put+0xd8>
		return sdc_hci_cmd_le_read_local_supported_features((void *)event_out_params);
   17bfe:	487d      	ldr	r0, [pc, #500]	; (17df4 <hci_internal_cmd_put+0x584>)
   17c00:	f7f7 fb74 	bl	f2ec <sdc_hci_cmd_le_read_local_supported_features>
   17c04:	e6c7      	b.n	17996 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   17c06:	f7f7 fb9a 	bl	f33e <sdc_hci_cmd_le_set_random_address>
   17c0a:	e688      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   17c0c:	f7f7 fb88 	bl	f320 <sdc_hci_cmd_le_set_adv_params>
   17c10:	e685      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   17c12:	4878      	ldr	r0, [pc, #480]	; (17df4 <hci_internal_cmd_put+0x584>)
   17c14:	f7f7 fb64 	bl	f2e0 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   17c18:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   17c1a:	e73b      	b.n	17a94 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   17c1c:	f7f7 fb7c 	bl	f318 <sdc_hci_cmd_le_set_adv_data>
   17c20:	e67d      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   17c22:	f7f7 fb90 	bl	f346 <sdc_hci_cmd_le_set_scan_response_data>
   17c26:	e67a      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   17c28:	f7f7 fb78 	bl	f31c <sdc_hci_cmd_le_set_adv_enable>
   17c2c:	e677      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   17c2e:	4871      	ldr	r0, [pc, #452]	; (17df4 <hci_internal_cmd_put+0x584>)
   17c30:	f7f7 fb6a 	bl	f308 <sdc_hci_cmd_le_read_white_list_size>
   17c34:	e7f0      	b.n	17c18 <hci_internal_cmd_put+0x3a8>
		return sdc_hci_cmd_le_clear_white_list();
   17c36:	f7f7 fb45 	bl	f2c4 <sdc_hci_cmd_le_clear_white_list>
   17c3a:	e670      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   17c3c:	f7f7 fb3e 	bl	f2bc <sdc_hci_cmd_le_add_device_to_white_list>
   17c40:	e66d      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   17c42:	f7f7 fb65 	bl	f310 <sdc_hci_cmd_le_remove_device_from_white_list>
   17c46:	e66a      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   17c48:	496a      	ldr	r1, [pc, #424]	; (17df4 <hci_internal_cmd_put+0x584>)
   17c4a:	f7f7 fb4d 	bl	f2e8 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   17c4e:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   17c50:	e720      	b.n	17a94 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   17c52:	f7f7 fb51 	bl	f2f8 <sdc_hci_cmd_le_read_remote_features>
   17c56:	e63d      	b.n	178d4 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   17c58:	4966      	ldr	r1, [pc, #408]	; (17df4 <hci_internal_cmd_put+0x584>)
   17c5a:	f7f7 fb35 	bl	f2c8 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   17c5e:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   17c60:	e718      	b.n	17a94 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   17c62:	4864      	ldr	r0, [pc, #400]	; (17df4 <hci_internal_cmd_put+0x584>)
   17c64:	f7f7 fb3a 	bl	f2dc <sdc_hci_cmd_le_rand>
   17c68:	e695      	b.n	17996 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   17c6a:	4962      	ldr	r1, [pc, #392]	; (17df4 <hci_internal_cmd_put+0x584>)
   17c6c:	f7f7 fb32 	bl	f2d4 <sdc_hci_cmd_le_long_term_key_request_reply>
   17c70:	e662      	b.n	17938 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   17c72:	4960      	ldr	r1, [pc, #384]	; (17df4 <hci_internal_cmd_put+0x584>)
   17c74:	f7f7 fb2a 	bl	f2cc <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   17c78:	e65e      	b.n	17938 <hci_internal_cmd_put+0xc8>
	*buf = states1;
   17c7a:	238f      	movs	r3, #143	; 0x8f
   17c7c:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   17c7e:	23c0      	movs	r3, #192	; 0xc0
   17c80:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   17c82:	230c      	movs	r3, #12
   17c84:	e6f5      	b.n	17a72 <hci_internal_cmd_put+0x202>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   17c86:	495b      	ldr	r1, [pc, #364]	; (17df4 <hci_internal_cmd_put+0x584>)
   17c88:	f7f7 fb4c 	bl	f324 <sdc_hci_cmd_le_set_data_length>
   17c8c:	e654      	b.n	17938 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   17c8e:	4859      	ldr	r0, [pc, #356]	; (17df4 <hci_internal_cmd_put+0x584>)
   17c90:	f7f7 fb36 	bl	f300 <sdc_hci_cmd_le_read_suggested_default_data_length>
   17c94:	e660      	b.n	17958 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   17c96:	f7f7 fb58 	bl	f34a <sdc_hci_cmd_le_write_suggested_default_data_length>
   17c9a:	e640      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   17c9c:	f7f7 fb0c 	bl	f2b8 <sdc_hci_cmd_le_add_device_to_resolving_list>
   17ca0:	e63d      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   17ca2:	f7f7 fb33 	bl	f30c <sdc_hci_cmd_le_remove_device_from_resolving_list>
   17ca6:	e63a      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   17ca8:	f7f7 fb0a 	bl	f2c0 <sdc_hci_cmd_le_clear_resolving_list>
   17cac:	e637      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   17cae:	4851      	ldr	r0, [pc, #324]	; (17df4 <hci_internal_cmd_put+0x584>)
   17cb0:	f7f7 fb24 	bl	f2fc <sdc_hci_cmd_le_read_resolving_list_size>
   17cb4:	e7b0      	b.n	17c18 <hci_internal_cmd_put+0x3a8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   17cb6:	f7f7 fb2d 	bl	f314 <sdc_hci_cmd_le_set_address_resolution_enable>
   17cba:	e630      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   17cbc:	f7f7 fb41 	bl	f342 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   17cc0:	e62d      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   17cc2:	484c      	ldr	r0, [pc, #304]	; (17df4 <hci_internal_cmd_put+0x584>)
   17cc4:	f7f7 fb14 	bl	f2f0 <sdc_hci_cmd_le_read_max_data_length>
   17cc8:	e665      	b.n	17996 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   17cca:	494a      	ldr	r1, [pc, #296]	; (17df4 <hci_internal_cmd_put+0x584>)
   17ccc:	f7f7 fb12 	bl	f2f4 <sdc_hci_cmd_le_read_phy>
   17cd0:	e642      	b.n	17958 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   17cd2:	f7f7 fb29 	bl	f328 <sdc_hci_cmd_le_set_default_phy>
   17cd6:	e622      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   17cd8:	f7f7 fb2d 	bl	f336 <sdc_hci_cmd_le_set_phy>
   17cdc:	e5fa      	b.n	178d4 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   17cde:	4845      	ldr	r0, [pc, #276]	; (17df4 <hci_internal_cmd_put+0x584>)
   17ce0:	f7f7 fb10 	bl	f304 <sdc_hci_cmd_le_read_transmit_power>
   17ce4:	e628      	b.n	17938 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   17ce6:	f7f7 fb28 	bl	f33a <sdc_hci_cmd_le_set_privacy_mode>
   17cea:	e618      	b.n	1791e <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   17cec:	f64f 4309 	movw	r3, #64521	; 0xfc09
   17cf0:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17cf2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   17cf6:	d81f      	bhi.n	17d38 <hci_internal_cmd_put+0x4c8>
   17cf8:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   17cfc:	f43f ade6 	beq.w	178cc <hci_internal_cmd_put+0x5c>
   17d00:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   17d04:	3b01      	subs	r3, #1
   17d06:	2b08      	cmp	r3, #8
   17d08:	f63f ade0 	bhi.w	178cc <hci_internal_cmd_put+0x5c>
   17d0c:	a201      	add	r2, pc, #4	; (adr r2, 17d14 <hci_internal_cmd_put+0x4a4>)
   17d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17d12:	bf00      	nop
   17d14:	00017d5b 	.word	0x00017d5b
   17d18:	00017d89 	.word	0x00017d89
   17d1c:	000178cd 	.word	0x000178cd
   17d20:	000178cd 	.word	0x000178cd
   17d24:	000178cd 	.word	0x000178cd
   17d28:	00017d9d 	.word	0x00017d9d
   17d2c:	000178cd 	.word	0x000178cd
   17d30:	000178cd 	.word	0x000178cd
   17d34:	00017d93 	.word	0x00017d93
   17d38:	f205 23ff 	addw	r3, r5, #767	; 0x2ff
   17d3c:	b29b      	uxth	r3, r3
   17d3e:	2b04      	cmp	r3, #4
   17d40:	f63f adc4 	bhi.w	178cc <hci_internal_cmd_put+0x5c>
   17d44:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   17d48:	3b01      	subs	r3, #1
   17d4a:	2b04      	cmp	r3, #4
   17d4c:	f63f adbe 	bhi.w	178cc <hci_internal_cmd_put+0x5c>
   17d50:	e8df f003 	tbb	[pc, r3]
   17d54:	312e2b28 	.word	0x312e2b28
   17d58:	34          	.byte	0x34
   17d59:	00          	.byte	0x00
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   17d5a:	4826      	ldr	r0, [pc, #152]	; (17df4 <hci_internal_cmd_put+0x584>)
   17d5c:	f7ec f87e 	bl	3e5c <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   17d60:	2310      	movs	r3, #16
	switch (hci_opcode) {
   17d62:	f242 0219 	movw	r2, #8217	; 0x2019
   17d66:	4296      	cmp	r6, r2
   17d68:	dc38      	bgt.n	17ddc <hci_internal_cmd_put+0x56c>
   17d6a:	f242 020c 	movw	r2, #8204	; 0x200c
   17d6e:	4296      	cmp	r6, r2
   17d70:	dc27      	bgt.n	17dc2 <hci_internal_cmd_put+0x552>
   17d72:	f240 4206 	movw	r2, #1030	; 0x406
   17d76:	4296      	cmp	r6, r2
   17d78:	f43f adac 	beq.w	178d4 <hci_internal_cmd_put+0x64>
   17d7c:	f240 421d 	movw	r2, #1053	; 0x41d
   17d80:	4296      	cmp	r6, r2
   17d82:	f43f ada7 	beq.w	178d4 <hci_internal_cmd_put+0x64>
   17d86:	e685      	b.n	17a94 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_vs_zephyr_read_supported_commands((void *)event_out_params);
   17d88:	481a      	ldr	r0, [pc, #104]	; (17df4 <hci_internal_cmd_put+0x584>)
   17d8a:	f7f7 fa7d 	bl	f288 <sdc_hci_cmd_vs_zephyr_read_supported_commands>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   17d8e:	2344      	movs	r3, #68	; 0x44
		return sdc_hci_cmd_vs_zephyr_read_supported_commands((void *)event_out_params);
   17d90:	e7e7      	b.n	17d62 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   17d92:	4818      	ldr	r0, [pc, #96]	; (17df4 <hci_internal_cmd_put+0x584>)
   17d94:	f7f7 fa31 	bl	f1fa <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   17d98:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   17d9a:	e7e2      	b.n	17d62 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   17d9c:	f7f7 fa84 	bl	f2a8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   17da0:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   17da2:	e7de      	b.n	17d62 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   17da4:	f7f7 fa1c 	bl	f1e0 <sdc_hci_cmd_vs_llpm_mode_set>
   17da8:	e5b9      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   17daa:	f7f7 f9ed 	bl	f188 <sdc_hci_cmd_vs_conn_update>
   17dae:	e5b6      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   17db0:	f7f7 f9e2 	bl	f178 <sdc_hci_cmd_vs_conn_event_extend>
   17db4:	e5b3      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   17db6:	f7f7 fa1b 	bl	f1f0 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   17dba:	e5b0      	b.n	1791e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   17dbc:	f7f7 fa0e 	bl	f1dc <sdc_hci_cmd_vs_event_length_set>
   17dc0:	e5ad      	b.n	1791e <hci_internal_cmd_put+0xae>
   17dc2:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   17dc6:	3a0d      	subs	r2, #13
   17dc8:	2101      	movs	r1, #1
   17dca:	b292      	uxth	r2, r2
   17dcc:	fa01 f202 	lsl.w	r2, r1, r2
   17dd0:	f241 2141 	movw	r1, #4673	; 0x1241
   17dd4:	420a      	tst	r2, r1
   17dd6:	f43f ae5d 	beq.w	17a94 <hci_internal_cmd_put+0x224>
   17dda:	e57b      	b.n	178d4 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   17ddc:	f242 0232 	movw	r2, #8242	; 0x2032
   17de0:	4296      	cmp	r6, r2
   17de2:	f43f ad77 	beq.w	178d4 <hci_internal_cmd_put+0x64>
   17de6:	f242 0243 	movw	r2, #8259	; 0x2043
   17dea:	e7c9      	b.n	17d80 <hci_internal_cmd_put+0x510>
		return -NRF_EPERM;
   17dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17df0:	e57c      	b.n	178ec <hci_internal_cmd_put+0x7c>
   17df2:	bf00      	nop
   17df4:	20002e7d 	.word	0x20002e7d

00017df8 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   17df8:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   17dfa:	4c07      	ldr	r4, [pc, #28]	; (17e18 <hci_internal_evt_get+0x20>)
   17dfc:	7823      	ldrb	r3, [r4, #0]
   17dfe:	b13b      	cbz	r3, 17e10 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   17e00:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   17e02:	1c61      	adds	r1, r4, #1
   17e04:	3202      	adds	r2, #2
   17e06:	f002 fa6b 	bl	1a2e0 <memcpy>
		cmd_complete_or_status.occurred = false;
   17e0a:	2000      	movs	r0, #0
   17e0c:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   17e0e:	bd10      	pop	{r4, pc}
   17e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   17e14:	f7f7 b993 	b.w	f13e <sdc_hci_evt_get>
   17e18:	20002e76 	.word	0x20002e76

00017e1c <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   17e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   17e20:	4c0b      	ldr	r4, [pc, #44]	; (17e50 <bt_rand+0x34>)
   17e22:	6823      	ldr	r3, [r4, #0]
{
   17e24:	4605      	mov	r5, r0
   17e26:	460e      	mov	r6, r1
   17e28:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   17e2a:	b13b      	cbz	r3, 17e3c <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   17e2c:	6838      	ldr	r0, [r7, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   17e2e:	6883      	ldr	r3, [r0, #8]
   17e30:	b2b2      	uxth	r2, r6
   17e32:	4629      	mov	r1, r5
   17e34:	681b      	ldr	r3, [r3, #0]
}
   17e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17e3a:	4718      	bx	r3
   17e3c:	4805      	ldr	r0, [pc, #20]	; (17e54 <bt_rand+0x38>)
   17e3e:	f000 fb2d 	bl	1849c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17e42:	6020      	str	r0, [r4, #0]
		if (!dev) {
   17e44:	2800      	cmp	r0, #0
   17e46:	d1f1      	bne.n	17e2c <bt_rand+0x10>
}
   17e48:	f06f 0012 	mvn.w	r0, #18
   17e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e50:	200025d8 	.word	0x200025d8
   17e54:	0001d8b4 	.word	0x0001d8b4

00017e58 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   17e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	err_code = nrfx_dppi_channel_alloc(&channel);
	__ASSERT_NO_MSG(err_code == NRFX_SUCCESS && channel == 2);
#endif

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   17e5a:	2314      	movs	r3, #20
   17e5c:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17e60:	4a0f      	ldr	r2, [pc, #60]	; (17ea0 <mpsl_lib_init+0x48>)
	clock_cfg.rc_temp_ctiv = 0;
   17e62:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   17e64:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17e66:	2119      	movs	r1, #25
   17e68:	4668      	mov	r0, sp
	clock_cfg.source = m_config_clock_source_get();
   17e6a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   17e6e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17e72:	f7eb fbcd 	bl	3610 <mpsl_init>
	if (err) {
   17e76:	4604      	mov	r4, r0
   17e78:	b970      	cbnz	r0, 17e98 <mpsl_lib_init+0x40>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17e7a:	4601      	mov	r1, r0
   17e7c:	462a      	mov	r2, r5
   17e7e:	2008      	movs	r0, #8
   17e80:	f7fb f95c 	bl	1313c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17e84:	462a      	mov	r2, r5
   17e86:	4621      	mov	r1, r4
   17e88:	200b      	movs	r0, #11
   17e8a:	f7fb f957 	bl	1313c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17e8e:	462a      	mov	r2, r5
   17e90:	4621      	mov	r1, r4
   17e92:	4628      	mov	r0, r5
   17e94:	f7fb f952 	bl	1313c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   17e98:	4620      	mov	r0, r4
   17e9a:	b003      	add	sp, #12
   17e9c:	bd30      	pop	{r4, r5, pc}
   17e9e:	bf00      	nop
   17ea0:	0001c3cd 	.word	0x0001c3cd

00017ea4 <mpsl_low_prio_irq_handler>:
   17ea4:	4801      	ldr	r0, [pc, #4]	; (17eac <mpsl_low_prio_irq_handler+0x8>)
   17ea6:	f001 b837 	b.w	18f18 <z_impl_k_sem_give>
   17eaa:	bf00      	nop
   17eac:	20000798 	.word	0x20000798

00017eb0 <signal_thread>:
{
   17eb0:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   17eb2:	4c09      	ldr	r4, [pc, #36]	; (17ed8 <signal_thread+0x28>)
   17eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ebc:	4620      	mov	r0, r4
   17ebe:	f001 f851 	bl	18f64 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   17ec2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17eca:	f7ff fb83 	bl	175d4 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   17ece:	f7f6 fd2f 	bl	e930 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   17ed2:	f7ff fb87 	bl	175e4 <multithreading_lock_release>
	while (true) {
   17ed6:	e7ed      	b.n	17eb4 <signal_thread+0x4>
   17ed8:	20000798 	.word	0x20000798

00017edc <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   17edc:	b530      	push	{r4, r5, lr}
   17ede:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17ee0:	4d0f      	ldr	r5, [pc, #60]	; (17f20 <mpsl_signal_thread_init+0x44>)
   17ee2:	4910      	ldr	r1, [pc, #64]	; (17f24 <mpsl_signal_thread_init+0x48>)
   17ee4:	2200      	movs	r2, #0
   17ee6:	2300      	movs	r3, #0
   17ee8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17eec:	2400      	movs	r4, #0
   17eee:	f06f 0309 	mvn.w	r3, #9
   17ef2:	e9cd 3403 	strd	r3, r4, [sp, #12]
   17ef6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17efa:	4b0b      	ldr	r3, [pc, #44]	; (17f28 <mpsl_signal_thread_init+0x4c>)
   17efc:	9400      	str	r4, [sp, #0]
   17efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17f02:	4628      	mov	r0, r5
   17f04:	f001 f8a2 	bl	1904c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   17f08:	4908      	ldr	r1, [pc, #32]	; (17f2c <mpsl_signal_thread_init+0x50>)
   17f0a:	4628      	mov	r0, r5
   17f0c:	f004 fd39 	bl	1c982 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   17f10:	4622      	mov	r2, r4
   17f12:	2104      	movs	r1, #4
   17f14:	2019      	movs	r0, #25
   17f16:	f7fb f911 	bl	1313c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   17f1a:	4620      	mov	r0, r4
   17f1c:	b009      	add	sp, #36	; 0x24
   17f1e:	bd30      	pop	{r4, r5, pc}
   17f20:	20002198 	.word	0x20002198
   17f24:	20003d40 	.word	0x20003d40
   17f28:	00017eb1 	.word	0x00017eb1
   17f2c:	0001d8d5 	.word	0x0001d8d5

00017f30 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   17f30:	4b01      	ldr	r3, [pc, #4]	; (17f38 <mpsl_hfclk_callback+0x8>)
   17f32:	2000      	movs	r0, #0
   17f34:	681b      	ldr	r3, [r3, #0]
   17f36:	4718      	bx	r3
   17f38:	200025dc 	.word	0x200025dc

00017f3c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   17f3c:	b120      	cbz	r0, 17f48 <nrfx_clock_start+0xc>
   17f3e:	2801      	cmp	r0, #1
   17f40:	d106      	bne.n	17f50 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   17f42:	4804      	ldr	r0, [pc, #16]	; (17f54 <nrfx_clock_start+0x18>)
   17f44:	f7eb b9e6 	b.w	3314 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   17f48:	4b03      	ldr	r3, [pc, #12]	; (17f58 <nrfx_clock_start+0x1c>)
   17f4a:	2001      	movs	r0, #1
   17f4c:	681b      	ldr	r3, [r3, #0]
   17f4e:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   17f50:	4770      	bx	lr
   17f52:	bf00      	nop
   17f54:	00017f31 	.word	0x00017f31
   17f58:	200025dc 	.word	0x200025dc

00017f5c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   17f5c:	4b01      	ldr	r3, [pc, #4]	; (17f64 <nrfx_clock_init+0x8>)
   17f5e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   17f60:	4801      	ldr	r0, [pc, #4]	; (17f68 <nrfx_clock_init+0xc>)
   17f62:	4770      	bx	lr
   17f64:	200025dc 	.word	0x200025dc
   17f68:	0bad0000 	.word	0x0bad0000

00017f6c <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   17f6c:	4b04      	ldr	r3, [pc, #16]	; (17f80 <nrf52_errata_108+0x14>)
   17f6e:	6818      	ldr	r0, [r3, #0]
   17f70:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   17f72:	bf04      	itt	eq
   17f74:	4b03      	ldreq	r3, [pc, #12]	; (17f84 <nrf52_errata_108+0x18>)
   17f76:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   17f78:	1f83      	subs	r3, r0, #6
   17f7a:	4258      	negs	r0, r3
   17f7c:	4158      	adcs	r0, r3
   17f7e:	4770      	bx	lr
   17f80:	10000130 	.word	0x10000130
   17f84:	f0000fe0 	.word	0xf0000fe0

00017f88 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   17f88:	4b07      	ldr	r3, [pc, #28]	; (17fa8 <nrf52_errata_16+0x20>)
   17f8a:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   17f8c:	2b06      	cmp	r3, #6
   17f8e:	d109      	bne.n	17fa4 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   17f90:	4b06      	ldr	r3, [pc, #24]	; (17fac <nrf52_errata_16+0x24>)
   17f92:	681b      	ldr	r3, [r3, #0]
   17f94:	f3c3 1303 	ubfx	r3, r3, #4, #4
   17f98:	3b03      	subs	r3, #3
   17f9a:	2b03      	cmp	r3, #3
   17f9c:	d802      	bhi.n	17fa4 <nrf52_errata_16+0x1c>
   17f9e:	4a04      	ldr	r2, [pc, #16]	; (17fb0 <nrf52_errata_16+0x28>)
   17fa0:	5cd0      	ldrb	r0, [r2, r3]
   17fa2:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   17fa4:	2000      	movs	r0, #0
    #endif
}
   17fa6:	4770      	bx	lr
   17fa8:	f0000fe0 	.word	0xf0000fe0
   17fac:	f0000fe8 	.word	0xf0000fe8
   17fb0:	0001d8e9 	.word	0x0001d8e9

00017fb4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   17fb4:	4a02      	ldr	r2, [pc, #8]	; (17fc0 <nvmc_wait+0xc>)
   17fb6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   17fba:	2b00      	cmp	r3, #0
   17fbc:	d0fb      	beq.n	17fb6 <nvmc_wait+0x2>
}
   17fbe:	4770      	bx	lr
   17fc0:	4001e000 	.word	0x4001e000

00017fc4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   17fc4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   17fc6:	f7ff ffd1 	bl	17f6c <nrf52_errata_108>
   17fca:	b128      	cbz	r0, 17fd8 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   17fcc:	4b77      	ldr	r3, [pc, #476]	; (181ac <SystemInit+0x1e8>)
   17fce:	4a78      	ldr	r2, [pc, #480]	; (181b0 <SystemInit+0x1ec>)
   17fd0:	681b      	ldr	r3, [r3, #0]
   17fd2:	f3c3 2304 	ubfx	r3, r3, #8, #5
   17fd6:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   17fd8:	f7ff ffd6 	bl	17f88 <nrf52_errata_16>
   17fdc:	b110      	cbz	r0, 17fe4 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   17fde:	4b75      	ldr	r3, [pc, #468]	; (181b4 <SystemInit+0x1f0>)
   17fe0:	4a75      	ldr	r2, [pc, #468]	; (181b8 <SystemInit+0x1f4>)
   17fe2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   17fe4:	f7ff ffc2 	bl	17f6c <nrf52_errata_108>
   17fe8:	b128      	cbz	r0, 17ff6 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   17fea:	4b74      	ldr	r3, [pc, #464]	; (181bc <SystemInit+0x1f8>)
   17fec:	4a74      	ldr	r2, [pc, #464]	; (181c0 <SystemInit+0x1fc>)
   17fee:	681b      	ldr	r3, [r3, #0]
   17ff0:	f3c3 3342 	ubfx	r3, r3, #13, #3
   17ff4:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   17ff6:	f7ff ffc7 	bl	17f88 <nrf52_errata_16>
   17ffa:	b120      	cbz	r0, 18006 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   17ffc:	4a71      	ldr	r2, [pc, #452]	; (181c4 <SystemInit+0x200>)
   17ffe:	68d3      	ldr	r3, [r2, #12]
   18000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   18004:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   18006:	f7ff ffb1 	bl	17f6c <nrf52_errata_108>
   1800a:	b140      	cbz	r0, 1801e <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1800c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18010:	2200      	movs	r2, #0
   18012:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   18016:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1801a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1801e:	f7ff ffb3 	bl	17f88 <nrf52_errata_16>
   18022:	b110      	cbz	r0, 1802a <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   18024:	4b68      	ldr	r3, [pc, #416]	; (181c8 <SystemInit+0x204>)
   18026:	2203      	movs	r2, #3
   18028:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1802a:	f7ff ffad 	bl	17f88 <nrf52_errata_16>
   1802e:	b140      	cbz	r0, 18042 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   18030:	4b66      	ldr	r3, [pc, #408]	; (181cc <SystemInit+0x208>)
   18032:	2205      	movs	r2, #5
   18034:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   18036:	2201      	movs	r2, #1
   18038:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1803a:	2200      	movs	r2, #0
   1803c:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1803e:	223f      	movs	r2, #63	; 0x3f
   18040:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18042:	4b63      	ldr	r3, [pc, #396]	; (181d0 <SystemInit+0x20c>)
   18044:	681a      	ldr	r2, [r3, #0]
   18046:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18048:	bf0b      	itete	eq
   1804a:	4b62      	ldreq	r3, [pc, #392]	; (181d4 <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1804c:	4b62      	ldrne	r3, [pc, #392]	; (181d8 <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1804e:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   18050:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18052:	bf02      	ittt	eq
   18054:	3308      	addeq	r3, #8
   18056:	681b      	ldreq	r3, [r3, #0]
   18058:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1805c:	2a06      	cmp	r2, #6
   1805e:	d14d      	bne.n	180fc <SystemInit+0x138>
            {
                switch(var2)
   18060:	3b03      	subs	r3, #3
   18062:	2b03      	cmp	r3, #3
   18064:	d803      	bhi.n	1806e <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   18066:	4a5d      	ldr	r2, [pc, #372]	; (181dc <SystemInit+0x218>)
   18068:	5cd3      	ldrb	r3, [r2, r3]
   1806a:	2b00      	cmp	r3, #0
   1806c:	d046      	beq.n	180fc <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1806e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18072:	4b5b      	ldr	r3, [pc, #364]	; (181e0 <SystemInit+0x21c>)
   18074:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   18078:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1807c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   18080:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   18084:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   18088:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1808c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   18090:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   18094:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   18098:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1809c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   180a0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   180a4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   180a8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   180ac:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   180b0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   180b4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   180b8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   180bc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   180c0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   180c4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   180c8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   180cc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   180d0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   180d4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   180d8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   180dc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   180e0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   180e4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   180e8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   180ec:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   180f0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   180f4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   180f8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   180fc:	f7ff ff36 	bl	17f6c <nrf52_errata_108>
   18100:	b128      	cbz	r0, 1810e <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   18102:	4b38      	ldr	r3, [pc, #224]	; (181e4 <SystemInit+0x220>)
   18104:	4a38      	ldr	r2, [pc, #224]	; (181e8 <SystemInit+0x224>)
   18106:	681b      	ldr	r3, [r3, #0]
   18108:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1810c:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1810e:	f7ff ff2d 	bl	17f6c <nrf52_errata_108>
   18112:	b148      	cbz	r0, 18128 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   18114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18118:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1811c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1811e:	bf44      	itt	mi
   18120:	f06f 0201 	mvnmi.w	r2, #1
   18124:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18128:	4b29      	ldr	r3, [pc, #164]	; (181d0 <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1812a:	681b      	ldr	r3, [r3, #0]
   1812c:	2b06      	cmp	r3, #6
   1812e:	d10c      	bne.n	1814a <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18130:	4b29      	ldr	r3, [pc, #164]	; (181d8 <SystemInit+0x214>)
   18132:	681b      	ldr	r3, [r3, #0]
   18134:	3b03      	subs	r3, #3
   18136:	2b03      	cmp	r3, #3
   18138:	d802      	bhi.n	18140 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1813a:	4a2c      	ldr	r2, [pc, #176]	; (181ec <SystemInit+0x228>)
   1813c:	5cd3      	ldrb	r3, [r2, r3]
   1813e:	b123      	cbz	r3, 1814a <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   18140:	4a2b      	ldr	r2, [pc, #172]	; (181f0 <SystemInit+0x22c>)
   18142:	6813      	ldr	r3, [r2, #0]
   18144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   18148:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1814a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1814e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   18152:	2a00      	cmp	r2, #0
   18154:	db03      	blt.n	1815e <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   18156:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1815a:	2b00      	cmp	r3, #0
   1815c:	da22      	bge.n	181a4 <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1815e:	4925      	ldr	r1, [pc, #148]	; (181f4 <SystemInit+0x230>)
   18160:	2301      	movs	r3, #1
   18162:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   18166:	f7ff ff25 	bl	17fb4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1816a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1816e:	2415      	movs	r4, #21
   18170:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   18174:	f7ff ff1e 	bl	17fb4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   18178:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1817c:	f7ff ff1a 	bl	17fb4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18180:	2300      	movs	r3, #0
   18182:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   18186:	f7ff ff15 	bl	17fb4 <nvmc_wait>
   1818a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1818e:	491a      	ldr	r1, [pc, #104]	; (181f8 <SystemInit+0x234>)
   18190:	4b1a      	ldr	r3, [pc, #104]	; (181fc <SystemInit+0x238>)
   18192:	68ca      	ldr	r2, [r1, #12]
   18194:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   18198:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1819a:	60cb      	str	r3, [r1, #12]
   1819c:	f3bf 8f4f 	dsb	sy
    __NOP();
   181a0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   181a2:	e7fd      	b.n	181a0 <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   181a4:	4b16      	ldr	r3, [pc, #88]	; (18200 <SystemInit+0x23c>)
   181a6:	4a17      	ldr	r2, [pc, #92]	; (18204 <SystemInit+0x240>)
   181a8:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   181aa:	bd10      	pop	{r4, pc}
   181ac:	10000324 	.word	0x10000324
   181b0:	40013540 	.word	0x40013540
   181b4:	4007c074 	.word	0x4007c074
   181b8:	baadf00d 	.word	0xbaadf00d
   181bc:	10000244 	.word	0x10000244
   181c0:	4000053c 	.word	0x4000053c
   181c4:	e000edf0 	.word	0xe000edf0
   181c8:	400005a0 	.word	0x400005a0
   181cc:	40005610 	.word	0x40005610
   181d0:	10000130 	.word	0x10000130
   181d4:	f0000fe0 	.word	0xf0000fe0
   181d8:	10000134 	.word	0x10000134
   181dc:	0001d8e1 	.word	0x0001d8e1
   181e0:	4000c000 	.word	0x4000c000
   181e4:	10000258 	.word	0x10000258
   181e8:	40000ee4 	.word	0x40000ee4
   181ec:	0001d8e5 	.word	0x0001d8e5
   181f0:	4000173c 	.word	0x4000173c
   181f4:	4001e000 	.word	0x4001e000
   181f8:	e000ed00 	.word	0xe000ed00
   181fc:	05fa0004 	.word	0x05fa0004
   18200:	200005fc 	.word	0x200005fc
   18204:	03d09000 	.word	0x03d09000

00018208 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18208:	4b18      	ldr	r3, [pc, #96]	; (1826c <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1820a:	f8df c06c 	ldr.w	ip, [pc, #108]	; 18278 <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1820e:	681b      	ldr	r3, [r3, #0]
{
   18210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18214:	43db      	mvns	r3, r3
{
   18216:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   18218:	4f15      	ldr	r7, [pc, #84]	; (18270 <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1821a:	4816      	ldr	r0, [pc, #88]	; (18274 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1821c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   18220:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   18222:	f04f 0e01 	mov.w	lr, #1
   18226:	b2e6      	uxtb	r6, r4
   18228:	b90b      	cbnz	r3, 1822e <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1822a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1822e:	f04f 0240 	mov.w	r2, #64	; 0x40
   18232:	f3ef 8811 	mrs	r8, BASEPRI
   18236:	f382 8811 	msr	BASEPRI, r2
   1823a:	f3bf 8f6f 	isb	sy
   1823e:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   18242:	4213      	tst	r3, r2
   18244:	d006      	beq.n	18254 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   18246:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   18248:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1824a:	bf01      	itttt	eq
   1824c:	4311      	orreq	r1, r2
   1824e:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   18250:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   18252:	4660      	moveq	r0, ip
	__asm__ volatile(
   18254:	f388 8811 	msr	BASEPRI, r8
   18258:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1825c:	4560      	cmp	r0, ip
   1825e:	f104 0401 	add.w	r4, r4, #1
   18262:	d0e2      	beq.n	1822a <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   18264:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   18268:	e7dd      	b.n	18226 <nrfx_ppi_channel_alloc+0x1e>
   1826a:	bf00      	nop
   1826c:	0001d4d8 	.word	0x0001d4d8
   18270:	200025e0 	.word	0x200025e0
   18274:	0bad0002 	.word	0x0bad0002
   18278:	0bad0000 	.word	0x0bad0000

0001827c <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   1827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   18280:	7905      	ldrb	r5, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   18282:	4c3b      	ldr	r4, [pc, #236]	; (18370 <nrfx_pwm_init+0xf4>)
   18284:	260c      	movs	r6, #12
   18286:	436e      	muls	r6, r5
   18288:	19a7      	adds	r7, r4, r6
{
   1828a:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1828c:	f897 c008 	ldrb.w	ip, [r7, #8]
   18290:	f1bc 0f00 	cmp.w	ip, #0
   18294:	d16a      	bne.n	1836c <nrfx_pwm_init+0xf0>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
   18296:	51a2      	str	r2, [r4, r6]
    p_cb->p_context = p_context;
   18298:	607b      	str	r3, [r7, #4]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   1829a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   1829e:	466b      	mov	r3, sp
   182a0:	f101 0903 	add.w	r9, r1, #3
   182a4:	f04f 0a01 	mov.w	sl, #1
   182a8:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
   182ac:	f04f 0b03 	mov.w	fp, #3
        uint8_t output_pin = p_config->output_pins[i];
   182b0:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   182b4:	2fff      	cmp	r7, #255	; 0xff
   182b6:	d055      	beq.n	18364 <nrfx_pwm_init+0xe8>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   182b8:	f027 0680 	bic.w	r6, r7, #128	; 0x80
   182bc:	601e      	str	r6, [r3, #0]
            if (!p_config->skip_gpio_cfg)
   182be:	7b0e      	ldrb	r6, [r1, #12]
   182c0:	b96e      	cbnz	r6, 182de <nrfx_pwm_init+0x62>
                if (inverted)
   182c2:	f007 061f 	and.w	r6, r7, #31
   182c6:	fa0a f806 	lsl.w	r8, sl, r6
   182ca:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   182ce:	063f      	lsls	r7, r7, #24
    p_reg->OUTSET = set_mask;
   182d0:	bf4c      	ite	mi
   182d2:	f8ce 8508 	strmi.w	r8, [lr, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   182d6:	f8ce 850c 	strpl.w	r8, [lr, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   182da:	f84e b026 	str.w	fp, [lr, r6, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   182de:	45cc      	cmp	ip, r9
   182e0:	f103 0304 	add.w	r3, r3, #4
   182e4:	d1e4      	bne.n	182b0 <nrfx_pwm_init+0x34>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   182e6:	6800      	ldr	r0, [r0, #0]
                                        uint32_t       out_pins[NRF_PWM_CHANNEL_COUNT])
{
    uint8_t i;
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    {
        p_reg->PSEL.OUT[i] = out_pins[i];
   182e8:	9b00      	ldr	r3, [sp, #0]
   182ea:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
   182ee:	9b01      	ldr	r3, [sp, #4]
   182f0:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
   182f4:	9b02      	ldr	r3, [sp, #8]
   182f6:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
   182fa:	9b03      	ldr	r3, [sp, #12]
   182fc:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   18300:	2301      	movs	r3, #1
   18302:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
   18306:	798e      	ldrb	r6, [r1, #6]
   18308:	890b      	ldrh	r3, [r1, #8]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   1830a:	794f      	ldrb	r7, [r1, #5]
   1830c:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
   18310:	f8c0 6504 	str.w	r6, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   18314:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   18318:	894b      	ldrh	r3, [r1, #10]
   1831a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
   1831e:	2300      	movs	r3, #0
   18320:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
   18324:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18328:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1832c:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
   18330:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   18334:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
   18338:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1833c:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   18340:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   18344:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   18348:	b11a      	cbz	r2, 18352 <nrfx_pwm_init+0xd6>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   1834a:	f340 3007 	sbfx	r0, r0, #12, #8
   1834e:	f7fa fee5 	bl	1311c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   18352:	230c      	movs	r3, #12
   18354:	fb03 4405 	mla	r4, r3, r5, r4

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   18358:	4806      	ldr	r0, [pc, #24]	; (18374 <nrfx_pwm_init+0xf8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1835a:	2301      	movs	r3, #1
   1835c:	7223      	strb	r3, [r4, #8]
}
   1835e:	b005      	add	sp, #20
   18360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   18364:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18368:	601e      	str	r6, [r3, #0]
   1836a:	e7b8      	b.n	182de <nrfx_pwm_init+0x62>
        return err_code;
   1836c:	4802      	ldr	r0, [pc, #8]	; (18378 <nrfx_pwm_init+0xfc>)
   1836e:	e7f6      	b.n	1835e <nrfx_pwm_init+0xe2>
   18370:	200025e4 	.word	0x200025e4
   18374:	0bad0000 	.word	0x0bad0000
   18378:	0bad0005 	.word	0x0bad0005

0001837c <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   1837c:	b4f0      	push	{r4, r5, r6, r7}
   1837e:	460d      	mov	r5, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   18380:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   18382:	6800      	ldr	r0, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   18384:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
   18388:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   1838a:	68ae      	ldr	r6, [r5, #8]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   1838c:	f8c0 c520 	str.w	ip, [r0, #1312]	; 0x520
{
   18390:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   18392:	4b18      	ldr	r3, [pc, #96]	; (183f4 <nrfx_pwm_simple_playback+0x78>)
    p_reg->SEQ[seq_id].CNT = length;
   18394:	f8c0 7524 	str.w	r7, [r0, #1316]	; 0x524
   18398:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1839c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   183a0:	68eb      	ldr	r3, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   183a2:	f8c0 6528 	str.w	r6, [r0, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   183a6:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   183aa:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
   183ae:	f8c0 7544 	str.w	r7, [r0, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   183b2:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   183b6:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
   183ba:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   183be:	eb03 0252 	add.w	r2, r3, r2, lsr #1
   183c2:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   183c6:	07e2      	lsls	r2, r4, #31
   183c8:	d411      	bmi.n	183ee <nrfx_pwm_simple_playback+0x72>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   183ca:	f014 0202 	ands.w	r2, r4, #2
   183ce:	d003      	beq.n	183d8 <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   183d0:	2b00      	cmp	r3, #0
   183d2:	bf14      	ite	ne
   183d4:	2208      	movne	r2, #8
   183d6:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   183d8:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
   183da:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   183de:	bf18      	it	ne
   183e0:	230c      	movne	r3, #12
   183e2:	b2e2      	uxtb	r2, r4
   183e4:	bf08      	it	eq
   183e6:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   183e8:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
   183ea:	f004 b82c 	b.w	1c446 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   183ee:	2210      	movs	r2, #16
   183f0:	e7f2      	b.n	183d8 <nrfx_pwm_simple_playback+0x5c>
   183f2:	bf00      	nop
   183f4:	200025e4 	.word	0x200025e4

000183f8 <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   183f8:	4b08      	ldr	r3, [pc, #32]	; (1841c <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   183fa:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   183fc:	210c      	movs	r1, #12
   183fe:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   18402:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   18404:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18406:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   1840a:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   1840c:	b919      	cbnz	r1, 18416 <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   1840e:	1e98      	subs	r0, r3, #2
   18410:	bf18      	it	ne
   18412:	2001      	movne	r0, #1
   18414:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   18416:	2001      	movs	r0, #1
   18418:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   1841a:	4770      	bx	lr
   1841c:	200025e4 	.word	0x200025e4

00018420 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   18420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18422:	4b10      	ldr	r3, [pc, #64]	; (18464 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   18424:	4f10      	ldr	r7, [pc, #64]	; (18468 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18426:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1842a:	3001      	adds	r0, #1
   1842c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   18430:	42ae      	cmp	r6, r5
   18432:	d800      	bhi.n	18436 <z_sys_init_run_level+0x16>
		}
	}
}
   18434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   18436:	e9d5 3400 	ldrd	r3, r4, [r5]
   1843a:	4620      	mov	r0, r4
   1843c:	4798      	blx	r3
   1843e:	b170      	cbz	r0, 1845e <z_sys_init_run_level+0x3e>
   18440:	b16c      	cbz	r4, 1845e <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   18442:	1be4      	subs	r4, r4, r7
   18444:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   18446:	0961      	lsrs	r1, r4, #5
   18448:	4a08      	ldr	r2, [pc, #32]	; (1846c <z_sys_init_run_level+0x4c>)
   1844a:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1844e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   18452:	2301      	movs	r3, #1
   18454:	fa03 f404 	lsl.w	r4, r3, r4
   18458:	4304      	orrs	r4, r0
   1845a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1845e:	3508      	adds	r5, #8
   18460:	e7e6      	b.n	18430 <z_sys_init_run_level+0x10>
   18462:	bf00      	nop
   18464:	0001d4dc 	.word	0x0001d4dc
   18468:	200006b0 	.word	0x200006b0
   1846c:	20000710 	.word	0x20000710

00018470 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   18470:	4b08      	ldr	r3, [pc, #32]	; (18494 <z_device_ready+0x24>)
   18472:	1ac0      	subs	r0, r0, r3
   18474:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   18476:	4b08      	ldr	r3, [pc, #32]	; (18498 <z_device_ready+0x28>)
   18478:	0942      	lsrs	r2, r0, #5
   1847a:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1847e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   18482:	2301      	movs	r3, #1
   18484:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   18488:	4210      	tst	r0, r2
}
   1848a:	bf0c      	ite	eq
   1848c:	4618      	moveq	r0, r3
   1848e:	2000      	movne	r0, #0
   18490:	4770      	bx	lr
   18492:	bf00      	nop
   18494:	200006b0 	.word	0x200006b0
   18498:	20000710 	.word	0x20000710

0001849c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1849c:	4911      	ldr	r1, [pc, #68]	; (184e4 <z_impl_device_get_binding+0x48>)
{
   1849e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   184a0:	4c11      	ldr	r4, [pc, #68]	; (184e8 <z_impl_device_get_binding+0x4c>)
{
   184a2:	4605      	mov	r5, r0
   184a4:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   184a6:	428c      	cmp	r4, r1
   184a8:	d104      	bne.n	184b4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   184aa:	4c0f      	ldr	r4, [pc, #60]	; (184e8 <z_impl_device_get_binding+0x4c>)
   184ac:	42b4      	cmp	r4, r6
   184ae:	d10a      	bne.n	184c6 <z_impl_device_get_binding+0x2a>
	return NULL;
   184b0:	2400      	movs	r4, #0
   184b2:	e014      	b.n	184de <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   184b4:	4620      	mov	r0, r4
   184b6:	f7ff ffdb 	bl	18470 <z_device_ready>
   184ba:	b110      	cbz	r0, 184c2 <z_impl_device_get_binding+0x26>
   184bc:	6823      	ldr	r3, [r4, #0]
   184be:	42ab      	cmp	r3, r5
   184c0:	d00d      	beq.n	184de <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   184c2:	3410      	adds	r4, #16
   184c4:	e7ef      	b.n	184a6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   184c6:	4620      	mov	r0, r4
   184c8:	f7ff ffd2 	bl	18470 <z_device_ready>
   184cc:	b908      	cbnz	r0, 184d2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   184ce:	3410      	adds	r4, #16
   184d0:	e7ec      	b.n	184ac <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   184d2:	6821      	ldr	r1, [r4, #0]
   184d4:	4628      	mov	r0, r5
   184d6:	f001 fee7 	bl	1a2a8 <strcmp>
   184da:	2800      	cmp	r0, #0
   184dc:	d1f7      	bne.n	184ce <z_impl_device_get_binding+0x32>
}
   184de:	4620      	mov	r0, r4
   184e0:	bd70      	pop	{r4, r5, r6, pc}
   184e2:	bf00      	nop
   184e4:	20000710 	.word	0x20000710
   184e8:	200006b0 	.word	0x200006b0

000184ec <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   184ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
   184ee:	4e1c      	ldr	r6, [pc, #112]	; (18560 <idle+0x74>)
{
   184f0:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   184f2:	2700      	movs	r7, #0
	__asm__ volatile(
   184f4:	f04f 0240 	mov.w	r2, #64	; 0x40
   184f8:	f3ef 8311 	mrs	r3, BASEPRI
   184fc:	f382 8811 	msr	BASEPRI, r2
   18500:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   18504:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   18506:	b188      	cbz	r0, 1852c <idle+0x40>
			cpu->pending_abort = NULL;
   18508:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1850a:	f383 8811 	msr	BASEPRI, r3
   1850e:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   18512:	f000 fb7d 	bl	18c10 <z_thread_single_abort>
	__asm__ volatile(
   18516:	f04f 0340 	mov.w	r3, #64	; 0x40
   1851a:	f3ef 8011 	mrs	r0, BASEPRI
   1851e:	f383 8811 	msr	BASEPRI, r3
   18522:	f3bf 8f6f 	isb	sy
   18526:	f004 f940 	bl	1c7aa <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   1852a:	e7e3      	b.n	184f4 <idle+0x8>
	__asm__ volatile(
   1852c:	f383 8811 	msr	BASEPRI, r3
   18530:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   18534:	f04f 0240 	mov.w	r2, #64	; 0x40
   18538:	f3ef 8311 	mrs	r3, BASEPRI
   1853c:	f382 8811 	msr	BASEPRI, r2
   18540:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   18544:	f004 fab6 	bl	1cab4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   18548:	2101      	movs	r1, #1
   1854a:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1854c:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1854e:	bfd8      	it	le
   18550:	4608      	movle	r0, r1
   18552:	f004 fabf 	bl	1cad4 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   18556:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   18558:	f7fa feca 	bl	132f0 <arch_cpu_idle>
}
   1855c:	e7ca      	b.n	184f4 <idle+0x8>
   1855e:	bf00      	nop
   18560:	200025f0 	.word	0x200025f0

00018564 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   18564:	4802      	ldr	r0, [pc, #8]	; (18570 <z_bss_zero+0xc>)
   18566:	4a03      	ldr	r2, [pc, #12]	; (18574 <z_bss_zero+0x10>)
   18568:	2100      	movs	r1, #0
   1856a:	1a12      	subs	r2, r2, r0
   1856c:	f001 bee3 	b.w	1a336 <memset>
   18570:	200008b8 	.word	0x200008b8
   18574:	20002ec4 	.word	0x20002ec4

00018578 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   18578:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1857a:	4806      	ldr	r0, [pc, #24]	; (18594 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1857c:	4a06      	ldr	r2, [pc, #24]	; (18598 <z_data_copy+0x20>)
   1857e:	4907      	ldr	r1, [pc, #28]	; (1859c <z_data_copy+0x24>)
   18580:	1a12      	subs	r2, r2, r0
   18582:	f001 fead 	bl	1a2e0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   18586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1858a:	4a05      	ldr	r2, [pc, #20]	; (185a0 <z_data_copy+0x28>)
   1858c:	4905      	ldr	r1, [pc, #20]	; (185a4 <z_data_copy+0x2c>)
   1858e:	4806      	ldr	r0, [pc, #24]	; (185a8 <z_data_copy+0x30>)
   18590:	f001 bea6 	b.w	1a2e0 <memcpy>
   18594:	20000000 	.word	0x20000000
   18598:	200008b8 	.word	0x200008b8
   1859c:	0001d94c 	.word	0x0001d94c
   185a0:	00000000 	.word	0x00000000
   185a4:	0001d94c 	.word	0x0001d94c
   185a8:	20000000 	.word	0x20000000

000185ac <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   185ac:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   185ae:	4b0c      	ldr	r3, [pc, #48]	; (185e0 <bg_thread_main+0x34>)
   185b0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   185b2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   185b4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   185b6:	f7ff ff33 	bl	18420 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   185ba:	4a0a      	ldr	r2, [pc, #40]	; (185e4 <bg_thread_main+0x38>)
   185bc:	490a      	ldr	r1, [pc, #40]	; (185e8 <bg_thread_main+0x3c>)
   185be:	480b      	ldr	r0, [pc, #44]	; (185ec <bg_thread_main+0x40>)
   185c0:	f001 f86d 	bl	1969e <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   185c4:	2003      	movs	r0, #3
   185c6:	f7ff ff2b 	bl	18420 <z_sys_init_run_level>

	z_init_static_threads();
   185ca:	f000 fd6b 	bl	190a4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   185ce:	f7f9 fd19 	bl	12004 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   185d2:	4a07      	ldr	r2, [pc, #28]	; (185f0 <bg_thread_main+0x44>)
   185d4:	7b13      	ldrb	r3, [r2, #12]
   185d6:	f023 0301 	bic.w	r3, r3, #1
   185da:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   185dc:	bd08      	pop	{r3, pc}
   185de:	bf00      	nop
   185e0:	20002ec3 	.word	0x20002ec3
   185e4:	0001d5b6 	.word	0x0001d5b6
   185e8:	0001d8ed 	.word	0x0001d8ed
   185ec:	0001d90c 	.word	0x0001d90c
   185f0:	200022a8 	.word	0x200022a8

000185f4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   185f4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   185f8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 186f0 <z_cstart+0xfc>
   185fc:	b0a9      	sub	sp, #164	; 0xa4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   185fe:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   18602:	4d33      	ldr	r5, [pc, #204]	; (186d0 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   18604:	4e33      	ldr	r6, [pc, #204]	; (186d4 <z_cstart+0xe0>)
   18606:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18608:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 186f4 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   1860c:	4f32      	ldr	r7, [pc, #200]	; (186d8 <z_cstart+0xe4>)
   1860e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   18612:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18614:	23e0      	movs	r3, #224	; 0xe0
   18616:	2400      	movs	r4, #0
   18618:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1861c:	2320      	movs	r3, #32
   1861e:	77eb      	strb	r3, [r5, #31]
   18620:	762c      	strb	r4, [r5, #24]
   18622:	766c      	strb	r4, [r5, #25]
   18624:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   18626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18628:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1862c:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1862e:	f7fa ffa3 	bl	13578 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   18632:	f7fa fe57 	bl	132e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   18636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1863a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1863c:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1863e:	4d27      	ldr	r5, [pc, #156]	; (186dc <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   18640:	f240 1301 	movw	r3, #257	; 0x101
   18644:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   18648:	ab06      	add	r3, sp, #24
   1864a:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1864c:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1864e:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   18652:	f7ff fee5 	bl	18420 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   18656:	2001      	movs	r0, #1
   18658:	f7ff fee2 	bl	18420 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1865c:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   18660:	f000 fbda 	bl	18e18 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18664:	4b1e      	ldr	r3, [pc, #120]	; (186e0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   18666:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18668:	491e      	ldr	r1, [pc, #120]	; (186e4 <z_cstart+0xf0>)
   1866a:	9305      	str	r3, [sp, #20]
   1866c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18670:	4653      	mov	r3, sl
   18672:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   18676:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1867a:	9400      	str	r4, [sp, #0]
   1867c:	4630      	mov	r0, r6
   1867e:	f000 fcb3 	bl	18fe8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18682:	7b73      	ldrb	r3, [r6, #13]
   18684:	4680      	mov	r8, r0
   18686:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1868a:	4630      	mov	r0, r6
   1868c:	7373      	strb	r3, [r6, #13]
   1868e:	f004 f8ce 	bl	1c82e <z_ready_thread>
	z_setup_new_thread(thread, stack,
   18692:	230f      	movs	r3, #15
   18694:	e9cd 4302 	strd	r4, r3, [sp, #8]
   18698:	4913      	ldr	r1, [pc, #76]	; (186e8 <z_cstart+0xf4>)
   1869a:	4b14      	ldr	r3, [pc, #80]	; (186ec <z_cstart+0xf8>)
   1869c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   186a0:	e9cd b404 	strd	fp, r4, [sp, #16]
   186a4:	e9cd 5400 	strd	r5, r4, [sp]
   186a8:	4638      	mov	r0, r7
   186aa:	f000 fc9d 	bl	18fe8 <z_setup_new_thread>
   186ae:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   186b0:	60ef      	str	r7, [r5, #12]
   186b2:	f023 0304 	bic.w	r3, r3, #4
   186b6:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   186b8:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   186bc:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   186c0:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   186c2:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   186c6:	4652      	mov	r2, sl
   186c8:	4641      	mov	r1, r8
   186ca:	4630      	mov	r0, r6
   186cc:	f7fa fd94 	bl	131f8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   186d0:	e000ed00 	.word	0xe000ed00
   186d4:	200022a8 	.word	0x200022a8
   186d8:	20002220 	.word	0x20002220
   186dc:	200025f0 	.word	0x200025f0
   186e0:	0001d933 	.word	0x0001d933
   186e4:	20004160 	.word	0x20004160
   186e8:	20004580 	.word	0x20004580
   186ec:	000184ed 	.word	0x000184ed
   186f0:	20004f00 	.word	0x20004f00
   186f4:	000185ad 	.word	0x000185ad

000186f8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   186f8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   186fa:	4c06      	ldr	r4, [pc, #24]	; (18714 <statics_init+0x1c>)
   186fc:	4d06      	ldr	r5, [pc, #24]	; (18718 <statics_init+0x20>)
   186fe:	42ac      	cmp	r4, r5
   18700:	d301      	bcc.n	18706 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   18702:	2000      	movs	r0, #0
   18704:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   18706:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1870a:	4620      	mov	r0, r4
   1870c:	f003 fef1 	bl	1c4f2 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   18710:	3414      	adds	r4, #20
   18712:	e7f4      	b.n	186fe <statics_init+0x6>
   18714:	20000768 	.word	0x20000768
   18718:	20000768 	.word	0x20000768

0001871c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1871c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1871e:	4b0e      	ldr	r3, [pc, #56]	; (18758 <init_mem_slab_module+0x3c>)
   18720:	4c0e      	ldr	r4, [pc, #56]	; (1875c <init_mem_slab_module+0x40>)
   18722:	42a3      	cmp	r3, r4
   18724:	d301      	bcc.n	1872a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   18726:	2000      	movs	r0, #0
	return rc;
}
   18728:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1872a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1872e:	ea41 0200 	orr.w	r2, r1, r0
   18732:	f012 0203 	ands.w	r2, r2, #3
   18736:	d10b      	bne.n	18750 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   18738:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1873a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1873c:	42aa      	cmp	r2, r5
   1873e:	d101      	bne.n	18744 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18740:	331c      	adds	r3, #28
   18742:	e7ee      	b.n	18722 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   18744:	695e      	ldr	r6, [r3, #20]
   18746:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   18748:	3201      	adds	r2, #1
		slab->free_list = p;
   1874a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1874c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1874e:	e7f5      	b.n	1873c <init_mem_slab_module+0x20>
		return -EINVAL;
   18750:	f06f 0015 	mvn.w	r0, #21
	return rc;
   18754:	e7e8      	b.n	18728 <init_mem_slab_module+0xc>
   18756:	bf00      	nop
   18758:	20000714 	.word	0x20000714
   1875c:	20000768 	.word	0x20000768

00018760 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   18760:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   18762:	460c      	mov	r4, r1
   18764:	4616      	mov	r6, r2
   18766:	461f      	mov	r7, r3
   18768:	f04f 0340 	mov.w	r3, #64	; 0x40
   1876c:	f3ef 8111 	mrs	r1, BASEPRI
   18770:	f383 8811 	msr	BASEPRI, r3
   18774:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   18778:	6943      	ldr	r3, [r0, #20]
   1877a:	b15b      	cbz	r3, 18794 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1877c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1877e:	681b      	ldr	r3, [r3, #0]
   18780:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   18782:	6983      	ldr	r3, [r0, #24]
   18784:	3301      	adds	r3, #1
   18786:	6183      	str	r3, [r0, #24]
		result = 0;
   18788:	2000      	movs	r0, #0
	__asm__ volatile(
   1878a:	f381 8811 	msr	BASEPRI, r1
   1878e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   18792:	e011      	b.n	187b8 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18794:	ea56 0207 	orrs.w	r2, r6, r7
   18798:	d103      	bne.n	187a2 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1879a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1879c:	f06f 000b 	mvn.w	r0, #11
   187a0:	e7f3      	b.n	1878a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   187a2:	4602      	mov	r2, r0
   187a4:	e9cd 6700 	strd	r6, r7, [sp]
   187a8:	4804      	ldr	r0, [pc, #16]	; (187bc <k_mem_slab_alloc+0x5c>)
   187aa:	f000 faf3 	bl	18d94 <z_pend_curr>
		if (result == 0) {
   187ae:	b918      	cbnz	r0, 187b8 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   187b0:	4b03      	ldr	r3, [pc, #12]	; (187c0 <k_mem_slab_alloc+0x60>)
   187b2:	689b      	ldr	r3, [r3, #8]
   187b4:	695b      	ldr	r3, [r3, #20]
   187b6:	6023      	str	r3, [r4, #0]
}
   187b8:	b002      	add	sp, #8
   187ba:	bdd0      	pop	{r4, r6, r7, pc}
   187bc:	20002ec4 	.word	0x20002ec4
   187c0:	200025f0 	.word	0x200025f0

000187c4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   187c4:	b570      	push	{r4, r5, r6, lr}
   187c6:	4604      	mov	r4, r0
   187c8:	460d      	mov	r5, r1
	__asm__ volatile(
   187ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   187ce:	f3ef 8611 	mrs	r6, BASEPRI
   187d2:	f383 8811 	msr	BASEPRI, r3
   187d6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   187da:	f004 f883 	bl	1c8e4 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   187de:	b160      	cbz	r0, 187fa <k_mem_slab_free+0x36>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   187e0:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   187e2:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   187e4:	2100      	movs	r1, #0
   187e6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
		z_ready_thread(pending_thread);
   187ea:	f004 f820 	bl	1c82e <z_ready_thread>
		z_reschedule(&lock, key);
   187ee:	4631      	mov	r1, r6
   187f0:	4808      	ldr	r0, [pc, #32]	; (18814 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   187f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   187f6:	f000 b885 	b.w	18904 <z_reschedule>
		**(char ***)mem = slab->free_list;
   187fa:	682b      	ldr	r3, [r5, #0]
   187fc:	6962      	ldr	r2, [r4, #20]
   187fe:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   18800:	682b      	ldr	r3, [r5, #0]
   18802:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   18804:	69a3      	ldr	r3, [r4, #24]
   18806:	3b01      	subs	r3, #1
   18808:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1880a:	f386 8811 	msr	BASEPRI, r6
   1880e:	f3bf 8f6f 	isb	sy
}
   18812:	bd70      	pop	{r4, r5, r6, pc}
   18814:	20002ec4 	.word	0x20002ec4

00018818 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   18818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1881a:	4616      	mov	r6, r2
   1881c:	461f      	mov	r7, r3
	__asm__ volatile(
   1881e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18822:	f3ef 8511 	mrs	r5, BASEPRI
   18826:	f383 8811 	msr	BASEPRI, r3
   1882a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1882e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18830:	b19c      	cbz	r4, 1885a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18832:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18834:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18836:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1883a:	4294      	cmp	r4, r2
	list->head = node;
   1883c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1883e:	bf08      	it	eq
   18840:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18842:	2101      	movs	r1, #1
   18844:	4620      	mov	r0, r4
   18846:	f003 ff3e 	bl	1c6c6 <z_queue_node_peek>
   1884a:	4604      	mov	r4, r0
	__asm__ volatile(
   1884c:	f385 8811 	msr	BASEPRI, r5
   18850:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   18854:	4620      	mov	r0, r4
   18856:	b003      	add	sp, #12
   18858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1885a:	ea56 0307 	orrs.w	r3, r6, r7
   1885e:	d0f5      	beq.n	1884c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18860:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   18864:	e9cd 6700 	strd	r6, r7, [sp]
   18868:	4629      	mov	r1, r5
   1886a:	4610      	mov	r0, r2
   1886c:	f000 fa92 	bl	18d94 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   18870:	2800      	cmp	r0, #0
   18872:	d1ef      	bne.n	18854 <z_impl_k_queue_get+0x3c>
   18874:	4b01      	ldr	r3, [pc, #4]	; (1887c <z_impl_k_queue_get+0x64>)
   18876:	689b      	ldr	r3, [r3, #8]
   18878:	695c      	ldr	r4, [r3, #20]
   1887a:	e7eb      	b.n	18854 <z_impl_k_queue_get+0x3c>
   1887c:	200025f0 	.word	0x200025f0

00018880 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   18880:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   18882:	4c08      	ldr	r4, [pc, #32]	; (188a4 <z_reset_time_slice+0x24>)
   18884:	6823      	ldr	r3, [r4, #0]
   18886:	b15b      	cbz	r3, 188a0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18888:	f7fa fb26 	bl	12ed8 <z_clock_elapsed>
   1888c:	4603      	mov	r3, r0
   1888e:	6820      	ldr	r0, [r4, #0]
   18890:	4a05      	ldr	r2, [pc, #20]	; (188a8 <z_reset_time_slice+0x28>)
   18892:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   18894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18898:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1889a:	2100      	movs	r1, #0
   1889c:	f004 b91a 	b.w	1cad4 <z_set_timeout_expiry>
}
   188a0:	bd10      	pop	{r4, pc}
   188a2:	bf00      	nop
   188a4:	2000262c 	.word	0x2000262c
   188a8:	200025f0 	.word	0x200025f0

000188ac <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   188ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188ae:	4605      	mov	r5, r0
   188b0:	460c      	mov	r4, r1
	__asm__ volatile(
   188b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   188b6:	f3ef 8611 	mrs	r6, BASEPRI
   188ba:	f383 8811 	msr	BASEPRI, r3
   188be:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   188c2:	4b0d      	ldr	r3, [pc, #52]	; (188f8 <k_sched_time_slice_set+0x4c>)
   188c4:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   188c6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   188ca:	f240 30e7 	movw	r0, #999	; 0x3e7
   188ce:	2100      	movs	r1, #0
   188d0:	615a      	str	r2, [r3, #20]
   188d2:	fbe7 0105 	umlal	r0, r1, r7, r5
   188d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   188da:	2300      	movs	r3, #0
   188dc:	f7e7 fbfe 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   188e0:	4b06      	ldr	r3, [pc, #24]	; (188fc <k_sched_time_slice_set+0x50>)
   188e2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   188e4:	4b06      	ldr	r3, [pc, #24]	; (18900 <k_sched_time_slice_set+0x54>)
   188e6:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   188e8:	f7ff ffca 	bl	18880 <z_reset_time_slice>
	__asm__ volatile(
   188ec:	f386 8811 	msr	BASEPRI, r6
   188f0:	f3bf 8f6f 	isb	sy
	}
}
   188f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   188f6:	bf00      	nop
   188f8:	200025f0 	.word	0x200025f0
   188fc:	2000262c 	.word	0x2000262c
   18900:	20002628 	.word	0x20002628

00018904 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18904:	b949      	cbnz	r1, 1891a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18906:	f3ef 8005 	mrs	r0, IPSR
   1890a:	b930      	cbnz	r0, 1891a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1890c:	4b05      	ldr	r3, [pc, #20]	; (18924 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1890e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18910:	689b      	ldr	r3, [r3, #8]
   18912:	429a      	cmp	r2, r3
   18914:	d001      	beq.n	1891a <z_reschedule+0x16>
	ret = arch_swap(key);
   18916:	f7fa bbe5 	b.w	130e4 <arch_swap>
   1891a:	f381 8811 	msr	BASEPRI, r1
   1891e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   18922:	4770      	bx	lr
   18924:	200025f0 	.word	0x200025f0

00018928 <k_sched_lock>:
	__asm__ volatile(
   18928:	f04f 0340 	mov.w	r3, #64	; 0x40
   1892c:	f3ef 8111 	mrs	r1, BASEPRI
   18930:	f383 8811 	msr	BASEPRI, r3
   18934:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   18938:	4b04      	ldr	r3, [pc, #16]	; (1894c <k_sched_lock+0x24>)
   1893a:	689a      	ldr	r2, [r3, #8]
   1893c:	7bd3      	ldrb	r3, [r2, #15]
   1893e:	3b01      	subs	r3, #1
   18940:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   18942:	f381 8811 	msr	BASEPRI, r1
   18946:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1894a:	4770      	bx	lr
   1894c:	200025f0 	.word	0x200025f0

00018950 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   18950:	4b09      	ldr	r3, [pc, #36]	; (18978 <z_priq_dumb_remove+0x28>)
   18952:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   18956:	4282      	cmp	r2, r0
   18958:	d105      	bne.n	18966 <z_priq_dumb_remove+0x16>
   1895a:	689b      	ldr	r3, [r3, #8]
   1895c:	428b      	cmp	r3, r1
   1895e:	d102      	bne.n	18966 <z_priq_dumb_remove+0x16>
   18960:	7b4b      	ldrb	r3, [r1, #13]
   18962:	06db      	lsls	r3, r3, #27
   18964:	d106      	bne.n	18974 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   18966:	e9d1 3200 	ldrd	r3, r2, [r1]
   1896a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1896c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1896e:	2300      	movs	r3, #0
	node->prev = NULL;
   18970:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   18974:	4770      	bx	lr
   18976:	bf00      	nop
   18978:	200025f0 	.word	0x200025f0

0001897c <update_cache>:
{
   1897c:	b538      	push	{r3, r4, r5, lr}
   1897e:	4c12      	ldr	r4, [pc, #72]	; (189c8 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   18980:	6923      	ldr	r3, [r4, #16]
   18982:	68a2      	ldr	r2, [r4, #8]
{
   18984:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   18986:	b10b      	cbz	r3, 1898c <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   18988:	68e5      	ldr	r5, [r4, #12]
   1898a:	e00c      	b.n	189a6 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1898c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   18990:	f003 ff43 	bl	1c81a <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   18994:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   18996:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   18998:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1899a:	bf44      	itt	mi
   1899c:	f043 0308 	orrmi.w	r3, r3, #8
   189a0:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   189a2:	2d00      	cmp	r5, #0
   189a4:	d0f0      	beq.n	18988 <update_cache+0xc>
	if (preempt_ok != 0) {
   189a6:	b949      	cbnz	r1, 189bc <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   189a8:	7b53      	ldrb	r3, [r2, #13]
   189aa:	06db      	lsls	r3, r3, #27
   189ac:	d106      	bne.n	189bc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   189ae:	69ab      	ldr	r3, [r5, #24]
   189b0:	b923      	cbnz	r3, 189bc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   189b2:	89d3      	ldrh	r3, [r2, #14]
   189b4:	2b7f      	cmp	r3, #127	; 0x7f
   189b6:	d901      	bls.n	189bc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   189b8:	62a2      	str	r2, [r4, #40]	; 0x28
}
   189ba:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   189bc:	4295      	cmp	r5, r2
   189be:	d001      	beq.n	189c4 <update_cache+0x48>
			z_reset_time_slice();
   189c0:	f7ff ff5e 	bl	18880 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   189c4:	62a5      	str	r5, [r4, #40]	; 0x28
}
   189c6:	e7f8      	b.n	189ba <update_cache+0x3e>
   189c8:	200025f0 	.word	0x200025f0

000189cc <k_sched_unlock>:
{
   189cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   189ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   189d2:	f3ef 8411 	mrs	r4, BASEPRI
   189d6:	f383 8811 	msr	BASEPRI, r3
   189da:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   189de:	4b08      	ldr	r3, [pc, #32]	; (18a00 <k_sched_unlock+0x34>)
   189e0:	689a      	ldr	r2, [r3, #8]
   189e2:	7bd3      	ldrb	r3, [r2, #15]
   189e4:	3301      	adds	r3, #1
   189e6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   189e8:	2000      	movs	r0, #0
   189ea:	f7ff ffc7 	bl	1897c <update_cache>
	__asm__ volatile(
   189ee:	f384 8811 	msr	BASEPRI, r4
   189f2:	f3bf 8f6f 	isb	sy
}
   189f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   189fa:	f003 bee2 	b.w	1c7c2 <z_reschedule_unlocked>
   189fe:	bf00      	nop
   18a00:	200025f0 	.word	0x200025f0

00018a04 <ready_thread>:
{
   18a04:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18a06:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   18a0a:	7b43      	ldrb	r3, [r0, #13]
   18a0c:	2a00      	cmp	r2, #0
   18a0e:	db2c      	blt.n	18a6a <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18a10:	06db      	lsls	r3, r3, #27
   18a12:	d12a      	bne.n	18a6a <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   18a14:	6983      	ldr	r3, [r0, #24]
   18a16:	bb43      	cbnz	r3, 18a6a <ready_thread+0x66>
	return list->head == list;
   18a18:	4a15      	ldr	r2, [pc, #84]	; (18a70 <ready_thread+0x6c>)
   18a1a:	4611      	mov	r1, r2
   18a1c:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18a20:	428c      	cmp	r4, r1
   18a22:	bf18      	it	ne
   18a24:	4623      	movne	r3, r4
   18a26:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18a28:	6b14      	ldr	r4, [r2, #48]	; 0x30
   18a2a:	bf38      	it	cc
   18a2c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18a2e:	b1b3      	cbz	r3, 18a5e <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   18a30:	f990 600e 	ldrsb.w	r6, [r0, #14]
   18a34:	f993 500e 	ldrsb.w	r5, [r3, #14]
   18a38:	42ae      	cmp	r6, r5
   18a3a:	db03      	blt.n	18a44 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   18a3c:	42a3      	cmp	r3, r4
   18a3e:	d00e      	beq.n	18a5e <ready_thread+0x5a>
   18a40:	681b      	ldr	r3, [r3, #0]
   18a42:	e7f4      	b.n	18a2e <ready_thread+0x2a>
	node->prev = successor->prev;
   18a44:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18a46:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   18a4a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   18a4c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   18a4e:	7b43      	ldrb	r3, [r0, #13]
   18a50:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18a54:	7343      	strb	r3, [r0, #13]
}
   18a56:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   18a58:	2000      	movs	r0, #0
   18a5a:	f7ff bf8f 	b.w	1897c <update_cache>
	node->prev = list->tail;
   18a5e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   18a62:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18a64:	6018      	str	r0, [r3, #0]
	list->tail = node;
   18a66:	6310      	str	r0, [r2, #48]	; 0x30
}
   18a68:	e7f1      	b.n	18a4e <ready_thread+0x4a>
}
   18a6a:	bc70      	pop	{r4, r5, r6}
   18a6c:	4770      	bx	lr
   18a6e:	bf00      	nop
   18a70:	200025f0 	.word	0x200025f0

00018a74 <z_sched_start>:
{
   18a74:	b510      	push	{r4, lr}
	__asm__ volatile(
   18a76:	f04f 0240 	mov.w	r2, #64	; 0x40
   18a7a:	f3ef 8411 	mrs	r4, BASEPRI
   18a7e:	f382 8811 	msr	BASEPRI, r2
   18a82:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   18a86:	7b42      	ldrb	r2, [r0, #13]
   18a88:	0751      	lsls	r1, r2, #29
   18a8a:	d404      	bmi.n	18a96 <z_sched_start+0x22>
	__asm__ volatile(
   18a8c:	f384 8811 	msr	BASEPRI, r4
   18a90:	f3bf 8f6f 	isb	sy
}
   18a94:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18a96:	f022 0204 	bic.w	r2, r2, #4
   18a9a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   18a9c:	f7ff ffb2 	bl	18a04 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18aa0:	4621      	mov	r1, r4
   18aa2:	4802      	ldr	r0, [pc, #8]	; (18aac <z_sched_start+0x38>)
}
   18aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   18aa8:	f7ff bf2c 	b.w	18904 <z_reschedule>
   18aac:	20002ec4 	.word	0x20002ec4

00018ab0 <move_thread_to_end_of_prio_q>:
{
   18ab0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18ab2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   18ab6:	2b00      	cmp	r3, #0
{
   18ab8:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18aba:	da02      	bge.n	18ac2 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18abc:	4817      	ldr	r0, [pc, #92]	; (18b1c <move_thread_to_end_of_prio_q+0x6c>)
   18abe:	f7ff ff47 	bl	18950 <z_priq_dumb_remove>
	return list->head == list;
   18ac2:	4a17      	ldr	r2, [pc, #92]	; (18b20 <move_thread_to_end_of_prio_q+0x70>)
   18ac4:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18ac6:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
   18ac8:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18acc:	4283      	cmp	r3, r0
   18ace:	bf08      	it	eq
   18ad0:	2300      	moveq	r3, #0
   18ad2:	2b00      	cmp	r3, #0
   18ad4:	bf38      	it	cc
   18ad6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18ad8:	b1d3      	cbz	r3, 18b10 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   18ada:	f991 600e 	ldrsb.w	r6, [r1, #14]
   18ade:	f993 500e 	ldrsb.w	r5, [r3, #14]
   18ae2:	42ae      	cmp	r6, r5
   18ae4:	db03      	blt.n	18aee <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   18ae6:	42a3      	cmp	r3, r4
   18ae8:	d012      	beq.n	18b10 <move_thread_to_end_of_prio_q+0x60>
   18aea:	681b      	ldr	r3, [r3, #0]
   18aec:	e7f4      	b.n	18ad8 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   18aee:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   18af0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   18af4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   18af6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   18af8:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   18afa:	6890      	ldr	r0, [r2, #8]
   18afc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18b00:	734b      	strb	r3, [r1, #13]
   18b02:	1a43      	subs	r3, r0, r1
   18b04:	4258      	negs	r0, r3
}
   18b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   18b0a:	4158      	adcs	r0, r3
   18b0c:	f7ff bf36 	b.w	1897c <update_cache>
	node->prev = list->tail;
   18b10:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   18b14:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18b16:	6019      	str	r1, [r3, #0]
	list->tail = node;
   18b18:	6311      	str	r1, [r2, #48]	; 0x30
}
   18b1a:	e7ed      	b.n	18af8 <move_thread_to_end_of_prio_q+0x48>
   18b1c:	2000261c 	.word	0x2000261c
   18b20:	200025f0 	.word	0x200025f0

00018b24 <z_time_slice>:
{
   18b24:	b570      	push	{r4, r5, r6, lr}
   18b26:	4601      	mov	r1, r0
	__asm__ volatile(
   18b28:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b2c:	f3ef 8411 	mrs	r4, BASEPRI
   18b30:	f383 8811 	msr	BASEPRI, r3
   18b34:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   18b38:	4b16      	ldr	r3, [pc, #88]	; (18b94 <z_time_slice+0x70>)
   18b3a:	4a17      	ldr	r2, [pc, #92]	; (18b98 <z_time_slice+0x74>)
   18b3c:	6898      	ldr	r0, [r3, #8]
   18b3e:	6815      	ldr	r5, [r2, #0]
   18b40:	42a8      	cmp	r0, r5
   18b42:	461d      	mov	r5, r3
   18b44:	d106      	bne.n	18b54 <z_time_slice+0x30>
			z_reset_time_slice();
   18b46:	f7ff fe9b 	bl	18880 <z_reset_time_slice>
	__asm__ volatile(
   18b4a:	f384 8811 	msr	BASEPRI, r4
   18b4e:	f3bf 8f6f 	isb	sy
}
   18b52:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   18b54:	2600      	movs	r6, #0
   18b56:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   18b58:	4a10      	ldr	r2, [pc, #64]	; (18b9c <z_time_slice+0x78>)
   18b5a:	6812      	ldr	r2, [r2, #0]
   18b5c:	b1ba      	cbz	r2, 18b8e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18b5e:	89c2      	ldrh	r2, [r0, #14]
   18b60:	2a7f      	cmp	r2, #127	; 0x7f
   18b62:	d814      	bhi.n	18b8e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   18b64:	7b42      	ldrb	r2, [r0, #13]
   18b66:	06d2      	lsls	r2, r2, #27
   18b68:	d111      	bne.n	18b8e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18b6a:	4a0d      	ldr	r2, [pc, #52]	; (18ba0 <z_time_slice+0x7c>)
   18b6c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   18b70:	6812      	ldr	r2, [r2, #0]
   18b72:	4296      	cmp	r6, r2
   18b74:	db0b      	blt.n	18b8e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18b76:	4a0b      	ldr	r2, [pc, #44]	; (18ba4 <z_time_slice+0x80>)
   18b78:	4290      	cmp	r0, r2
   18b7a:	d008      	beq.n	18b8e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   18b7c:	695a      	ldr	r2, [r3, #20]
   18b7e:	428a      	cmp	r2, r1
   18b80:	dc02      	bgt.n	18b88 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   18b82:	f7ff ff95 	bl	18ab0 <move_thread_to_end_of_prio_q>
   18b86:	e7de      	b.n	18b46 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   18b88:	1a52      	subs	r2, r2, r1
   18b8a:	615a      	str	r2, [r3, #20]
   18b8c:	e7dd      	b.n	18b4a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   18b8e:	2300      	movs	r3, #0
   18b90:	616b      	str	r3, [r5, #20]
   18b92:	e7da      	b.n	18b4a <z_time_slice+0x26>
   18b94:	200025f0 	.word	0x200025f0
   18b98:	20002624 	.word	0x20002624
   18b9c:	2000262c 	.word	0x2000262c
   18ba0:	20002628 	.word	0x20002628
   18ba4:	20002220 	.word	0x20002220

00018ba8 <z_impl_k_thread_suspend>:
{
   18ba8:	b570      	push	{r4, r5, r6, lr}
   18baa:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18bac:	3018      	adds	r0, #24
   18bae:	f003 ff6b 	bl	1ca88 <z_abort_timeout>
	__asm__ volatile(
   18bb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   18bb6:	f3ef 8611 	mrs	r6, BASEPRI
   18bba:	f383 8811 	msr	BASEPRI, r3
   18bbe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   18bc2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18bc6:	2b00      	cmp	r3, #0
   18bc8:	da07      	bge.n	18bda <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18bca:	480f      	ldr	r0, [pc, #60]	; (18c08 <z_impl_k_thread_suspend+0x60>)
   18bcc:	4621      	mov	r1, r4
   18bce:	f7ff febf 	bl	18950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18bd2:	7b63      	ldrb	r3, [r4, #13]
   18bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18bd8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18bda:	4d0c      	ldr	r5, [pc, #48]	; (18c0c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18bdc:	7b63      	ldrb	r3, [r4, #13]
   18bde:	68a8      	ldr	r0, [r5, #8]
   18be0:	f043 0310 	orr.w	r3, r3, #16
   18be4:	7363      	strb	r3, [r4, #13]
   18be6:	1b03      	subs	r3, r0, r4
   18be8:	4258      	negs	r0, r3
   18bea:	4158      	adcs	r0, r3
   18bec:	f7ff fec6 	bl	1897c <update_cache>
	__asm__ volatile(
   18bf0:	f386 8811 	msr	BASEPRI, r6
   18bf4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18bf8:	68ab      	ldr	r3, [r5, #8]
   18bfa:	42a3      	cmp	r3, r4
   18bfc:	d103      	bne.n	18c06 <z_impl_k_thread_suspend+0x5e>
}
   18bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18c02:	f003 bdde 	b.w	1c7c2 <z_reschedule_unlocked>
}
   18c06:	bd70      	pop	{r4, r5, r6, pc}
   18c08:	2000261c 	.word	0x2000261c
   18c0c:	200025f0 	.word	0x200025f0

00018c10 <z_thread_single_abort>:
{
   18c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c14:	4604      	mov	r4, r0
	__asm__ volatile(
   18c16:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c1a:	f3ef 8211 	mrs	r2, BASEPRI
   18c1e:	f383 8811 	msr	BASEPRI, r3
   18c22:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   18c26:	7b43      	ldrb	r3, [r0, #13]
   18c28:	f013 0f28 	tst.w	r3, #40	; 0x28
   18c2c:	d005      	beq.n	18c3a <z_thread_single_abort+0x2a>
	__asm__ volatile(
   18c2e:	f382 8811 	msr	BASEPRI, r2
   18c32:	f3bf 8f6f 	isb	sy
}
   18c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   18c3a:	f043 0320 	orr.w	r3, r3, #32
   18c3e:	7343      	strb	r3, [r0, #13]
   18c40:	f382 8811 	msr	BASEPRI, r2
   18c44:	f3bf 8f6f 	isb	sy
   18c48:	3018      	adds	r0, #24
   18c4a:	f003 ff1d 	bl	1ca88 <z_abort_timeout>
	__asm__ volatile(
   18c4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c52:	f3ef 8611 	mrs	r6, BASEPRI
   18c56:	f383 8811 	msr	BASEPRI, r3
   18c5a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18c5e:	7b63      	ldrb	r3, [r4, #13]
   18c60:	06d8      	lsls	r0, r3, #27
   18c62:	d116      	bne.n	18c92 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   18c64:	69a2      	ldr	r2, [r4, #24]
   18c66:	b9a2      	cbnz	r2, 18c92 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   18c68:	0619      	lsls	r1, r3, #24
   18c6a:	d507      	bpl.n	18c7c <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   18c6c:	4826      	ldr	r0, [pc, #152]	; (18d08 <z_thread_single_abort+0xf8>)
   18c6e:	4621      	mov	r1, r4
   18c70:	f7ff fe6e 	bl	18950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18c74:	7b63      	ldrb	r3, [r4, #13]
   18c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18c7a:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   18c7c:	4b23      	ldr	r3, [pc, #140]	; (18d0c <z_thread_single_abort+0xfc>)
   18c7e:	6898      	ldr	r0, [r3, #8]
   18c80:	1b02      	subs	r2, r0, r4
   18c82:	4250      	negs	r0, r2
   18c84:	4150      	adcs	r0, r2
   18c86:	f7ff fe79 	bl	1897c <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   18c8a:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   18c8e:	2700      	movs	r7, #0
   18c90:	e01e      	b.n	18cd0 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   18c92:	079b      	lsls	r3, r3, #30
   18c94:	d5f9      	bpl.n	18c8a <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   18c96:	68a0      	ldr	r0, [r4, #8]
   18c98:	4621      	mov	r1, r4
   18c9a:	f7ff fe59 	bl	18950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18c9e:	7b63      	ldrb	r3, [r4, #13]
   18ca0:	f023 0302 	bic.w	r3, r3, #2
   18ca4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   18ca6:	2300      	movs	r3, #0
   18ca8:	60a3      	str	r3, [r4, #8]
   18caa:	e7ee      	b.n	18c8a <z_thread_single_abort+0x7a>
   18cac:	f105 0018 	add.w	r0, r5, #24
   18cb0:	f003 feea 	bl	1ca88 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   18cb4:	68a8      	ldr	r0, [r5, #8]
   18cb6:	4629      	mov	r1, r5
   18cb8:	f7ff fe4a 	bl	18950 <z_priq_dumb_remove>
   18cbc:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   18cbe:	60af      	str	r7, [r5, #8]
   18cc0:	f023 0302 	bic.w	r3, r3, #2
   18cc4:	736b      	strb	r3, [r5, #13]
   18cc6:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   18cca:	4628      	mov	r0, r5
   18ccc:	f7ff fe9a 	bl	18a04 <ready_thread>
	return list->head == list;
   18cd0:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18cd2:	4545      	cmp	r5, r8
   18cd4:	d001      	beq.n	18cda <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   18cd6:	2d00      	cmp	r5, #0
   18cd8:	d1e8      	bne.n	18cac <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   18cda:	4b0c      	ldr	r3, [pc, #48]	; (18d0c <z_thread_single_abort+0xfc>)
   18cdc:	689a      	ldr	r2, [r3, #8]
   18cde:	4b0c      	ldr	r3, [pc, #48]	; (18d10 <z_thread_single_abort+0x100>)
   18ce0:	429a      	cmp	r2, r3
   18ce2:	d102      	bne.n	18cea <z_thread_single_abort+0xda>
			update_cache(1);
   18ce4:	2001      	movs	r0, #1
   18ce6:	f7ff fe49 	bl	1897c <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   18cea:	7b63      	ldrb	r3, [r4, #13]
   18cec:	f043 0308 	orr.w	r3, r3, #8
   18cf0:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   18cf2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   18cf4:	f386 8811 	msr	BASEPRI, r6
   18cf8:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   18cfc:	2b00      	cmp	r3, #0
   18cfe:	d09a      	beq.n	18c36 <z_thread_single_abort+0x26>
		fn_abort(thread);
   18d00:	4620      	mov	r0, r4
}
   18d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   18d06:	4718      	bx	r3
   18d08:	2000261c 	.word	0x2000261c
   18d0c:	200025f0 	.word	0x200025f0
   18d10:	20002220 	.word	0x20002220

00018d14 <unready_thread>:
{
   18d14:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   18d16:	f990 300d 	ldrsb.w	r3, [r0, #13]
   18d1a:	2b00      	cmp	r3, #0
{
   18d1c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18d1e:	da06      	bge.n	18d2e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18d20:	4807      	ldr	r0, [pc, #28]	; (18d40 <unready_thread+0x2c>)
   18d22:	f7ff fe15 	bl	18950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18d26:	7b4b      	ldrb	r3, [r1, #13]
   18d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18d2c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   18d2e:	4b05      	ldr	r3, [pc, #20]	; (18d44 <unready_thread+0x30>)
   18d30:	6898      	ldr	r0, [r3, #8]
   18d32:	1a43      	subs	r3, r0, r1
   18d34:	4258      	negs	r0, r3
   18d36:	4158      	adcs	r0, r3
}
   18d38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   18d3c:	f7ff be1e 	b.w	1897c <update_cache>
   18d40:	2000261c 	.word	0x2000261c
   18d44:	200025f0 	.word	0x200025f0

00018d48 <pend>:
{
   18d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d4c:	4606      	mov	r6, r0
   18d4e:	4614      	mov	r4, r2
   18d50:	461d      	mov	r5, r3
	__asm__ volatile(
   18d52:	f04f 0340 	mov.w	r3, #64	; 0x40
   18d56:	f3ef 8711 	mrs	r7, BASEPRI
   18d5a:	f383 8811 	msr	BASEPRI, r3
   18d5e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   18d62:	f003 fd94 	bl	1c88e <add_to_waitq_locked>
	__asm__ volatile(
   18d66:	f387 8811 	msr	BASEPRI, r7
   18d6a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18d6e:	1c6b      	adds	r3, r5, #1
   18d70:	bf08      	it	eq
   18d72:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   18d76:	d008      	beq.n	18d8a <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18d78:	4622      	mov	r2, r4
   18d7a:	462b      	mov	r3, r5
   18d7c:	f106 0018 	add.w	r0, r6, #24
   18d80:	4903      	ldr	r1, [pc, #12]	; (18d90 <pend+0x48>)
}
   18d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18d86:	f000 bab5 	b.w	192f4 <z_add_timeout>
   18d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18d8e:	bf00      	nop
   18d90:	0001c84f 	.word	0x0001c84f

00018d94 <z_pend_curr>:
{
   18d94:	b510      	push	{r4, lr}
	pending_current = _current;
   18d96:	4b07      	ldr	r3, [pc, #28]	; (18db4 <z_pend_curr+0x20>)
   18d98:	6898      	ldr	r0, [r3, #8]
   18d9a:	4b07      	ldr	r3, [pc, #28]	; (18db8 <z_pend_curr+0x24>)
{
   18d9c:	460c      	mov	r4, r1
	pending_current = _current;
   18d9e:	6018      	str	r0, [r3, #0]
{
   18da0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   18da2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18da6:	f7ff ffcf 	bl	18d48 <pend>
   18daa:	4620      	mov	r0, r4
}
   18dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18db0:	f7fa b998 	b.w	130e4 <arch_swap>
   18db4:	200025f0 	.word	0x200025f0
   18db8:	20002624 	.word	0x20002624

00018dbc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   18dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18dbe:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   18dc0:	f003 fea2 	bl	1cb08 <z_tick_get_32>
   18dc4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   18dc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   18dca:	f3ef 8711 	mrs	r7, BASEPRI
   18dce:	f383 8811 	msr	BASEPRI, r3
   18dd2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   18dd6:	4e0d      	ldr	r6, [pc, #52]	; (18e0c <z_tick_sleep.part.0+0x50>)
   18dd8:	4b0d      	ldr	r3, [pc, #52]	; (18e10 <z_tick_sleep.part.0+0x54>)
   18dda:	68b0      	ldr	r0, [r6, #8]
   18ddc:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   18dde:	f7ff ff99 	bl	18d14 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   18de2:	68b0      	ldr	r0, [r6, #8]
   18de4:	490b      	ldr	r1, [pc, #44]	; (18e14 <z_tick_sleep.part.0+0x58>)
   18de6:	462a      	mov	r2, r5
   18de8:	17eb      	asrs	r3, r5, #31
   18dea:	3018      	adds	r0, #24
   18dec:	f000 fa82 	bl	192f4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   18df0:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18df2:	7b53      	ldrb	r3, [r2, #13]
   18df4:	f043 0310 	orr.w	r3, r3, #16
   18df8:	7353      	strb	r3, [r2, #13]
   18dfa:	4638      	mov	r0, r7
   18dfc:	f7fa f972 	bl	130e4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   18e00:	f003 fe82 	bl	1cb08 <z_tick_get_32>
   18e04:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   18e06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   18e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18e0c:	200025f0 	.word	0x200025f0
   18e10:	20002624 	.word	0x20002624
   18e14:	0001c84f 	.word	0x0001c84f

00018e18 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   18e18:	4b04      	ldr	r3, [pc, #16]	; (18e2c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   18e1a:	2100      	movs	r1, #0
   18e1c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   18e20:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   18e24:	4608      	mov	r0, r1
   18e26:	f7ff bd41 	b.w	188ac <k_sched_time_slice_set>
   18e2a:	bf00      	nop
   18e2c:	200025f0 	.word	0x200025f0

00018e30 <z_impl_k_yield>:
{
   18e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   18e32:	4c24      	ldr	r4, [pc, #144]	; (18ec4 <z_impl_k_yield+0x94>)
   18e34:	4b24      	ldr	r3, [pc, #144]	; (18ec8 <z_impl_k_yield+0x98>)
   18e36:	68a2      	ldr	r2, [r4, #8]
   18e38:	429a      	cmp	r2, r3
   18e3a:	d030      	beq.n	18e9e <z_impl_k_yield+0x6e>
   18e3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e40:	f3ef 8511 	mrs	r5, BASEPRI
   18e44:	f383 8811 	msr	BASEPRI, r3
   18e48:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   18e4c:	68a1      	ldr	r1, [r4, #8]
   18e4e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   18e52:	f7ff fd7d 	bl	18950 <z_priq_dumb_remove>
	return list->head == list;
   18e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   18e58:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18e5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18e5c:	4283      	cmp	r3, r0
   18e5e:	bf08      	it	eq
   18e60:	2300      	moveq	r3, #0
   18e62:	2b00      	cmp	r3, #0
   18e64:	bf38      	it	cc
   18e66:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18e68:	b32b      	cbz	r3, 18eb6 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   18e6a:	f992 700e 	ldrsb.w	r7, [r2, #14]
   18e6e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   18e72:	42b7      	cmp	r7, r6
   18e74:	db03      	blt.n	18e7e <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   18e76:	428b      	cmp	r3, r1
   18e78:	d01d      	beq.n	18eb6 <z_impl_k_yield+0x86>
   18e7a:	681b      	ldr	r3, [r3, #0]
   18e7c:	e7f4      	b.n	18e68 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   18e7e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18e80:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   18e84:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   18e86:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   18e88:	7b53      	ldrb	r3, [r2, #13]
   18e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18e8e:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   18e90:	2001      	movs	r0, #1
   18e92:	f7ff fd73 	bl	1897c <update_cache>
	__asm__ volatile(
   18e96:	f385 8811 	msr	BASEPRI, r5
   18e9a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   18e9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18ea2:	f3ef 8011 	mrs	r0, BASEPRI
   18ea6:	f383 8811 	msr	BASEPRI, r3
   18eaa:	f3bf 8f6f 	isb	sy
}
   18eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18eb2:	f7fa b917 	b.w	130e4 <arch_swap>
	node->prev = list->tail;
   18eb6:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   18eba:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18ebc:	601a      	str	r2, [r3, #0]
	list->tail = node;
   18ebe:	6322      	str	r2, [r4, #48]	; 0x30
}
   18ec0:	e7e2      	b.n	18e88 <z_impl_k_yield+0x58>
   18ec2:	bf00      	nop
   18ec4:	200025f0 	.word	0x200025f0
   18ec8:	20002220 	.word	0x20002220

00018ecc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   18ecc:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18ece:	3301      	adds	r3, #1
   18ed0:	bf08      	it	eq
   18ed2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   18ed6:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18ed8:	d106      	bne.n	18ee8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   18eda:	4b0b      	ldr	r3, [pc, #44]	; (18f08 <z_impl_k_sleep+0x3c>)
   18edc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   18ede:	f7ff fe63 	bl	18ba8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   18ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   18ee6:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   18ee8:	4604      	mov	r4, r0
	if (ticks == 0) {
   18eea:	b948      	cbnz	r0, 18f00 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   18eec:	f7ff ffa0 	bl	18e30 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   18ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18ef4:	fb84 3400 	smull	r3, r4, r4, r0
   18ef8:	0bd8      	lsrs	r0, r3, #15
   18efa:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   18efe:	e7f2      	b.n	18ee6 <z_impl_k_sleep+0x1a>
   18f00:	f7ff ff5c 	bl	18dbc <z_tick_sleep.part.0>
   18f04:	4604      	mov	r4, r0
   18f06:	e7f3      	b.n	18ef0 <z_impl_k_sleep+0x24>
   18f08:	200025f0 	.word	0x200025f0

00018f0c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   18f0c:	4b01      	ldr	r3, [pc, #4]	; (18f14 <z_impl_k_current_get+0x8>)
   18f0e:	6898      	ldr	r0, [r3, #8]
   18f10:	4770      	bx	lr
   18f12:	bf00      	nop
   18f14:	200025f0 	.word	0x200025f0

00018f18 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18f18:	b538      	push	{r3, r4, r5, lr}
   18f1a:	4604      	mov	r4, r0
   18f1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18f20:	f3ef 8511 	mrs	r5, BASEPRI
   18f24:	f383 8811 	msr	BASEPRI, r3
   18f28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   18f2c:	f003 fcda 	bl	1c8e4 <z_unpend_first_thread>

	if (thread != NULL) {
   18f30:	b150      	cbz	r0, 18f48 <z_impl_k_sem_give+0x30>
   18f32:	2200      	movs	r2, #0
   18f34:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   18f38:	f003 fc79 	bl	1c82e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   18f3c:	4629      	mov	r1, r5
   18f3e:	4808      	ldr	r0, [pc, #32]	; (18f60 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   18f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   18f44:	f7ff bcde 	b.w	18904 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18f48:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   18f4c:	429a      	cmp	r2, r3
   18f4e:	bf18      	it	ne
   18f50:	3301      	addne	r3, #1
   18f52:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18f54:	2102      	movs	r1, #2
   18f56:	f104 0010 	add.w	r0, r4, #16
   18f5a:	f003 ff46 	bl	1cdea <z_handle_obj_poll_events>
}
   18f5e:	e7ed      	b.n	18f3c <z_impl_k_sem_give+0x24>
   18f60:	20002ec4 	.word	0x20002ec4

00018f64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   18f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18f66:	4614      	mov	r4, r2
   18f68:	461d      	mov	r5, r3
   18f6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   18f6e:	f3ef 8111 	mrs	r1, BASEPRI
   18f72:	f383 8811 	msr	BASEPRI, r3
   18f76:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   18f7a:	6883      	ldr	r3, [r0, #8]
   18f7c:	b143      	cbz	r3, 18f90 <z_impl_k_sem_take+0x2c>
		sem->count--;
   18f7e:	3b01      	subs	r3, #1
   18f80:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   18f82:	f381 8811 	msr	BASEPRI, r1
   18f86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   18f8a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   18f8c:	b003      	add	sp, #12
   18f8e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18f90:	ea54 0305 	orrs.w	r3, r4, r5
   18f94:	d106      	bne.n	18fa4 <z_impl_k_sem_take+0x40>
   18f96:	f381 8811 	msr	BASEPRI, r1
   18f9a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   18f9e:	f06f 000f 	mvn.w	r0, #15
   18fa2:	e7f3      	b.n	18f8c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18fa4:	4602      	mov	r2, r0
   18fa6:	e9cd 4500 	strd	r4, r5, [sp]
   18faa:	4802      	ldr	r0, [pc, #8]	; (18fb4 <z_impl_k_sem_take+0x50>)
   18fac:	f7ff fef2 	bl	18d94 <z_pend_curr>
	return ret;
   18fb0:	e7ec      	b.n	18f8c <z_impl_k_sem_take+0x28>
   18fb2:	bf00      	nop
   18fb4:	20002ec4 	.word	0x20002ec4

00018fb8 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   18fb8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   18fba:	4c08      	ldr	r4, [pc, #32]	; (18fdc <k_sys_work_q_init+0x24>)
   18fbc:	4908      	ldr	r1, [pc, #32]	; (18fe0 <k_sys_work_q_init+0x28>)
   18fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18fc6:	4620      	mov	r0, r4
   18fc8:	f000 f8de 	bl	19188 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   18fcc:	4905      	ldr	r1, [pc, #20]	; (18fe4 <k_sys_work_q_init+0x2c>)
   18fce:	f104 0018 	add.w	r0, r4, #24
   18fd2:	f003 fcd6 	bl	1c982 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   18fd6:	2000      	movs	r0, #0
   18fd8:	bd10      	pop	{r4, pc}
   18fda:	bf00      	nop
   18fdc:	20002330 	.word	0x20002330
   18fe0:	20004f00 	.word	0x20004f00
   18fe4:	0001d938 	.word	0x0001d938

00018fe8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   18fe8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   18fec:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   18ff0:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   18ff4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18ff6:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   18ff8:	2504      	movs	r5, #4
   18ffa:	7345      	strb	r5, [r0, #13]
{
   18ffc:	460f      	mov	r7, r1

	thread_base->prio = priority;
   18ffe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19000:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19002:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   19004:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   19008:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1900a:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1900e:	3720      	adds	r7, #32
	node->prev = NULL;
   19010:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   19014:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   19018:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1901a:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1901e:	9202      	str	r2, [sp, #8]
   19020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19022:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   19024:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19028:	9200      	str	r2, [sp, #0]
   1902a:	4642      	mov	r2, r8
{
   1902c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1902e:	f7fa f8ad 	bl	1318c <arch_new_thread>
	if (!_current) {
   19032:	4b05      	ldr	r3, [pc, #20]	; (19048 <z_setup_new_thread+0x60>)
   19034:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   19036:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1903a:	b103      	cbz	r3, 1903e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1903c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   1903e:	67a3      	str	r3, [r4, #120]	; 0x78
}
   19040:	4640      	mov	r0, r8
   19042:	b004      	add	sp, #16
   19044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19048:	200025f0 	.word	0x200025f0

0001904c <z_impl_k_thread_create>:
{
   1904c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1904e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19050:	2500      	movs	r5, #0
   19052:	9505      	str	r5, [sp, #20]
   19054:	9d10      	ldr	r5, [sp, #64]	; 0x40
   19056:	9504      	str	r5, [sp, #16]
   19058:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1905a:	9503      	str	r5, [sp, #12]
   1905c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1905e:	9502      	str	r5, [sp, #8]
{
   19060:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19064:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19066:	9501      	str	r5, [sp, #4]
   19068:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1906a:	9500      	str	r5, [sp, #0]
{
   1906c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1906e:	f7ff ffbb 	bl	18fe8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   19072:	1c7b      	adds	r3, r7, #1
   19074:	bf08      	it	eq
   19076:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1907a:	d005      	beq.n	19088 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1907c:	ea56 0307 	orrs.w	r3, r6, r7
   19080:	d105      	bne.n	1908e <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   19082:	4620      	mov	r0, r4
   19084:	f7ff fcf6 	bl	18a74 <z_sched_start>
}
   19088:	4620      	mov	r0, r4
   1908a:	b007      	add	sp, #28
   1908c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1908e:	4904      	ldr	r1, [pc, #16]	; (190a0 <z_impl_k_thread_create+0x54>)
   19090:	4632      	mov	r2, r6
   19092:	463b      	mov	r3, r7
   19094:	f104 0018 	add.w	r0, r4, #24
   19098:	f000 f92c 	bl	192f4 <z_add_timeout>
   1909c:	e7f4      	b.n	19088 <z_impl_k_thread_create+0x3c>
   1909e:	bf00      	nop
   190a0:	0001c84f 	.word	0x0001c84f

000190a4 <z_init_static_threads>:
{
   190a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   190a8:	4e2a      	ldr	r6, [pc, #168]	; (19154 <z_init_static_threads+0xb0>)
   190aa:	4d2b      	ldr	r5, [pc, #172]	; (19158 <z_init_static_threads+0xb4>)
{
   190ac:	b086      	sub	sp, #24
   190ae:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   190b0:	42b5      	cmp	r5, r6
   190b2:	f105 0430 	add.w	r4, r5, #48	; 0x30
   190b6:	d310      	bcc.n	190da <z_init_static_threads+0x36>
	k_sched_lock();
   190b8:	f7ff fc36 	bl	18928 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   190bc:	4c26      	ldr	r4, [pc, #152]	; (19158 <z_init_static_threads+0xb4>)
   190be:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1915c <z_init_static_threads+0xb8>
   190c2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   190c6:	f240 36e7 	movw	r6, #999	; 0x3e7
   190ca:	2700      	movs	r7, #0
   190cc:	4544      	cmp	r4, r8
   190ce:	d321      	bcc.n	19114 <z_init_static_threads+0x70>
}
   190d0:	b006      	add	sp, #24
   190d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   190d6:	f7ff bc79 	b.w	189cc <k_sched_unlock>
		z_setup_new_thread(
   190da:	f854 3c04 	ldr.w	r3, [r4, #-4]
   190de:	9305      	str	r3, [sp, #20]
   190e0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   190e4:	9304      	str	r3, [sp, #16]
   190e6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   190ea:	9303      	str	r3, [sp, #12]
   190ec:	f854 3c18 	ldr.w	r3, [r4, #-24]
   190f0:	9302      	str	r3, [sp, #8]
   190f2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   190f6:	9301      	str	r3, [sp, #4]
   190f8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   190fc:	9300      	str	r3, [sp, #0]
   190fe:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   19102:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   19106:	f7ff ff6f 	bl	18fe8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1910a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1910e:	65dd      	str	r5, [r3, #92]	; 0x5c
   19110:	4625      	mov	r5, r4
   19112:	e7cd      	b.n	190b0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   19114:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19116:	1c5a      	adds	r2, r3, #1
   19118:	d00d      	beq.n	19136 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1911a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1911e:	4630      	mov	r0, r6
   19120:	4639      	mov	r1, r7
   19122:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19126:	42b9      	cmp	r1, r7
   19128:	bf08      	it	eq
   1912a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1912c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1912e:	d104      	bne.n	1913a <z_init_static_threads+0x96>
	z_sched_start(thread);
   19130:	4628      	mov	r0, r5
   19132:	f7ff fc9f 	bl	18a74 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   19136:	3430      	adds	r4, #48	; 0x30
   19138:	e7c8      	b.n	190cc <z_init_static_threads+0x28>
   1913a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1913e:	2300      	movs	r3, #0
   19140:	f7e6 ffcc 	bl	dc <__aeabi_uldivmod>
   19144:	4602      	mov	r2, r0
   19146:	460b      	mov	r3, r1
   19148:	f105 0018 	add.w	r0, r5, #24
   1914c:	4651      	mov	r1, sl
   1914e:	f000 f8d1 	bl	192f4 <z_add_timeout>
   19152:	e7f0      	b.n	19136 <z_init_static_threads+0x92>
   19154:	20000714 	.word	0x20000714
   19158:	20000714 	.word	0x20000714
   1915c:	0001c84f 	.word	0x0001c84f

00019160 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   19160:	b508      	push	{r3, lr}
	__asm__ volatile(
   19162:	f04f 0340 	mov.w	r3, #64	; 0x40
   19166:	f3ef 8411 	mrs	r4, BASEPRI
   1916a:	f383 8811 	msr	BASEPRI, r3
   1916e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   19172:	4b04      	ldr	r3, [pc, #16]	; (19184 <z_self_abort+0x24>)
   19174:	6898      	ldr	r0, [r3, #8]
   19176:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   19178:	f7ff fd16 	bl	18ba8 <z_impl_k_thread_suspend>
   1917c:	4620      	mov	r0, r4
   1917e:	f7f9 ffb1 	bl	130e4 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   19182:	bf00      	nop
   19184:	200025f0 	.word	0x200025f0

00019188 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   19188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1918c:	4604      	mov	r4, r0
   1918e:	b088      	sub	sp, #32
   19190:	460d      	mov	r5, r1
   19192:	4616      	mov	r6, r2
   19194:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   19196:	f003 faa2 	bl	1c6de <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1919a:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1919e:	2200      	movs	r2, #0
   191a0:	2300      	movs	r3, #0
   191a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   191a6:	e9cd 7203 	strd	r7, r2, [sp, #12]
   191aa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   191ae:	4b07      	ldr	r3, [pc, #28]	; (191cc <k_work_q_start+0x44>)
   191b0:	9400      	str	r4, [sp, #0]
   191b2:	4632      	mov	r2, r6
   191b4:	4629      	mov	r1, r5
   191b6:	4640      	mov	r0, r8
   191b8:	f7ff ff48 	bl	1904c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   191bc:	4904      	ldr	r1, [pc, #16]	; (191d0 <k_work_q_start+0x48>)
   191be:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   191c0:	b008      	add	sp, #32
   191c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   191c6:	f003 bbdc 	b.w	1c982 <z_impl_k_thread_name_set>
   191ca:	bf00      	nop
   191cc:	00019823 	.word	0x00019823
   191d0:	0001d941 	.word	0x0001d941

000191d4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   191d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   191d8:	4606      	mov	r6, r0
   191da:	460d      	mov	r5, r1
   191dc:	4690      	mov	r8, r2
   191de:	4699      	mov	r9, r3
   191e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   191e4:	f3ef 8711 	mrs	r7, BASEPRI
   191e8:	f383 8811 	msr	BASEPRI, r3
   191ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   191f0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   191f2:	b17b      	cbz	r3, 19214 <k_delayed_work_submit_to_queue+0x40>
   191f4:	4283      	cmp	r3, r0
   191f6:	d128      	bne.n	1924a <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   191f8:	4628      	mov	r0, r5
   191fa:	f003 fbe2 	bl	1c9c2 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   191fe:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   19202:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   19204:	d008      	beq.n	19218 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   19206:	2800      	cmp	r0, #0
   19208:	da07      	bge.n	1921a <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1920a:	f387 8811 	msr	BASEPRI, r7
   1920e:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   19212:	e00f      	b.n	19234 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   19214:	2800      	cmp	r0, #0
   19216:	d0ef      	beq.n	191f8 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   19218:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1921a:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1921e:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19220:	d10b      	bne.n	1923a <k_delayed_work_submit_to_queue+0x66>
   19222:	f387 8811 	msr	BASEPRI, r7
   19226:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1922a:	4629      	mov	r1, r5
   1922c:	4630      	mov	r0, r6
   1922e:	f003 fbab 	bl	1c988 <k_work_submit_to_queue>
		return 0;
   19232:	2400      	movs	r4, #0
}
   19234:	4620      	mov	r0, r4
   19236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1923a:	4905      	ldr	r1, [pc, #20]	; (19250 <k_delayed_work_submit_to_queue+0x7c>)
   1923c:	4642      	mov	r2, r8
   1923e:	464b      	mov	r3, r9
   19240:	f105 0010 	add.w	r0, r5, #16
   19244:	f000 f856 	bl	192f4 <z_add_timeout>
   19248:	e7df      	b.n	1920a <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1924a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1924e:	e7dc      	b.n	1920a <k_delayed_work_submit_to_queue+0x36>
   19250:	0001c9b9 	.word	0x0001c9b9

00019254 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   19254:	4b03      	ldr	r3, [pc, #12]	; (19264 <elapsed+0x10>)
   19256:	681b      	ldr	r3, [r3, #0]
   19258:	b90b      	cbnz	r3, 1925e <elapsed+0xa>
   1925a:	f7f9 be3d 	b.w	12ed8 <z_clock_elapsed>
}
   1925e:	2000      	movs	r0, #0
   19260:	4770      	bx	lr
   19262:	bf00      	nop
   19264:	20002630 	.word	0x20002630

00019268 <remove_timeout>:
{
   19268:	b530      	push	{r4, r5, lr}
   1926a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1926c:	b168      	cbz	r0, 1928a <remove_timeout+0x22>
   1926e:	4a0a      	ldr	r2, [pc, #40]	; (19298 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   19270:	6852      	ldr	r2, [r2, #4]
   19272:	4290      	cmp	r0, r2
   19274:	d009      	beq.n	1928a <remove_timeout+0x22>
	if (next(t) != NULL) {
   19276:	b143      	cbz	r3, 1928a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   19278:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1927c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   19280:	1912      	adds	r2, r2, r4
   19282:	eb45 0101 	adc.w	r1, r5, r1
   19286:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1928a:	6842      	ldr	r2, [r0, #4]
   1928c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1928e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19290:	2300      	movs	r3, #0
	node->prev = NULL;
   19292:	e9c0 3300 	strd	r3, r3, [r0]
}
   19296:	bd30      	pop	{r4, r5, pc}
   19298:	20000600 	.word	0x20000600

0001929c <next_timeout>:

static int32_t next_timeout(void)
{
   1929c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1929e:	4b13      	ldr	r3, [pc, #76]	; (192ec <next_timeout+0x50>)
   192a0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   192a2:	429c      	cmp	r4, r3
   192a4:	bf08      	it	eq
   192a6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   192a8:	f7ff ffd4 	bl	19254 <elapsed>
   192ac:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   192ae:	b1bc      	cbz	r4, 192e0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   192b0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   192b4:	1b40      	subs	r0, r0, r5
   192b6:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   192ba:	2801      	cmp	r0, #1
   192bc:	f171 0300 	sbcs.w	r3, r1, #0
   192c0:	db11      	blt.n	192e6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   192c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   192c6:	2300      	movs	r3, #0
   192c8:	4282      	cmp	r2, r0
   192ca:	eb73 0401 	sbcs.w	r4, r3, r1
   192ce:	da00      	bge.n	192d2 <next_timeout+0x36>
   192d0:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   192d2:	4b07      	ldr	r3, [pc, #28]	; (192f0 <next_timeout+0x54>)
   192d4:	695b      	ldr	r3, [r3, #20]
   192d6:	b113      	cbz	r3, 192de <next_timeout+0x42>
   192d8:	4298      	cmp	r0, r3
   192da:	bfa8      	it	ge
   192dc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   192de:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   192e0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   192e4:	e7f5      	b.n	192d2 <next_timeout+0x36>
   192e6:	2000      	movs	r0, #0
   192e8:	e7f3      	b.n	192d2 <next_timeout+0x36>
   192ea:	bf00      	nop
   192ec:	20000600 	.word	0x20000600
   192f0:	200025f0 	.word	0x200025f0

000192f4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   192f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192f8:	9101      	str	r1, [sp, #4]
   192fa:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   192fc:	1c4b      	adds	r3, r1, #1
   192fe:	bf08      	it	eq
   19300:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   19304:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19306:	d06c      	beq.n	193e2 <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   19308:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1930a:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1930e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19312:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   19316:	ebb3 0804 	subs.w	r8, r3, r4
   1931a:	eb6b 0905 	sbc.w	r9, fp, r5
   1931e:	f1b8 0f00 	cmp.w	r8, #0
   19322:	f179 0300 	sbcs.w	r3, r9, #0
   19326:	db0f      	blt.n	19348 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   19328:	f7ff ff94 	bl	19254 <elapsed>
   1932c:	4a33      	ldr	r2, [pc, #204]	; (193fc <z_add_timeout+0x108>)
   1932e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   19332:	f06f 0301 	mvn.w	r3, #1
   19336:	1a5b      	subs	r3, r3, r1
   19338:	eb6b 020c 	sbc.w	r2, fp, ip
   1933c:	1b1e      	subs	r6, r3, r4
   1933e:	eb62 0705 	sbc.w	r7, r2, r5
   19342:	1a34      	subs	r4, r6, r0
   19344:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   19348:	9b01      	ldr	r3, [sp, #4]
   1934a:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1934e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19352:	f3ef 8611 	mrs	r6, BASEPRI
   19356:	f383 8811 	msr	BASEPRI, r3
   1935a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1935e:	f7ff ff79 	bl	19254 <elapsed>
	ticks = MAX(1, ticks);
   19362:	2c01      	cmp	r4, #1
   19364:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   19368:	4b25      	ldr	r3, [pc, #148]	; (19400 <z_add_timeout+0x10c>)
   1936a:	bfb8      	it	lt
   1936c:	2401      	movlt	r4, #1
   1936e:	681a      	ldr	r2, [r3, #0]
   19370:	bfb8      	it	lt
   19372:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   19374:	1824      	adds	r4, r4, r0
   19376:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1937a:	429a      	cmp	r2, r3
   1937c:	e9ca 4504 	strd	r4, r5, [sl, #16]
   19380:	d001      	beq.n	19386 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19382:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   19384:	b952      	cbnz	r2, 1939c <z_add_timeout+0xa8>
	node->prev = list->tail;
   19386:	685a      	ldr	r2, [r3, #4]
   19388:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1938c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1938e:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   19392:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   19396:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1939a:	e014      	b.n	193c6 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   1939c:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   193a0:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   193a4:	4544      	cmp	r4, r8
   193a6:	eb75 0109 	sbcs.w	r1, r5, r9
   193aa:	da1d      	bge.n	193e8 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   193ac:	ebb8 0004 	subs.w	r0, r8, r4
   193b0:	eb69 0105 	sbc.w	r1, r9, r5
   193b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   193b8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   193ba:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   193be:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   193c2:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   193c6:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   193c8:	429a      	cmp	r2, r3
   193ca:	d006      	beq.n	193da <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   193cc:	4592      	cmp	sl, r2
   193ce:	d104      	bne.n	193da <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   193d0:	f7ff ff64 	bl	1929c <next_timeout>
   193d4:	2100      	movs	r1, #0
   193d6:	f7f9 fd19 	bl	12e0c <z_clock_set_timeout>
	__asm__ volatile(
   193da:	f386 8811 	msr	BASEPRI, r6
   193de:	f3bf 8f6f 	isb	sy
		}
	}
}
   193e2:	b003      	add	sp, #12
   193e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   193e8:	ebb4 0008 	subs.w	r0, r4, r8
   193ec:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   193f0:	42ba      	cmp	r2, r7
   193f2:	e9ca 0104 	strd	r0, r1, [sl, #16]
   193f6:	d0c6      	beq.n	19386 <z_add_timeout+0x92>
   193f8:	6812      	ldr	r2, [r2, #0]
   193fa:	e7c3      	b.n	19384 <z_add_timeout+0x90>
   193fc:	200023d0 	.word	0x200023d0
   19400:	20000600 	.word	0x20000600

00019404 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   19404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19408:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1940a:	f7ff fb8b 	bl	18b24 <z_time_slice>
	__asm__ volatile(
   1940e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19412:	f3ef 8411 	mrs	r4, BASEPRI
   19416:	f383 8811 	msr	BASEPRI, r3
   1941a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1941e:	4d2c      	ldr	r5, [pc, #176]	; (194d0 <z_clock_announce+0xcc>)
   19420:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 194d4 <z_clock_announce+0xd0>
	return list->head == list;
   19424:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 194d8 <z_clock_announce+0xd4>
   19428:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1942a:	4651      	mov	r1, sl
   1942c:	f8d5 c000 	ldr.w	ip, [r5]
   19430:	f8db 0000 	ldr.w	r0, [fp]
   19434:	4662      	mov	r2, ip
   19436:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19438:	4558      	cmp	r0, fp
   1943a:	e9da 8900 	ldrd	r8, r9, [sl]
   1943e:	e9cd 2300 	strd	r2, r3, [sp]
   19442:	d00d      	beq.n	19460 <z_clock_announce+0x5c>
   19444:	b160      	cbz	r0, 19460 <z_clock_announce+0x5c>
   19446:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1944a:	45b4      	cmp	ip, r6
   1944c:	41bb      	sbcs	r3, r7
   1944e:	da1e      	bge.n	1948e <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19450:	9b00      	ldr	r3, [sp, #0]
   19452:	ebb6 0c03 	subs.w	ip, r6, r3
   19456:	9b01      	ldr	r3, [sp, #4]
   19458:	eb67 0603 	sbc.w	r6, r7, r3
   1945c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   19460:	9b00      	ldr	r3, [sp, #0]
   19462:	eb13 0208 	adds.w	r2, r3, r8
   19466:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   19468:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1946c:	eb43 0309 	adc.w	r3, r3, r9
   19470:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   19474:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   19476:	f7ff ff11 	bl	1929c <next_timeout>
   1947a:	4631      	mov	r1, r6
   1947c:	f7f9 fcc6 	bl	12e0c <z_clock_set_timeout>
	__asm__ volatile(
   19480:	f384 8811 	msr	BASEPRI, r4
   19484:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   19488:	b003      	add	sp, #12
   1948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1948e:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   19492:	f04f 0200 	mov.w	r2, #0
   19496:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1949a:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1949e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   194a2:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   194a6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   194aa:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   194ac:	f7ff fedc 	bl	19268 <remove_timeout>
   194b0:	f384 8811 	msr	BASEPRI, r4
   194b4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   194b8:	6883      	ldr	r3, [r0, #8]
   194ba:	4798      	blx	r3
	__asm__ volatile(
   194bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   194c0:	f3ef 8411 	mrs	r4, BASEPRI
   194c4:	f383 8811 	msr	BASEPRI, r3
   194c8:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   194cc:	4901      	ldr	r1, [pc, #4]	; (194d4 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   194ce:	e7ad      	b.n	1942c <z_clock_announce+0x28>
   194d0:	20002630 	.word	0x20002630
   194d4:	200023d0 	.word	0x200023d0
   194d8:	20000600 	.word	0x20000600

000194dc <z_tick_get>:

int64_t z_tick_get(void)
{
   194dc:	b510      	push	{r4, lr}
   194de:	f04f 0340 	mov.w	r3, #64	; 0x40
   194e2:	f3ef 8411 	mrs	r4, BASEPRI
   194e6:	f383 8811 	msr	BASEPRI, r3
   194ea:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   194ee:	f7f9 fcf3 	bl	12ed8 <z_clock_elapsed>
   194f2:	4b06      	ldr	r3, [pc, #24]	; (1950c <z_tick_get+0x30>)
   194f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   194f8:	1812      	adds	r2, r2, r0
   194fa:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   194fe:	f384 8811 	msr	BASEPRI, r4
   19502:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   19506:	4610      	mov	r0, r2
   19508:	4619      	mov	r1, r3
   1950a:	bd10      	pop	{r4, pc}
   1950c:	200023d0 	.word	0x200023d0

00019510 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   19510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   19514:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   19516:	4b2a      	ldr	r3, [pc, #168]	; (195c0 <z_impl_k_poll+0xb0>)
   19518:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1951a:	2301      	movs	r3, #1
   1951c:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   19520:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   19524:	ea52 0307 	orrs.w	r3, r2, r7
{
   19528:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1952a:	bf0c      	ite	eq
   1952c:	2301      	moveq	r3, #1
   1952e:	2300      	movne	r3, #0
   19530:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   19534:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   19536:	f003 fbe8 	bl	1cd0a <register_events>
   1953a:	4681      	mov	r9, r0
	__asm__ volatile(
   1953c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19540:	f3ef 8a11 	mrs	sl, BASEPRI
   19544:	f383 8811 	msr	BASEPRI, r3
   19548:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1954c:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   19550:	b964      	cbnz	r4, 1956c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   19552:	4601      	mov	r1, r0
   19554:	4652      	mov	r2, sl
   19556:	4640      	mov	r0, r8
   19558:	f003 fb03 	bl	1cb62 <clear_event_registrations>
	__asm__ volatile(
   1955c:	f38a 8811 	msr	BASEPRI, sl
   19560:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   19564:	4620      	mov	r0, r4
   19566:	b004      	add	sp, #16
   19568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1956c:	2300      	movs	r3, #0
   1956e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19572:	ea56 0307 	orrs.w	r3, r6, r7
   19576:	d106      	bne.n	19586 <z_impl_k_poll+0x76>
   19578:	f38a 8811 	msr	BASEPRI, sl
   1957c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   19580:	f06f 040a 	mvn.w	r4, #10
   19584:	e7ee      	b.n	19564 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   19586:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19588:	e9cd 6700 	strd	r6, r7, [sp]
   1958c:	4651      	mov	r1, sl
   1958e:	480d      	ldr	r0, [pc, #52]	; (195c4 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   19590:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19594:	f7ff fbfe 	bl	18d94 <z_pend_curr>
   19598:	4604      	mov	r4, r0
	__asm__ volatile(
   1959a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1959e:	f3ef 8511 	mrs	r5, BASEPRI
   195a2:	f383 8811 	msr	BASEPRI, r3
   195a6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   195aa:	462a      	mov	r2, r5
   195ac:	4649      	mov	r1, r9
   195ae:	4640      	mov	r0, r8
   195b0:	f003 fad7 	bl	1cb62 <clear_event_registrations>
	__asm__ volatile(
   195b4:	f385 8811 	msr	BASEPRI, r5
   195b8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   195bc:	e7d2      	b.n	19564 <z_impl_k_poll+0x54>
   195be:	bf00      	nop
   195c0:	200025f0 	.word	0x200025f0
   195c4:	20002ec4 	.word	0x20002ec4

000195c8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   195c8:	b538      	push	{r3, r4, r5, lr}
   195ca:	4603      	mov	r3, r0
	__asm__ volatile(
   195cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   195d0:	f3ef 8511 	mrs	r5, BASEPRI
   195d4:	f382 8811 	msr	BASEPRI, r2
   195d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   195dc:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   195de:	2101      	movs	r1, #1
   195e0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   195e2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   195e4:	4283      	cmp	r3, r0
   195e6:	d106      	bne.n	195f6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   195e8:	f385 8811 	msr	BASEPRI, r5
   195ec:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   195f0:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   195f2:	4620      	mov	r0, r4
   195f4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   195f6:	e9d0 3200 	ldrd	r3, r2, [r0]
   195fa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   195fc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   195fe:	2300      	movs	r3, #0
	node->prev = NULL;
   19600:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19604:	f003 faf0 	bl	1cbe8 <signal_poll_event>
	z_reschedule(&lock, key);
   19608:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1960a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1960c:	4801      	ldr	r0, [pc, #4]	; (19614 <z_impl_k_poll_signal_raise+0x4c>)
   1960e:	f7ff f979 	bl	18904 <z_reschedule>
	return rc;
   19612:	e7ee      	b.n	195f2 <z_impl_k_poll_signal_raise+0x2a>
   19614:	20002ec4 	.word	0x20002ec4

00019618 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   19618:	b510      	push	{r4, lr}
   1961a:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1961c:	f003 f9a7 	bl	1c96e <k_is_in_isr>
   19620:	b940      	cbnz	r0, 19634 <z_thread_malloc+0x1c>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   19622:	4b05      	ldr	r3, [pc, #20]	; (19638 <z_thread_malloc+0x20>)
   19624:	689b      	ldr	r3, [r3, #8]
   19626:	6f98      	ldr	r0, [r3, #120]	; 0x78
	}

	if (pool) {
   19628:	b120      	cbz	r0, 19634 <z_thread_malloc+0x1c>
		ret = k_mem_pool_malloc(pool, size);
   1962a:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   1962c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   19630:	f003 bbe9 	b.w	1ce06 <k_mem_pool_malloc>
}
   19634:	2000      	movs	r0, #0
   19636:	bd10      	pop	{r4, pc}
   19638:	200025f0 	.word	0x200025f0

0001963c <app_pwm_cb>:
    pwm_set(BT_data);
   1963c:	f7f8 bc96 	b.w	11f6c <pwm_set>

00019640 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   19640:	4603      	mov	r3, r0
   19642:	b140      	cbz	r0, 19656 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19644:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19646:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1964a:	2a02      	cmp	r2, #2
   1964c:	d006      	beq.n	1965c <sys_notify_validate+0x1c>
   1964e:	2a03      	cmp	r2, #3
   19650:	d004      	beq.n	1965c <sys_notify_validate+0x1c>
   19652:	2a01      	cmp	r2, #1
   19654:	d005      	beq.n	19662 <sys_notify_validate+0x22>
		return -EINVAL;
   19656:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1965a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1965c:	681a      	ldr	r2, [r3, #0]
   1965e:	2a00      	cmp	r2, #0
   19660:	d0f9      	beq.n	19656 <sys_notify_validate+0x16>
		notify->result = 0;
   19662:	2000      	movs	r0, #0
   19664:	6098      	str	r0, [r3, #8]
   19666:	4770      	bx	lr

00019668 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19668:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1966a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1966e:	2a02      	cmp	r2, #2
{
   19670:	b510      	push	{r4, lr}
   19672:	4603      	mov	r3, r0
	notify->result = res;
   19674:	6081      	str	r1, [r0, #8]
	switch (method) {
   19676:	d00a      	beq.n	1968e <sys_notify_finalize+0x26>
   19678:	2a03      	cmp	r2, #3
   1967a:	d10b      	bne.n	19694 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1967c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1967e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   19680:	2200      	movs	r2, #0
   19682:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   19684:	b108      	cbz	r0, 1968a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   19686:	f7ff ff9f 	bl	195c8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1968a:	4620      	mov	r0, r4
   1968c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1968e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   19690:	2400      	movs	r4, #0
		break;
   19692:	e7f5      	b.n	19680 <sys_notify_finalize+0x18>
	switch (method) {
   19694:	2400      	movs	r4, #0
   19696:	4620      	mov	r0, r4
   19698:	e7f2      	b.n	19680 <sys_notify_finalize+0x18>

0001969a <arch_printk_char_out>:
}
   1969a:	2000      	movs	r0, #0
   1969c:	4770      	bx	lr

0001969e <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
   1969e:	b40f      	push	{r0, r1, r2, r3}
   196a0:	b507      	push	{r0, r1, r2, lr}
   196a2:	a904      	add	r1, sp, #16
   196a4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   196a8:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   196aa:	f7f8 fd3b 	bl	12124 <vprintk>
	}
	va_end(ap);
}
   196ae:	b003      	add	sp, #12
   196b0:	f85d eb04 	ldr.w	lr, [sp], #4
   196b4:	b004      	add	sp, #16
   196b6:	4770      	bx	lr

000196b8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   196b8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   196ba:	f013 0307 	ands.w	r3, r3, #7
   196be:	d105      	bne.n	196cc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   196c0:	6803      	ldr	r3, [r0, #0]
   196c2:	2b00      	cmp	r3, #0
		evt = EVT_START;
   196c4:	bf0c      	ite	eq
   196c6:	2000      	moveq	r0, #0
   196c8:	2003      	movne	r0, #3
   196ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   196cc:	2b02      	cmp	r3, #2
   196ce:	d105      	bne.n	196dc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   196d0:	8b43      	ldrh	r3, [r0, #26]
   196d2:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   196d4:	bf14      	ite	ne
   196d6:	2000      	movne	r0, #0
   196d8:	2004      	moveq	r0, #4
   196da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   196dc:	2b01      	cmp	r3, #1
   196de:	d105      	bne.n	196ec <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   196e0:	6803      	ldr	r3, [r0, #0]
   196e2:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   196e4:	bf0c      	ite	eq
   196e6:	2000      	moveq	r0, #0
   196e8:	2005      	movne	r0, #5
   196ea:	4770      	bx	lr
	int evt = EVT_NOP;
   196ec:	2000      	movs	r0, #0
}
   196ee:	4770      	bx	lr

000196f0 <notify_one>:
{
   196f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196f4:	460d      	mov	r5, r1
   196f6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   196f8:	4619      	mov	r1, r3
   196fa:	1d28      	adds	r0, r5, #4
{
   196fc:	4690      	mov	r8, r2
   196fe:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19700:	f7ff ffb2 	bl	19668 <sys_notify_finalize>
	if (cb) {
   19704:	4604      	mov	r4, r0
   19706:	b138      	cbz	r0, 19718 <notify_one+0x28>
		cb(mgr, cli, state, res);
   19708:	4633      	mov	r3, r6
   1970a:	4642      	mov	r2, r8
   1970c:	4629      	mov	r1, r5
   1970e:	4638      	mov	r0, r7
   19710:	46a4      	mov	ip, r4
}
   19712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   19716:	4760      	bx	ip
}
   19718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001971c <transition_complete>:
{
   1971c:	b410      	push	{r4}
	__asm__ volatile(
   1971e:	f04f 0440 	mov.w	r4, #64	; 0x40
   19722:	f3ef 8211 	mrs	r2, BASEPRI
   19726:	f384 8811 	msr	BASEPRI, r4
   1972a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1972e:	6141      	str	r1, [r0, #20]
}
   19730:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   19732:	2101      	movs	r1, #1
   19734:	f7f8 bd04 	b.w	12140 <process_event>

00019738 <validate_args>:
{
   19738:	b510      	push	{r4, lr}
   1973a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1973c:	b140      	cbz	r0, 19750 <validate_args+0x18>
   1973e:	b139      	cbz	r1, 19750 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   19740:	1d08      	adds	r0, r1, #4
   19742:	f7ff ff7d 	bl	19640 <sys_notify_validate>
	if ((rv == 0)
   19746:	b928      	cbnz	r0, 19754 <validate_args+0x1c>
	    && ((cli->notify.flags
   19748:	68a3      	ldr	r3, [r4, #8]
   1974a:	f033 0303 	bics.w	r3, r3, #3
   1974e:	d001      	beq.n	19754 <validate_args+0x1c>
		rv = -EINVAL;
   19750:	f06f 0015 	mvn.w	r0, #21
}
   19754:	bd10      	pop	{r4, pc}

00019756 <onoff_manager_init>:
{
   19756:	b538      	push	{r3, r4, r5, lr}
   19758:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1975a:	4605      	mov	r5, r0
   1975c:	b158      	cbz	r0, 19776 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1975e:	b151      	cbz	r1, 19776 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   19760:	680b      	ldr	r3, [r1, #0]
   19762:	b143      	cbz	r3, 19776 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   19764:	684b      	ldr	r3, [r1, #4]
   19766:	b133      	cbz	r3, 19776 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19768:	221c      	movs	r2, #28
   1976a:	2100      	movs	r1, #0
   1976c:	f000 fde3 	bl	1a336 <memset>
   19770:	612c      	str	r4, [r5, #16]
	return 0;
   19772:	2000      	movs	r0, #0
}
   19774:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19776:	f06f 0015 	mvn.w	r0, #21
   1977a:	e7fb      	b.n	19774 <onoff_manager_init+0x1e>

0001977c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1977c:	b570      	push	{r4, r5, r6, lr}
   1977e:	4604      	mov	r4, r0
   19780:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   19782:	f7ff ffd9 	bl	19738 <validate_args>

	if (rv < 0) {
   19786:	1e05      	subs	r5, r0, #0
   19788:	db31      	blt.n	197ee <onoff_request+0x72>
   1978a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1978e:	f3ef 8111 	mrs	r1, BASEPRI
   19792:	f383 8811 	msr	BASEPRI, r3
   19796:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1979a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1979c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1979e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   197a2:	42ab      	cmp	r3, r5
   197a4:	f000 0207 	and.w	r2, r0, #7
   197a8:	d02e      	beq.n	19808 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   197aa:	2a02      	cmp	r2, #2
   197ac:	d10e      	bne.n	197cc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   197ae:	3301      	adds	r3, #1
   197b0:	8363      	strh	r3, [r4, #26]
	rv = state;
   197b2:	4615      	mov	r5, r2
		notify = true;
   197b4:	2301      	movs	r3, #1
	__asm__ volatile(
   197b6:	f381 8811 	msr	BASEPRI, r1
   197ba:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   197be:	b1b3      	cbz	r3, 197ee <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   197c0:	2300      	movs	r3, #0
   197c2:	4631      	mov	r1, r6
   197c4:	4620      	mov	r0, r4
   197c6:	f7ff ff93 	bl	196f0 <notify_one>
   197ca:	e010      	b.n	197ee <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   197cc:	0783      	lsls	r3, r0, #30
   197ce:	d001      	beq.n	197d4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   197d0:	2a06      	cmp	r2, #6
   197d2:	d10e      	bne.n	197f2 <onoff_request+0x76>
	parent->next = child;
   197d4:	2300      	movs	r3, #0
   197d6:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   197d8:	6863      	ldr	r3, [r4, #4]
   197da:	b993      	cbnz	r3, 19802 <onoff_request+0x86>
	list->head = node;
   197dc:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   197e0:	4615      	mov	r5, r2
   197e2:	b962      	cbnz	r2, 197fe <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   197e4:	460a      	mov	r2, r1
   197e6:	4620      	mov	r0, r4
   197e8:	2102      	movs	r1, #2
   197ea:	f7f8 fca9 	bl	12140 <process_event>
		}
	}

	return rv;
}
   197ee:	4628      	mov	r0, r5
   197f0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   197f2:	2a05      	cmp	r2, #5
   197f4:	bf0c      	ite	eq
   197f6:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   197fa:	f06f 0504 	mvnne.w	r5, #4
   197fe:	2300      	movs	r3, #0
   19800:	e7d9      	b.n	197b6 <onoff_request+0x3a>
	parent->next = child;
   19802:	601e      	str	r6, [r3, #0]
	list->tail = node;
   19804:	6066      	str	r6, [r4, #4]
}
   19806:	e7eb      	b.n	197e0 <onoff_request+0x64>
		rv = -EAGAIN;
   19808:	f06f 050a 	mvn.w	r5, #10
   1980c:	e7f7      	b.n	197fe <onoff_request+0x82>

0001980e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1980e:	4604      	mov	r4, r0
   19810:	b508      	push	{r3, lr}
   19812:	4608      	mov	r0, r1
   19814:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   19816:	461a      	mov	r2, r3
   19818:	47a0      	blx	r4
	return z_impl_k_current_get();
   1981a:	f7ff fb77 	bl	18f0c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1981e:	f7f9 febf 	bl	135a0 <z_impl_k_thread_abort>

00019822 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   19822:	b510      	push	{r4, lr}
   19824:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   19826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1982a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1982e:	4620      	mov	r0, r4
   19830:	f7fe fff2 	bl	18818 <z_impl_k_queue_get>
   19834:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   19836:	2800      	cmp	r0, #0
   19838:	d0f5      	beq.n	19826 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1983a:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1983c:	6842      	ldr	r2, [r0, #4]
   1983e:	f3bf 8f5b 	dmb	ish
   19842:	e853 1f00 	ldrex	r1, [r3]
   19846:	f021 0c01 	bic.w	ip, r1, #1
   1984a:	e843 ce00 	strex	lr, ip, [r3]
   1984e:	f1be 0f00 	cmp.w	lr, #0
   19852:	d1f6      	bne.n	19842 <z_work_q_main+0x20>
   19854:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   19858:	07cb      	lsls	r3, r1, #31
   1985a:	d500      	bpl.n	1985e <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1985c:	4790      	blx	r2
	z_impl_k_yield();
   1985e:	f7ff fae7 	bl	18e30 <z_impl_k_yield>
   19862:	e7e0      	b.n	19826 <z_work_q_main+0x4>

00019864 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   19864:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19866:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1986a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1986e:	bf2c      	ite	cs
   19870:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   19874:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   19878:	4770      	bx	lr

0001987a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1987a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1987e:	6880      	ldr	r0, [r0, #8]
   19880:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   19884:	bf2c      	ite	cs
   19886:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1988a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1988e:	4770      	bx	lr

00019890 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   19890:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19892:	2201      	movs	r2, #1
   19894:	f7ff ffe6 	bl	19864 <chunk_field>
}
   19898:	0840      	lsrs	r0, r0, #1
   1989a:	bd08      	pop	{r3, pc}

0001989c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1989c:	6883      	ldr	r3, [r0, #8]
   1989e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   198a2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   198a6:	d308      	bcc.n	198ba <set_chunk_used+0x1e>
		if (used) {
   198a8:	684b      	ldr	r3, [r1, #4]
   198aa:	b11a      	cbz	r2, 198b4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   198ac:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   198b0:	604b      	str	r3, [r1, #4]
   198b2:	4770      	bx	lr
   198b4:	f023 0301 	bic.w	r3, r3, #1
   198b8:	e7fa      	b.n	198b0 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   198ba:	884b      	ldrh	r3, [r1, #2]
   198bc:	b11a      	cbz	r2, 198c6 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   198be:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   198c2:	804b      	strh	r3, [r1, #2]
		}
	}
}
   198c4:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   198c6:	f023 0301 	bic.w	r3, r3, #1
   198ca:	e7fa      	b.n	198c2 <set_chunk_used+0x26>

000198cc <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   198cc:	0053      	lsls	r3, r2, #1
   198ce:	2201      	movs	r2, #1
   198d0:	f7ff bfd3 	b.w	1987a <chunk_set>

000198d4 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   198d4:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   198d6:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   198d8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   198dc:	bf2c      	ite	cs
   198de:	2002      	movcs	r0, #2
   198e0:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   198e2:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   198e4:	fab0 f080 	clz	r0, r0
}
   198e8:	f1c0 001f 	rsb	r0, r0, #31
   198ec:	4770      	bx	lr

000198ee <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   198ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198f2:	4616      	mov	r6, r2
   198f4:	4604      	mov	r4, r0
   198f6:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   198f8:	f7ff ffca 	bl	19890 <chunk_size>
   198fc:	4631      	mov	r1, r6
   198fe:	4605      	mov	r5, r0
   19900:	4620      	mov	r0, r4
   19902:	f7ff ffc5 	bl	19890 <chunk_size>
   19906:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   19908:	462a      	mov	r2, r5
   1990a:	4639      	mov	r1, r7
   1990c:	4620      	mov	r0, r4
   1990e:	f7ff ffdd 	bl	198cc <set_chunk_size>
	return c + chunk_size(h, c);
   19912:	4631      	mov	r1, r6
   19914:	4620      	mov	r0, r4
   19916:	f7ff ffbb 	bl	19890 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1991a:	462b      	mov	r3, r5
   1991c:	1831      	adds	r1, r6, r0
   1991e:	2200      	movs	r2, #0
   19920:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   19922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19926:	f7ff bfa8 	b.w	1987a <chunk_set>

0001992a <split_chunks>:
{
   1992a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1992e:	4614      	mov	r4, r2
   19930:	4605      	mov	r5, r0
   19932:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   19934:	f7ff ffac 	bl	19890 <chunk_size>
	size_t lsz = rc - lc;
   19938:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1993c:	1b37      	subs	r7, r6, r4
   1993e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   19940:	4642      	mov	r2, r8
   19942:	4631      	mov	r1, r6
   19944:	4628      	mov	r0, r5
   19946:	f7ff ffc1 	bl	198cc <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1994a:	463a      	mov	r2, r7
   1994c:	4621      	mov	r1, r4
   1994e:	4628      	mov	r0, r5
   19950:	f7ff ffbc 	bl	198cc <set_chunk_size>
   19954:	4643      	mov	r3, r8
   19956:	2200      	movs	r2, #0
   19958:	4621      	mov	r1, r4
   1995a:	4628      	mov	r0, r5
   1995c:	f7ff ff8d 	bl	1987a <chunk_set>
	return c + chunk_size(h, c);
   19960:	4621      	mov	r1, r4
   19962:	4628      	mov	r0, r5
   19964:	f7ff ff94 	bl	19890 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19968:	463b      	mov	r3, r7
   1996a:	1821      	adds	r1, r4, r0
   1996c:	2200      	movs	r2, #0
   1996e:	4628      	mov	r0, r5
}
   19970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19974:	f7ff bf81 	b.w	1987a <chunk_set>

00019978 <free_list_remove_bidx>:
{
   19978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1997c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1997e:	2203      	movs	r2, #3
   19980:	460e      	mov	r6, r1
   19982:	4604      	mov	r4, r0
   19984:	f7ff ff6e 	bl	19864 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   19988:	4286      	cmp	r6, r0
   1998a:	4605      	mov	r5, r0
   1998c:	f107 0804 	add.w	r8, r7, #4
   19990:	d10b      	bne.n	199aa <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   19992:	2301      	movs	r3, #1
   19994:	fa03 f707 	lsl.w	r7, r3, r7
   19998:	68e3      	ldr	r3, [r4, #12]
   1999a:	ea23 0307 	bic.w	r3, r3, r7
   1999e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   199a0:	2300      	movs	r3, #0
   199a2:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   199a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   199aa:	4631      	mov	r1, r6
   199ac:	2202      	movs	r2, #2
   199ae:	4620      	mov	r0, r4
   199b0:	f7ff ff58 	bl	19864 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   199b4:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   199b6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   199b8:	4601      	mov	r1, r0
		b->next = second;
   199ba:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   199be:	4620      	mov	r0, r4
   199c0:	2203      	movs	r2, #3
   199c2:	f7ff ff5a 	bl	1987a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   199c6:	4633      	mov	r3, r6
   199c8:	4629      	mov	r1, r5
   199ca:	4620      	mov	r0, r4
   199cc:	2202      	movs	r2, #2
}
   199ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   199d2:	f7ff bf52 	b.w	1987a <chunk_set>

000199d6 <free_list_remove>:
{
   199d6:	b538      	push	{r3, r4, r5, lr}
   199d8:	4604      	mov	r4, r0
   199da:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   199dc:	f7ff ff58 	bl	19890 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   199e0:	68a3      	ldr	r3, [r4, #8]
   199e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   199e6:	4601      	mov	r1, r0
   199e8:	d301      	bcc.n	199ee <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   199ea:	2801      	cmp	r0, #1
   199ec:	d009      	beq.n	19a02 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   199ee:	4620      	mov	r0, r4
   199f0:	f7ff ff70 	bl	198d4 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   199f4:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   199f6:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   199f8:	4620      	mov	r0, r4
}
   199fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   199fe:	f7ff bfbb 	b.w	19978 <free_list_remove_bidx>
}
   19a02:	bd38      	pop	{r3, r4, r5, pc}

00019a04 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   19a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a08:	4604      	mov	r4, r0
   19a0a:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   19a0c:	f7ff ff62 	bl	198d4 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   19a10:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   19a12:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   19a14:	4620      	mov	r0, r4
   19a16:	f7ff ff5d 	bl	198d4 <bucket_idx>
   19a1a:	42a8      	cmp	r0, r5
   19a1c:	da03      	bge.n	19a26 <alloc_chunk+0x22>
		return 0;
   19a1e:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   19a20:	4630      	mov	r0, r6
   19a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   19a26:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   19a2a:	f8da 9010 	ldr.w	r9, [sl, #16]
   19a2e:	f1b9 0f00 	cmp.w	r9, #0
   19a32:	d019      	beq.n	19a68 <alloc_chunk+0x64>
   19a34:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   19a36:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   19a3a:	4620      	mov	r0, r4
   19a3c:	4631      	mov	r1, r6
   19a3e:	f7ff ff27 	bl	19890 <chunk_size>
   19a42:	4540      	cmp	r0, r8
   19a44:	d305      	bcc.n	19a52 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   19a46:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   19a48:	4631      	mov	r1, r6
   19a4a:	4620      	mov	r0, r4
   19a4c:	f7ff ff94 	bl	19978 <free_list_remove_bidx>
		return c;
   19a50:	e7e6      	b.n	19a20 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   19a52:	2203      	movs	r2, #3
   19a54:	4631      	mov	r1, r6
   19a56:	4620      	mov	r0, r4
   19a58:	f7ff ff04 	bl	19864 <chunk_field>
		} while (--i && b->next != first);
   19a5c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   19a5e:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   19a62:	d001      	beq.n	19a68 <alloc_chunk+0x64>
   19a64:	4581      	cmp	r9, r0
   19a66:	d1e6      	bne.n	19a36 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   19a68:	68e3      	ldr	r3, [r4, #12]
   19a6a:	3501      	adds	r5, #1
   19a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19a70:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   19a72:	401a      	ands	r2, r3
   19a74:	d0d3      	beq.n	19a1e <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   19a76:	fa92 f2a2 	rbit	r2, r2
   19a7a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   19a7e:	1d13      	adds	r3, r2, #4
   19a80:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   19a84:	e7e0      	b.n	19a48 <alloc_chunk+0x44>

00019a86 <free_list_add>:
{
   19a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a8a:	4604      	mov	r4, r0
   19a8c:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   19a8e:	f7ff feff 	bl	19890 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   19a92:	68a3      	ldr	r3, [r4, #8]
   19a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19a98:	4601      	mov	r1, r0
   19a9a:	d301      	bcc.n	19aa0 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   19a9c:	2801      	cmp	r0, #1
   19a9e:	d035      	beq.n	19b0c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19aa0:	4620      	mov	r0, r4
   19aa2:	f7ff ff17 	bl	198d4 <bucket_idx>
	if (b->next == 0U) {
   19aa6:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   19aaa:	6916      	ldr	r6, [r2, #16]
   19aac:	b99e      	cbnz	r6, 19ad6 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   19aae:	2301      	movs	r3, #1
   19ab0:	fa03 f000 	lsl.w	r0, r3, r0
   19ab4:	68e3      	ldr	r3, [r4, #12]
   19ab6:	4303      	orrs	r3, r0
   19ab8:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   19aba:	4629      	mov	r1, r5
		b->next = c;
   19abc:	6115      	str	r5, [r2, #16]
   19abe:	462b      	mov	r3, r5
   19ac0:	2202      	movs	r2, #2
   19ac2:	4620      	mov	r0, r4
   19ac4:	f7ff fed9 	bl	1987a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19ac8:	2203      	movs	r2, #3
   19aca:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   19acc:	4620      	mov	r0, r4
}
   19ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19ad2:	f7ff bed2 	b.w	1987a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   19ad6:	2202      	movs	r2, #2
   19ad8:	4631      	mov	r1, r6
   19ada:	4620      	mov	r0, r4
   19adc:	f7ff fec2 	bl	19864 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   19ae0:	2202      	movs	r2, #2
   19ae2:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   19ae4:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   19ae6:	4629      	mov	r1, r5
   19ae8:	4620      	mov	r0, r4
   19aea:	f7ff fec6 	bl	1987a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19aee:	4633      	mov	r3, r6
   19af0:	2203      	movs	r2, #3
   19af2:	4629      	mov	r1, r5
   19af4:	4620      	mov	r0, r4
   19af6:	f7ff fec0 	bl	1987a <chunk_set>
   19afa:	2203      	movs	r2, #3
   19afc:	4639      	mov	r1, r7
   19afe:	462b      	mov	r3, r5
   19b00:	4620      	mov	r0, r4
   19b02:	f7ff feba 	bl	1987a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   19b06:	2202      	movs	r2, #2
   19b08:	4631      	mov	r1, r6
   19b0a:	e7df      	b.n	19acc <free_list_add+0x46>
   19b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019b10 <sys_heap_free>:
{
   19b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   19b12:	2900      	cmp	r1, #0
   19b14:	d04e      	beq.n	19bb4 <sys_heap_free+0xa4>
	struct z_heap *h = heap->heap;
   19b16:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   19b18:	68ab      	ldr	r3, [r5, #8]
   19b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19b1e:	bf2c      	ite	cs
   19b20:	2408      	movcs	r4, #8
   19b22:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19b24:	1b0c      	subs	r4, r1, r4
   19b26:	1b64      	subs	r4, r4, r5
   19b28:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   19b2a:	2200      	movs	r2, #0
   19b2c:	4621      	mov	r1, r4
   19b2e:	4628      	mov	r0, r5
   19b30:	f7ff feb4 	bl	1989c <set_chunk_used>
	return c + chunk_size(h, c);
   19b34:	4621      	mov	r1, r4
   19b36:	f7ff feab 	bl	19890 <chunk_size>
   19b3a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19b3c:	2201      	movs	r2, #1
   19b3e:	4631      	mov	r1, r6
   19b40:	4628      	mov	r0, r5
   19b42:	f7ff fe8f 	bl	19864 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   19b46:	07c3      	lsls	r3, r0, #31
   19b48:	d40c      	bmi.n	19b64 <sys_heap_free+0x54>
		free_list_remove(h, right_chunk(h, c));
   19b4a:	4631      	mov	r1, r6
   19b4c:	4628      	mov	r0, r5
   19b4e:	f7ff ff42 	bl	199d6 <free_list_remove>
	return c + chunk_size(h, c);
   19b52:	4621      	mov	r1, r4
   19b54:	4628      	mov	r0, r5
   19b56:	f7ff fe9b 	bl	19890 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   19b5a:	4621      	mov	r1, r4
   19b5c:	1822      	adds	r2, r4, r0
   19b5e:	4628      	mov	r0, r5
   19b60:	f7ff fec5 	bl	198ee <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   19b64:	2200      	movs	r2, #0
   19b66:	4621      	mov	r1, r4
   19b68:	4628      	mov	r0, r5
   19b6a:	f7ff fe7b 	bl	19864 <chunk_field>
   19b6e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19b70:	2201      	movs	r2, #1
   19b72:	4639      	mov	r1, r7
   19b74:	4628      	mov	r0, r5
   19b76:	f7ff fe75 	bl	19864 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   19b7a:	f010 0601 	ands.w	r6, r0, #1
   19b7e:	d113      	bne.n	19ba8 <sys_heap_free+0x98>
		free_list_remove(h, left_chunk(h, c));
   19b80:	4639      	mov	r1, r7
   19b82:	4628      	mov	r0, r5
   19b84:	f7ff ff27 	bl	199d6 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   19b88:	4621      	mov	r1, r4
   19b8a:	4632      	mov	r2, r6
   19b8c:	4628      	mov	r0, r5
   19b8e:	f7ff fe69 	bl	19864 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   19b92:	4622      	mov	r2, r4
   19b94:	1a21      	subs	r1, r4, r0
   19b96:	4628      	mov	r0, r5
   19b98:	f7ff fea9 	bl	198ee <merge_chunks>
   19b9c:	4621      	mov	r1, r4
   19b9e:	4632      	mov	r2, r6
   19ba0:	4628      	mov	r0, r5
   19ba2:	f7ff fe5f 	bl	19864 <chunk_field>
   19ba6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   19ba8:	4621      	mov	r1, r4
   19baa:	4628      	mov	r0, r5
}
   19bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   19bb0:	f7ff bf69 	b.w	19a86 <free_list_add>
}
   19bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019bb6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   19bb6:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   19bb8:	b909      	cbnz	r1, 19bbe <sys_heap_alloc+0x8>
		return NULL;
   19bba:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   19bbc:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   19bbe:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   19bc0:	68ab      	ldr	r3, [r5, #8]
   19bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19bc6:	bf2c      	ite	cs
   19bc8:	2208      	movcs	r2, #8
   19bca:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19bcc:	1dcc      	adds	r4, r1, #7
   19bce:	4414      	add	r4, r2
   19bd0:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19bd2:	4621      	mov	r1, r4
   19bd4:	4628      	mov	r0, r5
   19bd6:	f7ff ff15 	bl	19a04 <alloc_chunk>
	if (c == 0U) {
   19bda:	4606      	mov	r6, r0
   19bdc:	2800      	cmp	r0, #0
   19bde:	d0ec      	beq.n	19bba <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   19be0:	4601      	mov	r1, r0
   19be2:	4628      	mov	r0, r5
   19be4:	f7ff fe54 	bl	19890 <chunk_size>
   19be8:	42a0      	cmp	r0, r4
   19bea:	d909      	bls.n	19c00 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   19bec:	4434      	add	r4, r6
   19bee:	4631      	mov	r1, r6
   19bf0:	4628      	mov	r0, r5
   19bf2:	4622      	mov	r2, r4
   19bf4:	f7ff fe99 	bl	1992a <split_chunks>
		free_list_add(h, c + chunk_sz);
   19bf8:	4621      	mov	r1, r4
   19bfa:	4628      	mov	r0, r5
   19bfc:	f7ff ff43 	bl	19a86 <free_list_add>
	set_chunk_used(h, c, true);
   19c00:	4628      	mov	r0, r5
   19c02:	2201      	movs	r2, #1
   19c04:	4631      	mov	r1, r6
   19c06:	f7ff fe49 	bl	1989c <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   19c0a:	68ab      	ldr	r3, [r5, #8]
   19c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19c10:	bf2c      	ite	cs
   19c12:	2008      	movcs	r0, #8
   19c14:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   19c16:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   19c1a:	4428      	add	r0, r5
	return chunk_mem(h, c);
   19c1c:	e7ce      	b.n	19bbc <sys_heap_alloc+0x6>

00019c1e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   19c1e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   19c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c24:	bf2c      	ite	cs
   19c26:	2508      	movcs	r5, #8
   19c28:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   19c2a:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   19c2c:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19c2e:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   19c30:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19c34:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   19c38:	2200      	movs	r2, #0
   19c3a:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   19c3c:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   19c3e:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   19c40:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   19c42:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   19c46:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   19c48:	4629      	mov	r1, r5
	h->len = buf_sz;
   19c4a:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   19c4c:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   19c4e:	4620      	mov	r0, r4
   19c50:	f7ff fe40 	bl	198d4 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   19c54:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19c56:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   19c58:	1c41      	adds	r1, r0, #1
   19c5a:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   19c5c:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   19c60:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   19c62:	428b      	cmp	r3, r1
   19c64:	db29      	blt.n	19cba <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   19c66:	4632      	mov	r2, r6
   19c68:	4620      	mov	r0, r4
   19c6a:	2100      	movs	r1, #0
   19c6c:	f7ff fe2e 	bl	198cc <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   19c70:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   19c72:	4620      	mov	r0, r4
   19c74:	2201      	movs	r2, #1
   19c76:	2100      	movs	r1, #0
   19c78:	f7ff fe10 	bl	1989c <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   19c7c:	463a      	mov	r2, r7
   19c7e:	4631      	mov	r1, r6
   19c80:	f7ff fe24 	bl	198cc <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19c84:	4633      	mov	r3, r6
   19c86:	4631      	mov	r1, r6
   19c88:	4620      	mov	r0, r4
   19c8a:	2200      	movs	r2, #0
   19c8c:	f7ff fdf5 	bl	1987a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   19c90:	4629      	mov	r1, r5
   19c92:	4620      	mov	r0, r4
   19c94:	2200      	movs	r2, #0
   19c96:	f7ff fe19 	bl	198cc <set_chunk_size>
   19c9a:	463b      	mov	r3, r7
   19c9c:	4629      	mov	r1, r5
   19c9e:	4620      	mov	r0, r4
   19ca0:	2200      	movs	r2, #0
   19ca2:	f7ff fdea 	bl	1987a <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   19ca6:	4629      	mov	r1, r5
   19ca8:	4620      	mov	r0, r4
   19caa:	2201      	movs	r2, #1
   19cac:	f7ff fdf6 	bl	1989c <set_chunk_used>

	free_list_add(h, chunk0_size);
   19cb0:	4631      	mov	r1, r6
}
   19cb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   19cb6:	f7ff bee6 	b.w	19a86 <free_list_add>
		h->buckets[i].next = 0;
   19cba:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   19cbe:	3301      	adds	r3, #1
   19cc0:	e7cf      	b.n	19c62 <sys_heap_init+0x44>

00019cc2 <encode_uint>:
{
   19cc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cc6:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   19cc8:	78d3      	ldrb	r3, [r2, #3]
{
   19cca:	4614      	mov	r4, r2
	switch (specifier) {
   19ccc:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19cce:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   19cd2:	4606      	mov	r6, r0
   19cd4:	460f      	mov	r7, r1
   19cd6:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   19cd8:	d02d      	beq.n	19d36 <encode_uint+0x74>
   19cda:	d828      	bhi.n	19d2e <encode_uint+0x6c>
		return 16;
   19cdc:	2b58      	cmp	r3, #88	; 0x58
   19cde:	bf14      	ite	ne
   19ce0:	250a      	movne	r5, #10
   19ce2:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   19ce4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   19ce8:	46aa      	mov	sl, r5
   19cea:	f04f 0b00 	mov.w	fp, #0
   19cee:	4652      	mov	r2, sl
   19cf0:	465b      	mov	r3, fp
   19cf2:	4630      	mov	r0, r6
   19cf4:	4639      	mov	r1, r7
   19cf6:	f7e6 f9f1 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19cfa:	2a09      	cmp	r2, #9
   19cfc:	b2d3      	uxtb	r3, r2
   19cfe:	d81f      	bhi.n	19d40 <encode_uint+0x7e>
   19d00:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   19d02:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19d04:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   19d06:	bf08      	it	eq
   19d08:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19d0a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   19d0e:	d301      	bcc.n	19d14 <encode_uint+0x52>
   19d10:	45c8      	cmp	r8, r9
   19d12:	d812      	bhi.n	19d3a <encode_uint+0x78>
	if (conv->flag_hash) {
   19d14:	7823      	ldrb	r3, [r4, #0]
   19d16:	069b      	lsls	r3, r3, #26
   19d18:	d505      	bpl.n	19d26 <encode_uint+0x64>
		if (radix == 8) {
   19d1a:	2d08      	cmp	r5, #8
   19d1c:	d116      	bne.n	19d4c <encode_uint+0x8a>
			conv->altform_0 = true;
   19d1e:	78a3      	ldrb	r3, [r4, #2]
   19d20:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   19d24:	70a3      	strb	r3, [r4, #2]
}
   19d26:	4640      	mov	r0, r8
   19d28:	b003      	add	sp, #12
   19d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   19d2e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   19d32:	2b70      	cmp	r3, #112	; 0x70
   19d34:	e7d3      	b.n	19cde <encode_uint+0x1c>
	switch (specifier) {
   19d36:	2508      	movs	r5, #8
   19d38:	e7d4      	b.n	19ce4 <encode_uint+0x22>
		value /= radix;
   19d3a:	4606      	mov	r6, r0
   19d3c:	460f      	mov	r7, r1
   19d3e:	e7d6      	b.n	19cee <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19d40:	9a01      	ldr	r2, [sp, #4]
   19d42:	2a19      	cmp	r2, #25
   19d44:	bf94      	ite	ls
   19d46:	3337      	addls	r3, #55	; 0x37
   19d48:	3357      	addhi	r3, #87	; 0x57
   19d4a:	e7da      	b.n	19d02 <encode_uint+0x40>
		} else if (radix == 16) {
   19d4c:	2d10      	cmp	r5, #16
   19d4e:	d1ea      	bne.n	19d26 <encode_uint+0x64>
			conv->altform_0c = true;
   19d50:	78a3      	ldrb	r3, [r4, #2]
   19d52:	f043 0310 	orr.w	r3, r3, #16
   19d56:	e7e5      	b.n	19d24 <encode_uint+0x62>

00019d58 <outs>:
{
   19d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d5c:	4607      	mov	r7, r0
   19d5e:	4688      	mov	r8, r1
   19d60:	4615      	mov	r5, r2
   19d62:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19d64:	4614      	mov	r4, r2
   19d66:	42b4      	cmp	r4, r6
   19d68:	eba4 0005 	sub.w	r0, r4, r5
   19d6c:	d302      	bcc.n	19d74 <outs+0x1c>
   19d6e:	b93e      	cbnz	r6, 19d80 <outs+0x28>
   19d70:	7823      	ldrb	r3, [r4, #0]
   19d72:	b12b      	cbz	r3, 19d80 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   19d74:	f814 0b01 	ldrb.w	r0, [r4], #1
   19d78:	4641      	mov	r1, r8
   19d7a:	47b8      	blx	r7
		if (rc < 0) {
   19d7c:	2800      	cmp	r0, #0
   19d7e:	daf2      	bge.n	19d66 <outs+0xe>
}
   19d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019d84 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19d84:	4770      	bx	lr

00019d86 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   19d86:	68c2      	ldr	r2, [r0, #12]
   19d88:	b2cb      	uxtb	r3, r1
   19d8a:	210c      	movs	r1, #12
   19d8c:	fb03 2101 	mla	r1, r3, r1, r2
   19d90:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   19d92:	f000 0007 	and.w	r0, r0, #7
   19d96:	4770      	bx	lr

00019d98 <set_off_state>:
	__asm__ volatile(
   19d98:	f04f 0340 	mov.w	r3, #64	; 0x40
   19d9c:	f3ef 8211 	mrs	r2, BASEPRI
   19da0:	f383 8811 	msr	BASEPRI, r3
   19da4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19da8:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   19daa:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   19dae:	d001      	beq.n	19db4 <set_off_state+0x1c>
   19db0:	428b      	cmp	r3, r1
   19db2:	d107      	bne.n	19dc4 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   19db4:	2301      	movs	r3, #1
   19db6:	6003      	str	r3, [r0, #0]
	int err = 0;
   19db8:	2000      	movs	r0, #0
	__asm__ volatile(
   19dba:	f382 8811 	msr	BASEPRI, r2
   19dbe:	f3bf 8f6f 	isb	sy
}
   19dc2:	4770      	bx	lr
		err = -EPERM;
   19dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19dc8:	e7f7      	b.n	19dba <set_off_state+0x22>

00019dca <set_starting_state>:
{
   19dca:	b510      	push	{r4, lr}
	__asm__ volatile(
   19dcc:	f04f 0340 	mov.w	r3, #64	; 0x40
   19dd0:	f3ef 8211 	mrs	r2, BASEPRI
   19dd4:	f383 8811 	msr	BASEPRI, r3
   19dd8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19ddc:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   19dde:	f003 0407 	and.w	r4, r3, #7
   19de2:	2c01      	cmp	r4, #1
   19de4:	d106      	bne.n	19df4 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   19de6:	6001      	str	r1, [r0, #0]
	int err = 0;
   19de8:	2000      	movs	r0, #0
	__asm__ volatile(
   19dea:	f382 8811 	msr	BASEPRI, r2
   19dee:	f3bf 8f6f 	isb	sy
}
   19df2:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   19df4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   19df8:	428b      	cmp	r3, r1
		err = -EALREADY;
   19dfa:	bf14      	ite	ne
   19dfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   19e00:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   19e04:	e7f1      	b.n	19dea <set_starting_state+0x20>

00019e06 <set_on_state>:
	__asm__ volatile(
   19e06:	f04f 0340 	mov.w	r3, #64	; 0x40
   19e0a:	f3ef 8211 	mrs	r2, BASEPRI
   19e0e:	f383 8811 	msr	BASEPRI, r3
   19e12:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   19e16:	6803      	ldr	r3, [r0, #0]
   19e18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19e1c:	f043 0302 	orr.w	r3, r3, #2
   19e20:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   19e22:	f382 8811 	msr	BASEPRI, r2
   19e26:	f3bf 8f6f 	isb	sy
}
   19e2a:	4770      	bx	lr

00019e2c <onoff_started_callback>:
	return &data->mgr[type];
   19e2c:	68c0      	ldr	r0, [r0, #12]
{
   19e2e:	b410      	push	{r4}
	return &data->mgr[type];
   19e30:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   19e32:	241c      	movs	r4, #28
   19e34:	fb03 0004 	mla	r0, r3, r4, r0
   19e38:	2100      	movs	r1, #0
}
   19e3a:	bc10      	pop	{r4}
	notify(mgr, 0);
   19e3c:	4710      	bx	r2

00019e3e <blocking_start_callback>:
{
   19e3e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19e40:	f7ff b86a 	b.w	18f18 <z_impl_k_sem_give>

00019e44 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   19e44:	2000      	movs	r0, #0
   19e46:	f002 baf3 	b.w	1c430 <nrfx_clock_stop>

00019e4a <api_stop>:
{
   19e4a:	b538      	push	{r3, r4, r5, lr}
   19e4c:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   19e4e:	230c      	movs	r3, #12
{
   19e50:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   19e52:	4363      	muls	r3, r4
   19e54:	68c0      	ldr	r0, [r0, #12]
   19e56:	3340      	adds	r3, #64	; 0x40
   19e58:	2180      	movs	r1, #128	; 0x80
   19e5a:	4418      	add	r0, r3
   19e5c:	f7ff ff9c 	bl	19d98 <set_off_state>
	if (err < 0) {
   19e60:	2800      	cmp	r0, #0
   19e62:	db05      	blt.n	19e70 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   19e64:	6869      	ldr	r1, [r5, #4]
   19e66:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   19e6a:	6863      	ldr	r3, [r4, #4]
   19e6c:	4798      	blx	r3
	return 0;
   19e6e:	2000      	movs	r0, #0
}
   19e70:	bd38      	pop	{r3, r4, r5, pc}

00019e72 <api_start>:
{
   19e72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19e76:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   19e78:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   19e7a:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   19e7c:	436f      	muls	r7, r5
{
   19e7e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   19e80:	f107 0040 	add.w	r0, r7, #64	; 0x40
   19e84:	2180      	movs	r1, #128	; 0x80
   19e86:	4420      	add	r0, r4
{
   19e88:	4690      	mov	r8, r2
   19e8a:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   19e8c:	f7ff ff9d 	bl	19dca <set_starting_state>
	if (err < 0) {
   19e90:	2800      	cmp	r0, #0
   19e92:	db07      	blt.n	19ea4 <api_start+0x32>
	subdata->cb = cb;
   19e94:	443c      	add	r4, r7
	subdata->user_data = user_data;
   19e96:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   19e9a:	6873      	ldr	r3, [r6, #4]
   19e9c:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   19ea0:	4798      	blx	r3
	return 0;
   19ea2:	2000      	movs	r0, #0
}
   19ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019ea8 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   19ea8:	4770      	bx	lr

00019eaa <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   19eaa:	4770      	bx	lr

00019eac <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   19eac:	f7f9 b82e 	b.w	12f0c <_DoInit>

00019eb0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   19eb0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   19eb2:	f7ff fffb 	bl	19eac <SEGGER_RTT_Init>

	return 0;
}
   19eb6:	2000      	movs	r0, #0
   19eb8:	bd08      	pop	{r3, pc}

00019eba <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   19eba:	b538      	push	{r3, r4, r5, lr}
   19ebc:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   19ebe:	42ab      	cmp	r3, r5
{
   19ec0:	4611      	mov	r1, r2
   19ec2:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   19ec4:	d804      	bhi.n	19ed0 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   19ec6:	461a      	mov	r2, r3
   19ec8:	f000 fa0a 	bl	1a2e0 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   19ecc:	4620      	mov	r0, r4
   19ece:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   19ed0:	2400      	movs	r4, #0
   19ed2:	e7fb      	b.n	19ecc <_copy+0x12>

00019ed4 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   19ed4:	f000 ba2f 	b.w	1a336 <memset>

00019ed8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   19ed8:	09c3      	lsrs	r3, r0, #7
   19eda:	005a      	lsls	r2, r3, #1
   19edc:	4413      	add	r3, r2
   19ede:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   19ee2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   19ee6:	b2c0      	uxtb	r0, r0
   19ee8:	4770      	bx	lr

00019eea <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   19eea:	78cb      	ldrb	r3, [r1, #3]
   19eec:	7802      	ldrb	r2, [r0, #0]
   19eee:	4053      	eors	r3, r2
   19ef0:	7003      	strb	r3, [r0, #0]
   19ef2:	884b      	ldrh	r3, [r1, #2]
   19ef4:	7842      	ldrb	r2, [r0, #1]
   19ef6:	4053      	eors	r3, r2
   19ef8:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   19efa:	680a      	ldr	r2, [r1, #0]
   19efc:	7883      	ldrb	r3, [r0, #2]
   19efe:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19f02:	7083      	strb	r3, [r0, #2]
   19f04:	680a      	ldr	r2, [r1, #0]
   19f06:	78c3      	ldrb	r3, [r0, #3]
   19f08:	4053      	eors	r3, r2
   19f0a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   19f0c:	79cb      	ldrb	r3, [r1, #7]
   19f0e:	7902      	ldrb	r2, [r0, #4]
   19f10:	4053      	eors	r3, r2
   19f12:	7103      	strb	r3, [r0, #4]
   19f14:	88cb      	ldrh	r3, [r1, #6]
   19f16:	7942      	ldrb	r2, [r0, #5]
   19f18:	4053      	eors	r3, r2
   19f1a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   19f1c:	684a      	ldr	r2, [r1, #4]
   19f1e:	7983      	ldrb	r3, [r0, #6]
   19f20:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19f24:	7183      	strb	r3, [r0, #6]
   19f26:	684a      	ldr	r2, [r1, #4]
   19f28:	79c3      	ldrb	r3, [r0, #7]
   19f2a:	4053      	eors	r3, r2
   19f2c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   19f2e:	7acb      	ldrb	r3, [r1, #11]
   19f30:	7a02      	ldrb	r2, [r0, #8]
   19f32:	4053      	eors	r3, r2
   19f34:	7203      	strb	r3, [r0, #8]
   19f36:	7a42      	ldrb	r2, [r0, #9]
   19f38:	894b      	ldrh	r3, [r1, #10]
   19f3a:	4053      	eors	r3, r2
   19f3c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   19f3e:	688a      	ldr	r2, [r1, #8]
   19f40:	7a83      	ldrb	r3, [r0, #10]
   19f42:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19f46:	7283      	strb	r3, [r0, #10]
   19f48:	688a      	ldr	r2, [r1, #8]
   19f4a:	7ac3      	ldrb	r3, [r0, #11]
   19f4c:	4053      	eors	r3, r2
   19f4e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   19f50:	7bcb      	ldrb	r3, [r1, #15]
   19f52:	7b02      	ldrb	r2, [r0, #12]
   19f54:	4053      	eors	r3, r2
   19f56:	7303      	strb	r3, [r0, #12]
   19f58:	89cb      	ldrh	r3, [r1, #14]
   19f5a:	7b42      	ldrb	r2, [r0, #13]
   19f5c:	4053      	eors	r3, r2
   19f5e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   19f60:	68ca      	ldr	r2, [r1, #12]
   19f62:	7b83      	ldrb	r3, [r0, #14]
   19f64:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19f68:	7383      	strb	r3, [r0, #14]
   19f6a:	68ca      	ldr	r2, [r1, #12]
   19f6c:	7bc3      	ldrb	r3, [r0, #15]
   19f6e:	4053      	eors	r3, r2
   19f70:	73c3      	strb	r3, [r0, #15]
}
   19f72:	4770      	bx	lr

00019f74 <shift_rows>:
{
   19f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   19f76:	7802      	ldrb	r2, [r0, #0]
   19f78:	f88d 2000 	strb.w	r2, [sp]
   19f7c:	7942      	ldrb	r2, [r0, #5]
   19f7e:	f88d 2001 	strb.w	r2, [sp, #1]
   19f82:	7a82      	ldrb	r2, [r0, #10]
   19f84:	f88d 2002 	strb.w	r2, [sp, #2]
   19f88:	7bc2      	ldrb	r2, [r0, #15]
   19f8a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   19f8e:	7902      	ldrb	r2, [r0, #4]
   19f90:	f88d 2004 	strb.w	r2, [sp, #4]
   19f94:	7a42      	ldrb	r2, [r0, #9]
   19f96:	f88d 2005 	strb.w	r2, [sp, #5]
   19f9a:	7b82      	ldrb	r2, [r0, #14]
   19f9c:	f88d 2006 	strb.w	r2, [sp, #6]
   19fa0:	78c2      	ldrb	r2, [r0, #3]
   19fa2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   19fa6:	7a02      	ldrb	r2, [r0, #8]
   19fa8:	f88d 2008 	strb.w	r2, [sp, #8]
   19fac:	7b42      	ldrb	r2, [r0, #13]
   19fae:	f88d 2009 	strb.w	r2, [sp, #9]
   19fb2:	7882      	ldrb	r2, [r0, #2]
   19fb4:	f88d 200a 	strb.w	r2, [sp, #10]
   19fb8:	79c2      	ldrb	r2, [r0, #7]
   19fba:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   19fbe:	7b02      	ldrb	r2, [r0, #12]
   19fc0:	f88d 200c 	strb.w	r2, [sp, #12]
   19fc4:	7842      	ldrb	r2, [r0, #1]
   19fc6:	7ac3      	ldrb	r3, [r0, #11]
   19fc8:	f88d 200d 	strb.w	r2, [sp, #13]
   19fcc:	7982      	ldrb	r2, [r0, #6]
   19fce:	f88d 200e 	strb.w	r2, [sp, #14]
   19fd2:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   19fd6:	2310      	movs	r3, #16
   19fd8:	466a      	mov	r2, sp
   19fda:	4619      	mov	r1, r3
   19fdc:	f7ff ff6d 	bl	19eba <_copy>
}
   19fe0:	b005      	add	sp, #20
   19fe2:	f85d fb04 	ldr.w	pc, [sp], #4

00019fe6 <mult_row_column>:
{
   19fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19fe8:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19fea:	7808      	ldrb	r0, [r1, #0]
{
   19fec:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19fee:	f7ff ff73 	bl	19ed8 <_double_byte>
   19ff2:	4605      	mov	r5, r0
   19ff4:	7860      	ldrb	r0, [r4, #1]
   19ff6:	f7ff ff6f 	bl	19ed8 <_double_byte>
   19ffa:	78a2      	ldrb	r2, [r4, #2]
   19ffc:	7863      	ldrb	r3, [r4, #1]
   19ffe:	4053      	eors	r3, r2
   1a000:	78e2      	ldrb	r2, [r4, #3]
   1a002:	4053      	eors	r3, r2
   1a004:	405d      	eors	r5, r3
   1a006:	4045      	eors	r5, r0
   1a008:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1a00a:	7860      	ldrb	r0, [r4, #1]
   1a00c:	7827      	ldrb	r7, [r4, #0]
   1a00e:	f7ff ff63 	bl	19ed8 <_double_byte>
   1a012:	4605      	mov	r5, r0
   1a014:	78a0      	ldrb	r0, [r4, #2]
   1a016:	f7ff ff5f 	bl	19ed8 <_double_byte>
   1a01a:	78a3      	ldrb	r3, [r4, #2]
   1a01c:	405f      	eors	r7, r3
   1a01e:	78e3      	ldrb	r3, [r4, #3]
   1a020:	405f      	eors	r7, r3
   1a022:	407d      	eors	r5, r7
   1a024:	4045      	eors	r5, r0
   1a026:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1a028:	78a0      	ldrb	r0, [r4, #2]
   1a02a:	7865      	ldrb	r5, [r4, #1]
   1a02c:	7827      	ldrb	r7, [r4, #0]
   1a02e:	f7ff ff53 	bl	19ed8 <_double_byte>
   1a032:	406f      	eors	r7, r5
   1a034:	4605      	mov	r5, r0
   1a036:	78e0      	ldrb	r0, [r4, #3]
   1a038:	f7ff ff4e 	bl	19ed8 <_double_byte>
   1a03c:	78e3      	ldrb	r3, [r4, #3]
   1a03e:	405f      	eors	r7, r3
   1a040:	407d      	eors	r5, r7
   1a042:	4045      	eors	r5, r0
   1a044:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1a046:	7820      	ldrb	r0, [r4, #0]
   1a048:	f7ff ff46 	bl	19ed8 <_double_byte>
   1a04c:	7863      	ldrb	r3, [r4, #1]
   1a04e:	7825      	ldrb	r5, [r4, #0]
   1a050:	405d      	eors	r5, r3
   1a052:	78a3      	ldrb	r3, [r4, #2]
   1a054:	405d      	eors	r5, r3
   1a056:	4045      	eors	r5, r0
   1a058:	78e0      	ldrb	r0, [r4, #3]
   1a05a:	f7ff ff3d 	bl	19ed8 <_double_byte>
   1a05e:	b2ed      	uxtb	r5, r5
   1a060:	4045      	eors	r5, r0
   1a062:	70f5      	strb	r5, [r6, #3]
}
   1a064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a066 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1a066:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a068:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1a06a:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a06c:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1a070:	2b00      	cmp	r3, #0
   1a072:	bfb4      	ite	lt
   1a074:	2387      	movlt	r3, #135	; 0x87
   1a076:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1a078:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1a07c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1a080:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1a082:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1a086:	d002      	beq.n	1a08e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1a088:	7813      	ldrb	r3, [r2, #0]
   1a08a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1a08c:	e7f4      	b.n	1a078 <gf_double+0x12>
	}
}
   1a08e:	bd10      	pop	{r4, pc}

0001a090 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1a090:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1a092:	b120      	cbz	r0, 1a09e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1a094:	2258      	movs	r2, #88	; 0x58
   1a096:	2100      	movs	r1, #0
   1a098:	f7ff ff1c 	bl	19ed4 <_set>
   1a09c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1a09e:	bd08      	pop	{r3, pc}

0001a0a0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1a0a0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a0a2:	4604      	mov	r4, r0
   1a0a4:	b188      	cbz	r0, 1a0ca <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a0a6:	2210      	movs	r2, #16
   1a0a8:	2100      	movs	r1, #0
   1a0aa:	f7ff ff13 	bl	19ed4 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1a0ae:	2210      	movs	r2, #16
   1a0b0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a0b4:	2100      	movs	r1, #0
   1a0b6:	f7ff ff0d 	bl	19ed4 <_set>
	s->leftover_offset = 0;
   1a0ba:	2300      	movs	r3, #0
   1a0bc:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1a0be:	2200      	movs	r2, #0
   1a0c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a0c4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1a0c8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1a0ca:	bd10      	pop	{r4, pc}

0001a0cc <tc_cmac_setup>:
{
   1a0cc:	b570      	push	{r4, r5, r6, lr}
   1a0ce:	460d      	mov	r5, r1
   1a0d0:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1a0d2:	4604      	mov	r4, r0
   1a0d4:	b310      	cbz	r0, 1a11c <tc_cmac_setup+0x50>
   1a0d6:	b311      	cbz	r1, 1a11e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1a0d8:	2258      	movs	r2, #88	; 0x58
   1a0da:	2100      	movs	r1, #0
   1a0dc:	f7ff fefa 	bl	19ed4 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1a0e0:	4629      	mov	r1, r5
	s->sched = sched;
   1a0e2:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1a0e4:	4630      	mov	r0, r6
   1a0e6:	f7f8 ff41 	bl	12f6c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a0ea:	2210      	movs	r2, #16
   1a0ec:	2100      	movs	r1, #0
   1a0ee:	4620      	mov	r0, r4
   1a0f0:	f7ff fef0 	bl	19ed4 <_set>
	gf_double (s->K1, s->iv);
   1a0f4:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a0f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a0fa:	4621      	mov	r1, r4
   1a0fc:	4620      	mov	r0, r4
   1a0fe:	f7f8 ff87 	bl	13010 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1a102:	4621      	mov	r1, r4
   1a104:	4628      	mov	r0, r5
   1a106:	f7ff ffae 	bl	1a066 <gf_double>
	gf_double (s->K2, s->K1);
   1a10a:	4629      	mov	r1, r5
   1a10c:	f104 0020 	add.w	r0, r4, #32
   1a110:	f7ff ffa9 	bl	1a066 <gf_double>
	tc_cmac_init(s);
   1a114:	4620      	mov	r0, r4
   1a116:	f7ff ffc3 	bl	1a0a0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1a11a:	2001      	movs	r0, #1
}
   1a11c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a11e:	4608      	mov	r0, r1
   1a120:	e7fc      	b.n	1a11c <tc_cmac_setup+0x50>

0001a122 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1a122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a126:	460d      	mov	r5, r1
   1a128:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a12a:	4604      	mov	r4, r0
   1a12c:	2800      	cmp	r0, #0
   1a12e:	d062      	beq.n	1a1f6 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1a130:	b912      	cbnz	r2, 1a138 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1a132:	2001      	movs	r0, #1
}
   1a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1a138:	2900      	cmp	r1, #0
   1a13a:	d05c      	beq.n	1a1f6 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1a13c:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1a140:	ea50 0301 	orrs.w	r3, r0, r1
   1a144:	d057      	beq.n	1a1f6 <tc_cmac_update+0xd4>
	s->countdown--;
   1a146:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   1a14a:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1a14e:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1a152:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1a156:	f1b8 0f00 	cmp.w	r8, #0
   1a15a:	d02a      	beq.n	1a1b2 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1a15c:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1a160:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1a164:	42be      	cmp	r6, r7
   1a166:	4420      	add	r0, r4
   1a168:	d208      	bcs.n	1a17c <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a16a:	462a      	mov	r2, r5
   1a16c:	4633      	mov	r3, r6
   1a16e:	4631      	mov	r1, r6
   1a170:	f7ff fea3 	bl	19eba <_copy>
			s->leftover_offset += data_length;
   1a174:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a176:	4432      	add	r2, r6
   1a178:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1a17a:	e7da      	b.n	1a132 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1a17c:	463b      	mov	r3, r7
   1a17e:	462a      	mov	r2, r5
   1a180:	4639      	mov	r1, r7
   1a182:	f7ff fe9a 	bl	19eba <_copy>
		data_length -= remaining_space;
   1a186:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1a188:	2300      	movs	r3, #0
   1a18a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1a18c:	4446      	add	r6, r8
		data += remaining_space;
   1a18e:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a190:	1e63      	subs	r3, r4, #1
   1a192:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1a196:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a19a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a19e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1a1a0:	ea82 0200 	eor.w	r2, r2, r0
   1a1a4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a1a6:	d1f6      	bne.n	1a196 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a1a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a1aa:	4621      	mov	r1, r4
   1a1ac:	4620      	mov	r0, r4
   1a1ae:	f7f8 ff2f 	bl	13010 <tc_aes_encrypt>
   1a1b2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1a1b6:	2e10      	cmp	r6, #16
   1a1b8:	d80a      	bhi.n	1a1d0 <tc_cmac_update+0xae>
	if (data_length > 0) {
   1a1ba:	2e00      	cmp	r6, #0
   1a1bc:	d0b9      	beq.n	1a132 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1a1be:	4633      	mov	r3, r6
   1a1c0:	462a      	mov	r2, r5
   1a1c2:	4631      	mov	r1, r6
   1a1c4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a1c8:	f7ff fe77 	bl	19eba <_copy>
		s->leftover_offset = data_length;
   1a1cc:	6466      	str	r6, [r4, #68]	; 0x44
   1a1ce:	e7b0      	b.n	1a132 <tc_cmac_update+0x10>
   1a1d0:	1e63      	subs	r3, r4, #1
   1a1d2:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1a1d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a1d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a1dc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1a1de:	ea82 0200 	eor.w	r2, r2, r0
   1a1e2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a1e4:	d1f6      	bne.n	1a1d4 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a1e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a1e8:	4621      	mov	r1, r4
   1a1ea:	4620      	mov	r0, r4
   1a1ec:	f7f8 ff10 	bl	13010 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1a1f0:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1a1f2:	3e10      	subs	r6, #16
   1a1f4:	e7df      	b.n	1a1b6 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1a1f6:	2000      	movs	r0, #0
   1a1f8:	e79c      	b.n	1a134 <tc_cmac_update+0x12>

0001a1fa <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1a1fa:	b570      	push	{r4, r5, r6, lr}
   1a1fc:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1a1fe:	4605      	mov	r5, r0
   1a200:	b1e8      	cbz	r0, 1a23e <tc_cmac_final+0x44>
   1a202:	b369      	cbz	r1, 1a260 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1a204:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1a206:	2a10      	cmp	r2, #16
   1a208:	d11a      	bne.n	1a240 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1a20a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a20c:	1e63      	subs	r3, r4, #1
   1a20e:	3901      	subs	r1, #1
   1a210:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a214:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a218:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1a21c:	4072      	eors	r2, r6
   1a21e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a222:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a224:	ea82 0206 	eor.w	r2, r2, r6
   1a228:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a22a:	d1f3      	bne.n	1a214 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1a22c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a22e:	4621      	mov	r1, r4
   1a230:	4628      	mov	r0, r5
   1a232:	f7f8 feed 	bl	13010 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1a236:	4620      	mov	r0, r4
   1a238:	f7ff ff2a 	bl	1a090 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1a23c:	2001      	movs	r0, #1
}
   1a23e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1a240:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1a244:	2100      	movs	r1, #0
   1a246:	f1c2 0210 	rsb	r2, r2, #16
   1a24a:	4420      	add	r0, r4
   1a24c:	f7ff fe42 	bl	19ed4 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a250:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a252:	4423      	add	r3, r4
   1a254:	2280      	movs	r2, #128	; 0x80
   1a256:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1a25a:	f104 0120 	add.w	r1, r4, #32
   1a25e:	e7d5      	b.n	1a20c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1a260:	4608      	mov	r0, r1
   1a262:	e7ec      	b.n	1a23e <tc_cmac_final+0x44>

0001a264 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1a264:	2100      	movs	r1, #0
   1a266:	2001      	movs	r0, #1
   1a268:	f000 b800 	b.w	1a26c <z_arm_fatal_error>

0001a26c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1a26c:	f002 b924 	b.w	1c4b8 <z_fatal_error>

0001a270 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1a270:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1a272:	6800      	ldr	r0, [r0, #0]
   1a274:	f002 b920 	b.w	1c4b8 <z_fatal_error>

0001a278 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1a278:	b508      	push	{r3, lr}
	handler();
   1a27a:	f7f9 f851 	bl	13320 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1a27e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1a282:	f7f9 b893 	b.w	133ac <z_arm_exc_exit>

0001a286 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1a286:	3901      	subs	r1, #1
   1a288:	4603      	mov	r3, r0
   1a28a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1a28e:	b90a      	cbnz	r2, 1a294 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1a290:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1a292:	4770      	bx	lr
		*d = *s;
   1a294:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1a298:	e7f7      	b.n	1a28a <strcpy+0x4>

0001a29a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1a29a:	4603      	mov	r3, r0
	size_t n = 0;
   1a29c:	2000      	movs	r0, #0

	while (*s != '\0') {
   1a29e:	5c1a      	ldrb	r2, [r3, r0]
   1a2a0:	b902      	cbnz	r2, 1a2a4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1a2a2:	4770      	bx	lr
		n++;
   1a2a4:	3001      	adds	r0, #1
   1a2a6:	e7fa      	b.n	1a29e <strlen+0x4>

0001a2a8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1a2a8:	1e43      	subs	r3, r0, #1
   1a2aa:	3901      	subs	r1, #1
   1a2ac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a2b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1a2b4:	4282      	cmp	r2, r0
   1a2b6:	d101      	bne.n	1a2bc <strcmp+0x14>
   1a2b8:	2a00      	cmp	r2, #0
   1a2ba:	d1f7      	bne.n	1a2ac <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1a2bc:	1a10      	subs	r0, r2, r0
   1a2be:	4770      	bx	lr

0001a2c0 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1a2c0:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1a2c2:	b15a      	cbz	r2, 1a2dc <memcmp+0x1c>
   1a2c4:	3901      	subs	r1, #1
   1a2c6:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1a2c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   1a2cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1a2d0:	42a0      	cmp	r0, r4
   1a2d2:	d001      	beq.n	1a2d8 <memcmp+0x18>
   1a2d4:	429a      	cmp	r2, r3
   1a2d6:	d0f7      	beq.n	1a2c8 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1a2d8:	1ad0      	subs	r0, r2, r3
}
   1a2da:	bd10      	pop	{r4, pc}
		return 0;
   1a2dc:	4610      	mov	r0, r2
   1a2de:	e7fc      	b.n	1a2da <memcmp+0x1a>

0001a2e0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1a2e0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1a2e2:	ea81 0400 	eor.w	r4, r1, r0
   1a2e6:	07a5      	lsls	r5, r4, #30
   1a2e8:	4603      	mov	r3, r0
   1a2ea:	d00b      	beq.n	1a304 <memcpy+0x24>
   1a2ec:	3b01      	subs	r3, #1
   1a2ee:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1a2f0:	4291      	cmp	r1, r2
   1a2f2:	d11b      	bne.n	1a32c <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1a2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1a2f6:	2a00      	cmp	r2, #0
   1a2f8:	d0fc      	beq.n	1a2f4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1a2fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a2fe:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1a302:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1a304:	079c      	lsls	r4, r3, #30
   1a306:	d1f6      	bne.n	1a2f6 <memcpy+0x16>
   1a308:	f022 0403 	bic.w	r4, r2, #3
   1a30c:	1f1d      	subs	r5, r3, #4
   1a30e:	0896      	lsrs	r6, r2, #2
   1a310:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1a312:	42b9      	cmp	r1, r7
   1a314:	d105      	bne.n	1a322 <memcpy+0x42>
   1a316:	f06f 0503 	mvn.w	r5, #3
   1a31a:	fb05 2206 	mla	r2, r5, r6, r2
   1a31e:	4423      	add	r3, r4
   1a320:	e7e4      	b.n	1a2ec <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1a322:	f851 cb04 	ldr.w	ip, [r1], #4
   1a326:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1a32a:	e7f2      	b.n	1a312 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1a32c:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a330:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1a334:	e7dc      	b.n	1a2f0 <memcpy+0x10>

0001a336 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1a336:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1a338:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1a33a:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1a33c:	079c      	lsls	r4, r3, #30
   1a33e:	d111      	bne.n	1a364 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1a340:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1a344:	f022 0603 	bic.w	r6, r2, #3
   1a348:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1a34c:	441e      	add	r6, r3
   1a34e:	0894      	lsrs	r4, r2, #2
   1a350:	42b3      	cmp	r3, r6
   1a352:	d10d      	bne.n	1a370 <memset+0x3a>
   1a354:	f06f 0503 	mvn.w	r5, #3
   1a358:	fb05 2204 	mla	r2, r5, r4, r2
   1a35c:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1a35e:	4293      	cmp	r3, r2
   1a360:	d109      	bne.n	1a376 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1a362:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1a364:	2a00      	cmp	r2, #0
   1a366:	d0fc      	beq.n	1a362 <memset+0x2c>
		*(d_byte++) = c_byte;
   1a368:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a36c:	3a01      	subs	r2, #1
   1a36e:	e7e5      	b.n	1a33c <memset+0x6>
		*(d_word++) = c_word;
   1a370:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1a374:	e7ec      	b.n	1a350 <memset+0x1a>
		*(d_byte++) = c_byte;
   1a376:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a37a:	e7f0      	b.n	1a35e <memset+0x28>

0001a37c <_stdout_hook_default>:
}
   1a37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a380:	4770      	bx	lr

0001a382 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1a382:	f7fd be1f 	b.w	17fc4 <SystemInit>

0001a386 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1a386:	b510      	push	{r4, lr}
   1a388:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1a38a:	7801      	ldrb	r1, [r0, #0]
   1a38c:	7822      	ldrb	r2, [r4, #0]
   1a38e:	428a      	cmp	r2, r1
{
   1a390:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1a392:	d00e      	beq.n	1a3b2 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1a394:	4669      	mov	r1, sp
   1a396:	f7f9 fa39 	bl	1380c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1a39a:	a905      	add	r1, sp, #20
   1a39c:	4620      	mov	r0, r4
   1a39e:	f7f9 fa35 	bl	1380c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1a3a2:	2210      	movs	r2, #16
   1a3a4:	f10d 0115 	add.w	r1, sp, #21
   1a3a8:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a3ac:	f7ff ff88 	bl	1a2c0 <memcmp>
   1a3b0:	e007      	b.n	1a3c2 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1a3b2:	2a01      	cmp	r2, #1
   1a3b4:	d007      	beq.n	1a3c6 <bt_uuid_cmp+0x40>
   1a3b6:	2a02      	cmp	r2, #2
   1a3b8:	d008      	beq.n	1a3cc <bt_uuid_cmp+0x46>
   1a3ba:	b95a      	cbnz	r2, 1a3d4 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1a3bc:	8840      	ldrh	r0, [r0, #2]
   1a3be:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1a3c0:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1a3c2:	b00a      	add	sp, #40	; 0x28
   1a3c4:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1a3c6:	6840      	ldr	r0, [r0, #4]
   1a3c8:	6863      	ldr	r3, [r4, #4]
   1a3ca:	e7f9      	b.n	1a3c0 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a3cc:	2210      	movs	r2, #16
   1a3ce:	1c61      	adds	r1, r4, #1
   1a3d0:	3001      	adds	r0, #1
   1a3d2:	e7eb      	b.n	1a3ac <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1a3d4:	f06f 0015 	mvn.w	r0, #21
   1a3d8:	e7f3      	b.n	1a3c2 <bt_uuid_cmp+0x3c>

0001a3da <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1a3da:	2a04      	cmp	r2, #4
{
   1a3dc:	b538      	push	{r3, r4, r5, lr}
   1a3de:	460c      	mov	r4, r1
	switch (data_len) {
   1a3e0:	d00d      	beq.n	1a3fe <bt_uuid_create+0x24>
   1a3e2:	2a10      	cmp	r2, #16
   1a3e4:	d019      	beq.n	1a41a <bt_uuid_create+0x40>
   1a3e6:	2a02      	cmp	r2, #2
   1a3e8:	f04f 0300 	mov.w	r3, #0
   1a3ec:	d11b      	bne.n	1a426 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1a3ee:	7003      	strb	r3, [r0, #0]
   1a3f0:	784a      	ldrb	r2, [r1, #1]
   1a3f2:	780b      	ldrb	r3, [r1, #0]
   1a3f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1a3f8:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1a3fa:	2001      	movs	r0, #1
}
   1a3fc:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1a3fe:	2301      	movs	r3, #1
   1a400:	7003      	strb	r3, [r0, #0]
   1a402:	78a2      	ldrb	r2, [r4, #2]
   1a404:	78c9      	ldrb	r1, [r1, #3]
   1a406:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a408:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1a40c:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a40e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1a412:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1a416:	6042      	str	r2, [r0, #4]
		break;
   1a418:	e7ef      	b.n	1a3fa <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1a41a:	2302      	movs	r3, #2
   1a41c:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1a420:	f7ff ff5e 	bl	1a2e0 <memcpy>
		break;
   1a424:	e7e9      	b.n	1a3fa <bt_uuid_create+0x20>
	switch (data_len) {
   1a426:	4618      	mov	r0, r3
   1a428:	e7e8      	b.n	1a3fc <bt_uuid_create+0x22>

0001a42a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1a42a:	280f      	cmp	r0, #15
   1a42c:	d806      	bhi.n	1a43c <bt_hci_evt_get_flags+0x12>
   1a42e:	280d      	cmp	r0, #13
   1a430:	d80b      	bhi.n	1a44a <bt_hci_evt_get_flags+0x20>
   1a432:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1a434:	bf14      	ite	ne
   1a436:	2002      	movne	r0, #2
   1a438:	2003      	moveq	r0, #3
   1a43a:	4770      	bx	lr
	switch (evt) {
   1a43c:	2813      	cmp	r0, #19
   1a43e:	d004      	beq.n	1a44a <bt_hci_evt_get_flags+0x20>
   1a440:	281a      	cmp	r0, #26
   1a442:	bf14      	ite	ne
   1a444:	2002      	movne	r0, #2
   1a446:	2001      	moveq	r0, #1
   1a448:	4770      	bx	lr
   1a44a:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1a44c:	4770      	bx	lr

0001a44e <handle_event>:
{
   1a44e:	b410      	push	{r4}
   1a450:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a454:	4604      	mov	r4, r0
   1a456:	4608      	mov	r0, r1
		if (handler->event != event) {
   1a458:	7811      	ldrb	r1, [r2, #0]
   1a45a:	42a1      	cmp	r1, r4
   1a45c:	d004      	beq.n	1a468 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1a45e:	3208      	adds	r2, #8
   1a460:	429a      	cmp	r2, r3
   1a462:	d1f9      	bne.n	1a458 <handle_event+0xa>
}
   1a464:	bc10      	pop	{r4}
   1a466:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1a468:	8981      	ldrh	r1, [r0, #12]
   1a46a:	7853      	ldrb	r3, [r2, #1]
   1a46c:	4299      	cmp	r1, r3
   1a46e:	d3f9      	bcc.n	1a464 <handle_event+0x16>
		handler->handler(buf);
   1a470:	6853      	ldr	r3, [r2, #4]
}
   1a472:	bc10      	pop	{r4}
		handler->handler(buf);
   1a474:	4718      	bx	r3

0001a476 <hci_data_buf_overflow>:
}
   1a476:	4770      	bx	lr

0001a478 <get_adv_channel_map>:
{
   1a478:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1a47a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1a47e:	bf0c      	ite	eq
   1a480:	2007      	moveq	r0, #7
   1a482:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1a484:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1a486:	bf48      	it	mi
   1a488:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1a48c:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1a48e:	bf48      	it	mi
   1a490:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1a494:	4770      	bx	lr

0001a496 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a496:	f3bf 8f5b 	dmb	ish
   1a49a:	6800      	ldr	r0, [r0, #0]
   1a49c:	f3bf 8f5b 	dmb	ish
}
   1a4a0:	4770      	bx	lr

0001a4a2 <bt_addr_le_copy>:
   1a4a2:	2207      	movs	r2, #7
   1a4a4:	f7ff bf1c 	b.w	1a2e0 <memcpy>

0001a4a8 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1a4a8:	2207      	movs	r2, #7
   1a4aa:	f7ff bf09 	b.w	1a2c0 <memcmp>

0001a4ae <hci_hardware_error>:
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   1a4ae:	2101      	movs	r1, #1
   1a4b0:	3008      	adds	r0, #8
   1a4b2:	f001 bd7f 	b.w	1bfb4 <net_buf_simple_pull_mem>

0001a4b6 <le_data_len_change>:
{
   1a4b6:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a4b8:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1a4ba:	8818      	ldrh	r0, [r3, #0]
   1a4bc:	f7fa ff0e 	bl	152dc <bt_conn_lookup_handle>
	if (!conn) {
   1a4c0:	b118      	cbz	r0, 1a4ca <le_data_len_change+0x14>
}
   1a4c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1a4c6:	f000 bb72 	b.w	1abae <bt_conn_unref>
}
   1a4ca:	bd08      	pop	{r3, pc}

0001a4cc <hci_disconn_complete_prio>:
{
   1a4cc:	b510      	push	{r4, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1a4ce:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1a4d0:	781a      	ldrb	r2, [r3, #0]
   1a4d2:	b96a      	cbnz	r2, 1a4f0 <hci_disconn_complete_prio+0x24>
	conn = bt_conn_lookup_handle(handle);
   1a4d4:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1a4d8:	f7fa ff00 	bl	152dc <bt_conn_lookup_handle>
	if (!conn) {
   1a4dc:	4604      	mov	r4, r0
   1a4de:	b138      	cbz	r0, 1a4f0 <hci_disconn_complete_prio+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1a4e0:	2101      	movs	r1, #1
   1a4e2:	f7fa ff49 	bl	15378 <bt_conn_set_state>
	bt_conn_unref(conn);
   1a4e6:	4620      	mov	r0, r4
}
   1a4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1a4ec:	f000 bb5f 	b.w	1abae <bt_conn_unref>
}
   1a4f0:	bd10      	pop	{r4, pc}

0001a4f2 <hci_disconn_complete>:
{
   1a4f2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1a4f4:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1a4f6:	7835      	ldrb	r5, [r6, #0]
   1a4f8:	b985      	cbnz	r5, 1a51c <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle);
   1a4fa:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1a4fe:	f7fa feed 	bl	152dc <bt_conn_lookup_handle>
	if (!conn) {
   1a502:	4604      	mov	r4, r0
   1a504:	b150      	cbz	r0, 1a51c <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   1a506:	78f3      	ldrb	r3, [r6, #3]
   1a508:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a50a:	4629      	mov	r1, r5
   1a50c:	f7fa ff34 	bl	15378 <bt_conn_set_state>
	conn->handle = 0U;
   1a510:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1a512:	4620      	mov	r0, r4
}
   1a514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1a518:	f000 bb49 	b.w	1abae <bt_conn_unref>
}
   1a51c:	bd70      	pop	{r4, r5, r6, pc}

0001a51e <atomic_or>:
{
   1a51e:	4603      	mov	r3, r0
}
   1a520:	f3bf 8f5b 	dmb	ish
   1a524:	e853 0f00 	ldrex	r0, [r3]
   1a528:	ea40 0201 	orr.w	r2, r0, r1
   1a52c:	e843 2c00 	strex	ip, r2, [r3]
   1a530:	f1bc 0f00 	cmp.w	ip, #0
   1a534:	d1f6      	bne.n	1a524 <atomic_or+0x6>
   1a536:	f3bf 8f5b 	dmb	ish
   1a53a:	4770      	bx	lr

0001a53c <atomic_and>:
{
   1a53c:	4603      	mov	r3, r0
}
   1a53e:	f3bf 8f5b 	dmb	ish
   1a542:	e853 0f00 	ldrex	r0, [r3]
   1a546:	ea00 0201 	and.w	r2, r0, r1
   1a54a:	e843 2c00 	strex	ip, r2, [r3]
   1a54e:	f1bc 0f00 	cmp.w	ip, #0
   1a552:	d1f6      	bne.n	1a542 <atomic_and+0x6>
   1a554:	f3bf 8f5b 	dmb	ish
   1a558:	4770      	bx	lr

0001a55a <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1a55a:	460b      	mov	r3, r1
   1a55c:	b410      	push	{r4}
   1a55e:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1a560:	f001 041f 	and.w	r4, r1, #31
   1a564:	2101      	movs	r1, #1
   1a566:	40a1      	lsls	r1, r4

	if (val) {
   1a568:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1a56c:	b112      	cbz	r2, 1a574 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1a56e:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a570:	f7ff bfd5 	b.w	1a51e <atomic_or>
}
   1a574:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a576:	43c9      	mvns	r1, r1
   1a578:	f7ff bfe0 	b.w	1a53c <atomic_and>

0001a57c <le_conn_update_complete>:
{
   1a57c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1a57e:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1a580:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1a584:	f7fa feaa 	bl	152dc <bt_conn_lookup_handle>
	if (!conn) {
   1a588:	4604      	mov	r4, r0
   1a58a:	b1c0      	cbz	r0, 1a5be <le_conn_update_complete+0x42>
	if (!evt->status) {
   1a58c:	782b      	ldrb	r3, [r5, #0]
   1a58e:	b9c3      	cbnz	r3, 1a5c2 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1a590:	792a      	ldrb	r2, [r5, #4]
   1a592:	78eb      	ldrb	r3, [r5, #3]
   1a594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a598:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1a59c:	79aa      	ldrb	r2, [r5, #6]
   1a59e:	796b      	ldrb	r3, [r5, #5]
   1a5a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a5a4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1a5a8:	79eb      	ldrb	r3, [r5, #7]
   1a5aa:	7a2a      	ldrb	r2, [r5, #8]
   1a5ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a5b0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1a5b4:	f7fa fd6a 	bl	1508c <notify_le_param_updated>
	bt_conn_unref(conn);
   1a5b8:	4620      	mov	r0, r4
   1a5ba:	f000 faf8 	bl	1abae <bt_conn_unref>
}
   1a5be:	b003      	add	sp, #12
   1a5c0:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1a5c2:	2b1a      	cmp	r3, #26
   1a5c4:	d1f8      	bne.n	1a5b8 <le_conn_update_complete+0x3c>
   1a5c6:	78c3      	ldrb	r3, [r0, #3]
   1a5c8:	2b01      	cmp	r3, #1
   1a5ca:	d1f5      	bne.n	1a5b8 <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a5cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a5d0:	3004      	adds	r0, #4
   1a5d2:	f7ff ffa4 	bl	1a51e <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1a5d6:	0543      	lsls	r3, r0, #21
   1a5d8:	d4ee      	bmi.n	1a5b8 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1a5da:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1a5de:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1a5e0:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1a5e2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1a5e6:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1a5e8:	4620      	mov	r0, r4
   1a5ea:	f7fb f93b 	bl	15864 <bt_l2cap_update_conn_param>
   1a5ee:	e7e3      	b.n	1a5b8 <le_conn_update_complete+0x3c>

0001a5f0 <hci_vendor_event>:
   1a5f0:	4770      	bx	lr

0001a5f2 <hci_le_read_max_data_len>:
{
   1a5f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a5f4:	4606      	mov	r6, r0
   1a5f6:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1a5f8:	aa01      	add	r2, sp, #4
   1a5fa:	2100      	movs	r1, #0
   1a5fc:	f242 002f 	movw	r0, #8239	; 0x202f
   1a600:	f7f9 fbbc 	bl	13d7c <bt_hci_cmd_send_sync>
	if (err) {
   1a604:	4604      	mov	r4, r0
   1a606:	b948      	cbnz	r0, 1a61c <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1a608:	9801      	ldr	r0, [sp, #4]
   1a60a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1a60c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1a610:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1a612:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1a616:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1a618:	f7fc fba8 	bl	16d6c <net_buf_unref>
}
   1a61c:	4620      	mov	r0, r4
   1a61e:	b002      	add	sp, #8
   1a620:	bd70      	pop	{r4, r5, r6, pc}

0001a622 <hci_set_ad>:
{
   1a622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a626:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a628:	2120      	movs	r1, #32
{
   1a62a:	4682      	mov	sl, r0
   1a62c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a62e:	f7f9 fb6d 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   1a632:	4606      	mov	r6, r0
   1a634:	2800      	cmp	r0, #0
   1a636:	d04a      	beq.n	1a6ce <hci_set_ad+0xac>
	set_data = net_buf_add(buf, sizeof(*set_data));
   1a638:	2120      	movs	r1, #32
   1a63a:	3008      	adds	r0, #8
   1a63c:	f001 fc93 	bl	1bf66 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1a640:	2220      	movs	r2, #32
   1a642:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
   1a644:	4681      	mov	r9, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   1a646:	f7ff fe76 	bl	1a336 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1a64a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1a64e:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1a652:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1a654:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1a656:	f8d4 8000 	ldr.w	r8, [r4]
   1a65a:	2300      	movs	r3, #0
   1a65c:	6862      	ldr	r2, [r4, #4]
   1a65e:	4293      	cmp	r3, r2
   1a660:	d30d      	bcc.n	1a67e <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1a662:	9b00      	ldr	r3, [sp, #0]
   1a664:	3408      	adds	r4, #8
   1a666:	42a3      	cmp	r3, r4
   1a668:	d1f5      	bne.n	1a656 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a66a:	2200      	movs	r2, #0
   1a66c:	4631      	mov	r1, r6
   1a66e:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1a670:	f889 5000 	strb.w	r5, [r9]
}
   1a674:	b003      	add	sp, #12
   1a676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a67a:	f7f9 bb7f 	b.w	13d7c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1a67e:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1a682:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1a686:	1ca8      	adds	r0, r5, #2
   1a688:	1811      	adds	r1, r2, r0
   1a68a:	291f      	cmp	r1, #31
   1a68c:	d908      	bls.n	1a6a0 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1a68e:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1a692:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1a696:	d11f      	bne.n	1a6d8 <hci_set_ad+0xb6>
   1a698:	2a00      	cmp	r2, #0
   1a69a:	dd1d      	ble.n	1a6d8 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1a69c:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1a6a0:	b2d7      	uxtb	r7, r2
   1a6a2:	1c79      	adds	r1, r7, #1
   1a6a4:	f80b 1005 	strb.w	r1, [fp, r5]
   1a6a8:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1a6aa:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1a6ac:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1a6b0:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1a6b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1a6b8:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1a6ba:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1a6bc:	f7ff fe10 	bl	1a2e0 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1a6c0:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1a6c2:	443d      	add	r5, r7
   1a6c4:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1a6c6:	3301      	adds	r3, #1
   1a6c8:	f108 0808 	add.w	r8, r8, #8
   1a6cc:	e7c6      	b.n	1a65c <hci_set_ad+0x3a>
		return -ENOBUFS;
   1a6ce:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1a6d2:	b003      	add	sp, #12
   1a6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1a6d8:	4630      	mov	r0, r6
   1a6da:	f7fc fb47 	bl	16d6c <net_buf_unref>
		return err;
   1a6de:	f06f 0015 	mvn.w	r0, #21
   1a6e2:	e7f6      	b.n	1a6d2 <hci_set_ad+0xb0>

0001a6e4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1a6e4:	8802      	ldrh	r2, [r0, #0]
   1a6e6:	8843      	ldrh	r3, [r0, #2]
   1a6e8:	429a      	cmp	r2, r3
{
   1a6ea:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1a6ec:	d818      	bhi.n	1a720 <bt_le_conn_params_valid+0x3c>
   1a6ee:	2a05      	cmp	r2, #5
   1a6f0:	d916      	bls.n	1a720 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1a6f2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1a6f6:	d813      	bhi.n	1a720 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1a6f8:	8884      	ldrh	r4, [r0, #4]
   1a6fa:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1a6fe:	d20f      	bcs.n	1a720 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a700:	88c1      	ldrh	r1, [r0, #6]
   1a702:	f1a1 020a 	sub.w	r2, r1, #10
   1a706:	b292      	uxth	r2, r2
   1a708:	f640 4076 	movw	r0, #3190	; 0xc76
   1a70c:	4282      	cmp	r2, r0
   1a70e:	d807      	bhi.n	1a720 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1a710:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a714:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1a718:	bf34      	ite	cc
   1a71a:	2001      	movcc	r0, #1
   1a71c:	2000      	movcs	r0, #0
}
   1a71e:	bd10      	pop	{r4, pc}
		return false;
   1a720:	2000      	movs	r0, #0
   1a722:	e7fc      	b.n	1a71e <bt_le_conn_params_valid+0x3a>

0001a724 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1a724:	2301      	movs	r3, #1
{
   1a726:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1a728:	2106      	movs	r1, #6
{
   1a72a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1a72c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1a730:	f7fd fb74 	bl	17e1c <bt_rand>
	if (err) {
   1a734:	b918      	cbnz	r0, 1a73e <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1a736:	79a3      	ldrb	r3, [r4, #6]
   1a738:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a73c:	71a3      	strb	r3, [r4, #6]
}
   1a73e:	bd10      	pop	{r4, pc}

0001a740 <bt_hci_disconnect>:
{
   1a740:	b570      	push	{r4, r5, r6, lr}
   1a742:	4606      	mov	r6, r0
   1a744:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1a746:	f240 4006 	movw	r0, #1030	; 0x406
   1a74a:	2103      	movs	r1, #3
   1a74c:	f7f9 fade 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   1a750:	4604      	mov	r4, r0
   1a752:	b160      	cbz	r0, 1a76e <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   1a754:	2103      	movs	r1, #3
   1a756:	3008      	adds	r0, #8
   1a758:	f001 fc05 	bl	1bf66 <net_buf_simple_add>
	disconn->reason = reason;
   1a75c:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1a75e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1a760:	4621      	mov	r1, r4
   1a762:	f240 4006 	movw	r0, #1030	; 0x406
}
   1a766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1a76a:	f7f9 bcc5 	b.w	140f8 <bt_hci_cmd_send>
}
   1a76e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1a772:	bd70      	pop	{r4, r5, r6, pc}

0001a774 <bt_le_set_data_len>:
{
   1a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a776:	4607      	mov	r7, r0
   1a778:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1a77a:	f242 0022 	movw	r0, #8226	; 0x2022
   1a77e:	2106      	movs	r1, #6
{
   1a780:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1a782:	f7f9 fac3 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   1a786:	4604      	mov	r4, r0
   1a788:	b170      	cbz	r0, 1a7a8 <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   1a78a:	2106      	movs	r1, #6
   1a78c:	3008      	adds	r0, #8
   1a78e:	f001 fbea 	bl	1bf66 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a792:	883b      	ldrh	r3, [r7, #0]
   1a794:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1a796:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1a798:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1a79a:	4621      	mov	r1, r4
   1a79c:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1a7a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1a7a4:	f7f9 bca8 	b.w	140f8 <bt_hci_cmd_send>
}
   1a7a8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1a7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a7ae <bt_le_set_phy>:
{
   1a7ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a7b2:	4680      	mov	r8, r0
   1a7b4:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1a7b6:	f242 0032 	movw	r0, #8242	; 0x2032
   1a7ba:	2107      	movs	r1, #7
{
   1a7bc:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1a7c0:	4616      	mov	r6, r2
   1a7c2:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1a7c4:	f7f9 faa2 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   1a7c8:	4604      	mov	r4, r0
   1a7ca:	b190      	cbz	r0, 1a7f2 <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   1a7cc:	2107      	movs	r1, #7
   1a7ce:	3008      	adds	r0, #8
   1a7d0:	f001 fbc9 	bl	1bf66 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a7d4:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1a7d8:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1a7da:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1a7dc:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a7de:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1a7e0:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1a7e4:	4621      	mov	r1, r4
   1a7e6:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1a7ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1a7ee:	f7f9 bc83 	b.w	140f8 <bt_hci_cmd_send>
}
   1a7f2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1a7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a7fa <le_phy_update_complete>:
{
   1a7fa:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a7fc:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1a7fe:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1a802:	f7fa fd6b 	bl	152dc <bt_conn_lookup_handle>
	if (!conn) {
   1a806:	4604      	mov	r4, r0
   1a808:	b1a0      	cbz	r0, 1a834 <le_phy_update_complete+0x3a>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1a80a:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a80c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1a810:	4628      	mov	r0, r5
   1a812:	f7ff fe93 	bl	1a53c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1a816:	0603      	lsls	r3, r0, #24
   1a818:	d507      	bpl.n	1a82a <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a81a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1a81e:	4628      	mov	r0, r5
   1a820:	f7ff fe7d 	bl	1a51e <atomic_or>
		conn_auto_initiate(conn);
   1a824:	4620      	mov	r0, r4
   1a826:	f7f9 fc89 	bl	1413c <conn_auto_initiate>
	bt_conn_unref(conn);
   1a82a:	4620      	mov	r0, r4
}
   1a82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1a830:	f000 b9bd 	b.w	1abae <bt_conn_unref>
}
   1a834:	bd38      	pop	{r3, r4, r5, pc}

0001a836 <le_remote_feat_complete>:
{
   1a836:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1a838:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1a83a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1a83e:	f7fa fd4d 	bl	152dc <bt_conn_lookup_handle>
	if (!conn) {
   1a842:	4604      	mov	r4, r0
   1a844:	b198      	cbz	r0, 1a86e <le_remote_feat_complete+0x38>
	if (!evt->status) {
   1a846:	782b      	ldrb	r3, [r5, #0]
   1a848:	b923      	cbnz	r3, 1a854 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1a84a:	2208      	movs	r2, #8
   1a84c:	1ce9      	adds	r1, r5, #3
   1a84e:	30ac      	adds	r0, #172	; 0xac
   1a850:	f7ff fd46 	bl	1a2e0 <memcpy>
   1a854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1a858:	1d20      	adds	r0, r4, #4
   1a85a:	f7ff fe60 	bl	1a51e <atomic_or>
	conn_auto_initiate(conn);
   1a85e:	4620      	mov	r0, r4
   1a860:	f7f9 fc6c 	bl	1413c <conn_auto_initiate>
	bt_conn_unref(conn);
   1a864:	4620      	mov	r0, r4
}
   1a866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1a86a:	f000 b9a0 	b.w	1abae <bt_conn_unref>
}
   1a86e:	bd38      	pop	{r3, r4, r5, pc}

0001a870 <le_conn_param_neg_reply>:
{
   1a870:	b570      	push	{r4, r5, r6, lr}
   1a872:	4606      	mov	r6, r0
   1a874:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1a876:	f242 0021 	movw	r0, #8225	; 0x2021
   1a87a:	2103      	movs	r1, #3
   1a87c:	f7f9 fa46 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   1a880:	4604      	mov	r4, r0
   1a882:	b160      	cbz	r0, 1a89e <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
   1a884:	2103      	movs	r1, #3
   1a886:	3008      	adds	r0, #8
   1a888:	f001 fb6d 	bl	1bf66 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1a88c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1a88e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a890:	4621      	mov	r1, r4
   1a892:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1a896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a89a:	f7f9 bc2d 	b.w	140f8 <bt_hci_cmd_send>
}
   1a89e:	bd70      	pop	{r4, r5, r6, pc}

0001a8a0 <le_conn_param_req>:
{
   1a8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1a8a2:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a8a4:	78d9      	ldrb	r1, [r3, #3]
   1a8a6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1a8a8:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a8aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a8ae:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a8b2:	7959      	ldrb	r1, [r3, #5]
   1a8b4:	791a      	ldrb	r2, [r3, #4]
   1a8b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a8ba:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1a8be:	799a      	ldrb	r2, [r3, #6]
   1a8c0:	79d9      	ldrb	r1, [r3, #7]
   1a8c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a8c6:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a8ca:	7a1a      	ldrb	r2, [r3, #8]
   1a8cc:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1a8ce:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a8d0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1a8d4:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a8d6:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1a8da:	f7fa fcff 	bl	152dc <bt_conn_lookup_handle>
	if (!conn) {
   1a8de:	4606      	mov	r6, r0
   1a8e0:	b928      	cbnz	r0, 1a8ee <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1a8e2:	2102      	movs	r1, #2
   1a8e4:	4620      	mov	r0, r4
   1a8e6:	f7ff ffc3 	bl	1a870 <le_conn_param_neg_reply>
}
   1a8ea:	b003      	add	sp, #12
   1a8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1a8ee:	4669      	mov	r1, sp
   1a8f0:	f7fa fc00 	bl	150f4 <le_param_req>
   1a8f4:	b938      	cbnz	r0, 1a906 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1a8f6:	211e      	movs	r1, #30
   1a8f8:	4620      	mov	r0, r4
   1a8fa:	f7ff ffb9 	bl	1a870 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1a8fe:	4630      	mov	r0, r6
   1a900:	f000 f955 	bl	1abae <bt_conn_unref>
   1a904:	e7f1      	b.n	1a8ea <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1a906:	210e      	movs	r1, #14
   1a908:	f242 0020 	movw	r0, #8224	; 0x2020
   1a90c:	f7f9 f9fe 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   1a910:	4605      	mov	r5, r0
   1a912:	2800      	cmp	r0, #0
   1a914:	d0f3      	beq.n	1a8fe <le_conn_param_req+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
   1a916:	210e      	movs	r1, #14
   1a918:	3008      	adds	r0, #8
   1a91a:	f001 fb24 	bl	1bf66 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1a91e:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
   1a920:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1a922:	2100      	movs	r1, #0
   1a924:	f7ff fd07 	bl	1a336 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a928:	f8bd 3000 	ldrh.w	r3, [sp]
   1a92c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1a92e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1a932:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1a934:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1a938:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1a93a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1a93e:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1a940:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a942:	4629      	mov	r1, r5
   1a944:	f242 0020 	movw	r0, #8224	; 0x2020
   1a948:	f7f9 fbd6 	bl	140f8 <bt_hci_cmd_send>
   1a94c:	e7d7      	b.n	1a8fe <le_conn_param_req+0x5e>

0001a94e <bt_addr_le_is_bonded>:
}
   1a94e:	2000      	movs	r0, #0
   1a950:	4770      	bx	lr

0001a952 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1a952:	6880      	ldr	r0, [r0, #8]
   1a954:	f7fa b9f8 	b.w	14d48 <enh_conn_complete>

0001a958 <le_legacy_conn_complete>:
{
   1a958:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1a95a:	6881      	ldr	r1, [r0, #8]
{
   1a95c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1a95e:	780b      	ldrb	r3, [r1, #0]
   1a960:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1a964:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1a968:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1a96c:	78cb      	ldrb	r3, [r1, #3]
   1a96e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1a972:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1a976:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1a97a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1a97e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1a982:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1a986:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1a98a:	7c4b      	ldrb	r3, [r1, #17]
   1a98c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a990:	a803      	add	r0, sp, #12
   1a992:	3104      	adds	r1, #4
   1a994:	f7ff fd85 	bl	1a4a2 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1a998:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1a99a:	4669      	mov	r1, sp
   1a99c:	2206      	movs	r2, #6
   1a99e:	f10d 0013 	add.w	r0, sp, #19
   1a9a2:	9400      	str	r4, [sp, #0]
   1a9a4:	f8ad 4004 	strh.w	r4, [sp, #4]
   1a9a8:	f7ff fc9a 	bl	1a2e0 <memcpy>
   1a9ac:	2206      	movs	r2, #6
   1a9ae:	4669      	mov	r1, sp
   1a9b0:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1a9b4:	9400      	str	r4, [sp, #0]
   1a9b6:	f8ad 4004 	strh.w	r4, [sp, #4]
   1a9ba:	f7ff fc91 	bl	1a2e0 <memcpy>
	enh_conn_complete(&enh);
   1a9be:	a802      	add	r0, sp, #8
   1a9c0:	f7fa f9c2 	bl	14d48 <enh_conn_complete>
}
   1a9c4:	b00a      	add	sp, #40	; 0x28
   1a9c6:	bd10      	pop	{r4, pc}

0001a9c8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a9c8:	f3bf 8f5b 	dmb	ish
   1a9cc:	6800      	ldr	r0, [r0, #0]
   1a9ce:	f3bf 8f5b 	dmb	ish
}
   1a9d2:	4770      	bx	lr

0001a9d4 <atomic_inc>:
{
   1a9d4:	4603      	mov	r3, r0
}
   1a9d6:	f3bf 8f5b 	dmb	ish
   1a9da:	e853 0f00 	ldrex	r0, [r3]
   1a9de:	1c42      	adds	r2, r0, #1
   1a9e0:	e843 2100 	strex	r1, r2, [r3]
   1a9e4:	2900      	cmp	r1, #0
   1a9e6:	d1f8      	bne.n	1a9da <atomic_inc+0x6>
   1a9e8:	f3bf 8f5b 	dmb	ish
   1a9ec:	4770      	bx	lr

0001a9ee <tx_notify>:
{
   1a9ee:	b570      	push	{r4, r5, r6, lr}
   1a9f0:	4604      	mov	r4, r0
	__asm__ volatile(
   1a9f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a9f6:	f3ef 8311 	mrs	r3, BASEPRI
   1a9fa:	f382 8811 	msr	BASEPRI, r2
   1a9fe:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1aa02:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1aa04:	b920      	cbnz	r0, 1aa10 <tx_notify+0x22>
	__asm__ volatile(
   1aa06:	f383 8811 	msr	BASEPRI, r3
   1aa0a:	f3bf 8f6f 	isb	sy
}
   1aa0e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aa10:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1aa12:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1aa14:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aa16:	4288      	cmp	r0, r1
	list->tail = node;
   1aa18:	bf08      	it	eq
   1aa1a:	6262      	streq	r2, [r4, #36]	; 0x24
   1aa1c:	f383 8811 	msr	BASEPRI, r3
   1aa20:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1aa24:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1aa28:	f7fa fa82 	bl	14f30 <tx_free>
		cb(conn, user_data);
   1aa2c:	4631      	mov	r1, r6
   1aa2e:	4620      	mov	r0, r4
   1aa30:	47a8      	blx	r5
	while (1) {
   1aa32:	e7de      	b.n	1a9f2 <tx_notify+0x4>

0001aa34 <tx_complete_work>:
	tx_notify(conn);
   1aa34:	3828      	subs	r0, #40	; 0x28
   1aa36:	f7ff bfda 	b.w	1a9ee <tx_notify>

0001aa3a <bt_conn_new>:
{
   1aa3a:	b570      	push	{r4, r5, r6, lr}
   1aa3c:	460a      	mov	r2, r1
   1aa3e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1aa40:	2600      	movs	r6, #0
   1aa42:	4296      	cmp	r6, r2
   1aa44:	d102      	bne.n	1aa4c <bt_conn_new+0x12>
		return NULL;
   1aa46:	2400      	movs	r4, #0
}
   1aa48:	4620      	mov	r0, r4
   1aa4a:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
   1aa4c:	f104 0554 	add.w	r5, r4, #84	; 0x54
   1aa50:	4628      	mov	r0, r5
   1aa52:	f7ff ffb9 	bl	1a9c8 <atomic_get>
   1aa56:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1aa5a:	4601      	mov	r1, r0
   1aa5c:	b110      	cbz	r0, 1aa64 <bt_conn_new+0x2a>
	for (i = 0; i < size; i++) {
   1aa5e:	3601      	adds	r6, #1
   1aa60:	461c      	mov	r4, r3
   1aa62:	e7ee      	b.n	1aa42 <bt_conn_new+0x8>
	if (!conn) {
   1aa64:	2c00      	cmp	r4, #0
   1aa66:	d0ef      	beq.n	1aa48 <bt_conn_new+0xe>
	(void)memset(conn, 0, sizeof(*conn));
   1aa68:	22b8      	movs	r2, #184	; 0xb8
   1aa6a:	4620      	mov	r0, r4
   1aa6c:	f7ff fc63 	bl	1a336 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1aa70:	f3bf 8f5b 	dmb	ish
   1aa74:	2301      	movs	r3, #1
   1aa76:	e855 2f00 	ldrex	r2, [r5]
   1aa7a:	e845 3100 	strex	r1, r3, [r5]
   1aa7e:	2900      	cmp	r1, #0
   1aa80:	d1f9      	bne.n	1aa76 <bt_conn_new+0x3c>
   1aa82:	f3bf 8f5b 	dmb	ish
   1aa86:	e7df      	b.n	1aa48 <bt_conn_new+0xe>

0001aa88 <bt_conn_get_security>:
}
   1aa88:	2001      	movs	r0, #1
   1aa8a:	4770      	bx	lr

0001aa8c <bt_conn_reset_rx_state>:
{
   1aa8c:	b510      	push	{r4, lr}
   1aa8e:	4604      	mov	r4, r0
	if (!conn->rx) {
   1aa90:	6900      	ldr	r0, [r0, #16]
   1aa92:	b118      	cbz	r0, 1aa9c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1aa94:	f7fc f96a 	bl	16d6c <net_buf_unref>
	conn->rx = NULL;
   1aa98:	2300      	movs	r3, #0
   1aa9a:	6123      	str	r3, [r4, #16]
}
   1aa9c:	bd10      	pop	{r4, pc}

0001aa9e <bt_conn_recv>:
{
   1aa9e:	b570      	push	{r4, r5, r6, lr}
   1aaa0:	4616      	mov	r6, r2
   1aaa2:	4604      	mov	r4, r0
   1aaa4:	460d      	mov	r5, r1
	tx_notify(conn);
   1aaa6:	f7ff ffa2 	bl	1a9ee <tx_notify>
	switch (flags) {
   1aaaa:	2e01      	cmp	r6, #1
   1aaac:	d01a      	beq.n	1aae4 <bt_conn_recv+0x46>
   1aaae:	2e02      	cmp	r6, #2
   1aab0:	d11a      	bne.n	1aae8 <bt_conn_recv+0x4a>
		if (conn->rx) {
   1aab2:	6923      	ldr	r3, [r4, #16]
   1aab4:	b113      	cbz	r3, 1aabc <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1aab6:	4620      	mov	r0, r4
   1aab8:	f7ff ffe8 	bl	1aa8c <bt_conn_reset_rx_state>
		conn->rx = buf;
   1aabc:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1aabe:	6921      	ldr	r1, [r4, #16]
   1aac0:	898a      	ldrh	r2, [r1, #12]
   1aac2:	2a01      	cmp	r2, #1
   1aac4:	d931      	bls.n	1ab2a <bt_conn_recv+0x8c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1aac6:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1aac8:	7845      	ldrb	r5, [r0, #1]
   1aaca:	7803      	ldrb	r3, [r0, #0]
   1aacc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1aad0:	3304      	adds	r3, #4
   1aad2:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1aad4:	429a      	cmp	r2, r3
   1aad6:	d328      	bcc.n	1ab2a <bt_conn_recv+0x8c>
	if (conn->rx->len > acl_total_len) {
   1aad8:	d920      	bls.n	1ab1c <bt_conn_recv+0x7e>
		bt_conn_reset_rx_state(conn);
   1aada:	4620      	mov	r0, r4
}
   1aadc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1aae0:	f7ff bfd4 	b.w	1aa8c <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1aae4:	6920      	ldr	r0, [r4, #16]
   1aae6:	b918      	cbnz	r0, 1aaf0 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1aae8:	4620      	mov	r0, r4
   1aaea:	f7ff ffcf 	bl	1aa8c <bt_conn_reset_rx_state>
   1aaee:	e001      	b.n	1aaf4 <bt_conn_recv+0x56>
		if (!buf->len) {
   1aaf0:	89ae      	ldrh	r6, [r5, #12]
   1aaf2:	b926      	cbnz	r6, 1aafe <bt_conn_recv+0x60>
		net_buf_unref(buf);
   1aaf4:	4628      	mov	r0, r5
}
   1aaf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1aafa:	f7fc b937 	b.w	16d6c <net_buf_unref>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1aafe:	3008      	adds	r0, #8
   1ab00:	f001 fa6c 	bl	1bfdc <net_buf_simple_tailroom>
   1ab04:	4286      	cmp	r6, r0
   1ab06:	d8ef      	bhi.n	1aae8 <bt_conn_recv+0x4a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1ab08:	6920      	ldr	r0, [r4, #16]
   1ab0a:	89aa      	ldrh	r2, [r5, #12]
   1ab0c:	68a9      	ldr	r1, [r5, #8]
   1ab0e:	3008      	adds	r0, #8
   1ab10:	f001 fa2f 	bl	1bf72 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1ab14:	4628      	mov	r0, r5
   1ab16:	f7fc f929 	bl	16d6c <net_buf_unref>
		break;
   1ab1a:	e7d0      	b.n	1aabe <bt_conn_recv+0x20>
	conn->rx = NULL;
   1ab1c:	2300      	movs	r3, #0
   1ab1e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1ab20:	4620      	mov	r0, r4
}
   1ab22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1ab26:	f000 b961 	b.w	1adec <bt_l2cap_recv>
}
   1ab2a:	bd70      	pop	{r4, r5, r6, pc}

0001ab2c <conn_lookup_handle>:
{
   1ab2c:	b538      	push	{r3, r4, r5, lr}
   1ab2e:	f100 0354 	add.w	r3, r0, #84	; 0x54
	for (i = 0; i < size; i++) {
   1ab32:	2400      	movs	r4, #0
   1ab34:	428c      	cmp	r4, r1
   1ab36:	d101      	bne.n	1ab3c <conn_lookup_handle+0x10>
	return NULL;
   1ab38:	2500      	movs	r5, #0
   1ab3a:	e013      	b.n	1ab64 <conn_lookup_handle+0x38>
		if (!atomic_get(&conns[i].ref)) {
   1ab3c:	4618      	mov	r0, r3
   1ab3e:	f1a3 0554 	sub.w	r5, r3, #84	; 0x54
   1ab42:	f7ff ff41 	bl	1a9c8 <atomic_get>
   1ab46:	b178      	cbz	r0, 1ab68 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(&conns[i])) {
   1ab48:	f813 0c4a 	ldrb.w	r0, [r3, #-74]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1ab4c:	2801      	cmp	r0, #1
   1ab4e:	d002      	beq.n	1ab56 <conn_lookup_handle+0x2a>
   1ab50:	3807      	subs	r0, #7
   1ab52:	2801      	cmp	r0, #1
   1ab54:	d808      	bhi.n	1ab68 <conn_lookup_handle+0x3c>
		if (conns[i].handle == handle) {
   1ab56:	f833 0c54 	ldrh.w	r0, [r3, #-84]
   1ab5a:	4290      	cmp	r0, r2
   1ab5c:	d104      	bne.n	1ab68 <conn_lookup_handle+0x3c>
	atomic_val_t old = atomic_inc(&conn->ref);
   1ab5e:	4618      	mov	r0, r3
   1ab60:	f7ff ff38 	bl	1a9d4 <atomic_inc>
}
   1ab64:	4628      	mov	r0, r5
   1ab66:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1ab68:	3401      	adds	r4, #1
   1ab6a:	33b8      	adds	r3, #184	; 0xb8
   1ab6c:	e7e2      	b.n	1ab34 <conn_lookup_handle+0x8>

0001ab6e <bt_conn_is_peer_addr_le>:
{
   1ab6e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1ab70:	7a03      	ldrb	r3, [r0, #8]
   1ab72:	428b      	cmp	r3, r1
{
   1ab74:	4604      	mov	r4, r0
   1ab76:	4615      	mov	r5, r2
	if (id != conn->id) {
   1ab78:	d115      	bne.n	1aba6 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1ab7a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1ab7e:	2207      	movs	r2, #7
   1ab80:	4628      	mov	r0, r5
   1ab82:	f7ff fb9d 	bl	1a2c0 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1ab86:	b180      	cbz	r0, 1abaa <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1ab88:	78e3      	ldrb	r3, [r4, #3]
   1ab8a:	2207      	movs	r2, #7
   1ab8c:	b943      	cbnz	r3, 1aba0 <bt_conn_is_peer_addr_le+0x32>
   1ab8e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1ab92:	4628      	mov	r0, r5
   1ab94:	f7ff fb94 	bl	1a2c0 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1ab98:	fab0 f080 	clz	r0, r0
   1ab9c:	0940      	lsrs	r0, r0, #5
}
   1ab9e:	bd38      	pop	{r3, r4, r5, pc}
   1aba0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1aba4:	e7f5      	b.n	1ab92 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1aba6:	2000      	movs	r0, #0
   1aba8:	e7f9      	b.n	1ab9e <bt_conn_is_peer_addr_le+0x30>
		return true;
   1abaa:	2001      	movs	r0, #1
   1abac:	e7f7      	b.n	1ab9e <bt_conn_is_peer_addr_le+0x30>

0001abae <bt_conn_unref>:
{
   1abae:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1abb0:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1abb2:	f3bf 8f5b 	dmb	ish
   1abb6:	e850 3f00 	ldrex	r3, [r0]
   1abba:	3b01      	subs	r3, #1
   1abbc:	e840 3200 	strex	r2, r3, [r0]
   1abc0:	2a00      	cmp	r2, #0
   1abc2:	d1f8      	bne.n	1abb6 <bt_conn_unref+0x8>
   1abc4:	f3bf 8f5b 	dmb	ish
	    atomic_get(&conn->ref) == 0) {
   1abc8:	f7ff fefe 	bl	1a9c8 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1abcc:	b918      	cbnz	r0, 1abd6 <bt_conn_unref+0x28>
}
   1abce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   1abd2:	f7fa b883 	b.w	14cdc <bt_le_adv_resume>
}
   1abd6:	bd08      	pop	{r3, pc}

0001abd8 <bt_conn_exists_le>:
{
   1abd8:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1abda:	f7fa fb8b 	bl	152f4 <bt_conn_lookup_addr_le>
	if (conn) {
   1abde:	b110      	cbz	r0, 1abe6 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1abe0:	f7ff ffe5 	bl	1abae <bt_conn_unref>
		return true;
   1abe4:	2001      	movs	r0, #1
}
   1abe6:	bd08      	pop	{r3, pc}

0001abe8 <bt_conn_le_conn_update>:
{
   1abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abea:	4607      	mov	r7, r0
   1abec:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1abee:	f242 0013 	movw	r0, #8211	; 0x2013
   1abf2:	210e      	movs	r1, #14
   1abf4:	f7f9 f88a 	bl	13d0c <bt_hci_cmd_create>
	if (!buf) {
   1abf8:	4606      	mov	r6, r0
   1abfa:	b1d0      	cbz	r0, 1ac32 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1abfc:	210e      	movs	r1, #14
   1abfe:	3008      	adds	r0, #8
   1ac00:	f001 f9b1 	bl	1bf66 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ac04:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1ac06:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ac08:	2100      	movs	r1, #0
   1ac0a:	f7ff fb94 	bl	1a336 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ac0e:	883b      	ldrh	r3, [r7, #0]
   1ac10:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ac12:	882b      	ldrh	r3, [r5, #0]
   1ac14:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ac16:	886b      	ldrh	r3, [r5, #2]
   1ac18:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ac1a:	88ab      	ldrh	r3, [r5, #4]
   1ac1c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ac1e:	88eb      	ldrh	r3, [r5, #6]
   1ac20:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ac22:	4631      	mov	r1, r6
   1ac24:	2200      	movs	r2, #0
}
   1ac26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ac2a:	f242 0013 	movw	r0, #8211	; 0x2013
   1ac2e:	f7f9 b8a5 	b.w	13d7c <bt_hci_cmd_send_sync>
}
   1ac32:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ac36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ac38 <l2cap_connected>:
}
   1ac38:	4770      	bx	lr

0001ac3a <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1ac3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac3c:	4607      	mov	r7, r0
   1ac3e:	460e      	mov	r6, r1
   1ac40:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1ac42:	2300      	movs	r3, #0
   1ac44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ac48:	2104      	movs	r1, #4
   1ac4a:	2000      	movs	r0, #0
   1ac4c:	f7fa fcbe 	bl	155cc <bt_conn_create_pdu_timeout>
	if (!buf) {
   1ac50:	4604      	mov	r4, r0
   1ac52:	b130      	cbz	r0, 1ac62 <l2cap_create_le_sig_pdu.isra.0+0x28>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1ac54:	2104      	movs	r1, #4
   1ac56:	3008      	adds	r0, #8
   1ac58:	f001 f985 	bl	1bf66 <net_buf_simple_add>
	hdr->code = code;
   1ac5c:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1ac5e:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1ac60:	8045      	strh	r5, [r0, #2]
}
   1ac62:	4620      	mov	r0, r4
   1ac64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ac66 <l2cap_disconnected>:
   1ac66:	4770      	bx	lr

0001ac68 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ac68:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1ac6a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ac6c:	b17b      	cbz	r3, 1ac8e <bt_l2cap_chan_remove+0x26>
   1ac6e:	3b08      	subs	r3, #8
   1ac70:	2200      	movs	r2, #0
   1ac72:	b163      	cbz	r3, 1ac8e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1ac74:	428b      	cmp	r3, r1
   1ac76:	f103 0408 	add.w	r4, r3, #8
   1ac7a:	d10f      	bne.n	1ac9c <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1ac7c:	688b      	ldr	r3, [r1, #8]
   1ac7e:	b93a      	cbnz	r2, 1ac90 <bt_l2cap_chan_remove+0x28>
   1ac80:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   1ac82:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   1ac84:	4294      	cmp	r4, r2
   1ac86:	d100      	bne.n	1ac8a <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1ac88:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   1ac8a:	2300      	movs	r3, #0
   1ac8c:	608b      	str	r3, [r1, #8]
}
   1ac8e:	bd10      	pop	{r4, pc}
   1ac90:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ac92:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1ac94:	429c      	cmp	r4, r3
	list->tail = node;
   1ac96:	bf08      	it	eq
   1ac98:	6502      	streq	r2, [r0, #80]	; 0x50
}
   1ac9a:	e7f6      	b.n	1ac8a <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ac9c:	2c00      	cmp	r4, #0
   1ac9e:	d0f6      	beq.n	1ac8e <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1aca0:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1aca2:	2b00      	cmp	r3, #0
   1aca4:	d0f3      	beq.n	1ac8e <bt_l2cap_chan_remove+0x26>
   1aca6:	3b08      	subs	r3, #8
   1aca8:	4622      	mov	r2, r4
   1acaa:	e7e2      	b.n	1ac72 <bt_l2cap_chan_remove+0xa>

0001acac <bt_l2cap_chan_del>:
{
   1acac:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1acae:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1acb2:	4604      	mov	r4, r0
	if (!chan->conn) {
   1acb4:	b123      	cbz	r3, 1acc0 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1acb6:	686b      	ldr	r3, [r5, #4]
   1acb8:	b103      	cbz	r3, 1acbc <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1acba:	4798      	blx	r3
	chan->conn = NULL;
   1acbc:	2300      	movs	r3, #0
   1acbe:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1acc0:	68e3      	ldr	r3, [r4, #12]
   1acc2:	b10b      	cbz	r3, 1acc8 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1acc4:	4620      	mov	r0, r4
   1acc6:	4798      	blx	r3
	if (ops->released) {
   1acc8:	69eb      	ldr	r3, [r5, #28]
   1acca:	b11b      	cbz	r3, 1acd4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1accc:	4620      	mov	r0, r4
}
   1acce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1acd2:	4718      	bx	r3
}
   1acd4:	bd70      	pop	{r4, r5, r6, pc}

0001acd6 <l2cap_rtx_timeout>:
{
   1acd6:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1acd8:	f1a0 0110 	sub.w	r1, r0, #16
   1acdc:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1ace0:	f7ff ffc2 	bl	1ac68 <bt_l2cap_chan_remove>
}
   1ace4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1ace8:	4608      	mov	r0, r1
   1acea:	f7ff bfdf 	b.w	1acac <bt_l2cap_chan_del>

0001acee <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1acee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1acf0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1acf2:	b18b      	cbz	r3, 1ad18 <bt_l2cap_disconnected+0x2a>
   1acf4:	f1b3 0008 	subs.w	r0, r3, #8
   1acf8:	d00e      	beq.n	1ad18 <bt_l2cap_disconnected+0x2a>
   1acfa:	681c      	ldr	r4, [r3, #0]
   1acfc:	b104      	cbz	r4, 1ad00 <bt_l2cap_disconnected+0x12>
   1acfe:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1ad00:	f7ff ffd4 	bl	1acac <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ad04:	b144      	cbz	r4, 1ad18 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ad06:	f114 0308 	adds.w	r3, r4, #8
   1ad0a:	d002      	beq.n	1ad12 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ad0c:	68a3      	ldr	r3, [r4, #8]
   1ad0e:	b103      	cbz	r3, 1ad12 <bt_l2cap_disconnected+0x24>
   1ad10:	3b08      	subs	r3, #8
{
   1ad12:	4620      	mov	r0, r4
   1ad14:	461c      	mov	r4, r3
   1ad16:	e7f3      	b.n	1ad00 <bt_l2cap_disconnected+0x12>
}
   1ad18:	bd10      	pop	{r4, pc}

0001ad1a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1ad1a:	3104      	adds	r1, #4
   1ad1c:	f7fa bc56 	b.w	155cc <bt_conn_create_pdu_timeout>

0001ad20 <bt_l2cap_send_cb>:
{
   1ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad24:	4614      	mov	r4, r2
   1ad26:	4605      	mov	r5, r0
   1ad28:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1ad2a:	f102 0008 	add.w	r0, r2, #8
   1ad2e:	2104      	movs	r1, #4
{
   1ad30:	461e      	mov	r6, r3
   1ad32:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   1ad36:	f001 f92d 	bl	1bf94 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ad3a:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1ad3c:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ad3e:	3a04      	subs	r2, #4
   1ad40:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ad42:	4643      	mov	r3, r8
   1ad44:	4632      	mov	r2, r6
   1ad46:	4621      	mov	r1, r4
   1ad48:	4628      	mov	r0, r5
}
   1ad4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ad4e:	f7fa ba1b 	b.w	15188 <bt_conn_send_cb>

0001ad52 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1ad52:	898b      	ldrh	r3, [r1, #12]
   1ad54:	2b03      	cmp	r3, #3
{
   1ad56:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ad58:	4605      	mov	r5, r0
   1ad5a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1ad5c:	d923      	bls.n	1ada6 <l2cap_recv+0x54>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1ad5e:	2104      	movs	r1, #4
   1ad60:	f104 0008 	add.w	r0, r4, #8
   1ad64:	f001 f926 	bl	1bfb4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1ad68:	89a3      	ldrh	r3, [r4, #12]
   1ad6a:	8842      	ldrh	r2, [r0, #2]
   1ad6c:	429a      	cmp	r2, r3
   1ad6e:	d11a      	bne.n	1ada6 <l2cap_recv+0x54>
	if (!hdr->ident) {
   1ad70:	7841      	ldrb	r1, [r0, #1]
   1ad72:	b1c1      	cbz	r1, 1ada6 <l2cap_recv+0x54>
	switch (hdr->code) {
   1ad74:	7803      	ldrb	r3, [r0, #0]
   1ad76:	2b01      	cmp	r3, #1
   1ad78:	d015      	beq.n	1ada6 <l2cap_recv+0x54>
   1ad7a:	2b13      	cmp	r3, #19
   1ad7c:	d013      	beq.n	1ada6 <l2cap_recv+0x54>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ad7e:	2202      	movs	r2, #2
   1ad80:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1ad82:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ad84:	f7ff ff59 	bl	1ac3a <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1ad88:	4604      	mov	r4, r0
   1ad8a:	b160      	cbz	r0, 1ada6 <l2cap_recv+0x54>
	rej = net_buf_add(buf, sizeof(*rej));
   1ad8c:	2102      	movs	r1, #2
   1ad8e:	3008      	adds	r0, #8
   1ad90:	f001 f8e9 	bl	1bf66 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1ad94:	2300      	movs	r3, #0
   1ad96:	7003      	strb	r3, [r0, #0]
   1ad98:	7043      	strb	r3, [r0, #1]
   1ad9a:	4622      	mov	r2, r4
   1ad9c:	9300      	str	r3, [sp, #0]
   1ad9e:	2105      	movs	r1, #5
   1ada0:	4628      	mov	r0, r5
   1ada2:	f7ff ffbd 	bl	1ad20 <bt_l2cap_send_cb>
}
   1ada6:	2000      	movs	r0, #0
   1ada8:	b003      	add	sp, #12
   1adaa:	bd30      	pop	{r4, r5, pc}

0001adac <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1adac:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1adae:	b160      	cbz	r0, 1adca <bt_l2cap_le_lookup_tx_cid+0x1e>
   1adb0:	3808      	subs	r0, #8
   1adb2:	b900      	cbnz	r0, 1adb6 <bt_l2cap_le_lookup_tx_cid+0xa>
   1adb4:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1adb6:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1adba:	428b      	cmp	r3, r1
   1adbc:	d005      	beq.n	1adca <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1adbe:	f110 0308 	adds.w	r3, r0, #8
   1adc2:	d001      	beq.n	1adc8 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1adc4:	6880      	ldr	r0, [r0, #8]
   1adc6:	e7f2      	b.n	1adae <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1adc8:	4618      	mov	r0, r3
}
   1adca:	4770      	bx	lr

0001adcc <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1adcc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1adce:	b160      	cbz	r0, 1adea <bt_l2cap_le_lookup_rx_cid+0x1e>
   1add0:	3808      	subs	r0, #8
   1add2:	b900      	cbnz	r0, 1add6 <bt_l2cap_le_lookup_rx_cid+0xa>
   1add4:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1add6:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1adda:	428b      	cmp	r3, r1
   1addc:	d005      	beq.n	1adea <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1adde:	f110 0308 	adds.w	r3, r0, #8
   1ade2:	d001      	beq.n	1ade8 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ade4:	6880      	ldr	r0, [r0, #8]
   1ade6:	e7f2      	b.n	1adce <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1ade8:	4618      	mov	r0, r3
}
   1adea:	4770      	bx	lr

0001adec <bt_l2cap_recv>:
{
   1adec:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1adee:	898b      	ldrh	r3, [r1, #12]
   1adf0:	2b03      	cmp	r3, #3
{
   1adf2:	4605      	mov	r5, r0
   1adf4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1adf6:	d804      	bhi.n	1ae02 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1adf8:	4620      	mov	r0, r4
}
   1adfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1adfe:	f7fb bfb5 	b.w	16d6c <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1ae02:	2104      	movs	r1, #4
   1ae04:	f104 0008 	add.w	r0, r4, #8
   1ae08:	f001 f8d4 	bl	1bfb4 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1ae0c:	8841      	ldrh	r1, [r0, #2]
   1ae0e:	4628      	mov	r0, r5
   1ae10:	f7ff ffdc 	bl	1adcc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ae14:	2800      	cmp	r0, #0
   1ae16:	d0ef      	beq.n	1adf8 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1ae18:	6843      	ldr	r3, [r0, #4]
   1ae1a:	4621      	mov	r1, r4
   1ae1c:	691b      	ldr	r3, [r3, #16]
   1ae1e:	4798      	blx	r3
   1ae20:	e7ea      	b.n	1adf8 <bt_l2cap_recv+0xc>

0001ae22 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1ae22:	4770      	bx	lr

0001ae24 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ae24:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1ae26:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ae28:	b128      	cbz	r0, 1ae36 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ae2a:	6859      	ldr	r1, [r3, #4]
   1ae2c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ae2e:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ae30:	4288      	cmp	r0, r1
	list->tail = node;
   1ae32:	bf08      	it	eq
   1ae34:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1ae36:	4770      	bx	lr

0001ae38 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ae38:	4603      	mov	r3, r0
   1ae3a:	6800      	ldr	r0, [r0, #0]
   1ae3c:	2200      	movs	r2, #0
   1ae3e:	b900      	cbnz	r0, 1ae42 <sys_slist_find_and_remove+0xa>
   1ae40:	4770      	bx	lr
   1ae42:	4288      	cmp	r0, r1
   1ae44:	d110      	bne.n	1ae68 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1ae46:	6808      	ldr	r0, [r1, #0]
   1ae48:	b942      	cbnz	r2, 1ae5c <sys_slist_find_and_remove+0x24>
   1ae4a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1ae4c:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ae4e:	4291      	cmp	r1, r2
   1ae50:	d100      	bne.n	1ae54 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1ae52:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1ae54:	2300      	movs	r3, #0
   1ae56:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ae58:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1ae5a:	4770      	bx	lr
	parent->next = child;
   1ae5c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ae5e:	6858      	ldr	r0, [r3, #4]
   1ae60:	4281      	cmp	r1, r0
	list->tail = node;
   1ae62:	bf08      	it	eq
   1ae64:	605a      	streq	r2, [r3, #4]
}
   1ae66:	e7f5      	b.n	1ae54 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ae68:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ae6a:	6800      	ldr	r0, [r0, #0]
   1ae6c:	e7e7      	b.n	1ae3e <sys_slist_find_and_remove+0x6>

0001ae6e <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1ae6e:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ae70:	2000      	movs	r0, #0

	while (buf) {
   1ae72:	b903      	cbnz	r3, 1ae76 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1ae74:	4770      	bx	lr
		bytes += buf->len;
   1ae76:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1ae78:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1ae7a:	4410      	add	r0, r2
		buf = buf->frags;
   1ae7c:	e7f9      	b.n	1ae72 <net_buf_frags_len+0x4>

0001ae7e <att_sent>:
	if (chan->ops->sent) {
   1ae7e:	684b      	ldr	r3, [r1, #4]
   1ae80:	695b      	ldr	r3, [r3, #20]
{
   1ae82:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1ae84:	b103      	cbz	r3, 1ae88 <att_sent+0xa>
		chan->ops->sent(chan);
   1ae86:	4718      	bx	r3
}
   1ae88:	4770      	bx	lr

0001ae8a <attr_read_type_cb>:
{
   1ae8a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1ae8c:	68d4      	ldr	r4, [r2, #12]
   1ae8e:	7823      	ldrb	r3, [r4, #0]
   1ae90:	3102      	adds	r1, #2
   1ae92:	b913      	cbnz	r3, 1ae9a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1ae94:	7021      	strb	r1, [r4, #0]
	return true;
   1ae96:	2001      	movs	r0, #1
   1ae98:	e006      	b.n	1aea8 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ae9a:	428b      	cmp	r3, r1
   1ae9c:	d0fb      	beq.n	1ae96 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1ae9e:	8983      	ldrh	r3, [r0, #12]
   1aea0:	3b02      	subs	r3, #2
   1aea2:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1aea4:	2000      	movs	r0, #0
   1aea6:	6110      	str	r0, [r2, #16]
}
   1aea8:	bd10      	pop	{r4, pc}

0001aeaa <att_prepare_write_req>:
}
   1aeaa:	2006      	movs	r0, #6
   1aeac:	4770      	bx	lr

0001aeae <att_op_get_type>:
	switch (op) {
   1aeae:	281e      	cmp	r0, #30
   1aeb0:	d816      	bhi.n	1aee0 <att_op_get_type+0x32>
   1aeb2:	b308      	cbz	r0, 1aef8 <att_op_get_type+0x4a>
   1aeb4:	1e43      	subs	r3, r0, #1
   1aeb6:	2b1d      	cmp	r3, #29
   1aeb8:	d81e      	bhi.n	1aef8 <att_op_get_type+0x4a>
   1aeba:	e8df f003 	tbb	[pc, r3]
   1aebe:	2317      	.short	0x2317
   1aec0:	23172317 	.word	0x23172317
   1aec4:	23172317 	.word	0x23172317
   1aec8:	23172317 	.word	0x23172317
   1aecc:	23172317 	.word	0x23172317
   1aed0:	231d1d17 	.word	0x231d1d17
   1aed4:	1d172317 	.word	0x1d172317
   1aed8:	0f1b1d19 	.word	0x0f1b1d19
   1aedc:	2004      	movs	r0, #4
   1aede:	4770      	bx	lr
   1aee0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1aee4:	2b52      	cmp	r3, #82	; 0x52
   1aee6:	d107      	bne.n	1aef8 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1aee8:	2000      	movs	r0, #0
}
   1aeea:	4770      	bx	lr
		return ATT_RESPONSE;
   1aeec:	2002      	movs	r0, #2
   1aeee:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1aef0:	2003      	movs	r0, #3
   1aef2:	4770      	bx	lr
		return ATT_INDICATION;
   1aef4:	2005      	movs	r0, #5
   1aef6:	4770      	bx	lr
		return ATT_COMMAND;
   1aef8:	f010 0f40 	tst.w	r0, #64	; 0x40
   1aefc:	bf0c      	ite	eq
   1aefe:	2006      	moveq	r0, #6
   1af00:	2000      	movne	r0, #0
   1af02:	4770      	bx	lr
		return ATT_REQUEST;
   1af04:	2001      	movs	r0, #1
   1af06:	4770      	bx	lr

0001af08 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1af08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1af0a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1af0e:	2300      	movs	r3, #0
   1af10:	9300      	str	r3, [sp, #0]
   1af12:	461a      	mov	r2, r3
   1af14:	f7fb fc6a 	bl	167ec <bt_gatt_foreach_attr_type>
				  user_data);
}
   1af18:	b005      	add	sp, #20
   1af1a:	f85d fb04 	ldr.w	pc, [sp], #4

0001af1e <att_chan_read>:
{
   1af1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af22:	4680      	mov	r8, r0
   1af24:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1af26:	4610      	mov	r0, r2
{
   1af28:	4699      	mov	r9, r3
   1af2a:	468b      	mov	fp, r1
   1af2c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1af2e:	f7ff ff9e 	bl	1ae6e <net_buf_frags_len>
   1af32:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   1af36:	4283      	cmp	r3, r0
   1af38:	d97a      	bls.n	1b030 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1af3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1af3e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1af40:	4630      	mov	r0, r6
   1af42:	f000 ffee 	bl	1bf22 <net_buf_frag_last>
	size_t len, total = 0;
   1af46:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1af4a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1af4c:	4630      	mov	r0, r6
   1af4e:	f7ff ff8e 	bl	1ae6e <net_buf_frags_len>
   1af52:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1af56:	f105 0708 	add.w	r7, r5, #8
   1af5a:	1a24      	subs	r4, r4, r0
   1af5c:	4638      	mov	r0, r7
   1af5e:	f001 f83d 	bl	1bfdc <net_buf_simple_tailroom>
   1af62:	4284      	cmp	r4, r0
   1af64:	d211      	bcs.n	1af8a <att_chan_read+0x6c>
   1af66:	4630      	mov	r0, r6
   1af68:	f7ff ff81 	bl	1ae6e <net_buf_frags_len>
   1af6c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1af70:	1a24      	subs	r4, r4, r0
		if (!len) {
   1af72:	bb34      	cbnz	r4, 1afc2 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1af74:	79b0      	ldrb	r0, [r6, #6]
   1af76:	f7fb fe3d 	bl	16bf4 <net_buf_pool_get>
   1af7a:	2200      	movs	r2, #0
   1af7c:	2300      	movs	r3, #0
   1af7e:	f000 ff9c 	bl	1beba <net_buf_alloc_fixed>
			if (!frag) {
   1af82:	4605      	mov	r5, r0
   1af84:	b930      	cbnz	r0, 1af94 <att_chan_read+0x76>
	return total;
   1af86:	4657      	mov	r7, sl
   1af88:	e02c      	b.n	1afe4 <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1af8a:	4638      	mov	r0, r7
   1af8c:	f001 f826 	bl	1bfdc <net_buf_simple_tailroom>
   1af90:	4604      	mov	r4, r0
   1af92:	e7ee      	b.n	1af72 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1af94:	4601      	mov	r1, r0
   1af96:	4630      	mov	r0, r6
   1af98:	f000 ffd4 	bl	1bf44 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1af9c:	4630      	mov	r0, r6
   1af9e:	f7ff ff66 	bl	1ae6e <net_buf_frags_len>
   1afa2:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1afa6:	f105 0708 	add.w	r7, r5, #8
   1afaa:	1a24      	subs	r4, r4, r0
   1afac:	4638      	mov	r0, r7
   1afae:	f001 f815 	bl	1bfdc <net_buf_simple_tailroom>
   1afb2:	4284      	cmp	r4, r0
   1afb4:	d21a      	bcs.n	1afec <att_chan_read+0xce>
   1afb6:	4630      	mov	r0, r6
   1afb8:	f7ff ff59 	bl	1ae6e <net_buf_frags_len>
   1afbc:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1afc0:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1afc2:	68a9      	ldr	r1, [r5, #8]
   1afc4:	89aa      	ldrh	r2, [r5, #12]
   1afc6:	f8db 7004 	ldr.w	r7, [fp, #4]
   1afca:	9803      	ldr	r0, [sp, #12]
   1afcc:	f8cd 9000 	str.w	r9, [sp]
   1afd0:	440a      	add	r2, r1
   1afd2:	b2a3      	uxth	r3, r4
   1afd4:	4659      	mov	r1, fp
   1afd6:	47b8      	blx	r7
		if (read < 0) {
   1afd8:	1e07      	subs	r7, r0, #0
   1afda:	da0c      	bge.n	1aff6 <att_chan_read+0xd8>
				return total;
   1afdc:	f1ba 0f00 	cmp.w	sl, #0
   1afe0:	bf18      	it	ne
   1afe2:	4657      	movne	r7, sl
}
   1afe4:	4638      	mov	r0, r7
   1afe6:	b005      	add	sp, #20
   1afe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1afec:	4638      	mov	r0, r7
   1afee:	f000 fff5 	bl	1bfdc <net_buf_simple_tailroom>
   1aff2:	4604      	mov	r4, r0
   1aff4:	e7e5      	b.n	1afc2 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1aff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1aff8:	b993      	cbnz	r3, 1b020 <att_chan_read+0x102>
		net_buf_add(frag, read);
   1affa:	4639      	mov	r1, r7
   1affc:	f105 0008 	add.w	r0, r5, #8
   1b000:	f000 ffb1 	bl	1bf66 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b004:	4630      	mov	r0, r6
   1b006:	f7ff ff32 	bl	1ae6e <net_buf_frags_len>
   1b00a:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1b00e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b010:	4283      	cmp	r3, r0
		total += read;
   1b012:	44ba      	add	sl, r7
		offset += read;
   1b014:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b018:	d9b5      	bls.n	1af86 <att_chan_read+0x68>
   1b01a:	42a7      	cmp	r7, r4
   1b01c:	d096      	beq.n	1af4c <att_chan_read+0x2e>
   1b01e:	e7b2      	b.n	1af86 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1b020:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b024:	4639      	mov	r1, r7
   1b026:	4628      	mov	r0, r5
   1b028:	4798      	blx	r3
   1b02a:	2800      	cmp	r0, #0
   1b02c:	d1e5      	bne.n	1affa <att_chan_read+0xdc>
   1b02e:	e7aa      	b.n	1af86 <att_chan_read+0x68>
		return 0;
   1b030:	2700      	movs	r7, #0
   1b032:	e7d7      	b.n	1afe4 <att_chan_read+0xc6>

0001b034 <find_type_cb>:
{
   1b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1b038:	f8d2 9000 	ldr.w	r9, [r2]
{
   1b03c:	b091      	sub	sp, #68	; 0x44
   1b03e:	4607      	mov	r7, r0
   1b040:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b042:	2400      	movs	r4, #0
   1b044:	f642 0301 	movw	r3, #10241	; 0x2801
   1b048:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b04a:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b04e:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1b052:	a90b      	add	r1, sp, #44	; 0x2c
{
   1b054:	4615      	mov	r5, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b056:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1b05a:	f7ff f994 	bl	1a386 <bt_uuid_cmp>
   1b05e:	2800      	cmp	r0, #0
   1b060:	d079      	beq.n	1b156 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1b062:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b066:	6838      	ldr	r0, [r7, #0]
   1b068:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1b06c:	a90b      	add	r1, sp, #44	; 0x2c
   1b06e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1b072:	f7ff f988 	bl	1a386 <bt_uuid_cmp>
   1b076:	4604      	mov	r4, r0
   1b078:	b148      	cbz	r0, 1b08e <find_type_cb+0x5a>
		if (data->group &&
   1b07a:	68ab      	ldr	r3, [r5, #8]
   1b07c:	b11b      	cbz	r3, 1b086 <find_type_cb+0x52>
   1b07e:	885a      	ldrh	r2, [r3, #2]
   1b080:	42b2      	cmp	r2, r6
   1b082:	d200      	bcs.n	1b086 <find_type_cb+0x52>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1b084:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1b086:	2001      	movs	r0, #1
}
   1b088:	b011      	add	sp, #68	; 0x44
   1b08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1b08e:	6869      	ldr	r1, [r5, #4]
   1b090:	4608      	mov	r0, r1
   1b092:	f7ff feec 	bl	1ae6e <net_buf_frags_len>
   1b096:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1b09a:	1a1b      	subs	r3, r3, r0
   1b09c:	2b03      	cmp	r3, #3
   1b09e:	d922      	bls.n	1b0e6 <find_type_cb+0xb2>
	frag = net_buf_frag_last(data->buf);
   1b0a0:	4608      	mov	r0, r1
   1b0a2:	f000 ff3e 	bl	1bf22 <net_buf_frag_last>
   1b0a6:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1b0a8:	6868      	ldr	r0, [r5, #4]
   1b0aa:	f7ff fee0 	bl	1ae6e <net_buf_frags_len>
   1b0ae:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
   1b0b2:	f104 0b08 	add.w	fp, r4, #8
   1b0b6:	ebaa 0a00 	sub.w	sl, sl, r0
   1b0ba:	4658      	mov	r0, fp
   1b0bc:	f000 ff8e 	bl	1bfdc <net_buf_simple_tailroom>
   1b0c0:	4582      	cmp	sl, r0
   1b0c2:	d212      	bcs.n	1b0ea <find_type_cb+0xb6>
   1b0c4:	6868      	ldr	r0, [r5, #4]
   1b0c6:	f7ff fed2 	bl	1ae6e <net_buf_frags_len>
   1b0ca:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1b0ce:	1a18      	subs	r0, r3, r0
	if (!len) {
   1b0d0:	b998      	cbnz	r0, 1b0fa <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1b0d2:	686b      	ldr	r3, [r5, #4]
   1b0d4:	7998      	ldrb	r0, [r3, #6]
   1b0d6:	f7fb fd8d 	bl	16bf4 <net_buf_pool_get>
   1b0da:	2200      	movs	r2, #0
   1b0dc:	2300      	movs	r3, #0
   1b0de:	f000 feec 	bl	1beba <net_buf_alloc_fixed>
		if (!frag) {
   1b0e2:	4604      	mov	r4, r0
   1b0e4:	b928      	cbnz	r0, 1b0f2 <find_type_cb+0xbe>
		return BT_GATT_ITER_STOP;
   1b0e6:	4620      	mov	r0, r4
   1b0e8:	e7ce      	b.n	1b088 <find_type_cb+0x54>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1b0ea:	4658      	mov	r0, fp
   1b0ec:	f000 ff76 	bl	1bfdc <net_buf_simple_tailroom>
   1b0f0:	e7ee      	b.n	1b0d0 <find_type_cb+0x9c>
		net_buf_frag_add(data->buf, frag);
   1b0f2:	4601      	mov	r1, r0
   1b0f4:	6868      	ldr	r0, [r5, #4]
   1b0f6:	f000 ff25 	bl	1bf44 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1b0fa:	2300      	movs	r3, #0
   1b0fc:	9300      	str	r3, [sp, #0]
   1b0fe:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1b102:	4639      	mov	r1, r7
   1b104:	2310      	movs	r3, #16
   1b106:	aa02      	add	r2, sp, #8
   1b108:	4640      	mov	r0, r8
   1b10a:	47c8      	blx	r9
	if (read < 0) {
   1b10c:	1e07      	subs	r7, r0, #0
   1b10e:	db22      	blt.n	1b156 <find_type_cb+0x122>
	if (read != data->value_len) {
   1b110:	7c2a      	ldrb	r2, [r5, #16]
   1b112:	68e8      	ldr	r0, [r5, #12]
   1b114:	42ba      	cmp	r2, r7
   1b116:	d01a      	beq.n	1b14e <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1b118:	4601      	mov	r1, r0
   1b11a:	a80b      	add	r0, sp, #44	; 0x2c
   1b11c:	f7ff f95d 	bl	1a3da <bt_uuid_create>
   1b120:	b1c8      	cbz	r0, 1b156 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1b122:	b2fa      	uxtb	r2, r7
   1b124:	a902      	add	r1, sp, #8
   1b126:	a806      	add	r0, sp, #24
   1b128:	f7ff f957 	bl	1a3da <bt_uuid_create>
   1b12c:	b198      	cbz	r0, 1b156 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1b12e:	a906      	add	r1, sp, #24
   1b130:	a80b      	add	r0, sp, #44	; 0x2c
   1b132:	f7ff f928 	bl	1a386 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1b136:	b970      	cbnz	r0, 1b156 <find_type_cb+0x122>
	data->err = 0x00;
   1b138:	2300      	movs	r3, #0
   1b13a:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
   1b13c:	2104      	movs	r1, #4
   1b13e:	f104 0008 	add.w	r0, r4, #8
   1b142:	f000 ff10 	bl	1bf66 <net_buf_simple_add>
   1b146:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1b148:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1b14a:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1b14c:	e79b      	b.n	1b086 <find_type_cb+0x52>
	} else if (memcmp(data->value, uuid, read)) {
   1b14e:	a902      	add	r1, sp, #8
   1b150:	f7ff f8b6 	bl	1a2c0 <memcmp>
   1b154:	e7ef      	b.n	1b136 <find_type_cb+0x102>
	data->group = NULL;
   1b156:	2300      	movs	r3, #0
   1b158:	60ab      	str	r3, [r5, #8]
   1b15a:	e794      	b.n	1b086 <find_type_cb+0x52>

0001b15c <find_info_cb>:
{
   1b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1b15e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1b160:	6817      	ldr	r7, [r2, #0]
{
   1b162:	4605      	mov	r5, r0
   1b164:	460e      	mov	r6, r1
   1b166:	4614      	mov	r4, r2
	if (!data->rsp) {
   1b168:	b963      	cbnz	r3, 1b184 <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b16a:	6850      	ldr	r0, [r2, #4]
   1b16c:	2101      	movs	r1, #1
   1b16e:	3008      	adds	r0, #8
   1b170:	f000 fef9 	bl	1bf66 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b174:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b176:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b178:	781b      	ldrb	r3, [r3, #0]
   1b17a:	2b00      	cmp	r3, #0
   1b17c:	bf0c      	ite	eq
   1b17e:	2301      	moveq	r3, #1
   1b180:	2302      	movne	r3, #2
   1b182:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1b184:	68a3      	ldr	r3, [r4, #8]
   1b186:	781b      	ldrb	r3, [r3, #0]
   1b188:	2b01      	cmp	r3, #1
   1b18a:	d003      	beq.n	1b194 <find_info_cb+0x38>
   1b18c:	2b02      	cmp	r3, #2
   1b18e:	d019      	beq.n	1b1c4 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1b190:	2000      	movs	r0, #0
   1b192:	e016      	b.n	1b1c2 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1b194:	682b      	ldr	r3, [r5, #0]
   1b196:	781b      	ldrb	r3, [r3, #0]
   1b198:	2b00      	cmp	r3, #0
   1b19a:	d1f9      	bne.n	1b190 <find_info_cb+0x34>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1b19c:	6860      	ldr	r0, [r4, #4]
   1b19e:	2104      	movs	r1, #4
   1b1a0:	3008      	adds	r0, #8
   1b1a2:	f000 fee0 	bl	1bf66 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b1a6:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1b1a8:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b1aa:	885b      	ldrh	r3, [r3, #2]
   1b1ac:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1b1ae:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1b1b0:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1b1b2:	899b      	ldrh	r3, [r3, #12]
   1b1b4:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1b1b8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b1ba:	2804      	cmp	r0, #4
   1b1bc:	bf94      	ite	ls
   1b1be:	2000      	movls	r0, #0
   1b1c0:	2001      	movhi	r0, #1
}
   1b1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1b1c4:	682b      	ldr	r3, [r5, #0]
   1b1c6:	781b      	ldrb	r3, [r3, #0]
   1b1c8:	2b02      	cmp	r3, #2
   1b1ca:	d1e1      	bne.n	1b190 <find_info_cb+0x34>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1b1cc:	6860      	ldr	r0, [r4, #4]
   1b1ce:	2112      	movs	r1, #18
   1b1d0:	3008      	adds	r0, #8
   1b1d2:	f000 fec8 	bl	1bf66 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b1d6:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1b1d8:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b1da:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1b1dc:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b1e0:	3101      	adds	r1, #1
   1b1e2:	f7ff f87d 	bl	1a2e0 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1b1e6:	6863      	ldr	r3, [r4, #4]
   1b1e8:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1b1ec:	899b      	ldrh	r3, [r3, #12]
   1b1ee:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b1f0:	2812      	cmp	r0, #18
   1b1f2:	e7e3      	b.n	1b1bc <find_info_cb+0x60>

0001b1f4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1b1f4:	68d0      	ldr	r0, [r2, #12]
   1b1f6:	7803      	ldrb	r3, [r0, #0]
   1b1f8:	3104      	adds	r1, #4
   1b1fa:	b913      	cbnz	r3, 1b202 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1b1fc:	7001      	strb	r1, [r0, #0]
	return true;
   1b1fe:	2001      	movs	r0, #1
}
   1b200:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1b202:	428b      	cmp	r3, r1
   1b204:	d0fb      	beq.n	1b1fe <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1b206:	6891      	ldr	r1, [r2, #8]
   1b208:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1b20a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1b20c:	3b04      	subs	r3, #4
   1b20e:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1b210:	6110      	str	r0, [r2, #16]
		return false;
   1b212:	4770      	bx	lr

0001b214 <process_queue>:
{
   1b214:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1b216:	2200      	movs	r2, #0
{
   1b218:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1b21a:	2300      	movs	r3, #0
   1b21c:	4608      	mov	r0, r1
{
   1b21e:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1b220:	f000 fe50 	bl	1bec4 <net_buf_get>
	if (buf) {
   1b224:	4605      	mov	r5, r0
   1b226:	b160      	cbz	r0, 1b242 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1b228:	4601      	mov	r1, r0
   1b22a:	2200      	movs	r2, #0
   1b22c:	4620      	mov	r0, r4
   1b22e:	f7fa fc15 	bl	15a5c <chan_send>
		if (err) {
   1b232:	4604      	mov	r4, r0
   1b234:	b118      	cbz	r0, 1b23e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1b236:	4629      	mov	r1, r5
   1b238:	4630      	mov	r0, r6
   1b23a:	f001 fa67 	bl	1c70c <k_queue_prepend>
}
   1b23e:	4620      	mov	r0, r4
   1b240:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1b242:	f06f 0401 	mvn.w	r4, #1
   1b246:	e7fa      	b.n	1b23e <process_queue+0x2a>

0001b248 <att_exec_write_req>:
   1b248:	2006      	movs	r0, #6
   1b24a:	4770      	bx	lr

0001b24c <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b24c:	30c0      	adds	r0, #192	; 0xc0
   1b24e:	f3bf 8f5b 	dmb	ish
   1b252:	e850 3f00 	ldrex	r3, [r0]
   1b256:	f023 0301 	bic.w	r3, r3, #1
   1b25a:	e840 3200 	strex	r2, r3, [r0]
   1b25e:	2a00      	cmp	r2, #0
   1b260:	d1f7      	bne.n	1b252 <chan_rsp_sent+0x6>
   1b262:	f3bf 8f5b 	dmb	ish
}
   1b266:	4770      	bx	lr

0001b268 <chan_cfm_sent>:
   1b268:	30c0      	adds	r0, #192	; 0xc0
   1b26a:	f3bf 8f5b 	dmb	ish
   1b26e:	e850 3f00 	ldrex	r3, [r0]
   1b272:	f023 0302 	bic.w	r3, r3, #2
   1b276:	e840 3200 	strex	r2, r3, [r0]
   1b27a:	2a00      	cmp	r2, #0
   1b27c:	d1f7      	bne.n	1b26e <chan_cfm_sent+0x6>
   1b27e:	f3bf 8f5b 	dmb	ish
}
   1b282:	4770      	bx	lr

0001b284 <att_get>:
{
   1b284:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1b286:	7a83      	ldrb	r3, [r0, #10]
   1b288:	2b07      	cmp	r3, #7
   1b28a:	d001      	beq.n	1b290 <att_get+0xc>
		return NULL;
   1b28c:	2000      	movs	r0, #0
}
   1b28e:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1b290:	2104      	movs	r1, #4
   1b292:	f7ff fd9b 	bl	1adcc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1b296:	2800      	cmp	r0, #0
   1b298:	d0f8      	beq.n	1b28c <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b29a:	f3bf 8f5b 	dmb	ish
   1b29e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1b2a2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1b2a6:	075b      	lsls	r3, r3, #29
   1b2a8:	d4f0      	bmi.n	1b28c <att_get+0x8>
	return att_chan->att;
   1b2aa:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1b2ae:	e7ee      	b.n	1b28e <att_get+0xa>

0001b2b0 <chan_req_send>:
{
   1b2b0:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b2b2:	690e      	ldr	r6, [r1, #16]
{
   1b2b4:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b2b6:	4630      	mov	r0, r6
{
   1b2b8:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b2ba:	f7ff fdd8 	bl	1ae6e <net_buf_frags_len>
   1b2be:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1b2c2:	4283      	cmp	r3, r0
   1b2c4:	d317      	bcc.n	1b2f6 <chan_req_send+0x46>
	chan->req = req;
   1b2c6:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   1b2ca:	f106 0008 	add.w	r0, r6, #8
   1b2ce:	f000 fe81 	bl	1bfd4 <net_buf_simple_headroom>
	state->len = buf->len;
   1b2d2:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1b2d4:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1b2d6:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1b2d8:	6920      	ldr	r0, [r4, #16]
   1b2da:	f000 fe1e 	bl	1bf1a <net_buf_ref>
   1b2de:	2200      	movs	r2, #0
   1b2e0:	4601      	mov	r1, r0
   1b2e2:	4628      	mov	r0, r5
   1b2e4:	f7fa fbba 	bl	15a5c <chan_send>
	if (err) {
   1b2e8:	4605      	mov	r5, r0
   1b2ea:	b110      	cbz	r0, 1b2f2 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1b2ec:	6920      	ldr	r0, [r4, #16]
   1b2ee:	f7fb fd3d 	bl	16d6c <net_buf_unref>
}
   1b2f2:	4628      	mov	r0, r5
   1b2f4:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1b2f6:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1b2fa:	e7fa      	b.n	1b2f2 <chan_req_send+0x42>

0001b2fc <bt_att_chan_req_send>:
{
   1b2fc:	b570      	push	{r4, r5, r6, lr}
   1b2fe:	4604      	mov	r4, r0
   1b300:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1b302:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   1b306:	2200      	movs	r2, #0
   1b308:	2300      	movs	r3, #0
   1b30a:	4630      	mov	r0, r6
   1b30c:	f7fd fe2a 	bl	18f64 <z_impl_k_sem_take>
   1b310:	2800      	cmp	r0, #0
   1b312:	db0a      	blt.n	1b32a <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   1b314:	4620      	mov	r0, r4
   1b316:	4629      	mov	r1, r5
   1b318:	f7ff ffca 	bl	1b2b0 <chan_req_send>
	if (err < 0) {
   1b31c:	1e04      	subs	r4, r0, #0
   1b31e:	da02      	bge.n	1b326 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   1b320:	4630      	mov	r0, r6
   1b322:	f7fd fdf9 	bl	18f18 <z_impl_k_sem_give>
}
   1b326:	4620      	mov	r0, r4
   1b328:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1b32a:	f06f 040a 	mvn.w	r4, #10
   1b32e:	e7fa      	b.n	1b326 <bt_att_chan_req_send+0x2a>

0001b330 <bt_att_status>:
{
   1b330:	b538      	push	{r3, r4, r5, lr}
   1b332:	f3bf 8f5b 	dmb	ish
   1b336:	680b      	ldr	r3, [r1, #0]
   1b338:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1b33c:	07db      	lsls	r3, r3, #31
{
   1b33e:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1b340:	d518      	bpl.n	1b374 <bt_att_status+0x44>
	if (chan->req) {
   1b342:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1b346:	b9ab      	cbnz	r3, 1b374 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   1b348:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1b34c:	3004      	adds	r0, #4
   1b34e:	f7ff fd69 	bl	1ae24 <sys_slist_get>
	if (!node) {
   1b352:	4604      	mov	r4, r0
   1b354:	b170      	cbz	r0, 1b374 <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b356:	4601      	mov	r1, r0
   1b358:	f1a5 0008 	sub.w	r0, r5, #8
   1b35c:	f7ff ffce 	bl	1b2fc <bt_att_chan_req_send>
   1b360:	2800      	cmp	r0, #0
   1b362:	da07      	bge.n	1b374 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   1b364:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1b368:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1b36a:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b36c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1b36e:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b370:	b902      	cbnz	r2, 1b374 <bt_att_status+0x44>
	list->tail = node;
   1b372:	609c      	str	r4, [r3, #8]
}
   1b374:	bd38      	pop	{r3, r4, r5, pc}

0001b376 <write_cb>:
{
   1b376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b378:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1b37a:	4601      	mov	r1, r0
{
   1b37c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1b37e:	222a      	movs	r2, #42	; 0x2a
   1b380:	6820      	ldr	r0, [r4, #0]
   1b382:	f000 fd1c 	bl	1bdbe <bt_gatt_check_perm>
   1b386:	4605      	mov	r5, r0
   1b388:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1b38a:	bb00      	cbnz	r0, 1b3ce <write_cb+0x58>
	if (!data->req) {
   1b38c:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1b38e:	68b7      	ldr	r7, [r6, #8]
   1b390:	68e2      	ldr	r2, [r4, #12]
   1b392:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1b394:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1b396:	bf14      	ite	ne
   1b398:	2300      	movne	r3, #0
   1b39a:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1b39c:	9301      	str	r3, [sp, #4]
   1b39e:	8a63      	ldrh	r3, [r4, #18]
   1b3a0:	9300      	str	r3, [sp, #0]
   1b3a2:	4631      	mov	r1, r6
   1b3a4:	8a23      	ldrh	r3, [r4, #16]
   1b3a6:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1b3a8:	1e03      	subs	r3, r0, #0
   1b3aa:	db05      	blt.n	1b3b8 <write_cb+0x42>
   1b3ac:	8a22      	ldrh	r2, [r4, #16]
   1b3ae:	4293      	cmp	r3, r2
   1b3b0:	d10b      	bne.n	1b3ca <write_cb+0x54>
	data->err = 0U;
   1b3b2:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1b3b4:	2501      	movs	r5, #1
   1b3b6:	e005      	b.n	1b3c4 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1b3b8:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1b3bc:	d305      	bcc.n	1b3ca <write_cb+0x54>
		return -err;
   1b3be:	425b      	negs	r3, r3
   1b3c0:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1b3c2:	7523      	strb	r3, [r4, #20]
}
   1b3c4:	4628      	mov	r0, r5
   1b3c6:	b003      	add	sp, #12
   1b3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1b3ca:	230e      	movs	r3, #14
   1b3cc:	e7f9      	b.n	1b3c2 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1b3ce:	2500      	movs	r5, #0
   1b3d0:	e7f8      	b.n	1b3c4 <write_cb+0x4e>

0001b3d2 <bt_att_sent>:
{
   1b3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1b3d4:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   1b3d8:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1b3dc:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1b3de:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1b3e2:	b10b      	cbz	r3, 1b3e8 <bt_att_sent+0x16>
		chan->sent(chan);
   1b3e4:	4638      	mov	r0, r7
   1b3e6:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b3e8:	f3bf 8f5b 	dmb	ish
   1b3ec:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1b3f0:	e853 2f00 	ldrex	r2, [r3]
   1b3f4:	f022 0210 	bic.w	r2, r2, #16
   1b3f8:	e843 2100 	strex	r1, r2, [r3]
   1b3fc:	2900      	cmp	r1, #0
   1b3fe:	d1f7      	bne.n	1b3f0 <bt_att_sent+0x1e>
   1b400:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1b404:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1b408:	b98b      	cbnz	r3, 1b42e <bt_att_sent+0x5c>
   1b40a:	686b      	ldr	r3, [r5, #4]
   1b40c:	b17b      	cbz	r3, 1b42e <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b40e:	1d28      	adds	r0, r5, #4
   1b410:	f7ff fd08 	bl	1ae24 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b414:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b416:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b418:	4638      	mov	r0, r7
   1b41a:	f7ff ff49 	bl	1b2b0 <chan_req_send>
   1b41e:	2800      	cmp	r0, #0
   1b420:	da17      	bge.n	1b452 <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   1b422:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1b424:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b426:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1b428:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b42a:	b903      	cbnz	r3, 1b42e <bt_att_sent+0x5c>
	list->tail = node;
   1b42c:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1b42e:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   1b432:	4638      	mov	r0, r7
   1b434:	f7ff feee 	bl	1b214 <process_queue>
	if (!err) {
   1b438:	b158      	cbz	r0, 1b452 <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   1b43a:	f105 010c 	add.w	r1, r5, #12
   1b43e:	4638      	mov	r0, r7
   1b440:	f7ff fee8 	bl	1b214 <process_queue>
	if (!err) {
   1b444:	b128      	cbz	r0, 1b452 <bt_att_sent+0x80>
   1b446:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   1b44a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b44e:	f7fd bd63 	b.w	18f18 <z_impl_k_sem_give>
   1b452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b454 <read_cb>:
{
   1b454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1b458:	f8d2 8000 	ldr.w	r8, [r2]
{
   1b45c:	4606      	mov	r6, r0
	data->err = 0x00;
   1b45e:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1b460:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1b464:	7317      	strb	r7, [r2, #12]
{
   1b466:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b468:	4631      	mov	r1, r6
   1b46a:	2215      	movs	r2, #21
   1b46c:	f000 fca7 	bl	1bdbe <bt_gatt_check_perm>
   1b470:	4604      	mov	r4, r0
   1b472:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1b474:	b9a0      	cbnz	r0, 1b4a0 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b476:	e9cd 0000 	strd	r0, r0, [sp]
   1b47a:	88ab      	ldrh	r3, [r5, #4]
   1b47c:	68aa      	ldr	r2, [r5, #8]
   1b47e:	4631      	mov	r1, r6
   1b480:	4640      	mov	r0, r8
   1b482:	f7ff fd4c 	bl	1af1e <att_chan_read>
	if (ret < 0) {
   1b486:	1e03      	subs	r3, r0, #0
   1b488:	da0c      	bge.n	1b4a4 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1b48a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1b48e:	bf26      	itte	cs
   1b490:	425b      	negcs	r3, r3
   1b492:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1b494:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1b496:	732b      	strb	r3, [r5, #12]
}
   1b498:	4620      	mov	r0, r4
   1b49a:	b002      	add	sp, #8
   1b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1b4a0:	463c      	mov	r4, r7
   1b4a2:	e7f9      	b.n	1b498 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1b4a4:	2401      	movs	r4, #1
   1b4a6:	e7f7      	b.n	1b498 <read_cb+0x44>

0001b4a8 <bt_att_chan_create_pdu>:
{
   1b4a8:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b4aa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   1b4ae:	3201      	adds	r2, #1
   1b4b0:	429a      	cmp	r2, r3
{
   1b4b2:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b4b4:	d81b      	bhi.n	1b4ee <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1b4b6:	4608      	mov	r0, r1
   1b4b8:	f7ff fcf9 	bl	1aeae <att_op_get_type>
   1b4bc:	2802      	cmp	r0, #2
   1b4be:	d001      	beq.n	1b4c4 <bt_att_chan_create_pdu+0x1c>
   1b4c0:	2804      	cmp	r0, #4
   1b4c2:	d10f      	bne.n	1b4e4 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1b4c4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b4c8:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1b4ca:	2100      	movs	r1, #0
   1b4cc:	4608      	mov	r0, r1
   1b4ce:	f7ff fc24 	bl	1ad1a <bt_l2cap_create_pdu_timeout>
   1b4d2:	4604      	mov	r4, r0
	if (!buf) {
   1b4d4:	b120      	cbz	r0, 1b4e0 <bt_att_chan_create_pdu+0x38>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1b4d6:	2101      	movs	r1, #1
   1b4d8:	3008      	adds	r0, #8
   1b4da:	f000 fd44 	bl	1bf66 <net_buf_simple_add>
	hdr->code = op;
   1b4de:	7005      	strb	r5, [r0, #0]
}
   1b4e0:	4620      	mov	r0, r4
   1b4e2:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1b4e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b4e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b4ec:	e7ed      	b.n	1b4ca <bt_att_chan_create_pdu+0x22>
		return NULL;
   1b4ee:	2400      	movs	r4, #0
   1b4f0:	e7f6      	b.n	1b4e0 <bt_att_chan_create_pdu+0x38>

0001b4f2 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4f6:	4688      	mov	r8, r1
   1b4f8:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b4fa:	2101      	movs	r1, #1
   1b4fc:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b4fe:	4605      	mov	r5, r0
   1b500:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b502:	f7ff ffd1 	bl	1b4a8 <bt_att_chan_create_pdu>
	if (!buf) {
   1b506:	4604      	mov	r4, r0
   1b508:	b170      	cbz	r0, 1b528 <send_err_rsp.part.0+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   1b50a:	2104      	movs	r1, #4
   1b50c:	3008      	adds	r0, #8
   1b50e:	f000 fd2a 	bl	1bf66 <net_buf_simple_add>
	rsp->request = req;
   1b512:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1b516:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1b518:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b51c:	4621      	mov	r1, r4
   1b51e:	4628      	mov	r0, r5
}
   1b520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b524:	f7fa bb5e 	b.w	15be4 <bt_att_chan_send_rsp.constprop.0>
}
   1b528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b52c <bt_att_create_pdu>:
{
   1b52c:	b570      	push	{r4, r5, r6, lr}
   1b52e:	460e      	mov	r6, r1
   1b530:	4615      	mov	r5, r2
	att = att_get(conn);
   1b532:	f7ff fea7 	bl	1b284 <att_get>
	if (!att) {
   1b536:	b170      	cbz	r0, 1b556 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b538:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1b53a:	b163      	cbz	r3, 1b556 <bt_att_create_pdu+0x2a>
   1b53c:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1b540:	d009      	beq.n	1b556 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b542:	681b      	ldr	r3, [r3, #0]
   1b544:	b10b      	cbz	r3, 1b54a <bt_att_create_pdu+0x1e>
   1b546:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b54a:	1c6a      	adds	r2, r5, #1
   1b54c:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   1b550:	428a      	cmp	r2, r1
   1b552:	d902      	bls.n	1b55a <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b554:	b93b      	cbnz	r3, 1b566 <bt_att_create_pdu+0x3a>
}
   1b556:	2000      	movs	r0, #0
   1b558:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1b55a:	462a      	mov	r2, r5
   1b55c:	4631      	mov	r1, r6
}
   1b55e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1b562:	f7ff bfa1 	b.w	1b4a8 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b566:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
   1b56a:	d004      	beq.n	1b576 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b56c:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b570:	b10c      	cbz	r4, 1b576 <bt_att_create_pdu+0x4a>
   1b572:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
   1b576:	4618      	mov	r0, r3
   1b578:	4623      	mov	r3, r4
   1b57a:	e7e7      	b.n	1b54c <bt_att_create_pdu+0x20>

0001b57c <att_read_blob_req>:
{
   1b57c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1b57e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1b580:	8813      	ldrh	r3, [r2, #0]
   1b582:	8852      	ldrh	r2, [r2, #2]
   1b584:	9200      	str	r2, [sp, #0]
   1b586:	210c      	movs	r1, #12
   1b588:	220d      	movs	r2, #13
   1b58a:	f7fa fd31 	bl	15ff0 <att_read_rsp>
}
   1b58e:	b003      	add	sp, #12
   1b590:	f85d fb04 	ldr.w	pc, [sp], #4

0001b594 <att_read_req>:
{
   1b594:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1b596:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b598:	2200      	movs	r2, #0
   1b59a:	881b      	ldrh	r3, [r3, #0]
   1b59c:	9200      	str	r2, [sp, #0]
   1b59e:	210a      	movs	r1, #10
   1b5a0:	220b      	movs	r2, #11
   1b5a2:	f7fa fd25 	bl	15ff0 <att_read_rsp>
}
   1b5a6:	b003      	add	sp, #12
   1b5a8:	f85d fb04 	ldr.w	pc, [sp], #4

0001b5ac <att_mtu_req>:
{
   1b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1b5ae:	6803      	ldr	r3, [r0, #0]
{
   1b5b0:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1b5b2:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b5b4:	f3bf 8f5b 	dmb	ish
   1b5b8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   1b5bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b5c0:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1b5c4:	071b      	lsls	r3, r3, #28
   1b5c6:	d41a      	bmi.n	1b5fe <att_mtu_req+0x52>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1b5c8:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1b5ca:	881b      	ldrh	r3, [r3, #0]
   1b5cc:	2b16      	cmp	r3, #22
   1b5ce:	d918      	bls.n	1b602 <att_mtu_req+0x56>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1b5d0:	2202      	movs	r2, #2
   1b5d2:	2103      	movs	r1, #3
   1b5d4:	f7ff ffaa 	bl	1b52c <bt_att_create_pdu>
	if (!pdu) {
   1b5d8:	4606      	mov	r6, r0
   1b5da:	b1a0      	cbz	r0, 1b606 <att_mtu_req+0x5a>
	rsp = net_buf_add(pdu, sizeof(*rsp));
   1b5dc:	2102      	movs	r1, #2
   1b5de:	3008      	adds	r0, #8
   1b5e0:	f000 fcc1 	bl	1bf66 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1b5e4:	2717      	movs	r7, #23
   1b5e6:	7007      	strb	r7, [r0, #0]
   1b5e8:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1b5ea:	4631      	mov	r1, r6
   1b5ec:	4628      	mov	r0, r5
   1b5ee:	f7fa faf9 	bl	15be4 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b5f2:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1b5f6:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
	return 0;
   1b5fa:	4620      	mov	r0, r4
}
   1b5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1b5fe:	2006      	movs	r0, #6
   1b600:	e7fc      	b.n	1b5fc <att_mtu_req+0x50>
		return BT_ATT_ERR_INVALID_PDU;
   1b602:	2004      	movs	r0, #4
   1b604:	e7fa      	b.n	1b5fc <att_mtu_req+0x50>
		return BT_ATT_ERR_UNLIKELY;
   1b606:	200e      	movs	r0, #14
   1b608:	e7f8      	b.n	1b5fc <att_mtu_req+0x50>

0001b60a <bt_att_init>:
	bt_gatt_init();
   1b60a:	f7fb b86b 	b.w	166e4 <bt_gatt_init>

0001b60e <att_req_destroy>:
{
   1b60e:	b510      	push	{r4, lr}
   1b610:	4604      	mov	r4, r0
	if (req->buf) {
   1b612:	6900      	ldr	r0, [r0, #16]
   1b614:	b108      	cbz	r0, 1b61a <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1b616:	f7fb fba9 	bl	16d6c <net_buf_unref>
	if (req->destroy) {
   1b61a:	68a3      	ldr	r3, [r4, #8]
   1b61c:	b10b      	cbz	r3, 1b622 <att_req_destroy+0x14>
		req->destroy(req);
   1b61e:	4620      	mov	r0, r4
   1b620:	4798      	blx	r3
	bt_att_req_free(req);
   1b622:	4620      	mov	r0, r4
}
   1b624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1b628:	f7fa be42 	b.w	162b0 <bt_att_req_free>

0001b62c <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b62c:	898a      	ldrh	r2, [r1, #12]
   1b62e:	6889      	ldr	r1, [r1, #8]
   1b630:	2300      	movs	r3, #0
   1b632:	f7fa be49 	b.w	162c8 <att_handle_rsp>

0001b636 <att_chan_detach>:
{
   1b636:	b538      	push	{r3, r4, r5, lr}
   1b638:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1b63a:	6800      	ldr	r0, [r0, #0]
   1b63c:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   1b640:	3024      	adds	r0, #36	; 0x24
   1b642:	f7ff fbf9 	bl	1ae38 <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   1b646:	f504 7588 	add.w	r5, r4, #272	; 0x110
   1b64a:	4628      	mov	r0, r5
   1b64c:	f7fd fc64 	bl	18f18 <z_impl_k_sem_give>
   1b650:	4628      	mov	r0, r5
   1b652:	f7fd fc61 	bl	18f18 <z_impl_k_sem_give>
   1b656:	4628      	mov	r0, r5
   1b658:	f7fd fc5e 	bl	18f18 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1b65c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   1b660:	2200      	movs	r2, #0
   1b662:	2300      	movs	r3, #0
   1b664:	4628      	mov	r0, r5
   1b666:	f000 fc2d 	bl	1bec4 <net_buf_get>
   1b66a:	4602      	mov	r2, r0
   1b66c:	b950      	cbnz	r0, 1b684 <att_chan_detach+0x4e>
	if (chan->req) {
   1b66e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1b672:	b123      	cbz	r3, 1b67e <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b674:	4601      	mov	r1, r0
   1b676:	230e      	movs	r3, #14
   1b678:	4620      	mov	r0, r4
   1b67a:	f7fa fe25 	bl	162c8 <att_handle_rsp>
	chan->att = NULL;
   1b67e:	2300      	movs	r3, #0
   1b680:	6023      	str	r3, [r4, #0]
}
   1b682:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1b684:	f7fb fb72 	bl	16d6c <net_buf_unref>
   1b688:	e7ea      	b.n	1b660 <att_chan_detach+0x2a>

0001b68a <bt_att_disconnected>:
{
   1b68a:	b538      	push	{r3, r4, r5, lr}
   1b68c:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1b68e:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1b692:	f7ff ffd0 	bl	1b636 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1b696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b698:	b93b      	cbnz	r3, 1b6aa <bt_att_disconnected+0x20>
	att_reset(att);
   1b69a:	4628      	mov	r0, r5
   1b69c:	f7fa fe7c 	bl	16398 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1b6a0:	6820      	ldr	r0, [r4, #0]
}
   1b6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1b6a6:	f7fb ba67 	b.w	16b78 <bt_gatt_disconnected>
}
   1b6aa:	bd38      	pop	{r3, r4, r5, pc}

0001b6ac <att_timeout>:
{
   1b6ac:	b570      	push	{r4, r5, r6, lr}
   1b6ae:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1b6b0:	f850 6de0 	ldr.w	r6, [r0, #-224]!
	att_chan_detach(chan);
   1b6b4:	f7ff ffbf 	bl	1b636 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1b6b8:	6a75      	ldr	r5, [r6, #36]	; 0x24
   1b6ba:	b945      	cbnz	r5, 1b6ce <att_timeout+0x22>
	att_reset(att);
   1b6bc:	4630      	mov	r0, r6
   1b6be:	f7fa fe6b 	bl	16398 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1b6c2:	f854 0cd8 	ldr.w	r0, [r4, #-216]
   1b6c6:	f7fb fa57 	bl	16b78 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1b6ca:	f844 5cd8 	str.w	r5, [r4, #-216]
}
   1b6ce:	bd70      	pop	{r4, r5, r6, pc}

0001b6d0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1b6d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b6d4:	4605      	mov	r5, r0
   1b6d6:	460e      	mov	r6, r1
   1b6d8:	4614      	mov	r4, r2
   1b6da:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1b6dc:	f7ff fdd2 	bl	1b284 <att_get>
	if (!att) {
   1b6e0:	4607      	mov	r7, r0
   1b6e2:	b938      	cbnz	r0, 1b6f4 <bt_att_send+0x24>
		net_buf_unref(buf);
   1b6e4:	4630      	mov	r0, r6
   1b6e6:	f7fb fb41 	bl	16d6c <net_buf_unref>
		return -ENOTCONN;
   1b6ea:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   1b6ee:	b002      	add	sp, #8
   1b6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1b6f4:	b144      	cbz	r4, 1b708 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1b6f6:	f8cd 8000 	str.w	r8, [sp]
   1b6fa:	4623      	mov	r3, r4
   1b6fc:	4632      	mov	r2, r6
   1b6fe:	2104      	movs	r1, #4
   1b700:	4628      	mov	r0, r5
   1b702:	f7ff fb0d 	bl	1ad20 <bt_l2cap_send_cb>
   1b706:	e7f2      	b.n	1b6ee <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b708:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1b70a:	b184      	cbz	r4, 1b72e <bt_att_send+0x5e>
   1b70c:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   1b710:	d00f      	beq.n	1b732 <bt_att_send+0x62>
   1b712:	6824      	ldr	r4, [r4, #0]
   1b714:	b10c      	cbz	r4, 1b71a <bt_att_send+0x4a>
   1b716:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   1b71a:	2000      	movs	r0, #0
   1b71c:	b95d      	cbnz	r5, 1b736 <bt_att_send+0x66>
	if (ret < 0) {
   1b71e:	b1c8      	cbz	r0, 1b754 <bt_att_send+0x84>
		net_buf_put(&att->tx_queue, buf);
   1b720:	f107 000c 	add.w	r0, r7, #12
   1b724:	4631      	mov	r1, r6
   1b726:	f000 fbeb 	bl	1bf00 <net_buf_put>
	return 0;
   1b72a:	4628      	mov	r0, r5
   1b72c:	e7df      	b.n	1b6ee <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b72e:	4625      	mov	r5, r4
   1b730:	e7f3      	b.n	1b71a <bt_att_send+0x4a>
   1b732:	462c      	mov	r4, r5
   1b734:	e7f1      	b.n	1b71a <bt_att_send+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   1b736:	2200      	movs	r2, #0
   1b738:	2300      	movs	r3, #0
   1b73a:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1b73e:	f7fd fc11 	bl	18f64 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1b742:	2800      	cmp	r0, #0
   1b744:	db08      	blt.n	1b758 <bt_att_send+0x88>
	return chan_send(chan, buf, cb);
   1b746:	2200      	movs	r2, #0
   1b748:	4631      	mov	r1, r6
   1b74a:	4628      	mov	r0, r5
   1b74c:	f7fa f986 	bl	15a5c <chan_send>
		if (ret >= 0) {
   1b750:	2800      	cmp	r0, #0
   1b752:	db03      	blt.n	1b75c <bt_att_send+0x8c>
	return 0;
   1b754:	2000      	movs	r0, #0
   1b756:	e7ca      	b.n	1b6ee <bt_att_send+0x1e>
			return -EAGAIN;
   1b758:	f06f 000a 	mvn.w	r0, #10
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b75c:	b154      	cbz	r4, 1b774 <bt_att_send+0xa4>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b75e:	f514 7296 	adds.w	r2, r4, #300	; 0x12c
   1b762:	d004      	beq.n	1b76e <bt_att_send+0x9e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b764:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   1b768:	b10a      	cbz	r2, 1b76e <bt_att_send+0x9e>
   1b76a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
   1b76e:	4625      	mov	r5, r4
   1b770:	4614      	mov	r4, r2
   1b772:	e7d3      	b.n	1b71c <bt_att_send+0x4c>
   1b774:	4622      	mov	r2, r4
   1b776:	e7fa      	b.n	1b76e <bt_att_send+0x9e>

0001b778 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1b778:	b570      	push	{r4, r5, r6, lr}
   1b77a:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1b77c:	f7ff fd82 	bl	1b284 <att_get>
	if (!att) {
   1b780:	4605      	mov	r5, r0
   1b782:	b930      	cbnz	r0, 1b792 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   1b784:	6920      	ldr	r0, [r4, #16]
   1b786:	f7fb faf1 	bl	16d6c <net_buf_unref>
		req->buf = NULL;
   1b78a:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   1b78c:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
   1b790:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b792:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1b794:	b153      	cbz	r3, 1b7ac <bt_att_req_send+0x34>
   1b796:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1b79a:	d007      	beq.n	1b7ac <bt_att_req_send+0x34>
   1b79c:	681e      	ldr	r6, [r3, #0]
   1b79e:	b10e      	cbz	r6, 1b7a4 <bt_att_req_send+0x2c>
   1b7a0:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   1b7a4:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1b7a8:	b143      	cbz	r3, 1b7bc <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b7aa:	b96e      	cbnz	r6, 1b7c8 <bt_att_req_send+0x50>
	parent->next = child;
   1b7ac:	2000      	movs	r0, #0
   1b7ae:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1b7b0:	68ab      	ldr	r3, [r5, #8]
   1b7b2:	b9a3      	cbnz	r3, 1b7de <bt_att_req_send+0x66>
	list->head = node;
   1b7b4:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   1b7b8:	4618      	mov	r0, r3
}
   1b7ba:	e7e9      	b.n	1b790 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   1b7bc:	4621      	mov	r1, r4
   1b7be:	f7ff fd9d 	bl	1b2fc <bt_att_chan_req_send>
			if (ret >= 0) {
   1b7c2:	2800      	cmp	r0, #0
   1b7c4:	dbf1      	blt.n	1b7aa <bt_att_req_send+0x32>
   1b7c6:	e7e3      	b.n	1b790 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b7c8:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   1b7cc:	d004      	beq.n	1b7d8 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b7ce:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b7d2:	b10b      	cbz	r3, 1b7d8 <bt_att_req_send+0x60>
   1b7d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   1b7d8:	4630      	mov	r0, r6
   1b7da:	461e      	mov	r6, r3
   1b7dc:	e7e2      	b.n	1b7a4 <bt_att_req_send+0x2c>
	parent->next = child;
   1b7de:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b7e0:	60ac      	str	r4, [r5, #8]
}
   1b7e2:	e7d5      	b.n	1b790 <bt_att_req_send+0x18>

0001b7e4 <gatt_ccc_changed>:
{
   1b7e4:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1b7e6:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1b7e8:	895a      	ldrh	r2, [r3, #10]
   1b7ea:	428a      	cmp	r2, r1
   1b7ec:	d003      	beq.n	1b7f6 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1b7ee:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1b7f0:	68db      	ldr	r3, [r3, #12]
   1b7f2:	b103      	cbz	r3, 1b7f6 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1b7f4:	4718      	bx	r3
}
   1b7f6:	4770      	bx	lr

0001b7f8 <gatt_indicate_rsp>:
{
   1b7f8:	b510      	push	{r4, lr}
   1b7fa:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   1b7fc:	7da3      	ldrb	r3, [r4, #22]
   1b7fe:	3b01      	subs	r3, #1
{
   1b800:	460a      	mov	r2, r1
	params->_ref--;
   1b802:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1b804:	4621      	mov	r1, r4
   1b806:	68a3      	ldr	r3, [r4, #8]
   1b808:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1b80a:	68e3      	ldr	r3, [r4, #12]
   1b80c:	b12b      	cbz	r3, 1b81a <gatt_indicate_rsp+0x22>
   1b80e:	7da2      	ldrb	r2, [r4, #22]
   1b810:	b91a      	cbnz	r2, 1b81a <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1b812:	4620      	mov	r0, r4
}
   1b814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1b818:	4718      	bx	r3
}
   1b81a:	bd10      	pop	{r4, pc}

0001b81c <match_uuid>:
	data->attr = attr;
   1b81c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1b81e:	8091      	strh	r1, [r2, #4]
}
   1b820:	2000      	movs	r0, #0
   1b822:	4770      	bx	lr

0001b824 <gen_hash_m>:
{
   1b824:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b826:	6807      	ldr	r7, [r0, #0]
   1b828:	783d      	ldrb	r5, [r7, #0]
{
   1b82a:	b089      	sub	sp, #36	; 0x24
   1b82c:	4606      	mov	r6, r0
   1b82e:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b830:	b10d      	cbz	r5, 1b836 <gen_hash_m+0x12>
	switch (u16->val) {
   1b832:	2501      	movs	r5, #1
   1b834:	e014      	b.n	1b860 <gen_hash_m+0x3c>
   1b836:	887b      	ldrh	r3, [r7, #2]
   1b838:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1b83c:	d004      	beq.n	1b848 <gen_hash_m+0x24>
   1b83e:	d812      	bhi.n	1b866 <gen_hash_m+0x42>
   1b840:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1b844:	2b03      	cmp	r3, #3
   1b846:	d8f4      	bhi.n	1b832 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1b848:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b84c:	2202      	movs	r2, #2
   1b84e:	f10d 010e 	add.w	r1, sp, #14
   1b852:	4620      	mov	r0, r4
   1b854:	f7fe fc65 	bl	1a122 <tc_cmac_update>
   1b858:	b9e0      	cbnz	r0, 1b894 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1b85a:	f06f 0315 	mvn.w	r3, #21
   1b85e:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1b860:	4628      	mov	r0, r5
   1b862:	b009      	add	sp, #36	; 0x24
   1b864:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1b866:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1b86a:	33ff      	adds	r3, #255	; 0xff
   1b86c:	b29b      	uxth	r3, r3
   1b86e:	2b04      	cmp	r3, #4
   1b870:	d8df      	bhi.n	1b832 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1b872:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b876:	2202      	movs	r2, #2
   1b878:	f10d 010e 	add.w	r1, sp, #14
   1b87c:	4620      	mov	r0, r4
   1b87e:	f7fe fc50 	bl	1a122 <tc_cmac_update>
   1b882:	2800      	cmp	r0, #0
   1b884:	d0e9      	beq.n	1b85a <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1b886:	887b      	ldrh	r3, [r7, #2]
   1b888:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b88c:	2202      	movs	r2, #2
   1b88e:	f10d 010e 	add.w	r1, sp, #14
   1b892:	e017      	b.n	1b8c4 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1b894:	887b      	ldrh	r3, [r7, #2]
   1b896:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b89a:	2202      	movs	r2, #2
   1b89c:	f10d 010e 	add.w	r1, sp, #14
   1b8a0:	4620      	mov	r0, r4
   1b8a2:	f7fe fc3e 	bl	1a122 <tc_cmac_update>
   1b8a6:	2800      	cmp	r0, #0
   1b8a8:	d0d7      	beq.n	1b85a <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1b8aa:	2000      	movs	r0, #0
   1b8ac:	2310      	movs	r3, #16
   1b8ae:	eb0d 0203 	add.w	r2, sp, r3
   1b8b2:	6877      	ldr	r7, [r6, #4]
   1b8b4:	9000      	str	r0, [sp, #0]
   1b8b6:	4631      	mov	r1, r6
   1b8b8:	47b8      	blx	r7
		if (len < 0) {
   1b8ba:	1e02      	subs	r2, r0, #0
   1b8bc:	da01      	bge.n	1b8c2 <gen_hash_m+0x9e>
			state->err = len;
   1b8be:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1b8c0:	e7ce      	b.n	1b860 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1b8c2:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b8c4:	4620      	mov	r0, r4
   1b8c6:	f7fe fc2c 	bl	1a122 <tc_cmac_update>
   1b8ca:	2800      	cmp	r0, #0
   1b8cc:	d1b1      	bne.n	1b832 <gen_hash_m+0xe>
   1b8ce:	e7c4      	b.n	1b85a <gen_hash_m+0x36>

0001b8d0 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b8d0:	2301      	movs	r3, #1
   1b8d2:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b8d4:	f3bf 8f5b 	dmb	ish
   1b8d8:	e850 2f00 	ldrex	r2, [r0]
   1b8dc:	431a      	orrs	r2, r3
   1b8de:	e840 2100 	strex	r1, r2, [r0]
   1b8e2:	2900      	cmp	r1, #0
   1b8e4:	d1f8      	bne.n	1b8d8 <atomic_set_bit+0x8>
   1b8e6:	f3bf 8f5b 	dmb	ish
}
   1b8ea:	4770      	bx	lr

0001b8ec <gatt_notify>:
{
   1b8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b8f0:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   1b8f2:	8992      	ldrh	r2, [r2, #12]
{
   1b8f4:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1b8f6:	3202      	adds	r2, #2
   1b8f8:	211b      	movs	r1, #27
{
   1b8fa:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1b8fc:	f7ff fe16 	bl	1b52c <bt_att_create_pdu>
	if (!buf) {
   1b900:	4605      	mov	r5, r0
   1b902:	b1c8      	cbz	r0, 1b938 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
   1b904:	f100 0908 	add.w	r9, r0, #8
   1b908:	2102      	movs	r1, #2
   1b90a:	4648      	mov	r0, r9
   1b90c:	f000 fb2b 	bl	1bf66 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1b910:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
   1b912:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
   1b914:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
   1b918:	4648      	mov	r0, r9
   1b91a:	f000 fb24 	bl	1bf66 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1b91e:	89a2      	ldrh	r2, [r4, #12]
   1b920:	68a1      	ldr	r1, [r4, #8]
   1b922:	4630      	mov	r0, r6
   1b924:	f7fe fcdc 	bl	1a2e0 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1b928:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1b92c:	4629      	mov	r1, r5
   1b92e:	4638      	mov	r0, r7
}
   1b930:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1b934:	f7ff becc 	b.w	1b6d0 <bt_att_send>
}
   1b938:	f06f 000b 	mvn.w	r0, #11
   1b93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b940 <find_ccc_cfg>:
{
   1b940:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b942:	460c      	mov	r4, r1
   1b944:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1b946:	b148      	cbz	r0, 1b95c <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1b948:	7809      	ldrb	r1, [r1, #0]
   1b94a:	462a      	mov	r2, r5
   1b94c:	f7ff f90f 	bl	1ab6e <bt_conn_is_peer_addr_le>
   1b950:	2800      	cmp	r0, #0
	return NULL;
   1b952:	bf08      	it	eq
   1b954:	2400      	moveq	r4, #0
}
   1b956:	4620      	mov	r0, r4
   1b958:	b003      	add	sp, #12
   1b95a:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b95c:	9000      	str	r0, [sp, #0]
   1b95e:	2207      	movs	r2, #7
   1b960:	f8cd 0003 	str.w	r0, [sp, #3]
   1b964:	4669      	mov	r1, sp
   1b966:	4628      	mov	r0, r5
   1b968:	f7fe fcaa 	bl	1a2c0 <memcmp>
   1b96c:	2800      	cmp	r0, #0
	return NULL;
   1b96e:	bf18      	it	ne
   1b970:	2400      	movne	r4, #0
   1b972:	e7f0      	b.n	1b956 <find_ccc_cfg+0x16>

0001b974 <sc_restore_rsp>:
{
   1b974:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1b976:	f7fa fd51 	bl	1641c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b97a:	b140      	cbz	r0, 1b98e <sc_restore_rsp+0x1a>
   1b97c:	7a03      	ldrb	r3, [r0, #8]
   1b97e:	07db      	lsls	r3, r3, #31
   1b980:	d505      	bpl.n	1b98e <sc_restore_rsp+0x1a>
}
   1b982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1b986:	2100      	movs	r1, #0
   1b988:	300c      	adds	r0, #12
   1b98a:	f7ff bfa1 	b.w	1b8d0 <atomic_set_bit>
}
   1b98e:	bd08      	pop	{r3, pc}

0001b990 <bt_gatt_attr_write_ccc>:
{
   1b990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b994:	461f      	mov	r7, r3
   1b996:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1b99a:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1b99e:	4606      	mov	r6, r0
   1b9a0:	4688      	mov	r8, r1
	if (offset) {
   1b9a2:	2b00      	cmp	r3, #0
   1b9a4:	d146      	bne.n	1ba34 <bt_gatt_attr_write_ccc+0xa4>
	if (!len || len > sizeof(uint16_t)) {
   1b9a6:	1e7b      	subs	r3, r7, #1
   1b9a8:	2b01      	cmp	r3, #1
   1b9aa:	d846      	bhi.n	1ba3a <bt_gatt_attr_write_ccc+0xaa>
	if (len < sizeof(uint16_t)) {
   1b9ac:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1b9ae:	7815      	ldrb	r5, [r2, #0]
   1b9b0:	bf18      	it	ne
   1b9b2:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1b9b4:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1b9b6:	bf0c      	ite	eq
   1b9b8:	b2ad      	uxtheq	r5, r5
   1b9ba:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1b9be:	f7ff ffbf 	bl	1b940 <find_ccc_cfg>
	if (!cfg) {
   1b9c2:	4604      	mov	r4, r0
   1b9c4:	b988      	cbnz	r0, 1b9ea <bt_gatt_attr_write_ccc+0x5a>
		if (!value) {
   1b9c6:	b91d      	cbnz	r5, 1b9d0 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1b9c8:	4638      	mov	r0, r7
}
   1b9ca:	b003      	add	sp, #12
   1b9cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1b9d0:	4649      	mov	r1, r9
   1b9d2:	f7ff ffb5 	bl	1b940 <find_ccc_cfg>
		if (!cfg) {
   1b9d6:	4604      	mov	r4, r0
   1b9d8:	b390      	cbz	r0, 1ba40 <bt_gatt_attr_write_ccc+0xb0>
	memcpy(dst, src, sizeof(*dst));
   1b9da:	2207      	movs	r2, #7
   1b9dc:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1b9e0:	3001      	adds	r0, #1
   1b9e2:	f7fe fc7d 	bl	1a2e0 <memcpy>
		cfg->id = conn->id;
   1b9e6:	7a33      	ldrb	r3, [r6, #8]
   1b9e8:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1b9ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1b9ee:	b9ab      	cbnz	r3, 1ba1c <bt_gatt_attr_write_ccc+0x8c>
	if (cfg->value != ccc->value) {
   1b9f0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1b9f4:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1b9f6:	42ab      	cmp	r3, r5
   1b9f8:	d003      	beq.n	1ba02 <bt_gatt_attr_write_ccc+0x72>
		gatt_ccc_changed(attr, ccc);
   1b9fa:	4649      	mov	r1, r9
   1b9fc:	4640      	mov	r0, r8
   1b9fe:	f7ff fef1 	bl	1b7e4 <gatt_ccc_changed>
	if (!value) {
   1ba02:	2d00      	cmp	r5, #0
   1ba04:	d1e0      	bne.n	1b9c8 <bt_gatt_attr_write_ccc+0x38>
   1ba06:	2207      	movs	r2, #7
   1ba08:	4669      	mov	r1, sp
   1ba0a:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ba0c:	9500      	str	r5, [sp, #0]
   1ba0e:	f8cd 5003 	str.w	r5, [sp, #3]
   1ba12:	f7fe fc65 	bl	1a2e0 <memcpy>
	cfg->id = 0U;
   1ba16:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1ba18:	8125      	strh	r5, [r4, #8]
}
   1ba1a:	e7d5      	b.n	1b9c8 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1ba1c:	462a      	mov	r2, r5
   1ba1e:	4641      	mov	r1, r8
   1ba20:	4630      	mov	r0, r6
   1ba22:	4798      	blx	r3
		if (write < 0) {
   1ba24:	2800      	cmp	r0, #0
   1ba26:	dbd0      	blt.n	1b9ca <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1ba28:	3801      	subs	r0, #1
   1ba2a:	2801      	cmp	r0, #1
   1ba2c:	d9e0      	bls.n	1b9f0 <bt_gatt_attr_write_ccc+0x60>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1ba2e:	f06f 000d 	mvn.w	r0, #13
   1ba32:	e7ca      	b.n	1b9ca <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ba34:	f06f 0006 	mvn.w	r0, #6
   1ba38:	e7c7      	b.n	1b9ca <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ba3a:	f06f 000c 	mvn.w	r0, #12
   1ba3e:	e7c4      	b.n	1b9ca <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1ba40:	f06f 0010 	mvn.w	r0, #16
   1ba44:	e7c1      	b.n	1b9ca <bt_gatt_attr_write_ccc+0x3a>

0001ba46 <clear_cf_cfg>:
{
   1ba46:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ba48:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ba4a:	2500      	movs	r5, #0
   1ba4c:	2207      	movs	r2, #7
   1ba4e:	4669      	mov	r1, sp
   1ba50:	3001      	adds	r0, #1
   1ba52:	9500      	str	r5, [sp, #0]
   1ba54:	f8cd 5003 	str.w	r5, [sp, #3]
   1ba58:	f7fe fc42 	bl	1a2e0 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1ba5c:	f104 0008 	add.w	r0, r4, #8
   1ba60:	2201      	movs	r2, #1
   1ba62:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ba64:	340c      	adds	r4, #12
   1ba66:	f7fe fc66 	bl	1a336 <memset>
   1ba6a:	f3bf 8f5b 	dmb	ish
   1ba6e:	e854 3f00 	ldrex	r3, [r4]
   1ba72:	e844 5200 	strex	r2, r5, [r4]
   1ba76:	2a00      	cmp	r2, #0
   1ba78:	d1f9      	bne.n	1ba6e <clear_cf_cfg+0x28>
   1ba7a:	f3bf 8f5b 	dmb	ish
}
   1ba7e:	b003      	add	sp, #12
   1ba80:	bd30      	pop	{r4, r5, pc}

0001ba82 <cf_write>:
{
   1ba82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba86:	461f      	mov	r7, r3
   1ba88:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1ba8c:	2b01      	cmp	r3, #1
{
   1ba8e:	4680      	mov	r8, r0
   1ba90:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   1ba92:	d83b      	bhi.n	1bb0c <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   1ba94:	443b      	add	r3, r7
   1ba96:	2b01      	cmp	r3, #1
   1ba98:	463d      	mov	r5, r7
   1ba9a:	dc3a      	bgt.n	1bb12 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1ba9c:	f7fa fcbe 	bl	1641c <find_cf_cfg>
	if (!cfg) {
   1baa0:	4604      	mov	r4, r0
   1baa2:	b918      	cbnz	r0, 1baac <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1baa4:	f7fa fcba 	bl	1641c <find_cf_cfg>
	if (!cfg) {
   1baa8:	4604      	mov	r4, r0
   1baaa:	b3a8      	cbz	r0, 1bb18 <cf_write+0x96>
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
   1baac:	4632      	mov	r2, r6
   1baae:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   1bab2:	4562      	cmp	r2, ip
   1bab4:	d117      	bne.n	1bae6 <cf_write+0x64>
	for (i = 0U; i < len && i < last_byte; i++) {
   1bab6:	b12f      	cbz	r7, 1bac4 <cf_write+0x42>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   1bab8:	7833      	ldrb	r3, [r6, #0]
   1baba:	7a22      	ldrb	r2, [r4, #8]
   1babc:	f003 0307 	and.w	r3, r3, #7
   1bac0:	4313      	orrs	r3, r2
   1bac2:	7223      	strb	r3, [r4, #8]
   1bac4:	f108 0188 	add.w	r1, r8, #136	; 0x88
   1bac8:	2207      	movs	r2, #7
   1baca:	1c60      	adds	r0, r4, #1
   1bacc:	f7fe fc08 	bl	1a2e0 <memcpy>
	cfg->id = conn->id;
   1bad0:	4620      	mov	r0, r4
   1bad2:	f898 3008 	ldrb.w	r3, [r8, #8]
   1bad6:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1bada:	2100      	movs	r1, #0
   1badc:	f7ff fef8 	bl	1b8d0 <atomic_set_bit>
}
   1bae0:	4628      	mov	r0, r5
   1bae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   1bae6:	f812 1b01 	ldrb.w	r1, [r2], #1
   1baea:	7a20      	ldrb	r0, [r4, #8]
   1baec:	2300      	movs	r3, #0
   1baee:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
   1baf0:	fa21 fe03 	lsr.w	lr, r1, r3
   1baf4:	f01e 0f01 	tst.w	lr, #1
   1baf8:	d004      	beq.n	1bb04 <cf_write+0x82>
   1bafa:	fa20 fe03 	lsr.w	lr, r0, r3
   1bafe:	f01e 0f01 	tst.w	lr, #1
   1bb02:	d10c      	bne.n	1bb1e <cf_write+0x9c>
		for (bit = 0U; bit <= last_bit; bit++) {
   1bb04:	3301      	adds	r3, #1
   1bb06:	2b03      	cmp	r3, #3
   1bb08:	d1f2      	bne.n	1baf0 <cf_write+0x6e>
   1bb0a:	e7d2      	b.n	1bab2 <cf_write+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bb0c:	f06f 0506 	mvn.w	r5, #6
   1bb10:	e7e6      	b.n	1bae0 <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1bb12:	f06f 050c 	mvn.w	r5, #12
   1bb16:	e7e3      	b.n	1bae0 <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1bb18:	f06f 0510 	mvn.w	r5, #16
   1bb1c:	e7e0      	b.n	1bae0 <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1bb1e:	f06f 0512 	mvn.w	r5, #18
   1bb22:	e7dd      	b.n	1bae0 <cf_write+0x5e>

0001bb24 <read_appearance>:
{
   1bb24:	b513      	push	{r0, r1, r4, lr}
   1bb26:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1bb2a:	4610      	mov	r0, r2
	if (offset > value_len) {
   1bb2c:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1bb2e:	f04f 0200 	mov.w	r2, #0
   1bb32:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1bb36:	d80d      	bhi.n	1bb54 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1bb38:	f1c1 0402 	rsb	r4, r1, #2
   1bb3c:	429c      	cmp	r4, r3
   1bb3e:	bfa8      	it	ge
   1bb40:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1bb42:	f10d 0306 	add.w	r3, sp, #6
   1bb46:	4622      	mov	r2, r4
   1bb48:	4419      	add	r1, r3
   1bb4a:	f7fe fbc9 	bl	1a2e0 <memcpy>
}
   1bb4e:	4620      	mov	r0, r4
   1bb50:	b002      	add	sp, #8
   1bb52:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bb54:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1bb58:	e7f9      	b.n	1bb4e <read_appearance+0x2a>

0001bb5a <read_name>:
{
   1bb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb5e:	4698      	mov	r8, r3
   1bb60:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1bb64:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1bb66:	f7f8 fc65 	bl	14434 <bt_get_name>
   1bb6a:	4607      	mov	r7, r0
				 strlen(name));
   1bb6c:	f7fe fb95 	bl	1a29a <strlen>
	if (offset > value_len) {
   1bb70:	b283      	uxth	r3, r0
   1bb72:	42b3      	cmp	r3, r6
   1bb74:	d30c      	bcc.n	1bb90 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1bb76:	1b9c      	subs	r4, r3, r6
   1bb78:	4544      	cmp	r4, r8
   1bb7a:	bfa8      	it	ge
   1bb7c:	4644      	movge	r4, r8
   1bb7e:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1bb80:	4622      	mov	r2, r4
   1bb82:	19b9      	adds	r1, r7, r6
   1bb84:	4628      	mov	r0, r5
   1bb86:	f7fe fbab 	bl	1a2e0 <memcpy>
}
   1bb8a:	4620      	mov	r0, r4
   1bb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bb90:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1bb94:	e7f9      	b.n	1bb8a <read_name+0x30>

0001bb96 <bt_gatt_attr_read_ccc>:
{
   1bb96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1bb98:	68c9      	ldr	r1, [r1, #12]
{
   1bb9a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1bb9e:	4615      	mov	r5, r2
   1bba0:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1bba2:	f7ff fecd 	bl	1b940 <find_ccc_cfg>
	if (cfg) {
   1bba6:	b100      	cbz	r0, 1bbaa <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1bba8:	8900      	ldrh	r0, [r0, #8]
   1bbaa:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1bbae:	2e02      	cmp	r6, #2
   1bbb0:	d80e      	bhi.n	1bbd0 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1bbb2:	f1c6 0402 	rsb	r4, r6, #2
   1bbb6:	42bc      	cmp	r4, r7
   1bbb8:	bfa8      	it	ge
   1bbba:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1bbbc:	f10d 0306 	add.w	r3, sp, #6
   1bbc0:	4622      	mov	r2, r4
   1bbc2:	1999      	adds	r1, r3, r6
   1bbc4:	4628      	mov	r0, r5
   1bbc6:	f7fe fb8b 	bl	1a2e0 <memcpy>
}
   1bbca:	4620      	mov	r0, r4
   1bbcc:	b003      	add	sp, #12
   1bbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bbd0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1bbd4:	e7f9      	b.n	1bbca <bt_gatt_attr_read_ccc+0x34>

0001bbd6 <cf_read>:
{
   1bbd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bbd8:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1bbda:	2300      	movs	r3, #0
{
   1bbdc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1bbe0:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1bbe4:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1bbe6:	f7fa fc19 	bl	1641c <find_cf_cfg>
	if (cfg) {
   1bbea:	b128      	cbz	r0, 1bbf8 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1bbec:	f100 0108 	add.w	r1, r0, #8
   1bbf0:	2201      	movs	r2, #1
   1bbf2:	a801      	add	r0, sp, #4
   1bbf4:	f7fe fb74 	bl	1a2e0 <memcpy>
	if (offset > value_len) {
   1bbf8:	2e01      	cmp	r6, #1
   1bbfa:	d80d      	bhi.n	1bc18 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1bbfc:	f1c6 0401 	rsb	r4, r6, #1
   1bc00:	42bc      	cmp	r4, r7
   1bc02:	bfa8      	it	ge
   1bc04:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1bc06:	ab01      	add	r3, sp, #4
   1bc08:	4622      	mov	r2, r4
   1bc0a:	1999      	adds	r1, r3, r6
   1bc0c:	4628      	mov	r0, r5
   1bc0e:	f7fe fb67 	bl	1a2e0 <memcpy>
}
   1bc12:	4620      	mov	r0, r4
   1bc14:	b003      	add	sp, #12
   1bc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bc18:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1bc1c:	e7f9      	b.n	1bc12 <cf_read+0x3c>

0001bc1e <bt_gatt_attr_read_service>:
{
   1bc1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1bc20:	68c9      	ldr	r1, [r1, #12]
{
   1bc22:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1bc26:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1bc28:	780b      	ldrb	r3, [r1, #0]
{
   1bc2a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1bc2c:	b993      	cbnz	r3, 1bc54 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1bc2e:	884b      	ldrh	r3, [r1, #2]
   1bc30:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1bc34:	2d02      	cmp	r5, #2
   1bc36:	d819      	bhi.n	1bc6c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1bc38:	f1c5 0202 	rsb	r2, r5, #2
   1bc3c:	4294      	cmp	r4, r2
   1bc3e:	bfa8      	it	ge
   1bc40:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1bc42:	f10d 0306 	add.w	r3, sp, #6
   1bc46:	4622      	mov	r2, r4
   1bc48:	1959      	adds	r1, r3, r5
   1bc4a:	f7fe fb49 	bl	1a2e0 <memcpy>
}
   1bc4e:	4620      	mov	r0, r4
   1bc50:	b003      	add	sp, #12
   1bc52:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1bc54:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1bc56:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1bc5a:	d807      	bhi.n	1bc6c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1bc5c:	f1c5 0210 	rsb	r2, r5, #16
   1bc60:	4294      	cmp	r4, r2
   1bc62:	bfa8      	it	ge
   1bc64:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1bc66:	4622      	mov	r2, r4
   1bc68:	4429      	add	r1, r5
   1bc6a:	e7ee      	b.n	1bc4a <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bc6c:	f06f 0406 	mvn.w	r4, #6
   1bc70:	e7ed      	b.n	1bc4e <bt_gatt_attr_read_service+0x30>

0001bc72 <sc_save>:
{
   1bc72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bc76:	4680      	mov	r8, r0
   1bc78:	460f      	mov	r7, r1
   1bc7a:	4616      	mov	r6, r2
   1bc7c:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1bc7e:	f7fa fbbd 	bl	163fc <find_sc_cfg>
	if (!cfg) {
   1bc82:	4604      	mov	r4, r0
   1bc84:	b968      	cbnz	r0, 1bca2 <sc_save+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1bc86:	4669      	mov	r1, sp
   1bc88:	9000      	str	r0, [sp, #0]
   1bc8a:	f8cd 0003 	str.w	r0, [sp, #3]
   1bc8e:	f7fa fbb5 	bl	163fc <find_sc_cfg>
		if (!cfg) {
   1bc92:	4604      	mov	r4, r0
   1bc94:	b180      	cbz	r0, 1bcb8 <sc_save+0x46>
		cfg->id = id;
   1bc96:	f800 8b01 	strb.w	r8, [r0], #1
   1bc9a:	2207      	movs	r2, #7
   1bc9c:	4639      	mov	r1, r7
   1bc9e:	f7fe fb1f 	bl	1a2e0 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   1bca2:	8922      	ldrh	r2, [r4, #8]
   1bca4:	8963      	ldrh	r3, [r4, #10]
   1bca6:	b91a      	cbnz	r2, 1bcb0 <sc_save+0x3e>
   1bca8:	b923      	cbnz	r3, 1bcb4 <sc_save+0x42>
		cfg->data.start = start;
   1bcaa:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1bcac:	8165      	strh	r5, [r4, #10]
   1bcae:	e003      	b.n	1bcb8 <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
   1bcb0:	4296      	cmp	r6, r2
   1bcb2:	d304      	bcc.n	1bcbe <sc_save+0x4c>
   1bcb4:	429d      	cmp	r5, r3
   1bcb6:	d8f9      	bhi.n	1bcac <sc_save+0x3a>
}
   1bcb8:	b002      	add	sp, #8
   1bcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1bcbe:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1bcc0:	e7f8      	b.n	1bcb4 <sc_save+0x42>

0001bcc2 <sc_clear>:
{
   1bcc2:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bcc4:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1bcc8:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bcca:	4631      	mov	r1, r6
   1bccc:	7a00      	ldrb	r0, [r0, #8]
   1bcce:	f7fe fe3e 	bl	1a94e <bt_addr_le_is_bonded>
   1bcd2:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1bcd4:	4631      	mov	r1, r6
   1bcd6:	f7fa fb91 	bl	163fc <find_sc_cfg>
	if (!cfg) {
   1bcda:	b128      	cbz	r0, 1bce8 <sc_clear+0x26>
}
   1bcdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1bce0:	220c      	movs	r2, #12
   1bce2:	2100      	movs	r1, #0
   1bce4:	f7fe bb27 	b.w	1a336 <memset>
}
   1bce8:	bd70      	pop	{r4, r5, r6, pc}

0001bcea <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1bcea:	2a02      	cmp	r2, #2
{
   1bcec:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1bcee:	d108      	bne.n	1bd02 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1bcf0:	2300      	movs	r3, #0
   1bcf2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1bcf6:	461a      	mov	r2, r3
   1bcf8:	7a00      	ldrb	r0, [r0, #8]
   1bcfa:	f7ff ffba 	bl	1bc72 <sc_save>
}
   1bcfe:	2002      	movs	r0, #2
   1bd00:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1bd02:	f7ff ffde 	bl	1bcc2 <sc_clear>
   1bd06:	e7fa      	b.n	1bcfe <sc_ccc_cfg_write+0x14>

0001bd08 <bt_gatt_attr_value_handle>:
{
   1bd08:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1bd0a:	4604      	mov	r4, r0
   1bd0c:	b910      	cbnz	r0, 1bd14 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1bd0e:	2000      	movs	r0, #0
}
   1bd10:	b002      	add	sp, #8
   1bd12:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1bd14:	2300      	movs	r3, #0
   1bd16:	f88d 3004 	strb.w	r3, [sp, #4]
   1bd1a:	6800      	ldr	r0, [r0, #0]
   1bd1c:	f642 0303 	movw	r3, #10243	; 0x2803
   1bd20:	a901      	add	r1, sp, #4
   1bd22:	f8ad 3006 	strh.w	r3, [sp, #6]
   1bd26:	f7fe fb2e 	bl	1a386 <bt_uuid_cmp>
   1bd2a:	2800      	cmp	r0, #0
   1bd2c:	d1ef      	bne.n	1bd0e <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1bd2e:	68e3      	ldr	r3, [r4, #12]
   1bd30:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1bd32:	2800      	cmp	r0, #0
   1bd34:	d1ec      	bne.n	1bd10 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1bd36:	4620      	mov	r0, r4
   1bd38:	f7fa fd28 	bl	1678c <bt_gatt_attr_get_handle>
   1bd3c:	3001      	adds	r0, #1
   1bd3e:	b280      	uxth	r0, r0
	return handle;
   1bd40:	e7e6      	b.n	1bd10 <bt_gatt_attr_value_handle+0x8>

0001bd42 <bt_gatt_attr_read_chrc>:
{
   1bd42:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1bd44:	68cf      	ldr	r7, [r1, #12]
{
   1bd46:	b087      	sub	sp, #28
   1bd48:	4608      	mov	r0, r1
   1bd4a:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1bd4c:	79bb      	ldrb	r3, [r7, #6]
   1bd4e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1bd52:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1bd56:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1bd58:	f7ff ffd6 	bl	1bd08 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1bd5c:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1bd5e:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1bd62:	780b      	ldrb	r3, [r1, #0]
   1bd64:	b99b      	cbnz	r3, 1bd8e <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1bd66:	884b      	ldrh	r3, [r1, #2]
   1bd68:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1bd6c:	2105      	movs	r1, #5
	if (offset > value_len) {
   1bd6e:	42b1      	cmp	r1, r6
   1bd70:	d315      	bcc.n	1bd9e <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1bd72:	1b89      	subs	r1, r1, r6
   1bd74:	42a1      	cmp	r1, r4
   1bd76:	bfa8      	it	ge
   1bd78:	4621      	movge	r1, r4
   1bd7a:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1bd7c:	ab01      	add	r3, sp, #4
   1bd7e:	4622      	mov	r2, r4
   1bd80:	1999      	adds	r1, r3, r6
   1bd82:	4628      	mov	r0, r5
   1bd84:	f7fe faac 	bl	1a2e0 <memcpy>
}
   1bd88:	4620      	mov	r0, r4
   1bd8a:	b007      	add	sp, #28
   1bd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1bd8e:	3101      	adds	r1, #1
   1bd90:	2210      	movs	r2, #16
   1bd92:	f10d 0007 	add.w	r0, sp, #7
   1bd96:	f7fe faa3 	bl	1a2e0 <memcpy>
		value_len += 16U;
   1bd9a:	2113      	movs	r1, #19
   1bd9c:	e7e7      	b.n	1bd6e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bd9e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1bda2:	e7f1      	b.n	1bd88 <bt_gatt_attr_read_chrc+0x46>

0001bda4 <bt_gatt_foreach_attr>:
{
   1bda4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1bda6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1bdaa:	2300      	movs	r3, #0
   1bdac:	9300      	str	r3, [sp, #0]
   1bdae:	461a      	mov	r2, r3
   1bdb0:	f7fa fd1c 	bl	167ec <bt_gatt_foreach_attr_type>
}
   1bdb4:	b005      	add	sp, #20
   1bdb6:	f85d fb04 	ldr.w	pc, [sp], #4

0001bdba <db_hash_process>:
	db_hash_gen(true);
   1bdba:	f7fa bd71 	b.w	168a0 <db_hash_gen.isra.0>

0001bdbe <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1bdbe:	07d3      	lsls	r3, r2, #31
{
   1bdc0:	b510      	push	{r4, lr}
   1bdc2:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1bdc4:	d504      	bpl.n	1bdd0 <bt_gatt_check_perm+0x12>
   1bdc6:	f014 0f15 	tst.w	r4, #21
   1bdca:	d017      	beq.n	1bdfc <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1bdcc:	684b      	ldr	r3, [r1, #4]
   1bdce:	b1ab      	cbz	r3, 1bdfc <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1bdd0:	0793      	lsls	r3, r2, #30
   1bdd2:	d504      	bpl.n	1bdde <bt_gatt_check_perm+0x20>
   1bdd4:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1bdd8:	d012      	beq.n	1be00 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1bdda:	688b      	ldr	r3, [r1, #8]
   1bddc:	b183      	cbz	r3, 1be00 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1bdde:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1bde0:	f014 0f30 	tst.w	r4, #48	; 0x30
   1bde4:	d104      	bne.n	1bdf0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1bde6:	f014 000c 	ands.w	r0, r4, #12
   1bdea:	bf18      	it	ne
   1bdec:	200f      	movne	r0, #15
}
   1bdee:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1bdf0:	f7fe fe4a 	bl	1aa88 <bt_conn_get_security>
   1bdf4:	2802      	cmp	r0, #2
   1bdf6:	d8f6      	bhi.n	1bde6 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1bdf8:	2005      	movs	r0, #5
   1bdfa:	e7f8      	b.n	1bdee <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1bdfc:	2002      	movs	r0, #2
   1bdfe:	e7f6      	b.n	1bdee <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1be00:	2003      	movs	r0, #3
   1be02:	e7f4      	b.n	1bdee <bt_gatt_check_perm+0x30>

0001be04 <bt_gatt_change_aware>:
{
   1be04:	b510      	push	{r4, lr}
   1be06:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1be08:	f7fa fb08 	bl	1641c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1be0c:	4603      	mov	r3, r0
   1be0e:	b910      	cbnz	r0, 1be16 <bt_gatt_change_aware+0x12>
		return true;
   1be10:	2401      	movs	r4, #1
}
   1be12:	4620      	mov	r0, r4
   1be14:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1be16:	7a02      	ldrb	r2, [r0, #8]
   1be18:	07d2      	lsls	r2, r2, #31
   1be1a:	d5f9      	bpl.n	1be10 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1be1c:	f3bf 8f5b 	dmb	ish
   1be20:	68d9      	ldr	r1, [r3, #12]
   1be22:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1be26:	f011 0101 	ands.w	r1, r1, #1
   1be2a:	f100 000c 	add.w	r0, r0, #12
   1be2e:	d1ef      	bne.n	1be10 <bt_gatt_change_aware+0xc>
	if (!req) {
   1be30:	2c00      	cmp	r4, #0
   1be32:	d0ee      	beq.n	1be12 <bt_gatt_change_aware+0xe>
   1be34:	f3bf 8f5b 	dmb	ish
   1be38:	68db      	ldr	r3, [r3, #12]
   1be3a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1be3e:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1be42:	079b      	lsls	r3, r3, #30
   1be44:	d50e      	bpl.n	1be64 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1be46:	f3bf 8f5b 	dmb	ish
   1be4a:	e850 3f00 	ldrex	r3, [r0]
   1be4e:	f023 0302 	bic.w	r3, r3, #2
   1be52:	e840 3200 	strex	r2, r3, [r0]
   1be56:	2a00      	cmp	r2, #0
   1be58:	d1f7      	bne.n	1be4a <bt_gatt_change_aware+0x46>
   1be5a:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1be5e:	f7ff fd37 	bl	1b8d0 <atomic_set_bit>
	return false;
   1be62:	e7d6      	b.n	1be12 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1be64:	2101      	movs	r1, #1
   1be66:	e7fa      	b.n	1be5e <bt_gatt_change_aware+0x5a>

0001be68 <bt_smp_recv>:
{
   1be68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1be6a:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   1be6c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1be6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1be72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1be76:	4608      	mov	r0, r1
   1be78:	f7fe ff4f 	bl	1ad1a <bt_l2cap_create_pdu_timeout>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1be7c:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
   1be80:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   1be82:	2101      	movs	r1, #1
   1be84:	4630      	mov	r0, r6
   1be86:	f000 f86e 	bl	1bf66 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1be8a:	2505      	movs	r5, #5
   1be8c:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
   1be8e:	2101      	movs	r1, #1
   1be90:	4630      	mov	r0, r6
   1be92:	f000 f868 	bl	1bf66 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1be96:	7005      	strb	r5, [r0, #0]
   1be98:	2500      	movs	r5, #0
   1be9a:	9500      	str	r5, [sp, #0]
   1be9c:	462b      	mov	r3, r5
   1be9e:	4622      	mov	r2, r4
   1bea0:	2106      	movs	r1, #6
   1bea2:	4638      	mov	r0, r7
   1bea4:	f7fe ff3c 	bl	1ad20 <bt_l2cap_send_cb>
}
   1bea8:	4628      	mov	r0, r5
   1beaa:	b003      	add	sp, #12
   1beac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001beae <bt_smp_sign>:
   1beae:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1beb2:	4770      	bx	lr

0001beb4 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1beb4:	2000      	movs	r0, #0
   1beb6:	4770      	bx	lr

0001beb8 <fixed_data_unref>:
}
   1beb8:	4770      	bx	lr

0001beba <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1beba:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1bebc:	6849      	ldr	r1, [r1, #4]
   1bebe:	6809      	ldr	r1, [r1, #0]
   1bec0:	f7fa bec8 	b.w	16c54 <net_buf_alloc_len>

0001bec4 <net_buf_get>:
{
   1bec4:	b570      	push	{r4, r5, r6, lr}
   1bec6:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1bec8:	f7fc fca6 	bl	18818 <z_impl_k_queue_get>
	if (!buf) {
   1becc:	4605      	mov	r5, r0
   1bece:	b128      	cbz	r0, 1bedc <net_buf_get+0x18>
   1bed0:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1bed2:	7963      	ldrb	r3, [r4, #5]
   1bed4:	f013 0301 	ands.w	r3, r3, #1
   1bed8:	d102      	bne.n	1bee0 <net_buf_get+0x1c>
	frag->frags = NULL;
   1beda:	6023      	str	r3, [r4, #0]
}
   1bedc:	4628      	mov	r0, r5
   1bede:	bd70      	pop	{r4, r5, r6, pc}
   1bee0:	2300      	movs	r3, #0
   1bee2:	2200      	movs	r2, #0
   1bee4:	4630      	mov	r0, r6
   1bee6:	f7fc fc97 	bl	18818 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1beea:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1beec:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1beee:	f023 0301 	bic.w	r3, r3, #1
   1bef2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1bef4:	4604      	mov	r4, r0
   1bef6:	e7ec      	b.n	1bed2 <net_buf_get+0xe>

0001bef8 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1bef8:	6883      	ldr	r3, [r0, #8]
   1befa:	440b      	add	r3, r1
   1befc:	6003      	str	r3, [r0, #0]
}
   1befe:	4770      	bx	lr

0001bf00 <net_buf_put>:
{
   1bf00:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1bf02:	460a      	mov	r2, r1
   1bf04:	6814      	ldr	r4, [r2, #0]
   1bf06:	b914      	cbnz	r4, 1bf0e <net_buf_put+0xe>
}
   1bf08:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1bf0a:	f000 bc09 	b.w	1c720 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1bf0e:	7953      	ldrb	r3, [r2, #5]
   1bf10:	f043 0301 	orr.w	r3, r3, #1
   1bf14:	7153      	strb	r3, [r2, #5]
   1bf16:	4622      	mov	r2, r4
   1bf18:	e7f4      	b.n	1bf04 <net_buf_put+0x4>

0001bf1a <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1bf1a:	7902      	ldrb	r2, [r0, #4]
   1bf1c:	3201      	adds	r2, #1
   1bf1e:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1bf20:	4770      	bx	lr

0001bf22 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1bf22:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1bf24:	4618      	mov	r0, r3
   1bf26:	681b      	ldr	r3, [r3, #0]
   1bf28:	2b00      	cmp	r3, #0
   1bf2a:	d1fb      	bne.n	1bf24 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1bf2c:	4770      	bx	lr

0001bf2e <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1bf2e:	6802      	ldr	r2, [r0, #0]
{
   1bf30:	b510      	push	{r4, lr}
	if (parent->frags) {
   1bf32:	b12a      	cbz	r2, 1bf40 <net_buf_frag_insert+0x12>
   1bf34:	460b      	mov	r3, r1
	while (buf->frags) {
   1bf36:	461c      	mov	r4, r3
   1bf38:	681b      	ldr	r3, [r3, #0]
   1bf3a:	2b00      	cmp	r3, #0
   1bf3c:	d1fb      	bne.n	1bf36 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1bf3e:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1bf40:	6001      	str	r1, [r0, #0]
}
   1bf42:	bd10      	pop	{r4, pc}

0001bf44 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1bf44:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1bf46:	4604      	mov	r4, r0
   1bf48:	b920      	cbnz	r0, 1bf54 <net_buf_frag_add+0x10>
	buf->ref++;
   1bf4a:	790b      	ldrb	r3, [r1, #4]
   1bf4c:	3301      	adds	r3, #1
   1bf4e:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1bf50:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1bf52:	bd10      	pop	{r4, pc}
   1bf54:	4603      	mov	r3, r0
	while (buf->frags) {
   1bf56:	4618      	mov	r0, r3
   1bf58:	681b      	ldr	r3, [r3, #0]
   1bf5a:	2b00      	cmp	r3, #0
   1bf5c:	d1fb      	bne.n	1bf56 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1bf5e:	f7ff ffe6 	bl	1bf2e <net_buf_frag_insert>
   1bf62:	4620      	mov	r0, r4
   1bf64:	e7f5      	b.n	1bf52 <net_buf_frag_add+0xe>

0001bf66 <net_buf_simple_add>:
	return buf->data + buf->len;
   1bf66:	8883      	ldrh	r3, [r0, #4]
   1bf68:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1bf6a:	4419      	add	r1, r3
   1bf6c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1bf6e:	18d0      	adds	r0, r2, r3
   1bf70:	4770      	bx	lr

0001bf72 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1bf72:	b430      	push	{r4, r5}
   1bf74:	8884      	ldrh	r4, [r0, #4]
   1bf76:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1bf78:	18a3      	adds	r3, r4, r2
   1bf7a:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1bf7c:	1928      	adds	r0, r5, r4
}
   1bf7e:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1bf80:	f7fe b9ae 	b.w	1a2e0 <memcpy>

0001bf84 <net_buf_simple_add_u8>:
   1bf84:	8883      	ldrh	r3, [r0, #4]
   1bf86:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1bf88:	b510      	push	{r4, lr}
	buf->len += len;
   1bf8a:	1c5c      	adds	r4, r3, #1
   1bf8c:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1bf8e:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1bf90:	18d0      	adds	r0, r2, r3
   1bf92:	bd10      	pop	{r4, pc}

0001bf94 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1bf94:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1bf96:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1bf98:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1bf9a:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1bf9c:	4411      	add	r1, r2
	buf->data -= len;
   1bf9e:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1bfa0:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1bfa2:	4770      	bx	lr

0001bfa4 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1bfa4:	8882      	ldrh	r2, [r0, #4]
   1bfa6:	1a52      	subs	r2, r2, r1
{
   1bfa8:	4603      	mov	r3, r0
	buf->len -= len;
   1bfaa:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1bfac:	6800      	ldr	r0, [r0, #0]
   1bfae:	4408      	add	r0, r1
   1bfb0:	6018      	str	r0, [r3, #0]
}
   1bfb2:	4770      	bx	lr

0001bfb4 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1bfb4:	4603      	mov	r3, r0
	void *data = buf->data;
   1bfb6:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1bfb8:	889a      	ldrh	r2, [r3, #4]
   1bfba:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1bfbc:	4401      	add	r1, r0
	buf->len -= len;
   1bfbe:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1bfc0:	6019      	str	r1, [r3, #0]

	return data;
}
   1bfc2:	4770      	bx	lr

0001bfc4 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1bfc4:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1bfc6:	6803      	ldr	r3, [r0, #0]
   1bfc8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1bfca:	2102      	movs	r1, #2
   1bfcc:	f7ff ffea 	bl	1bfa4 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1bfd0:	4620      	mov	r0, r4
   1bfd2:	bd10      	pop	{r4, pc}

0001bfd4 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1bfd4:	6802      	ldr	r2, [r0, #0]
   1bfd6:	6880      	ldr	r0, [r0, #8]
}
   1bfd8:	1a10      	subs	r0, r2, r0
   1bfda:	4770      	bx	lr

0001bfdc <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1bfdc:	8883      	ldrh	r3, [r0, #4]
   1bfde:	88c2      	ldrh	r2, [r0, #6]
   1bfe0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1bfe2:	6803      	ldr	r3, [r0, #0]
   1bfe4:	6880      	ldr	r0, [r0, #8]
   1bfe6:	1a18      	subs	r0, r3, r0
}
   1bfe8:	1a10      	subs	r0, r2, r0
   1bfea:	4770      	bx	lr

0001bfec <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1bfec:	f000 001f 	and.w	r0, r0, #31
   1bff0:	0080      	lsls	r0, r0, #2
   1bff2:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1bff6:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1bffa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1bffe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1c002:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1c006:	4770      	bx	lr

0001c008 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c008:	6843      	ldr	r3, [r0, #4]
   1c00a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1c00c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1c010:	600b      	str	r3, [r1, #0]
}
   1c012:	2000      	movs	r0, #0
   1c014:	4770      	bx	lr

0001c016 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c016:	6843      	ldr	r3, [r0, #4]
   1c018:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1c01a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1c01e:	4042      	eors	r2, r0
   1c020:	400a      	ands	r2, r1
   1c022:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1c024:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1c028:	2000      	movs	r0, #0
   1c02a:	4770      	bx	lr

0001c02c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c02c:	6843      	ldr	r3, [r0, #4]
   1c02e:	685b      	ldr	r3, [r3, #4]
}
   1c030:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1c032:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1c036:	4770      	bx	lr

0001c038 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c038:	6843      	ldr	r3, [r0, #4]
   1c03a:	685b      	ldr	r3, [r3, #4]
}
   1c03c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1c03e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1c042:	4770      	bx	lr

0001c044 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c044:	6843      	ldr	r3, [r0, #4]
   1c046:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1c048:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1c04c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1c04e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1c052:	2000      	movs	r0, #0
   1c054:	4770      	bx	lr

0001c056 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c056:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   1c058:	6858      	ldr	r0, [r3, #4]
{
   1c05a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1c05c:	b158      	cbz	r0, 1c076 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c05e:	2400      	movs	r4, #0
   1c060:	4281      	cmp	r1, r0
   1c062:	d113      	bne.n	1c08c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1c064:	6808      	ldr	r0, [r1, #0]
   1c066:	b95c      	cbnz	r4, 1c080 <gpio_nrfx_manage_callback+0x2a>
   1c068:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1c06a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c06c:	42a1      	cmp	r1, r4
   1c06e:	d100      	bne.n	1c072 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1c070:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1c072:	2000      	movs	r0, #0
   1c074:	6008      	str	r0, [r1, #0]
	if (set) {
   1c076:	b972      	cbnz	r2, 1c096 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1c078:	2000      	movs	r0, #0
}
   1c07a:	bd30      	pop	{r4, r5, pc}
   1c07c:	4628      	mov	r0, r5
   1c07e:	e7ef      	b.n	1c060 <gpio_nrfx_manage_callback+0xa>
   1c080:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c082:	6898      	ldr	r0, [r3, #8]
   1c084:	4281      	cmp	r1, r0
	list->tail = node;
   1c086:	bf08      	it	eq
   1c088:	609c      	streq	r4, [r3, #8]
}
   1c08a:	e7f2      	b.n	1c072 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c08c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c08e:	4604      	mov	r4, r0
   1c090:	2d00      	cmp	r5, #0
   1c092:	d1f3      	bne.n	1c07c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1c094:	b13a      	cbz	r2, 1c0a6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1c096:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c098:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c09a:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1c09c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c09e:	2800      	cmp	r0, #0
   1c0a0:	d1ea      	bne.n	1c078 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1c0a2:	6099      	str	r1, [r3, #8]
}
   1c0a4:	e7e9      	b.n	1c07a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1c0a6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c0aa:	e7e6      	b.n	1c07a <gpio_nrfx_manage_callback+0x24>

0001c0ac <any_other_channel_is_active>:
{
   1c0ac:	b530      	push	{r4, r5, lr}
   1c0ae:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   1c0b0:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
   1c0b2:	b2da      	uxtb	r2, r3
   1c0b4:	4282      	cmp	r2, r0
   1c0b6:	d007      	beq.n	1c0c8 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
   1c0b8:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
   1c0bc:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   1c0c0:	b112      	cbz	r2, 1c0c8 <any_other_channel_is_active+0x1c>
   1c0c2:	898d      	ldrh	r5, [r1, #12]
   1c0c4:	4295      	cmp	r5, r2
   1c0c6:	d804      	bhi.n	1c0d2 <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1c0c8:	3301      	adds	r3, #1
   1c0ca:	2b04      	cmp	r3, #4
   1c0cc:	d1f1      	bne.n	1c0b2 <any_other_channel_is_active+0x6>
	return false;
   1c0ce:	2000      	movs	r0, #0
}
   1c0d0:	bd30      	pop	{r4, r5, pc}
			return true;
   1c0d2:	2001      	movs	r0, #1
   1c0d4:	e7fc      	b.n	1c0d0 <any_other_channel_is_active+0x24>

0001c0d6 <pwm_nrfx_pin_set>:
{
   1c0d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0da:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
	const struct pwm_nrfx_config *config = dev->config;
   1c0de:	6846      	ldr	r6, [r0, #4]
{
   1c0e0:	460f      	mov	r7, r1
   1c0e2:	4690      	mov	r8, r2
	struct pwm_nrfx_data *data = dev->data;
   1c0e4:	68c1      	ldr	r1, [r0, #12]
{
   1c0e6:	4699      	mov	r9, r3
	if (flags) {
   1c0e8:	2c00      	cmp	r4, #0
   1c0ea:	d13b      	bne.n	1c164 <pwm_nrfx_pin_set+0x8e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   1c0ec:	1df2      	adds	r2, r6, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   1c0ee:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1c0f2:	2bff      	cmp	r3, #255	; 0xff
   1c0f4:	d003      	beq.n	1c0fe <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   1c0f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1c0fa:	429f      	cmp	r7, r3
   1c0fc:	d035      	beq.n	1c16a <pwm_nrfx_pin_set+0x94>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   1c0fe:	3401      	adds	r4, #1
   1c100:	b2e4      	uxtb	r4, r4
   1c102:	2c04      	cmp	r4, #4
   1c104:	d1f3      	bne.n	1c0ee <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
   1c106:	f06f 0015 	mvn.w	r0, #21
   1c10a:	e009      	b.n	1c120 <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1c10c:	2000      	movs	r0, #0
   1c10e:	e03c      	b.n	1c18a <pwm_nrfx_pin_set+0xb4>
		countertop >>= 1;
   1c110:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1c112:	2b08      	cmp	r3, #8
		countertop >>= 1;
   1c114:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1c118:	d152      	bne.n	1c1c0 <pwm_nrfx_pin_set+0xea>
   1c11a:	e7f4      	b.n	1c106 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
   1c11c:	b9a8      	cbnz	r0, 1c14a <pwm_nrfx_pin_set+0x74>
	return 0;
   1c11e:	2000      	movs	r0, #0
}
   1c120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
   1c124:	45c8      	cmp	r8, r9
   1c126:	d87d      	bhi.n	1c224 <pwm_nrfx_pin_set+0x14e>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1c128:	2301      	movs	r3, #1
   1c12a:	fa03 f707 	lsl.w	r7, r3, r7
    p_reg->OUTCLR = clr_mask;
   1c12e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1c132:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
   1c136:	4620      	mov	r0, r4
   1c138:	f7ff ffb8 	bl	1c0ac <any_other_channel_is_active>
   1c13c:	2800      	cmp	r0, #0
   1c13e:	d1ee      	bne.n	1c11e <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
   1c140:	4601      	mov	r1, r0
   1c142:	4630      	mov	r0, r6
   1c144:	f000 f9a2 	bl	1c48c <nrfx_pwm_stop>
   1c148:	e7e9      	b.n	1c11e <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   1c14a:	4630      	mov	r0, r6
   1c14c:	f7fc f954 	bl	183f8 <nrfx_pwm_is_stopped>
   1c150:	2800      	cmp	r0, #0
   1c152:	d0fa      	beq.n	1c14a <pwm_nrfx_pin_set+0x74>
			nrfx_pwm_simple_playback(&config->pwm,
   1c154:	2302      	movs	r3, #2
   1c156:	2201      	movs	r2, #1
   1c158:	f106 0118 	add.w	r1, r6, #24
   1c15c:	4630      	mov	r0, r6
   1c15e:	f7fc f90d 	bl	1837c <nrfx_pwm_simple_playback>
   1c162:	e7dc      	b.n	1c11e <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
   1c164:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c168:	e7da      	b.n	1c120 <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
   1c16a:	eb01 0a44 	add.w	sl, r1, r4, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   1c16e:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
   1c172:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   1c176:	b113      	cbz	r3, 1c17e <pwm_nrfx_pin_set+0xa8>
   1c178:	898a      	ldrh	r2, [r1, #12]
   1c17a:	429a      	cmp	r2, r3
   1c17c:	d8c6      	bhi.n	1c10c <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
   1c17e:	4620      	mov	r0, r4
   1c180:	f7ff ff94 	bl	1c0ac <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1c184:	f080 0001 	eor.w	r0, r0, #1
   1c188:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1c18a:	7bb5      	ldrb	r5, [r6, #14]
	if (period_cycles != data->period_cycles) {
   1c18c:	680b      	ldr	r3, [r1, #0]
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1c18e:	2d01      	cmp	r5, #1
		period_cycles /= 2;
   1c190:	bf04      	itt	eq
   1c192:	ea4f 0858 	moveq.w	r8, r8, lsr #1
		pulse_cycles /= 2;
   1c196:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != data->period_cycles) {
   1c19a:	4543      	cmp	r3, r8
   1c19c:	d022      	beq.n	1c1e4 <pwm_nrfx_pin_set+0x10e>
   1c19e:	2300      	movs	r3, #0
				data->current[i]
   1c1a0:	f101 0c04 	add.w	ip, r1, #4
		if (i != channel) {
   1c1a4:	b2da      	uxtb	r2, r3
   1c1a6:	42a2      	cmp	r2, r4
   1c1a8:	d005      	beq.n	1c1b6 <pwm_nrfx_pin_set+0xe0>
			uint16_t channel_pulse_cycle =
   1c1aa:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
   1c1ae:	f3c2 020e 	ubfx	r2, r2, #0, #15
   1c1b2:	2a00      	cmp	r2, #0
   1c1b4:	d1a7      	bne.n	1c106 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1c1b6:	3301      	adds	r3, #1
   1c1b8:	2b04      	cmp	r3, #4
   1c1ba:	d1f3      	bne.n	1c1a4 <pwm_nrfx_pin_set+0xce>
   1c1bc:	4642      	mov	r2, r8
   1c1be:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   1c1c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1c1c4:	fa5f fc83 	uxtb.w	ip, r3
   1c1c8:	d2a2      	bcs.n	1c110 <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
   1c1ca:	f881 c00e 	strb.w	ip, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
   1c1ce:	f8d6 c000 	ldr.w	ip, [r6]
			data->period_cycles = period_cycles;
   1c1d2:	f8c1 8000 	str.w	r8, [r1]
			data->countertop    = (uint16_t)countertop;
   1c1d6:	818a      	strh	r2, [r1, #12]
    p_reg->PRESCALER  = base_clock;
   1c1d8:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1c1dc:	f8cc 5504 	str.w	r5, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1c1e0:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
   1c1e4:	7b8d      	ldrb	r5, [r1, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   1c1e6:	45c8      	cmp	r8, r9
   1c1e8:	4643      	mov	r3, r8
   1c1ea:	bf28      	it	cs
   1c1ec:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
   1c1ee:	fa23 f505 	lsr.w	r5, r3, r5
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1c1f2:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
   1c1f6:	ea45 050b 	orr.w	r5, r5, fp
   1c1fa:	b2ad      	uxth	r5, r5
	data->current[channel] = (
   1c1fc:	f8aa 5004 	strh.w	r5, [sl, #4]
	uint16_t pulse_cycle =
   1c200:	f3c5 050e 	ubfx	r5, r5, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   1c204:	b115      	cbz	r5, 1c20c <pwm_nrfx_pin_set+0x136>
   1c206:	898a      	ldrh	r2, [r1, #12]
   1c208:	42aa      	cmp	r2, r5
   1c20a:	d887      	bhi.n	1c11c <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
   1c20c:	1932      	adds	r2, r6, r4
   1c20e:	f007 071f 	and.w	r7, r7, #31
   1c212:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
   1c216:	2b00      	cmp	r3, #0
   1c218:	d084      	beq.n	1c124 <pwm_nrfx_pin_set+0x4e>
			&& channel_inverted_state;
   1c21a:	45c8      	cmp	r8, r9
   1c21c:	d805      	bhi.n	1c22a <pwm_nrfx_pin_set+0x154>
   1c21e:	2a00      	cmp	r2, #0
   1c220:	db82      	blt.n	1c128 <pwm_nrfx_pin_set+0x52>
   1c222:	e002      	b.n	1c22a <pwm_nrfx_pin_set+0x154>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   1c224:	2a00      	cmp	r2, #0
   1c226:	f6bf af7f 	bge.w	1c128 <pwm_nrfx_pin_set+0x52>
    p_reg->OUTSET = set_mask;
   1c22a:	2301      	movs	r3, #1
   1c22c:	fa03 f707 	lsl.w	r7, r3, r7
   1c230:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1c234:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
}
   1c238:	e77d      	b.n	1c136 <pwm_nrfx_pin_set+0x60>

0001c23a <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1c23a:	6843      	ldr	r3, [r0, #4]
   1c23c:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1c23e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1c242:	05d2      	lsls	r2, r2, #23
   1c244:	d518      	bpl.n	1c278 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c246:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1c24a:	b1aa      	cbz	r2, 1c278 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1c24c:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c250:	f3ef 8211 	mrs	r2, BASEPRI
   1c254:	f381 8811 	msr	BASEPRI, r1
   1c258:	f3bf 8f6f 	isb	sy
   1c25c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c260:	b131      	cbz	r1, 1c270 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c262:	2100      	movs	r1, #0
   1c264:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1c268:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c26c:	2101      	movs	r1, #1
   1c26e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1c270:	f382 8811 	msr	BASEPRI, r2
   1c274:	f3bf 8f6f 	isb	sy
}
   1c278:	4770      	bx	lr

0001c27a <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1c27a:	68c2      	ldr	r2, [r0, #12]
{
   1c27c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1c27e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1c282:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1c286:	2000      	movs	r0, #0
   1c288:	4770      	bx	lr

0001c28a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1c28a:	6843      	ldr	r3, [r0, #4]
   1c28c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c28e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c292:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1c296:	4770      	bx	lr

0001c298 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1c298:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1c29a:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c29c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1c2a0:	b938      	cbnz	r0, 1c2b2 <is_tx_ready+0x1a>
   1c2a2:	7992      	ldrb	r2, [r2, #6]
   1c2a4:	b932      	cbnz	r2, 1c2b4 <is_tx_ready+0x1c>
   1c2a6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1c2aa:	3800      	subs	r0, #0
   1c2ac:	bf18      	it	ne
   1c2ae:	2001      	movne	r0, #1
   1c2b0:	4770      	bx	lr
   1c2b2:	2001      	movs	r0, #1
}
   1c2b4:	4770      	bx	lr

0001c2b6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1c2b6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1c2b8:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1c2ba:	681b      	ldr	r3, [r3, #0]
   1c2bc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c2c0:	b148      	cbz	r0, 1c2d6 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1c2c2:	7b52      	ldrb	r2, [r2, #13]
   1c2c4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2c6:	2000      	movs	r0, #0
   1c2c8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c2cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c2d0:	2201      	movs	r2, #1
   1c2d2:	601a      	str	r2, [r3, #0]
	return 0;
   1c2d4:	4770      	bx	lr
		return -1;
   1c2d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c2da:	4770      	bx	lr

0001c2dc <rng_driver_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   1c2dc:	07db      	lsls	r3, r3, #31
{
   1c2de:	b570      	push	{r4, r5, r6, lr}
   1c2e0:	460e      	mov	r6, r1
   1c2e2:	4615      	mov	r5, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   1c2e4:	d40f      	bmi.n	1c306 <rng_driver_get_entropy_isr+0x2a>
		errcode = MULTITHREADING_LOCK_ACQUIRE_NO_WAIT();
   1c2e6:	2000      	movs	r0, #0
   1c2e8:	2100      	movs	r1, #0
   1c2ea:	f7fb f973 	bl	175d4 <multithreading_lock_acquire>
		if (!errcode) {
   1c2ee:	4604      	mov	r4, r0
   1c2f0:	b938      	cbnz	r0, 1c302 <rng_driver_get_entropy_isr+0x26>
			errcode = sdc_soc_rand_vector_poll(buf, len);
   1c2f2:	4629      	mov	r1, r5
   1c2f4:	4630      	mov	r0, r6
   1c2f6:	f7f2 fc2f 	bl	eb58 <sdc_soc_rand_vector_poll>
   1c2fa:	4604      	mov	r4, r0
			MULTITHREADING_LOCK_RELEASE();
   1c2fc:	f7fb f972 	bl	175e4 <multithreading_lock_release>
	if (!errcode) {
   1c300:	b184      	cbz	r4, 1c324 <rng_driver_get_entropy_isr+0x48>
}
   1c302:	4620      	mov	r0, r4
   1c304:	bd70      	pop	{r4, r5, r6, pc}
		errcode = MULTITHREADING_LOCK_ACQUIRE_FOREVER_WAIT();
   1c306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c30a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c30e:	f7fb f961 	bl	175d4 <multithreading_lock_acquire>
		if (!errcode) {
   1c312:	4604      	mov	r4, r0
   1c314:	2800      	cmp	r0, #0
   1c316:	d1f4      	bne.n	1c302 <rng_driver_get_entropy_isr+0x26>
			sdc_soc_rand_vector_get(buf, len);
   1c318:	4629      	mov	r1, r5
   1c31a:	4630      	mov	r0, r6
   1c31c:	f7f2 fc03 	bl	eb26 <sdc_soc_rand_vector_get>
			MULTITHREADING_LOCK_RELEASE();
   1c320:	f7fb f960 	bl	175e4 <multithreading_lock_release>
		return len;
   1c324:	462c      	mov	r4, r5
   1c326:	e7ec      	b.n	1c302 <rng_driver_get_entropy_isr+0x26>

0001c328 <rng_driver_get_entropy>:
{
   1c328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);
   1c32c:	68c7      	ldr	r7, [r0, #12]
{
   1c32e:	460e      	mov	r6, r1
	uint32_t bytes_left = len;
   1c330:	4614      	mov	r4, r2
	while (bytes_left > 0) {
   1c332:	b1c4      	cbz	r4, 1c366 <rng_driver_get_entropy+0x3e>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   1c334:	fa1f f884 	uxth.w	r8, r4
			int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c33c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c340:	f7fb f948 	bl	175d4 <multithreading_lock_acquire>
			if (errcode) {
   1c344:	b980      	cbnz	r0, 1c368 <rng_driver_get_entropy+0x40>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   1c346:	4641      	mov	r1, r8
   1c348:	4630      	mov	r0, r6
   1c34a:	f7f2 fc05 	bl	eb58 <sdc_soc_rand_vector_poll>
   1c34e:	4605      	mov	r5, r0
			MULTITHREADING_LOCK_RELEASE();
   1c350:	f7fb f948 	bl	175e4 <multithreading_lock_release>
			if (!bytes_read) {
   1c354:	b955      	cbnz	r5, 1c36c <rng_driver_get_entropy+0x44>
	return z_impl_k_sem_take(sem, timeout);
   1c356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c35a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c35e:	4638      	mov	r0, r7
   1c360:	f7fc fe00 	bl	18f64 <z_impl_k_sem_take>
		while (bytes_read == 0) {
   1c364:	e7e8      	b.n	1c338 <rng_driver_get_entropy+0x10>
	return 0;
   1c366:	4620      	mov	r0, r4
}
   1c368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_dst += bytes_read;
   1c36c:	442e      	add	r6, r5
		bytes_left -= bytes_read;
   1c36e:	1b64      	subs	r4, r4, r5
   1c370:	e7df      	b.n	1c332 <rng_driver_get_entropy+0xa>

0001c372 <rng_driver_init>:

static int rng_driver_init(const struct device *dev)
{
   1c372:	b508      	push	{r3, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);

	k_sem_init(&rng_dev->sem_sync, 0, 1);
   1c374:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c376:	2201      	movs	r2, #1
   1c378:	2100      	movs	r1, #0
   1c37a:	f000 fae8 	bl	1c94e <z_impl_k_sem_init>

	IRQ_CONNECT(RNG_IRQn,
   1c37e:	2200      	movs	r2, #0
   1c380:	2105      	movs	r1, #5
   1c382:	200d      	movs	r0, #13
   1c384:	f7f6 feda 	bl	1313c <z_arm_irq_priority_set>
		    rng_driver_isr,
		    NULL,
		    0);

	return 0;
}
   1c388:	2000      	movs	r0, #0
   1c38a:	bd08      	pop	{r3, pc}

0001c38c <gpio_pin_configure>:
{
   1c38c:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   1c38e:	68c5      	ldr	r5, [r0, #12]
{
   1c390:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   1c392:	6883      	ldr	r3, [r0, #8]
   1c394:	681b      	ldr	r3, [r3, #0]
   1c396:	4798      	blx	r3
	if (ret != 0) {
   1c398:	b930      	cbnz	r0, 1c3a8 <gpio_pin_configure+0x1c>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c39a:	2301      	movs	r3, #1
   1c39c:	fa03 f104 	lsl.w	r1, r3, r4
   1c3a0:	682b      	ldr	r3, [r5, #0]
   1c3a2:	ea23 0301 	bic.w	r3, r3, r1
   1c3a6:	602b      	str	r3, [r5, #0]
}
   1c3a8:	bd38      	pop	{r3, r4, r5, pc}

0001c3aa <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1c3aa:	2101      	movs	r1, #1
   1c3ac:	f7fb b8f6 	b.w	1759c <dk_set_led>

0001c3b0 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1c3b0:	2100      	movs	r1, #0
   1c3b2:	f7fb b8f3 	b.w	1759c <dk_set_led>

0001c3b6 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1c3b6:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   1c3b8:	2000      	movs	r0, #0
   1c3ba:	f7f7 fa07 	bl	137cc <sys_arch_reboot>

0001c3be <sdc_assertion_handler>:
	k_oops();
   1c3be:	4040      	eors	r0, r0
   1c3c0:	f380 8811 	msr	BASEPRI, r0
   1c3c4:	f04f 0003 	mov.w	r0, #3
   1c3c8:	df02      	svc	2
}
   1c3ca:	4770      	bx	lr

0001c3cc <m_assert_handler>:
	k_oops();
   1c3cc:	4040      	eors	r0, r0
   1c3ce:	f380 8811 	msr	BASEPRI, r0
   1c3d2:	f04f 0003 	mov.w	r0, #3
   1c3d6:	df02      	svc	2
}
   1c3d8:	4770      	bx	lr

0001c3da <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1c3da:	4668      	mov	r0, sp
   1c3dc:	f020 0107 	bic.w	r1, r0, #7
   1c3e0:	468d      	mov	sp, r1
   1c3e2:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1c3e4:	f7e6 f9a2 	bl	272c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1c3e8:	f7f6 fec2 	bl	13170 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1c3ec:	f7f6 ffde 	bl	133ac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1c3f0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c3f4:	4685      	mov	sp, r0
   1c3f6:	4770      	bx	lr

0001c3f8 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1c3f8:	4668      	mov	r0, sp
   1c3fa:	f020 0107 	bic.w	r1, r0, #7
   1c3fe:	468d      	mov	sp, r1
   1c400:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1c402:	f7e6 f945 	bl	2690 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1c406:	f7f6 feb3 	bl	13170 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1c40a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c40e:	4685      	mov	sp, r0
   1c410:	4770      	bx	lr

0001c412 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1c412:	4668      	mov	r0, sp
   1c414:	f020 0107 	bic.w	r1, r0, #7
   1c418:	468d      	mov	sp, r1
   1c41a:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1c41c:	f7f2 f9b1 	bl	e782 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1c420:	f7f6 fea6 	bl	13170 <_arch_isr_direct_pm>
   1c424:	f7f6 ffc2 	bl	133ac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1c428:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c42c:	4685      	mov	sp, r0
   1c42e:	4770      	bx	lr

0001c430 <nrfx_clock_stop>:
	switch (domain) {
   1c430:	2801      	cmp	r0, #1
   1c432:	d101      	bne.n	1c438 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1c434:	f7e6 bf60 	b.w	32f8 <mpsl_clock_hfclk_release>
}
   1c438:	4770      	bx	lr

0001c43a <nrfx_clock_enable>:
}
   1c43a:	4770      	bx	lr

0001c43c <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1c43c:	f7e6 bdaa 	b.w	2f94 <MPSL_IRQ_CLOCK_Handler>

0001c440 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1c440:	4700      	bx	r0

0001c442 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1c442:	f000 ba9a 	b.w	1c97a <z_impl_k_busy_wait>

0001c446 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   1c446:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1c448:	2402      	movs	r4, #2
   1c44a:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
   1c44c:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
   1c44e:	6809      	ldr	r1, [r1, #0]
   1c450:	b171      	cbz	r1, 1c470 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   1c452:	f012 0f04 	tst.w	r2, #4
   1c456:	bf0c      	ite	eq
   1c458:	2182      	moveq	r1, #130	; 0x82
   1c45a:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   1c45c:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   1c45e:	bf48      	it	mi
   1c460:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   1c464:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   1c466:	bf48      	it	mi
   1c468:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   1c46c:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   1c470:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c472:	f04f 0100 	mov.w	r1, #0
   1c476:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c47a:	bf58      	it	pl
   1c47c:	2201      	movpl	r2, #1
   1c47e:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
   1c482:	bf56      	itet	pl
   1c484:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   1c486:	18c0      	addmi	r0, r0, r3
    return 0;
   1c488:	4608      	movpl	r0, r1
}
   1c48a:	bd10      	pop	{r4, pc}

0001c48c <nrfx_pwm_stop>:
{
   1c48c:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   1c48e:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
   1c490:	2200      	movs	r2, #0
   1c492:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c496:	2201      	movs	r2, #1
   1c498:	605a      	str	r2, [r3, #4]
{
   1c49a:	4605      	mov	r5, r0
   1c49c:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   1c49e:	f7fb ffab 	bl	183f8 <nrfx_pwm_is_stopped>
   1c4a2:	b938      	cbnz	r0, 1c4b4 <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
   1c4a4:	4628      	mov	r0, r5
   1c4a6:	f7fb ffa7 	bl	183f8 <nrfx_pwm_is_stopped>
   1c4aa:	b918      	cbnz	r0, 1c4b4 <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
   1c4ac:	2c00      	cmp	r4, #0
   1c4ae:	d1f9      	bne.n	1c4a4 <nrfx_pwm_stop+0x18>
}
   1c4b0:	4620      	mov	r0, r4
   1c4b2:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   1c4b4:	2401      	movs	r4, #1
   1c4b6:	e7fb      	b.n	1c4b0 <nrfx_pwm_stop+0x24>

0001c4b8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c4ba:	4605      	mov	r5, r0
   1c4bc:	460e      	mov	r6, r1
	__asm__ volatile(
   1c4be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c4c2:	f3ef 8711 	mrs	r7, BASEPRI
   1c4c6:	f383 8811 	msr	BASEPRI, r3
   1c4ca:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1c4ce:	f7fc fd1d 	bl	18f0c <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1c4d2:	4631      	mov	r1, r6
   1c4d4:	4604      	mov	r4, r0
   1c4d6:	4628      	mov	r0, r5
   1c4d8:	f7ff ff6d 	bl	1c3b6 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1c4dc:	f387 8811 	msr	BASEPRI, r7
   1c4e0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1c4e4:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1c4e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c4ea:	f7f7 b859 	b.w	135a0 <z_impl_k_thread_abort>

0001c4ee <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1c4ee:	f7fd bcdc 	b.w	19eaa <z_clock_idle_exit>

0001c4f2 <k_heap_init>:
{
   1c4f2:	b410      	push	{r4}
   1c4f4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1c4f8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1c4fc:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1c4fe:	f7fd bb8e 	b.w	19c1e <sys_heap_init>

0001c502 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   1c502:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c506:	4604      	mov	r4, r0
   1c508:	b085      	sub	sp, #20
   1c50a:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1c50c:	4610      	mov	r0, r2
   1c50e:	4619      	mov	r1, r3
   1c510:	f000 fafe 	bl	1cb10 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1c514:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1c518:	4605      	mov	r5, r0
   1c51a:	460f      	mov	r7, r1
	__asm__ volatile(
   1c51c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c520:	f3ef 8311 	mrs	r3, BASEPRI
   1c524:	f382 8811 	msr	BASEPRI, r2
   1c528:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1c52c:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   1c530:	4631      	mov	r1, r6
   1c532:	4620      	mov	r0, r4
   1c534:	9303      	str	r3, [sp, #12]
   1c536:	f7fd fb3e 	bl	19bb6 <sys_heap_alloc>
   1c53a:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   1c53c:	f7fc ffce 	bl	194dc <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1c540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c544:	b13a      	cbz	r2, 1c556 <k_heap_alloc+0x54>
	__asm__ volatile(
   1c546:	f383 8811 	msr	BASEPRI, r3
   1c54a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1c54e:	4610      	mov	r0, r2
   1c550:	b005      	add	sp, #20
   1c552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1c556:	ebb5 0800 	subs.w	r8, r5, r0
   1c55a:	eb67 0901 	sbc.w	r9, r7, r1
   1c55e:	f1b8 0f01 	cmp.w	r8, #1
   1c562:	f179 0100 	sbcs.w	r1, r9, #0
   1c566:	dbee      	blt.n	1c546 <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1c568:	e9cd 8900 	strd	r8, r9, [sp]
   1c56c:	465a      	mov	r2, fp
   1c56e:	4619      	mov	r1, r3
   1c570:	4650      	mov	r0, sl
   1c572:	f7fc fc0f 	bl	18d94 <z_pend_curr>
	__asm__ volatile(
   1c576:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c57a:	f3ef 8311 	mrs	r3, BASEPRI
   1c57e:	f382 8811 	msr	BASEPRI, r2
   1c582:	f3bf 8f6f 	isb	sy
   1c586:	e7d3      	b.n	1c530 <k_heap_alloc+0x2e>

0001c588 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   1c588:	b538      	push	{r3, r4, r5, lr}
   1c58a:	4604      	mov	r4, r0
   1c58c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c590:	f3ef 8511 	mrs	r5, BASEPRI
   1c594:	f383 8811 	msr	BASEPRI, r3
   1c598:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1c59c:	f7fd fab8 	bl	19b10 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1c5a0:	f104 000c 	add.w	r0, r4, #12
   1c5a4:	f000 f9c3 	bl	1c92e <z_unpend_all>
   1c5a8:	b130      	cbz	r0, 1c5b8 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1c5aa:	4629      	mov	r1, r5
   1c5ac:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1c5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1c5b4:	f7fc b9a6 	b.w	18904 <z_reschedule>
	__asm__ volatile(
   1c5b8:	f385 8811 	msr	BASEPRI, r5
   1c5bc:	f3bf 8f6f 	isb	sy
}
   1c5c0:	bd38      	pop	{r3, r4, r5, pc}

0001c5c2 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   1c5c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c5c4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   1c5c8:	6800      	ldr	r0, [r0, #0]
   1c5ca:	6048      	str	r0, [r1, #4]
{
   1c5cc:	4614      	mov	r4, r2
   1c5ce:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   1c5d0:	4632      	mov	r2, r6
   1c5d2:	463b      	mov	r3, r7
   1c5d4:	4621      	mov	r1, r4
   1c5d6:	f7ff ff94 	bl	1c502 <k_heap_alloc>
   1c5da:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   1c5dc:	b144      	cbz	r4, 1c5f0 <k_mem_pool_alloc+0x2e>
   1c5de:	b938      	cbnz	r0, 1c5f0 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   1c5e0:	ea56 0307 	orrs.w	r3, r6, r7
   1c5e4:	bf0c      	ite	eq
   1c5e6:	f06f 000b 	mvneq.w	r0, #11
   1c5ea:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   1c5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   1c5f0:	2000      	movs	r0, #0
   1c5f2:	e7fc      	b.n	1c5ee <k_mem_pool_alloc+0x2c>

0001c5f4 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   1c5f4:	e9d0 1000 	ldrd	r1, r0, [r0]
   1c5f8:	f7ff bfc6 	b.w	1c588 <k_heap_free>

0001c5fc <queue_insert>:
{
   1c5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c600:	4699      	mov	r9, r3
   1c602:	4604      	mov	r4, r0
   1c604:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1c608:	460d      	mov	r5, r1
   1c60a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c60c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1c610:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c614:	f3ef 8711 	mrs	r7, BASEPRI
   1c618:	f382 8811 	msr	BASEPRI, r2
   1c61c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1c620:	b103      	cbz	r3, 1c624 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1c622:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1c624:	4630      	mov	r0, r6
   1c626:	f000 f95d 	bl	1c8e4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1c62a:	b160      	cbz	r0, 1c646 <queue_insert+0x4a>
   1c62c:	2400      	movs	r4, #0
   1c62e:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   1c632:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1c636:	f000 f8fa 	bl	1c82e <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1c63a:	4630      	mov	r0, r6
   1c63c:	4639      	mov	r1, r7
   1c63e:	f7fc f961 	bl	18904 <z_reschedule>
	return 0;
   1c642:	2000      	movs	r0, #0
   1c644:	e00c      	b.n	1c660 <queue_insert+0x64>
	if (alloc) {
   1c646:	f1b9 0f00 	cmp.w	r9, #0
   1c64a:	d01b      	beq.n	1c684 <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   1c64c:	2008      	movs	r0, #8
   1c64e:	f7fc ffe3 	bl	19618 <z_thread_malloc>
		if (anode == NULL) {
   1c652:	b938      	cbnz	r0, 1c664 <queue_insert+0x68>
	__asm__ volatile(
   1c654:	f387 8811 	msr	BASEPRI, r7
   1c658:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1c65c:	f06f 000b 	mvn.w	r0, #11
}
   1c660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1c664:	2301      	movs	r3, #1
		anode->data = data;
   1c666:	f8c0 8004 	str.w	r8, [r0, #4]
   1c66a:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1c66c:	6803      	ldr	r3, [r0, #0]
   1c66e:	f003 0203 	and.w	r2, r3, #3
   1c672:	b95d      	cbnz	r5, 1c68c <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c674:	6823      	ldr	r3, [r4, #0]
   1c676:	4313      	orrs	r3, r2
   1c678:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1c67a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1c67c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1c67e:	b973      	cbnz	r3, 1c69e <queue_insert+0xa2>
	list->tail = node;
   1c680:	6060      	str	r0, [r4, #4]
}
   1c682:	e00c      	b.n	1c69e <queue_insert+0xa2>
	node->next_and_flags = flags;
   1c684:	f8c8 9000 	str.w	r9, [r8]
}
   1c688:	4640      	mov	r0, r8
   1c68a:	e7ef      	b.n	1c66c <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c68c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1c68e:	f033 0303 	bics.w	r3, r3, #3
   1c692:	d110      	bne.n	1c6b6 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c694:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1c696:	6862      	ldr	r2, [r4, #4]
   1c698:	b93a      	cbnz	r2, 1c6aa <queue_insert+0xae>
	list->head = node;
   1c69a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1c69e:	2104      	movs	r1, #4
   1c6a0:	f104 0010 	add.w	r0, r4, #16
   1c6a4:	f000 fba1 	bl	1cdea <z_handle_obj_poll_events>
   1c6a8:	e7c7      	b.n	1c63a <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c6aa:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c6ac:	f003 0303 	and.w	r3, r3, #3
   1c6b0:	4303      	orrs	r3, r0
   1c6b2:	6013      	str	r3, [r2, #0]
   1c6b4:	e7e4      	b.n	1c680 <queue_insert+0x84>
   1c6b6:	4313      	orrs	r3, r2
   1c6b8:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c6ba:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c6bc:	f003 0303 	and.w	r3, r3, #3
   1c6c0:	4303      	orrs	r3, r0
   1c6c2:	602b      	str	r3, [r5, #0]
}
   1c6c4:	e7eb      	b.n	1c69e <queue_insert+0xa2>

0001c6c6 <z_queue_node_peek>:
{
   1c6c6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1c6c8:	4604      	mov	r4, r0
   1c6ca:	b130      	cbz	r0, 1c6da <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c6cc:	6802      	ldr	r2, [r0, #0]
   1c6ce:	0793      	lsls	r3, r2, #30
   1c6d0:	d003      	beq.n	1c6da <z_queue_node_peek+0x14>
		ret = anode->data;
   1c6d2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1c6d4:	b109      	cbz	r1, 1c6da <z_queue_node_peek+0x14>
			k_free(anode);
   1c6d6:	f000 fbae 	bl	1ce36 <k_free>
}
   1c6da:	4620      	mov	r0, r4
   1c6dc:	bd10      	pop	{r4, pc}

0001c6de <z_impl_k_queue_init>:
	list->head = NULL;
   1c6de:	2300      	movs	r3, #0
	list->tail = NULL;
   1c6e0:	e9c0 3300 	strd	r3, r3, [r0]
   1c6e4:	f100 0308 	add.w	r3, r0, #8
   1c6e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1c6ec:	f100 0310 	add.w	r3, r0, #16
   1c6f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1c6f4:	4770      	bx	lr

0001c6f6 <k_queue_append>:
{
   1c6f6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1c6f8:	2301      	movs	r3, #1
   1c6fa:	9300      	str	r3, [sp, #0]
   1c6fc:	2300      	movs	r3, #0
{
   1c6fe:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1c700:	4619      	mov	r1, r3
   1c702:	f7ff ff7b 	bl	1c5fc <queue_insert>
}
   1c706:	b003      	add	sp, #12
   1c708:	f85d fb04 	ldr.w	pc, [sp], #4

0001c70c <k_queue_prepend>:
{
   1c70c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1c70e:	2300      	movs	r3, #0
{
   1c710:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1c712:	9300      	str	r3, [sp, #0]
   1c714:	4619      	mov	r1, r3
   1c716:	f7ff ff71 	bl	1c5fc <queue_insert>
}
   1c71a:	b003      	add	sp, #12
   1c71c:	f85d fb04 	ldr.w	pc, [sp], #4

0001c720 <k_queue_append_list>:
{
   1c720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c724:	4605      	mov	r5, r0
   1c726:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1c728:	460c      	mov	r4, r1
   1c72a:	b391      	cbz	r1, 1c792 <k_queue_append_list+0x72>
   1c72c:	b38a      	cbz	r2, 1c792 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c72e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1c732:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c736:	f3ef 8811 	mrs	r8, BASEPRI
   1c73a:	f383 8811 	msr	BASEPRI, r3
   1c73e:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1c742:	4638      	mov	r0, r7
   1c744:	f000 f8ce 	bl	1c8e4 <z_unpend_first_thread>
   1c748:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1c74c:	b920      	cbnz	r0, 1c758 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1c74e:	686b      	ldr	r3, [r5, #4]
   1c750:	b9cb      	cbnz	r3, 1c786 <k_queue_append_list+0x66>
	list->head = node;
   1c752:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c754:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1c756:	e00a      	b.n	1c76e <k_queue_append_list+0x4e>
   1c758:	6144      	str	r4, [r0, #20]
   1c75a:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   1c75e:	f000 f866 	bl	1c82e <z_ready_thread>
		head = *(void **)head;
   1c762:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1c764:	4638      	mov	r0, r7
   1c766:	f000 f8bd 	bl	1c8e4 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1c76a:	2c00      	cmp	r4, #0
   1c76c:	d1ee      	bne.n	1c74c <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1c76e:	2104      	movs	r1, #4
   1c770:	f105 0010 	add.w	r0, r5, #16
   1c774:	f000 fb39 	bl	1cdea <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1c778:	4638      	mov	r0, r7
   1c77a:	4641      	mov	r1, r8
   1c77c:	f7fc f8c2 	bl	18904 <z_reschedule>
	return 0;
   1c780:	2000      	movs	r0, #0
}
   1c782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c786:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c788:	f001 0103 	and.w	r1, r1, #3
   1c78c:	430c      	orrs	r4, r1
   1c78e:	601c      	str	r4, [r3, #0]
}
   1c790:	e7e0      	b.n	1c754 <k_queue_append_list+0x34>
		return -EINVAL;
   1c792:	f06f 0015 	mvn.w	r0, #21
   1c796:	e7f4      	b.n	1c782 <k_queue_append_list+0x62>

0001c798 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1c798:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1c79c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1c7a0:	4298      	cmp	r0, r3
   1c7a2:	bfac      	ite	ge
   1c7a4:	2000      	movge	r0, #0
   1c7a6:	2001      	movlt	r0, #1
   1c7a8:	4770      	bx	lr

0001c7aa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1c7aa:	4603      	mov	r3, r0
   1c7ac:	b920      	cbnz	r0, 1c7b8 <z_reschedule_irqlock+0xe>
   1c7ae:	f3ef 8205 	mrs	r2, IPSR
   1c7b2:	b90a      	cbnz	r2, 1c7b8 <z_reschedule_irqlock+0xe>
   1c7b4:	f7f6 bc96 	b.w	130e4 <arch_swap>
	__asm__ volatile(
   1c7b8:	f383 8811 	msr	BASEPRI, r3
   1c7bc:	f3bf 8f6f 	isb	sy
}
   1c7c0:	4770      	bx	lr

0001c7c2 <z_reschedule_unlocked>:
	__asm__ volatile(
   1c7c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c7c6:	f3ef 8011 	mrs	r0, BASEPRI
   1c7ca:	f383 8811 	msr	BASEPRI, r3
   1c7ce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1c7d2:	f7ff bfea 	b.w	1c7aa <z_reschedule_irqlock>

0001c7d6 <unpend_thread_no_timeout>:
{
   1c7d6:	4601      	mov	r1, r0
   1c7d8:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1c7da:	6880      	ldr	r0, [r0, #8]
   1c7dc:	f7fc f8b8 	bl	18950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c7e0:	7b4b      	ldrb	r3, [r1, #13]
   1c7e2:	f023 0302 	bic.w	r3, r3, #2
   1c7e6:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   1c7e8:	2300      	movs	r3, #0
   1c7ea:	608b      	str	r3, [r1, #8]
}
   1c7ec:	bd08      	pop	{r3, pc}

0001c7ee <z_unpend_thread>:
{
   1c7ee:	b538      	push	{r3, r4, r5, lr}
   1c7f0:	4604      	mov	r4, r0
   1c7f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c7f6:	f3ef 8511 	mrs	r5, BASEPRI
   1c7fa:	f383 8811 	msr	BASEPRI, r3
   1c7fe:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1c802:	f7ff ffe8 	bl	1c7d6 <unpend_thread_no_timeout>
	__asm__ volatile(
   1c806:	f385 8811 	msr	BASEPRI, r5
   1c80a:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1c80e:	f104 0018 	add.w	r0, r4, #24
}
   1c812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c816:	f000 b937 	b.w	1ca88 <z_abort_timeout>

0001c81a <z_priq_dumb_best>:
{
   1c81a:	4603      	mov	r3, r0
	return list->head == list;
   1c81c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c81e:	4283      	cmp	r3, r0
   1c820:	d003      	beq.n	1c82a <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1c822:	2800      	cmp	r0, #0
   1c824:	bf38      	it	cc
   1c826:	2000      	movcc	r0, #0
   1c828:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1c82a:	2000      	movs	r0, #0
}
   1c82c:	4770      	bx	lr

0001c82e <z_ready_thread>:
{
   1c82e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c830:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c834:	f3ef 8411 	mrs	r4, BASEPRI
   1c838:	f383 8811 	msr	BASEPRI, r3
   1c83c:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   1c840:	f7fc f8e0 	bl	18a04 <ready_thread>
	__asm__ volatile(
   1c844:	f384 8811 	msr	BASEPRI, r4
   1c848:	f3bf 8f6f 	isb	sy
}
   1c84c:	bd10      	pop	{r4, pc}

0001c84e <z_thread_timeout>:
{
   1c84e:	b570      	push	{r4, r5, r6, lr}
   1c850:	4604      	mov	r4, r0
	__asm__ volatile(
   1c852:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c856:	f3ef 8611 	mrs	r6, BASEPRI
   1c85a:	f383 8811 	msr	BASEPRI, r3
   1c85e:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1c862:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1c866:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   1c86a:	b113      	cbz	r3, 1c872 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   1c86c:	4628      	mov	r0, r5
   1c86e:	f7ff ffb2 	bl	1c7d6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1c872:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1c876:	f023 0314 	bic.w	r3, r3, #20
   1c87a:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   1c87e:	4628      	mov	r0, r5
   1c880:	f7fc f8c0 	bl	18a04 <ready_thread>
	__asm__ volatile(
   1c884:	f386 8811 	msr	BASEPRI, r6
   1c888:	f3bf 8f6f 	isb	sy
}
   1c88c:	bd70      	pop	{r4, r5, r6, pc}

0001c88e <add_to_waitq_locked>:
{
   1c88e:	b538      	push	{r3, r4, r5, lr}
   1c890:	4604      	mov	r4, r0
   1c892:	460d      	mov	r5, r1
	unready_thread(thread);
   1c894:	f7fc fa3e 	bl	18d14 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1c898:	7b63      	ldrb	r3, [r4, #13]
   1c89a:	f043 0302 	orr.w	r3, r3, #2
   1c89e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1c8a0:	b1c5      	cbz	r5, 1c8d4 <add_to_waitq_locked+0x46>
	return list->head == list;
   1c8a2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1c8a4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c8a6:	429d      	cmp	r5, r3
   1c8a8:	bf08      	it	eq
   1c8aa:	2300      	moveq	r3, #0
   1c8ac:	2b00      	cmp	r3, #0
   1c8ae:	bf38      	it	cc
   1c8b0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c8b2:	b183      	cbz	r3, 1c8d6 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c8b4:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1c8b8:	f993 200e 	ldrsb.w	r2, [r3, #14]
   1c8bc:	4291      	cmp	r1, r2
   1c8be:	db04      	blt.n	1c8ca <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   1c8c0:	686a      	ldr	r2, [r5, #4]
   1c8c2:	429a      	cmp	r2, r3
   1c8c4:	d007      	beq.n	1c8d6 <add_to_waitq_locked+0x48>
   1c8c6:	681b      	ldr	r3, [r3, #0]
   1c8c8:	e7f3      	b.n	1c8b2 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   1c8ca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c8cc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1c8d0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c8d2:	605c      	str	r4, [r3, #4]
}
   1c8d4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   1c8d6:	686b      	ldr	r3, [r5, #4]
   1c8d8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1c8da:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1c8dc:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1c8de:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c8e0:	606c      	str	r4, [r5, #4]
   1c8e2:	e7f7      	b.n	1c8d4 <add_to_waitq_locked+0x46>

0001c8e4 <z_unpend_first_thread>:
{
   1c8e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1c8e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c8ea:	f3ef 8211 	mrs	r2, BASEPRI
   1c8ee:	f383 8811 	msr	BASEPRI, r3
   1c8f2:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1c8f6:	f7ff ff90 	bl	1c81a <z_priq_dumb_best>
   1c8fa:	4604      	mov	r4, r0
	__asm__ volatile(
   1c8fc:	f382 8811 	msr	BASEPRI, r2
   1c900:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1c904:	b188      	cbz	r0, 1c92a <z_unpend_first_thread+0x46>
	__asm__ volatile(
   1c906:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c90a:	f3ef 8511 	mrs	r5, BASEPRI
   1c90e:	f383 8811 	msr	BASEPRI, r3
   1c912:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1c916:	f7ff ff5e 	bl	1c7d6 <unpend_thread_no_timeout>
	__asm__ volatile(
   1c91a:	f385 8811 	msr	BASEPRI, r5
   1c91e:	f3bf 8f6f 	isb	sy
   1c922:	f104 0018 	add.w	r0, r4, #24
   1c926:	f000 f8af 	bl	1ca88 <z_abort_timeout>
}
   1c92a:	4620      	mov	r0, r4
   1c92c:	bd38      	pop	{r3, r4, r5, pc}

0001c92e <z_unpend_all>:
{
   1c92e:	b538      	push	{r3, r4, r5, lr}
   1c930:	4605      	mov	r5, r0
	int need_sched = 0;
   1c932:	2000      	movs	r0, #0
	return list->head == list;
   1c934:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c936:	42a5      	cmp	r5, r4
   1c938:	d000      	beq.n	1c93c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c93a:	b904      	cbnz	r4, 1c93e <z_unpend_all+0x10>
}
   1c93c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1c93e:	4620      	mov	r0, r4
   1c940:	f7ff ff55 	bl	1c7ee <z_unpend_thread>
		z_ready_thread(thread);
   1c944:	4620      	mov	r0, r4
   1c946:	f7ff ff72 	bl	1c82e <z_ready_thread>
		need_sched = 1;
   1c94a:	2001      	movs	r0, #1
   1c94c:	e7f2      	b.n	1c934 <z_unpend_all+0x6>

0001c94e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1c94e:	b15a      	cbz	r2, 1c968 <z_impl_k_sem_init+0x1a>
   1c950:	428a      	cmp	r2, r1
   1c952:	d309      	bcc.n	1c968 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1c954:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1c958:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1c95c:	e9c0 0000 	strd	r0, r0, [r0]
   1c960:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1c964:	2000      	movs	r0, #0
   1c966:	4770      	bx	lr
		return -EINVAL;
   1c968:	f06f 0015 	mvn.w	r0, #21
}
   1c96c:	4770      	bx	lr

0001c96e <k_is_in_isr>:
   1c96e:	f3ef 8005 	mrs	r0, IPSR
}
   1c972:	3800      	subs	r0, #0
   1c974:	bf18      	it	ne
   1c976:	2001      	movne	r0, #1
   1c978:	4770      	bx	lr

0001c97a <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1c97a:	b108      	cbz	r0, 1c980 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1c97c:	f7f6 bf3c 	b.w	137f8 <arch_busy_wait>
}
   1c980:	4770      	bx	lr

0001c982 <z_impl_k_thread_name_set>:
}
   1c982:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1c986:	4770      	bx	lr

0001c988 <k_work_submit_to_queue>:
{
   1c988:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c98a:	f101 0308 	add.w	r3, r1, #8
   1c98e:	f3bf 8f5b 	dmb	ish
   1c992:	e853 2f00 	ldrex	r2, [r3]
   1c996:	f042 0c01 	orr.w	ip, r2, #1
   1c99a:	e843 ce00 	strex	lr, ip, [r3]
   1c99e:	f1be 0f00 	cmp.w	lr, #0
   1c9a2:	d1f6      	bne.n	1c992 <k_work_submit_to_queue+0xa>
   1c9a4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1c9a8:	07d3      	lsls	r3, r2, #31
   1c9aa:	d403      	bmi.n	1c9b4 <k_work_submit_to_queue+0x2c>
}
   1c9ac:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1c9b0:	f7ff bea1 	b.w	1c6f6 <k_queue_append>
}
   1c9b4:	f85d fb04 	ldr.w	pc, [sp], #4

0001c9b8 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1c9b8:	f1a0 0110 	sub.w	r1, r0, #16
   1c9bc:	6980      	ldr	r0, [r0, #24]
   1c9be:	f7ff bfe3 	b.w	1c988 <k_work_submit_to_queue>

0001c9c2 <work_cancel>:
{
   1c9c2:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c9c4:	f3bf 8f5b 	dmb	ish
   1c9c8:	6883      	ldr	r3, [r0, #8]
   1c9ca:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1c9ce:	07db      	lsls	r3, r3, #31
{
   1c9d0:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1c9d2:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   1c9d6:	d532      	bpl.n	1ca3e <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1c9d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1c9da:	6813      	ldr	r3, [r2, #0]
   1c9dc:	2100      	movs	r1, #0
   1c9de:	b913      	cbnz	r3, 1c9e6 <work_cancel+0x24>
			return -EINVAL;
   1c9e0:	f06f 0015 	mvn.w	r0, #21
}
   1c9e4:	bd70      	pop	{r4, r5, r6, pc}
   1c9e6:	429c      	cmp	r4, r3
   1c9e8:	d124      	bne.n	1ca34 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   1c9ea:	6823      	ldr	r3, [r4, #0]
   1c9ec:	6856      	ldr	r6, [r2, #4]
   1c9ee:	f023 0003 	bic.w	r0, r3, #3
   1c9f2:	b9b1      	cbnz	r1, 1ca22 <work_cancel+0x60>
   1c9f4:	42b4      	cmp	r4, r6
	list->head = node;
   1c9f6:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1c9f8:	d100      	bne.n	1c9fc <work_cancel+0x3a>
	list->tail = node;
   1c9fa:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c9fc:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c9fe:	f003 0303 	and.w	r3, r3, #3
   1ca02:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1ca04:	2000      	movs	r0, #0
   1ca06:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ca08:	f3bf 8f5b 	dmb	ish
   1ca0c:	e855 3f00 	ldrex	r3, [r5]
   1ca10:	f023 0301 	bic.w	r3, r3, #1
   1ca14:	e845 3200 	strex	r2, r3, [r5]
   1ca18:	2a00      	cmp	r2, #0
   1ca1a:	d1f7      	bne.n	1ca0c <work_cancel+0x4a>
   1ca1c:	f3bf 8f5b 	dmb	ish
   1ca20:	e7e0      	b.n	1c9e4 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ca22:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ca24:	f003 0303 	and.w	r3, r3, #3
   1ca28:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   1ca2a:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ca2c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1ca2e:	bf08      	it	eq
   1ca30:	6051      	streq	r1, [r2, #4]
}
   1ca32:	e7e3      	b.n	1c9fc <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ca34:	6818      	ldr	r0, [r3, #0]
   1ca36:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1ca38:	f020 0303 	bic.w	r3, r0, #3
   1ca3c:	e7cf      	b.n	1c9de <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   1ca3e:	3010      	adds	r0, #16
   1ca40:	f000 f822 	bl	1ca88 <z_abort_timeout>
		if (err) {
   1ca44:	2800      	cmp	r0, #0
   1ca46:	d0dd      	beq.n	1ca04 <work_cancel+0x42>
			return -EALREADY;
   1ca48:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1ca4c:	e7ca      	b.n	1c9e4 <work_cancel+0x22>

0001ca4e <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1ca4e:	2300      	movs	r3, #0
   1ca50:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   1ca54:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1ca58:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   1ca5a:	6283      	str	r3, [r0, #40]	; 0x28
}
   1ca5c:	4770      	bx	lr

0001ca5e <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1ca5e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ca60:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ca64:	f3ef 8411 	mrs	r4, BASEPRI
   1ca68:	f382 8811 	msr	BASEPRI, r2
   1ca6c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   1ca70:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1ca72:	b133      	cbz	r3, 1ca82 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   1ca74:	f7ff ffa5 	bl	1c9c2 <work_cancel>
	__asm__ volatile(
   1ca78:	f384 8811 	msr	BASEPRI, r4
   1ca7c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   1ca80:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1ca82:	f06f 0015 	mvn.w	r0, #21
   1ca86:	e7f7      	b.n	1ca78 <k_delayed_work_cancel+0x1a>

0001ca88 <z_abort_timeout>:
{
   1ca88:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ca8a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ca8e:	f3ef 8411 	mrs	r4, BASEPRI
   1ca92:	f382 8811 	msr	BASEPRI, r2
   1ca96:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1ca9a:	6803      	ldr	r3, [r0, #0]
   1ca9c:	b13b      	cbz	r3, 1caae <z_abort_timeout+0x26>
			remove_timeout(to);
   1ca9e:	f7fc fbe3 	bl	19268 <remove_timeout>
			ret = 0;
   1caa2:	2000      	movs	r0, #0
	__asm__ volatile(
   1caa4:	f384 8811 	msr	BASEPRI, r4
   1caa8:	f3bf 8f6f 	isb	sy
}
   1caac:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1caae:	f06f 0015 	mvn.w	r0, #21
   1cab2:	e7f7      	b.n	1caa4 <z_abort_timeout+0x1c>

0001cab4 <z_get_next_timeout_expiry>:
{
   1cab4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cab6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1caba:	f3ef 8411 	mrs	r4, BASEPRI
   1cabe:	f383 8811 	msr	BASEPRI, r3
   1cac2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1cac6:	f7fc fbe9 	bl	1929c <next_timeout>
	__asm__ volatile(
   1caca:	f384 8811 	msr	BASEPRI, r4
   1cace:	f3bf 8f6f 	isb	sy
}
   1cad2:	bd10      	pop	{r4, pc}

0001cad4 <z_set_timeout_expiry>:
{
   1cad4:	b570      	push	{r4, r5, r6, lr}
   1cad6:	4604      	mov	r4, r0
   1cad8:	460d      	mov	r5, r1
	__asm__ volatile(
   1cada:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cade:	f3ef 8611 	mrs	r6, BASEPRI
   1cae2:	f383 8811 	msr	BASEPRI, r3
   1cae6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1caea:	f7fc fbd7 	bl	1929c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1caee:	2801      	cmp	r0, #1
   1caf0:	dd05      	ble.n	1cafe <z_set_timeout_expiry+0x2a>
   1caf2:	42a0      	cmp	r0, r4
   1caf4:	dd03      	ble.n	1cafe <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   1caf6:	4629      	mov	r1, r5
   1caf8:	4620      	mov	r0, r4
   1cafa:	f7f6 f987 	bl	12e0c <z_clock_set_timeout>
	__asm__ volatile(
   1cafe:	f386 8811 	msr	BASEPRI, r6
   1cb02:	f3bf 8f6f 	isb	sy
}
   1cb06:	bd70      	pop	{r4, r5, r6, pc}

0001cb08 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1cb08:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1cb0a:	f7fc fce7 	bl	194dc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1cb0e:	bd08      	pop	{r3, pc}

0001cb10 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   1cb10:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cb12:	1c4b      	adds	r3, r1, #1
   1cb14:	bf08      	it	eq
   1cb16:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1cb1a:	4604      	mov	r4, r0
   1cb1c:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cb1e:	d013      	beq.n	1cb48 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cb20:	ea54 0105 	orrs.w	r1, r4, r5
   1cb24:	d103      	bne.n	1cb2e <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   1cb26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1cb2a:	f7fc bcd7 	b.w	194dc <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1cb2e:	f06f 0101 	mvn.w	r1, #1
   1cb32:	1a0a      	subs	r2, r1, r0
   1cb34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cb38:	eb61 0305 	sbc.w	r3, r1, r5
   1cb3c:	2a00      	cmp	r2, #0
   1cb3e:	f173 0100 	sbcs.w	r1, r3, #0
   1cb42:	db02      	blt.n	1cb4a <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   1cb44:	4610      	mov	r0, r2
   1cb46:	4619      	mov	r1, r3
}
   1cb48:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   1cb4a:	f7fc fcc7 	bl	194dc <z_tick_get>
   1cb4e:	2c01      	cmp	r4, #1
   1cb50:	f175 0300 	sbcs.w	r3, r5, #0
   1cb54:	bfbc      	itt	lt
   1cb56:	2401      	movlt	r4, #1
   1cb58:	2500      	movlt	r5, #0
   1cb5a:	1820      	adds	r0, r4, r0
   1cb5c:	eb45 0101 	adc.w	r1, r5, r1
   1cb60:	e7f2      	b.n	1cb48 <z_timeout_end_calc+0x38>

0001cb62 <clear_event_registrations>:
	while (num_events--) {
   1cb62:	2314      	movs	r3, #20
{
   1cb64:	b530      	push	{r4, r5, lr}
   1cb66:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   1cb6a:	2400      	movs	r4, #0
	while (num_events--) {
   1cb6c:	4281      	cmp	r1, r0
   1cb6e:	d100      	bne.n	1cb72 <clear_event_registrations+0x10>
}
   1cb70:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   1cb72:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1cb76:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1cb7a:	f003 030f 	and.w	r3, r3, #15
   1cb7e:	2b02      	cmp	r3, #2
   1cb80:	d80a      	bhi.n	1cb98 <clear_event_registrations+0x36>
   1cb82:	b15b      	cbz	r3, 1cb9c <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1cb84:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1cb88:	b143      	cbz	r3, 1cb9c <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   1cb8a:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1cb8e:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1cb90:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1cb92:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   1cb96:	e001      	b.n	1cb9c <clear_event_registrations+0x3a>
	switch (event->type) {
   1cb98:	2b04      	cmp	r3, #4
   1cb9a:	d0f3      	beq.n	1cb84 <clear_event_registrations+0x22>
   1cb9c:	f382 8811 	msr	BASEPRI, r2
   1cba0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1cba4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cba8:	f3ef 8211 	mrs	r2, BASEPRI
   1cbac:	f383 8811 	msr	BASEPRI, r3
   1cbb0:	f3bf 8f6f 	isb	sy
   1cbb4:	3914      	subs	r1, #20
   1cbb6:	e7d9      	b.n	1cb6c <clear_event_registrations+0xa>

0001cbb8 <k_work_submit_to_queue>:
{
   1cbb8:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cbba:	f101 0308 	add.w	r3, r1, #8
   1cbbe:	f3bf 8f5b 	dmb	ish
   1cbc2:	e853 2f00 	ldrex	r2, [r3]
   1cbc6:	f042 0c01 	orr.w	ip, r2, #1
   1cbca:	e843 ce00 	strex	lr, ip, [r3]
   1cbce:	f1be 0f00 	cmp.w	lr, #0
   1cbd2:	d1f6      	bne.n	1cbc2 <k_work_submit_to_queue+0xa>
   1cbd4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1cbd8:	07d3      	lsls	r3, r2, #31
   1cbda:	d403      	bmi.n	1cbe4 <k_work_submit_to_queue+0x2c>
}
   1cbdc:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1cbe0:	f7ff bd89 	b.w	1c6f6 <k_queue_append>
}
   1cbe4:	f85d fb04 	ldr.w	pc, [sp], #4

0001cbe8 <signal_poll_event>:
{
   1cbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1cbec:	6884      	ldr	r4, [r0, #8]
{
   1cbee:	4605      	mov	r5, r0
   1cbf0:	460e      	mov	r6, r1
	if (poller) {
   1cbf2:	b144      	cbz	r4, 1cc06 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1cbf4:	7863      	ldrb	r3, [r4, #1]
   1cbf6:	2b01      	cmp	r3, #1
   1cbf8:	d138      	bne.n	1cc6c <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   1cbfa:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   1cbfe:	f013 0302 	ands.w	r3, r3, #2
   1cc02:	d10a      	bne.n	1cc1a <signal_poll_event+0x32>
		poller->is_polling = false;
   1cc04:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1cc06:	68eb      	ldr	r3, [r5, #12]
   1cc08:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1cc0c:	430e      	orrs	r6, r1
	event->poller = NULL;
   1cc0e:	2000      	movs	r0, #0
	event->state |= state;
   1cc10:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   1cc14:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1cc16:	60eb      	str	r3, [r5, #12]
	return retcode;
   1cc18:	e00d      	b.n	1cc36 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   1cc1a:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   1cc1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cc22:	f06f 0001 	mvn.w	r0, #1
   1cc26:	428b      	cmp	r3, r1
   1cc28:	bf08      	it	eq
   1cc2a:	4282      	cmpeq	r2, r0
   1cc2c:	d105      	bne.n	1cc3a <signal_poll_event+0x52>
		poller->is_polling = false;
   1cc2e:	2300      	movs	r3, #0
   1cc30:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1cc32:	f06f 000a 	mvn.w	r0, #10
}
   1cc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1cc3a:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   1cc3e:	4640      	mov	r0, r8
   1cc40:	f7ff fdd5 	bl	1c7ee <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1cc44:	2e08      	cmp	r6, #8
   1cc46:	bf0c      	ite	eq
   1cc48:	f06f 0303 	mvneq.w	r3, #3
   1cc4c:	2300      	movne	r3, #0
   1cc4e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1cc50:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   1cc54:	06db      	lsls	r3, r3, #27
   1cc56:	d102      	bne.n	1cc5e <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   1cc58:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   1cc5c:	b10f      	cbz	r7, 1cc62 <signal_poll_event+0x7a>
		poller->is_polling = false;
   1cc5e:	2300      	movs	r3, #0
   1cc60:	e7d0      	b.n	1cc04 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1cc62:	4640      	mov	r0, r8
   1cc64:	f7ff fde3 	bl	1c82e <z_ready_thread>
		poller->is_polling = false;
   1cc68:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1cc6a:	e7cc      	b.n	1cc06 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1cc6c:	2b02      	cmp	r3, #2
   1cc6e:	d1f6      	bne.n	1cc5e <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1cc70:	7823      	ldrb	r3, [r4, #0]
   1cc72:	2b00      	cmp	r3, #0
   1cc74:	d0c7      	beq.n	1cc06 <signal_poll_event+0x1e>
   1cc76:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1cc7a:	2f00      	cmp	r7, #0
   1cc7c:	d0f4      	beq.n	1cc68 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1cc7e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1cc82:	f1a4 0910 	sub.w	r9, r4, #16
   1cc86:	f104 0010 	add.w	r0, r4, #16
   1cc8a:	f7ff fefd 	bl	1ca88 <z_abort_timeout>
		twork->poll_result = 0;
   1cc8e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1cc92:	4649      	mov	r1, r9
   1cc94:	4638      	mov	r0, r7
   1cc96:	f7ff ff8f 	bl	1cbb8 <k_work_submit_to_queue>
		poller->is_polling = false;
   1cc9a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1cc9e:	e7b2      	b.n	1cc06 <signal_poll_event+0x1e>

0001cca0 <add_event>:
{
   1cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cca2:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1cca4:	e9d0 2300 	ldrd	r2, r3, [r0]
   1cca8:	4290      	cmp	r0, r2
   1ccaa:	4604      	mov	r4, r0
   1ccac:	460d      	mov	r5, r1
   1ccae:	d106      	bne.n	1ccbe <add_event+0x1e>
	node->prev = list->tail;
   1ccb0:	6863      	ldr	r3, [r4, #4]
   1ccb2:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1ccb4:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1ccb6:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   1ccb8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ccba:	6065      	str	r5, [r4, #4]
}
   1ccbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1ccbe:	2b00      	cmp	r3, #0
   1ccc0:	d0f6      	beq.n	1ccb0 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1ccc2:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ccc4:	b100      	cbz	r0, 1ccc8 <add_event+0x28>
   1ccc6:	3864      	subs	r0, #100	; 0x64
   1ccc8:	b107      	cbz	r7, 1cccc <add_event+0x2c>
   1ccca:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1cccc:	4639      	mov	r1, r7
   1ccce:	f7ff fd63 	bl	1c798 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1ccd2:	2800      	cmp	r0, #0
   1ccd4:	d1ec      	bne.n	1ccb0 <add_event+0x10>
	return list->head == list;
   1ccd6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ccd8:	42b4      	cmp	r4, r6
   1ccda:	d0e9      	beq.n	1ccb0 <add_event+0x10>
   1ccdc:	2e00      	cmp	r6, #0
   1ccde:	bf38      	it	cc
   1cce0:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cce2:	2e00      	cmp	r6, #0
   1cce4:	d0e4      	beq.n	1ccb0 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1cce6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1cce8:	b101      	cbz	r1, 1ccec <add_event+0x4c>
   1ccea:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1ccec:	4638      	mov	r0, r7
   1ccee:	f7ff fd53 	bl	1c798 <z_is_t1_higher_prio_than_t2>
   1ccf2:	b128      	cbz	r0, 1cd00 <add_event+0x60>
	node->prev = successor->prev;
   1ccf4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ccf6:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1ccfa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ccfc:	6075      	str	r5, [r6, #4]
			return;
   1ccfe:	e7dd      	b.n	1ccbc <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1cd00:	6863      	ldr	r3, [r4, #4]
   1cd02:	42b3      	cmp	r3, r6
   1cd04:	d0d4      	beq.n	1ccb0 <add_event+0x10>
   1cd06:	6836      	ldr	r6, [r6, #0]
   1cd08:	e7eb      	b.n	1cce2 <add_event+0x42>

0001cd0a <register_events>:
{
   1cd0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1cd0e:	f04f 0a00 	mov.w	sl, #0
{
   1cd12:	460e      	mov	r6, r1
   1cd14:	4614      	mov	r4, r2
   1cd16:	461f      	mov	r7, r3
   1cd18:	4683      	mov	fp, r0
	int events_registered = 0;
   1cd1a:	4655      	mov	r5, sl
	event->poller = NULL;
   1cd1c:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   1cd1e:	45b2      	cmp	sl, r6
   1cd20:	db02      	blt.n	1cd28 <register_events+0x1e>
}
   1cd22:	4628      	mov	r0, r5
   1cd24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd28:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd2c:	f3ef 8911 	mrs	r9, BASEPRI
   1cd30:	f383 8811 	msr	BASEPRI, r3
   1cd34:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1cd38:	f89b 200d 	ldrb.w	r2, [fp, #13]
   1cd3c:	f002 020f 	and.w	r2, r2, #15
   1cd40:	2a02      	cmp	r2, #2
   1cd42:	d006      	beq.n	1cd52 <register_events+0x48>
   1cd44:	2a04      	cmp	r2, #4
   1cd46:	d008      	beq.n	1cd5a <register_events+0x50>
   1cd48:	2a01      	cmp	r2, #1
   1cd4a:	d120      	bne.n	1cd8e <register_events+0x84>
		if (event->signal->signaled != 0U) {
   1cd4c:	f8db 3010 	ldr.w	r3, [fp, #16]
   1cd50:	e001      	b.n	1cd56 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   1cd52:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   1cd56:	689b      	ldr	r3, [r3, #8]
   1cd58:	e002      	b.n	1cd60 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   1cd5a:	f8db 3010 	ldr.w	r3, [fp, #16]
   1cd5e:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   1cd60:	b1ab      	cbz	r3, 1cd8e <register_events+0x84>
	event->state |= state;
   1cd62:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   1cd66:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   1cd6a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1cd6e:	430a      	orrs	r2, r1
   1cd70:	f362 3310 	bfi	r3, r2, #12, #5
   1cd74:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   1cd78:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1cd7c:	f389 8811 	msr	BASEPRI, r9
   1cd80:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1cd84:	f10a 0a01 	add.w	sl, sl, #1
   1cd88:	f10b 0b14 	add.w	fp, fp, #20
   1cd8c:	e7c7      	b.n	1cd1e <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1cd8e:	2f00      	cmp	r7, #0
   1cd90:	d1f4      	bne.n	1cd7c <register_events+0x72>
   1cd92:	7823      	ldrb	r3, [r4, #0]
   1cd94:	2b00      	cmp	r3, #0
   1cd96:	d0f1      	beq.n	1cd7c <register_events+0x72>
	switch (event->type) {
   1cd98:	f89b 300d 	ldrb.w	r3, [fp, #13]
   1cd9c:	f003 030f 	and.w	r3, r3, #15
   1cda0:	2b02      	cmp	r3, #2
   1cda2:	d008      	beq.n	1cdb6 <register_events+0xac>
   1cda4:	2b04      	cmp	r3, #4
   1cda6:	d006      	beq.n	1cdb6 <register_events+0xac>
   1cda8:	2b01      	cmp	r3, #1
   1cdaa:	d10b      	bne.n	1cdc4 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   1cdac:	f8db 0010 	ldr.w	r0, [fp, #16]
   1cdb0:	4622      	mov	r2, r4
   1cdb2:	4659      	mov	r1, fp
   1cdb4:	e004      	b.n	1cdc0 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   1cdb6:	f8db 0010 	ldr.w	r0, [fp, #16]
   1cdba:	4622      	mov	r2, r4
   1cdbc:	4659      	mov	r1, fp
   1cdbe:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1cdc0:	f7ff ff6e 	bl	1cca0 <add_event>
	event->poller = poller;
   1cdc4:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   1cdc8:	3501      	adds	r5, #1
   1cdca:	e7d7      	b.n	1cd7c <register_events+0x72>

0001cdcc <k_poll_event_init>:
{
   1cdcc:	b510      	push	{r4, lr}
	event->type = type;
   1cdce:	0452      	lsls	r2, r2, #17
   1cdd0:	0209      	lsls	r1, r1, #8
   1cdd2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   1cdd6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   1cdda:	430a      	orrs	r2, r1
   1cddc:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1cdde:	2400      	movs	r4, #0
	event->type = type;
   1cde0:	430a      	orrs	r2, r1
	event->obj = obj;
   1cde2:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1cde6:	6084      	str	r4, [r0, #8]
}
   1cde8:	bd10      	pop	{r4, pc}

0001cdea <z_handle_obj_poll_events>:
{
   1cdea:	4603      	mov	r3, r0
	return list->head == list;
   1cdec:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1cdee:	4283      	cmp	r3, r0
   1cdf0:	d008      	beq.n	1ce04 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1cdf2:	e9d0 3200 	ldrd	r3, r2, [r0]
   1cdf6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1cdf8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1cdfa:	2300      	movs	r3, #0
	node->prev = NULL;
   1cdfc:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1ce00:	f7ff bef2 	b.w	1cbe8 <signal_poll_event>
}
   1ce04:	4770      	bx	lr

0001ce06 <k_mem_pool_malloc>:
{
   1ce06:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1ce08:	2408      	movs	r4, #8
   1ce0a:	190a      	adds	r2, r1, r4
   1ce0c:	d208      	bcs.n	1ce20 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1ce0e:	2600      	movs	r6, #0
   1ce10:	2700      	movs	r7, #0
   1ce12:	e9cd 6700 	strd	r6, r7, [sp]
   1ce16:	eb0d 0104 	add.w	r1, sp, r4
   1ce1a:	f7ff fbd2 	bl	1c5c2 <k_mem_pool_alloc>
   1ce1e:	b110      	cbz	r0, 1ce26 <k_mem_pool_malloc+0x20>
		return NULL;
   1ce20:	2000      	movs	r0, #0
}
   1ce22:	b004      	add	sp, #16
   1ce24:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1ce26:	9802      	ldr	r0, [sp, #8]
   1ce28:	4622      	mov	r2, r4
   1ce2a:	a902      	add	r1, sp, #8
   1ce2c:	f7fd fa58 	bl	1a2e0 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1ce30:	9802      	ldr	r0, [sp, #8]
   1ce32:	3008      	adds	r0, #8
   1ce34:	e7f5      	b.n	1ce22 <k_mem_pool_malloc+0x1c>

0001ce36 <k_free>:
	if (ptr != NULL) {
   1ce36:	b110      	cbz	r0, 1ce3e <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1ce38:	3808      	subs	r0, #8
   1ce3a:	f7ff bbdb 	b.w	1c5f4 <k_mem_pool_free_id>
}
   1ce3e:	4770      	bx	lr

0001ce40 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1ce40:	4770      	bx	lr
